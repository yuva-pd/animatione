var __BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),__DEV__=false,process=this.process||{},__METRO_GLOBAL_PREFIX__='';process.env=process.env||{};process.env.NODE_ENV=process.env.NODE_ENV||"production";
(function (global) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *
   * @format
   * @oncall react_native
   * @polyfill
   */

  "use strict";

  /* eslint-disable no-bitwise */
  // A simpler $ArrayLike<T>. Not iterable and doesn't have a `length`.
  // This is compatible with actual arrays as well as with objects that look like
  // {0: 'value', 1: '...'}
  global.__r = metroRequire;
  global[`${__METRO_GLOBAL_PREFIX__}__d`] = define;
  global.__c = clear;
  global.__registerSegment = registerSegment;
  var modules = clear();

  // Don't use a Symbol here, it would pull in an extra polyfill with all sorts of
  // additional stuff (e.g. Array.from).
  var EMPTY = {};
  var CYCLE_DETECTED = {};
  var _ref = {},
    hasOwnProperty = _ref.hasOwnProperty;
  function clear() {
    modules = Object.create(null);

    // We return modules here so that we can assign an initial value to modules
    // when defining it. Otherwise, we would have to do "let modules = null",
    // which will force us to add "nullthrows" everywhere.
    return modules;
  }
  function define(factory, moduleId, dependencyMap) {
    if (modules[moduleId] != null) {
      // prevent repeated calls to `global.nativeRequire` to overwrite modules
      // that are already loaded
      return;
    }
    var mod = {
      dependencyMap: dependencyMap,
      factory: factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {}
      }
    };
    modules[moduleId] = mod;
  }
  function metroRequire(moduleId) {
    //$FlowFixMe: at this point we know that moduleId is a number
    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  // We print require cycles unless they match a pattern in the
  // `requireCycleIgnorePatterns` configuration.

  function metroImportDefault(moduleId) {
    //$FlowFixMe: at this point we know that moduleId is a number
    var moduleIdReallyIsNumber = moduleId;
    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedDefault !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedDefault;
    }
    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault = exports && exports.__esModule ? exports.default : exports;

    // $FlowFixMe The metroRequire call above will throw if modules[id] is null
    return modules[moduleIdReallyIsNumber].importedDefault = importedDefault;
  }
  metroRequire.importDefault = metroImportDefault;
  function metroImportAll(moduleId) {
    //$FlowFixMe: at this point we know that moduleId is a number
    var moduleIdReallyIsNumber = moduleId;
    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedAll !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedAll;
    }
    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll;
    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};

      // Refrain from using Object.assign, it has to work in ES3 environments.
      if (exports) {
        for (var key in exports) {
          if (hasOwnProperty.call(exports, key)) {
            importedAll[key] = exports[key];
          }
        }
      }
      importedAll.default = exports;
    }

    // $FlowFixMe The metroRequire call above will throw if modules[id] is null
    return modules[moduleIdReallyIsNumber].importedAll = importedAll;
  }
  metroRequire.importAll = metroImportAll;

  // The `require.context()` syntax is never executed in the runtime because it is converted
  // to `require()` in `metro/src/ModuleGraph/worker/collectDependencies.js` after collecting
  // dependencies. If the feature flag is not enabled then the conversion never takes place and this error is thrown (development only).
  metroRequire.context = function fallbackRequireContext() {
    throw new Error("The experimental Metro feature `require.context` is not enabled in your project.");
  };

  // `require.resolveWeak()` is a compile-time primitive (see collectDependencies.js)
  metroRequire.resolveWeak = function fallbackRequireResolveWeak() {
    throw new Error("require.resolveWeak cannot be called dynamically.");
  };
  var inGuard = false;
  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue;
      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        // TODO: (moti) T48204692 Type this use of ErrorUtils.
        global.ErrorUtils.reportFatalError(e);
      }
      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }
  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = 65535;
  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }
  metroRequire.unpackModuleId = unpackModuleId;
  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }
  metroRequire.packModuleId = packModuleId;
  var moduleDefinersBySegmentID = [];
  var definingSegmentByModuleID = new Map();
  function registerSegment(segmentId, moduleDefiner, moduleIds) {
    moduleDefinersBySegmentID[segmentId] = moduleDefiner;
    if (moduleIds) {
      moduleIds.forEach(function (moduleId) {
        if (!modules[moduleId] && !definingSegmentByModuleID.has(moduleId)) {
          definingSegmentByModuleID.set(moduleId, segmentId);
        }
      });
    }
  }
  function loadModuleImplementation(moduleId, module) {
    if (!module && moduleDefinersBySegmentID.length > 0) {
      var _definingSegmentByMod;
      var segmentId = (_definingSegmentByMod = definingSegmentByModuleID.get(moduleId)) != null ? _definingSegmentByMod : 0;
      var definer = moduleDefinersBySegmentID[segmentId];
      if (definer != null) {
        definer(moduleId);
        module = modules[moduleId];
        definingSegmentByModuleID.delete(moduleId);
      }
    }
    var nativeRequire = global.nativeRequire;
    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId),
        _segmentId = _unpackModuleId.segmentId,
        localId = _unpackModuleId.localId;
      nativeRequire(localId, _segmentId);
      module = modules[moduleId];
    }
    if (!module) {
      throw unknownModuleError(moduleId);
    }
    if (module.hasError) {
      throw module.error;
    }
    // We must optimistically mark module as initialized before running the
    // factory to keep any require cycles inside the factory from causing an
    // infinite require loop.
    module.isInitialized = true;
    var _module = module,
      factory = _module.factory,
      dependencyMap = _module.dependencyMap;
    try {
      var moduleObject = module.publicModule;
      moduleObject.id = moduleId;

      // keep args in sync with with defineModuleCode in
      // metro/src/Resolver/index.js
      // and metro/src/ModuleGraph/worker.js
      factory(global, metroRequire, metroImportDefault, metroImportAll, moduleObject, moduleObject.exports, dependencyMap);

      // avoid removing factory in DEV mode as it breaks HMR
      {
        // $FlowFixMe: This is only sound because we never access `factory` again
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      return moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {}
  }
  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @polyfill
   * @nolint
   * @format
   */

  /* eslint-disable no-shadow, eqeqeq, curly, no-unused-vars, no-void, no-control-regex  */

  /**
   * This pipes all of our console logging functions to native logging so that
   * JavaScript errors in required modules show up in Xcode via NSLog.
   */
  var inspect = function () {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    // https://github.com/joyent/node/blob/master/lib/util.js

    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        formatValueCalls: 0,
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      ctx.formatValueCalls++;
      if (ctx.formatValueCalls > 200) {
        return `[TOO BIG formatValueCalls ${ctx.formatValueCalls} exceeded limit of 200]`;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = '',
        array = false,
        braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value)) return ctx.stylize('null', 'null');
    }
    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').slice(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.slice(1, name.length - 1);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }
      return name + ': ' + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }
      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
      return Array.isArray(ar);
    }
    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    function isNull(arg) {
      return arg === null;
    }
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    function isString(arg) {
      return typeof arg === 'string';
    }
    function isUndefined(arg) {
      return arg === undefined;
    }
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    return inspect;
  }();
  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';

  // Strip the inner function in getNativeLogFunction(), if in dev also
  // strip method printing to originalConsole.
  var INSPECTOR_FRAMES_TO_SKIP = 1;
  function getNativeLogFunction(level) {
    return function () {
      var str;
      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, {
            depth: 10
          });
        }).join(', ');
      }

      // TRICKY
      // If more than one argument is provided, the code above collapses them all
      // into a single formatted string. This transform wraps string arguments in
      // single quotes (e.g. "foo" -> "'foo'") which then breaks the "Warning:"
      // check below. So it's important that we look at the first argument, rather
      // than the formatted argument string.
      var firstArg = arguments[0];
      var logLevel = level;
      if (typeof firstArg === 'string' && firstArg.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        // React warnings use console.error so that a stack trace is shown,
        // but we don't (currently) want these to show a redbox
        // (Note: Logic duplicated in ExceptionsManager.js.)
        logLevel = LOG_LEVELS.warn;
      }
      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }
      if (groupStack.length) {
        str = groupFormat('', str);
      }
      global.nativeLoggingHook(str, logLevel);
    };
  }
  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  }
  function consoleTablePolyfill(rows) {
    // convert object -> array
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }
    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }
    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];

    // Convert each cell to a string. Also
    // figure out max cell width for each column
    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;
      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    // Join all elements in the row into a single string with | separators
    // (appends extra spaces to each cell to make separators  | aligned)
    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    }
    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];
    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    // Notice extra empty line at the beginning.
    // Native logging hook adds "RCTLog >" at the front of every
    // logged string, which would shift the header and screw up
    // the table
    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }
  var GROUP_PAD = "\u2502"; // Box light vertical
  var GROUP_OPEN = "\u2510"; // Box light down+left
  var GROUP_CLOSE = "\u2518"; // Box light up+left

  var groupStack = [];
  function groupFormat(prefix, msg) {
    // Insert group formatting before the console message
    return groupStack.join('') + prefix + ' ' + (msg || '');
  }
  function consoleGroupPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }
  function consoleGroupCollapsedPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }
  function consoleGroupEndPolyfill() {
    groupStack.pop();
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
  }
  function consoleAssertPolyfill(expression, label) {
    if (!expression) {
      global.nativeLoggingHook('Assertion failed: ' + label, LOG_LEVELS.error);
    }
  }
  if (global.nativeLoggingHook) {
    var originalConsole = global.console;
    // Preserve the original `console` as `originalConsole`

    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill,
      group: consoleGroupPolyfill,
      groupEnd: consoleGroupEndPolyfill,
      groupCollapsed: consoleGroupCollapsedPolyfill,
      assert: consoleAssertPolyfill
    };
    Object.defineProperty(console, '_isPolyfilled', {
      value: true,
      enumerable: false
    });

    // If available, also call the original `console` method since that is
    // sometimes useful. Ex: on OS X, this will let you see rich output in
    // the Safari Web Inspector console.
  } else if (!global.console) {
    var stub = function stub() {};
    var log = global.print || stub;
    global.console = {
      debug: log,
      error: log,
      info: log,
      log: log,
      trace: log,
      warn: log,
      assert: function assert(expression, label) {
        if (!expression) {
          log('Assertion failed: ' + label);
        }
      },
      clear: stub,
      dir: stub,
      dirxml: stub,
      group: stub,
      groupCollapsed: stub,
      groupEnd: stub,
      profile: stub,
      profileEnd: stub,
      table: stub
    };
    Object.defineProperty(console, '_isPolyfilled', {
      value: true,
      enumerable: false
    });
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   * @polyfill
   */

  var _inGuard = 0;
  /**
   * This is the error handler that is called when we encounter an exception
   * when loading a module. This will report any errors encountered before
   * ExceptionsManager is configured.
   */
  var _globalHandler = function onError(e, isFatal) {
    throw e;
  };

  /**
   * The particular require runtime that we are using looks for a global
   * `ErrorUtils` object and if it exists, then it requires modules with the
   * error handler specified via ErrorUtils.setGlobalHandler by calling the
   * require function with applyWithGuard. Since the require module is loaded
   * before any of the modules, this ErrorUtils must be defined (and the handler
   * set) globally before requiring anything.
   */
  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error, false);
    },
    reportFatalError: function reportFatalError(error) {
      // NOTE: This has an untyped call site in Metro.
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args,
    // Unused, but some code synced from www sets it to null.
    unused_onError,
    // Some callers pass a name here, which we ignore.
    unused_name) {
      try {
        _inGuard++;
        /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,
         * null) is fine. (2) array -> rest array should work */
        /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,
         * null) is fine. (2) array -> rest array should work */
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }
      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,
         * null) is fine. (2) array -> rest array should work */
        /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,
         * null) is fine. (2) array -> rest array should work */
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }
      return null;
    },
    inGuard: function inGuard() {
      return !!_inGuard;
    },
    guard: function guard(fun, name, context) {
      var _ref;
      // TODO: (moti) T48204753 Make sure this warning is never hit and remove it - types
      // should be sufficient.
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }
      var guardName = (_ref = name != null ? name : fun.name) != null ? _ref : '<generated guard>';
      /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
       * Flow's LTI update could not be added via codemod */
      function guarded() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return ErrorUtils.applyWithGuard(fun, context != null ? context : this, args, null, guardName);
      }
      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * @polyfill
   * @nolint
   */

  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    /**
     * Returns an array of the given object's own enumerable entries.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
     */
    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        // `null` and `undefined` values are not allowed.
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }
        var entries = [];
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }
        return entries;
      };
    }

    /**
     * Returns an array of the given object's own enumerable entries.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
     */
    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        // `null` and `undefined` values are not allowed.
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }
        var values = [];
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }
        return values;
      };
    }
  })();
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);
  var _App = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * @format
   */

  _reactNative.AppRegistry.registerComponent(_$$_REQUIRE(_dependencyMap[3]).name, function () {
    return _App.default;
  });
},0,[1,2,438,489]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
},1,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  // Components
  // APIs
  // Plugins
  module.exports = {
    // Components
    get AccessibilityInfo() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    },
    get ActivityIndicator() {
      return _$$_REQUIRE(_dependencyMap[1]).default;
    },
    get Button() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },
    // $FlowFixMe[value-as-type]
    get DrawerLayoutAndroid() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },
    get FlatList() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },
    get Image() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },
    get ImageBackground() {
      return _$$_REQUIRE(_dependencyMap[6]);
    },
    get InputAccessoryView() {
      return _$$_REQUIRE(_dependencyMap[7]);
    },
    get KeyboardAvoidingView() {
      return _$$_REQUIRE(_dependencyMap[8]).default;
    },
    get Modal() {
      return _$$_REQUIRE(_dependencyMap[9]);
    },
    get Pressable() {
      return _$$_REQUIRE(_dependencyMap[10]).default;
    },
    // $FlowFixMe[value-as-type]
    get ProgressBarAndroid() {
      _$$_REQUIRE(_dependencyMap[11])('progress-bar-android-moved', "ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. See https://github.com/react-native-progress-view/progress-bar-android");
      return _$$_REQUIRE(_dependencyMap[12]);
    },
    get RefreshControl() {
      return _$$_REQUIRE(_dependencyMap[13]);
    },
    get SafeAreaView() {
      return _$$_REQUIRE(_dependencyMap[14]).default;
    },
    get ScrollView() {
      return _$$_REQUIRE(_dependencyMap[15]);
    },
    get SectionList() {
      return _$$_REQUIRE(_dependencyMap[16]).default;
    },
    get StatusBar() {
      return _$$_REQUIRE(_dependencyMap[17]);
    },
    get Switch() {
      return _$$_REQUIRE(_dependencyMap[18]).default;
    },
    get Text() {
      return _$$_REQUIRE(_dependencyMap[19]);
    },
    get TextInput() {
      return _$$_REQUIRE(_dependencyMap[20]);
    },
    get Touchable() {
      return _$$_REQUIRE(_dependencyMap[21]);
    },
    get TouchableHighlight() {
      return _$$_REQUIRE(_dependencyMap[22]);
    },
    get TouchableNativeFeedback() {
      return _$$_REQUIRE(_dependencyMap[23]);
    },
    get TouchableOpacity() {
      return _$$_REQUIRE(_dependencyMap[24]);
    },
    get TouchableWithoutFeedback() {
      return _$$_REQUIRE(_dependencyMap[25]);
    },
    get View() {
      return _$$_REQUIRE(_dependencyMap[26]);
    },
    get VirtualizedList() {
      return _$$_REQUIRE(_dependencyMap[27]);
    },
    get VirtualizedSectionList() {
      return _$$_REQUIRE(_dependencyMap[28]);
    },
    // APIs
    get ActionSheetIOS() {
      return _$$_REQUIRE(_dependencyMap[29]);
    },
    get Alert() {
      return _$$_REQUIRE(_dependencyMap[30]);
    },
    // Include any types exported in the Animated module together with its default export, so
    // you can references types such as Animated.Numeric
    get Animated() {
      // $FlowExpectedError[prop-missing]: we only return the default export, all other exports are types
      return _$$_REQUIRE(_dependencyMap[31]).default;
    },
    get Appearance() {
      return _$$_REQUIRE(_dependencyMap[32]);
    },
    get AppRegistry() {
      return _$$_REQUIRE(_dependencyMap[33]);
    },
    get AppState() {
      return _$$_REQUIRE(_dependencyMap[34]);
    },
    get BackHandler() {
      return _$$_REQUIRE(_dependencyMap[35]);
    },
    get Clipboard() {
      _$$_REQUIRE(_dependencyMap[11])('clipboard-moved', "Clipboard has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. See https://github.com/react-native-clipboard/clipboard");
      return _$$_REQUIRE(_dependencyMap[36]);
    },
    get DeviceInfo() {
      return _$$_REQUIRE(_dependencyMap[37]);
    },
    get DevSettings() {
      return _$$_REQUIRE(_dependencyMap[38]);
    },
    get Dimensions() {
      return _$$_REQUIRE(_dependencyMap[39]).default;
    },
    get Easing() {
      return _$$_REQUIRE(_dependencyMap[40]).default;
    },
    get findNodeHandle() {
      return _$$_REQUIRE(_dependencyMap[41]).findNodeHandle;
    },
    get I18nManager() {
      return _$$_REQUIRE(_dependencyMap[42]);
    },
    get InteractionManager() {
      return _$$_REQUIRE(_dependencyMap[43]);
    },
    get Keyboard() {
      return _$$_REQUIRE(_dependencyMap[44]);
    },
    get LayoutAnimation() {
      return _$$_REQUIRE(_dependencyMap[45]);
    },
    get Linking() {
      return _$$_REQUIRE(_dependencyMap[46]);
    },
    get LogBox() {
      return _$$_REQUIRE(_dependencyMap[47]).default;
    },
    get NativeDialogManagerAndroid() {
      return _$$_REQUIRE(_dependencyMap[48]).default;
    },
    get NativeEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[49]).default;
    },
    get Networking() {
      return _$$_REQUIRE(_dependencyMap[50]).default;
    },
    get PanResponder() {
      return _$$_REQUIRE(_dependencyMap[51]).default;
    },
    get PermissionsAndroid() {
      return _$$_REQUIRE(_dependencyMap[52]);
    },
    get PixelRatio() {
      return _$$_REQUIRE(_dependencyMap[53]).default;
    },
    get PushNotificationIOS() {
      _$$_REQUIRE(_dependencyMap[11])('pushNotificationIOS-moved', "PushNotificationIOS has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. See https://github.com/react-native-push-notification-ios/push-notification-ios");
      return _$$_REQUIRE(_dependencyMap[54]);
    },
    get Settings() {
      return _$$_REQUIRE(_dependencyMap[55]);
    },
    get Share() {
      return _$$_REQUIRE(_dependencyMap[56]);
    },
    get StyleSheet() {
      return _$$_REQUIRE(_dependencyMap[57]);
    },
    get Systrace() {
      return _$$_REQUIRE(_dependencyMap[58]);
    },
    // $FlowFixMe[value-as-type]
    get ToastAndroid() {
      return _$$_REQUIRE(_dependencyMap[59]);
    },
    get TurboModuleRegistry() {
      return _$$_REQUIRE(_dependencyMap[60]);
    },
    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[61]);
    },
    get unstable_batchedUpdates() {
      return _$$_REQUIRE(_dependencyMap[41]).unstable_batchedUpdates;
    },
    get useAnimatedValue() {
      return _$$_REQUIRE(_dependencyMap[62]).default;
    },
    get useColorScheme() {
      return _$$_REQUIRE(_dependencyMap[63]).default;
    },
    get useWindowDimensions() {
      return _$$_REQUIRE(_dependencyMap[64]).default;
    },
    get UTFSequence() {
      return _$$_REQUIRE(_dependencyMap[65]).default;
    },
    get Vibration() {
      return _$$_REQUIRE(_dependencyMap[66]);
    },
    get YellowBox() {
      return _$$_REQUIRE(_dependencyMap[67]);
    },
    // Plugins
    get DeviceEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[68]).default;
    },
    get DynamicColorIOS() {
      return _$$_REQUIRE(_dependencyMap[69]).DynamicColorIOS;
    },
    get NativeAppEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[70]);
    },
    get NativeModules() {
      return _$$_REQUIRE(_dependencyMap[71]);
    },
    get Platform() {
      return _$$_REQUIRE(_dependencyMap[72]);
    },
    get PlatformColor() {
      return _$$_REQUIRE(_dependencyMap[73]).PlatformColor;
    },
    get processColor() {
      return _$$_REQUIRE(_dependencyMap[74]).default;
    },
    get requireNativeComponent() {
      return _$$_REQUIRE(_dependencyMap[75]).default;
    },
    get RootTagContext() {
      return _$$_REQUIRE(_dependencyMap[76]).RootTagContext;
    },
    get unstable_enableLogBox() {
      return function () {
        return console.warn('LogBox is enabled by default so there is no need to call unstable_enableLogBox() anymore. This is a no op and will be removed in the next version.');
      };
    },
    // Deprecated Prop Types
    get ColorPropType() {
      console.error("ColorPropType will be removed from React Native, along with all other PropTypes. We recommend that you migrate away from PropTypes and switch to a type system like TypeScript. If you need to continue using ColorPropType, migrate to the 'deprecated-react-native-prop-types' package.");
      return _$$_REQUIRE(_dependencyMap[77]).ColorPropType;
    },
    get EdgeInsetsPropType() {
      console.error("EdgeInsetsPropType will be removed from React Native, along with all other PropTypes. We recommend that you migrate away from PropTypes and switch to a type system like TypeScript. If you need to continue using EdgeInsetsPropType, migrate to the 'deprecated-react-native-prop-types' package.");
      return _$$_REQUIRE(_dependencyMap[77]).EdgeInsetsPropType;
    },
    get PointPropType() {
      console.error("PointPropType will be removed from React Native, along with all other PropTypes. We recommend that you migrate away from PropTypes and switch to a type system like TypeScript. If you need to continue using PointPropType, migrate to the 'deprecated-react-native-prop-types' package.");
      return _$$_REQUIRE(_dependencyMap[77]).PointPropType;
    },
    get ViewPropTypes() {
      console.error("ViewPropTypes will be removed from React Native, along with all other PropTypes. We recommend that you migrate away from PropTypes and switch to a type system like TypeScript. If you need to continue using ViewPropTypes, migrate to the 'deprecated-react-native-prop-types' package.");
      return _$$_REQUIRE(_dependencyMap[77]).ViewPropTypes;
    }
  };
},2,[3,241,245,371,319,338,376,377,379,380,384,65,242,348,386,351,368,372,388,246,391,395,399,277,278,400,156,401,402,403,129,279,405,143,407,235,410,412,413,183,292,52,200,289,356,357,415,418,131,111,110,419,421,182,423,425,426,196,20,428,23,42,430,431,432,433,434,436,4,437,139,25,21,167,164,207,232,256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _legacySendAccessibilityEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _NativeAccessibilityInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _NativeAccessibilityManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  // Events that are only supported on Android.

  // Events that are only supported on iOS.

  // Mapping of public event names to platform-specific event names.
  var EventNames = _Platform.default.OS === 'android' ? new Map([['change', 'touchExplorationDidChange'], ['reduceMotionChanged', 'reduceMotionDidChange'], ['screenReaderChanged', 'touchExplorationDidChange'], ['accessibilityServiceChanged', 'accessibilityServiceDidChange']]) : new Map([['announcementFinished', 'announcementFinished'], ['boldTextChanged', 'boldTextChanged'], ['change', 'screenReaderChanged'], ['grayscaleChanged', 'grayscaleChanged'], ['invertColorsChanged', 'invertColorsChanged'], ['reduceMotionChanged', 'reduceMotionChanged'], ['reduceTransparencyChanged', 'reduceTransparencyChanged'], ['screenReaderChanged', 'screenReaderChanged']]);

  /**
   * Sometimes it's useful to know whether or not the device has a screen reader
   * that is currently active. The `AccessibilityInfo` API is designed for this
   * purpose. You can use it to query the current state of the screen reader as
   * well as to register to be notified when the state of the screen reader
   * changes.
   *
   * See https://reactnative.dev/docs/accessibilityinfo
   */
  var AccessibilityInfo = {
    /**
     * Query whether bold text is currently enabled.
     *
     * Returns a promise which resolves to a boolean.
     * The result is `true` when bold text is enabled and `false` otherwise.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#isBoldTextEnabled
     */
    isBoldTextEnabled: function isBoldTextEnabled() {
      if (_Platform.default.OS === 'android') {
        return Promise.resolve(false);
      } else {
        return new Promise(function (resolve, reject) {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    /**
     * Query whether grayscale is currently enabled.
     *
     * Returns a promise which resolves to a boolean.
     * The result is `true` when grayscale is enabled and `false` otherwise.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#isGrayscaleEnabled
     */
    isGrayscaleEnabled: function isGrayscaleEnabled() {
      if (_Platform.default.OS === 'android') {
        return Promise.resolve(false);
      } else {
        return new Promise(function (resolve, reject) {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    /**
     * Query whether inverted colors are currently enabled.
     *
     * Returns a promise which resolves to a boolean.
     * The result is `true` when invert color is enabled and `false` otherwise.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#isInvertColorsEnabled
     */
    isInvertColorsEnabled: function isInvertColorsEnabled() {
      if (_Platform.default.OS === 'android') {
        return Promise.resolve(false);
      } else {
        return new Promise(function (resolve, reject) {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    /**
     * Query whether reduced motion is currently enabled.
     *
     * Returns a promise which resolves to a boolean.
     * The result is `true` when a reduce motion is enabled and `false` otherwise.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#isReduceMotionEnabled
     */
    isReduceMotionEnabled: function isReduceMotionEnabled() {
      return new Promise(function (resolve, reject) {
        if (_Platform.default.OS === 'android') {
          if (_NativeAccessibilityInfo.default != null) {
            _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);
          } else {
            reject(null);
          }
        } else {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    /**
     * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.
     *
     * Returns a promise which resolves to a boolean.
     * The result is `true` when  prefer cross-fade transitions is enabled and `false` otherwise.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#prefersCrossFadeTransitions
     */
    prefersCrossFadeTransitions: function prefersCrossFadeTransitions() {
      return new Promise(function (resolve, reject) {
        if (_Platform.default.OS === 'android') {
          return Promise.resolve(false);
        } else {
          if ((_NativeAccessibilityManager.default == null ? undefined : _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState) != null) {
            _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    /**
     * Query whether reduced transparency is currently enabled.
     *
     * Returns a promise which resolves to a boolean.
     * The result is `true` when a reduce transparency is enabled and `false` otherwise.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#isReduceTransparencyEnabled
     */
    isReduceTransparencyEnabled: function isReduceTransparencyEnabled() {
      if (_Platform.default.OS === 'android') {
        return Promise.resolve(false);
      } else {
        return new Promise(function (resolve, reject) {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    /**
     * Query whether a screen reader is currently enabled.
     *
     * Returns a promise which resolves to a boolean.
     * The result is `true` when a screen reader is enabled and `false` otherwise.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#isScreenReaderEnabled
     */
    isScreenReaderEnabled: function isScreenReaderEnabled() {
      return new Promise(function (resolve, reject) {
        if (_Platform.default.OS === 'android') {
          if (_NativeAccessibilityInfo.default != null) {
            _NativeAccessibilityInfo.default.isTouchExplorationEnabled(resolve);
          } else {
            reject(null);
          }
        } else {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    /**
     * Query whether Accessibility Service is currently enabled.
     *
     * Returns a promise which resolves to a boolean.
     * The result is `true` when any service is enabled and `false` otherwise.
     *
     * @platform android
     *
     * See https://reactnative.dev/docs/accessibilityinfo/#isaccessibilityserviceenabled-android
     */
    isAccessibilityServiceEnabled: function isAccessibilityServiceEnabled() {
      return new Promise(function (resolve, reject) {
        if (_Platform.default.OS === 'android') {
          if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled != null) {
            _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled(resolve);
          } else {
            reject(null);
          }
        } else {
          reject(null);
        }
      });
    },
    /**
     * Add an event handler. Supported events:
     *
     * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.
     *   The argument to the event handler is a boolean. The boolean is `true` when a reduce
     *   motion is enabled (or when "Transition Animation Scale" in "Developer options" is
     *   "Animation off") and `false` otherwise.
     * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument
     *   to the event handler is a boolean. The boolean is `true` when a screen
     *   reader is enabled and `false` otherwise.
     *
     * These events are only supported on iOS:
     *
     * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.
     *   The argument to the event handler is a boolean. The boolean is `true` when a bold text
     *   is enabled and `false` otherwise.
     * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.
     *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale
     *   is enabled and `false` otherwise.
     * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle
     *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert
     *   colors is enabled and `false` otherwise.
     * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency
     *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`
     *   when a reduce transparency is enabled and `false` otherwise.
     * - `announcementFinished`: iOS-only event. Fires when the screen reader has
     *   finished making an announcement. The argument to the event handler is a
     *   dictionary with these keys:
     *     - `announcement`: The string announced by the screen reader.
     *     - `success`: A boolean indicating whether the announcement was
     *       successfully made.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener
     */
    addEventListener: function addEventListener(eventName,
    // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)
    handler) {
      var deviceEventName = EventNames.get(eventName);
      return deviceEventName == null ? {
        remove: function remove() {}
      } :
      // $FlowFixMe[incompatible-call]
      _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);
    },
    /**
     * Set accessibility focus to a React component.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#setaccessibilityfocus
     */
    setAccessibilityFocus: function setAccessibilityFocus(reactTag) {
      (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');
    },
    /**
     * Send a named accessibility event to a HostComponent.
     */
    sendAccessibilityEvent: function sendAccessibilityEvent(handle, eventType) {
      // iOS only supports 'focus' event types
      if (_Platform.default.OS === 'ios' && eventType === 'click') {
        return;
      }
      // route through React renderer to distinguish between Fabric and non-Fabric handles
      (0, _$$_REQUIRE(_dependencyMap[6]).sendAccessibilityEvent)(handle, eventType);
    },
    /**
     * Post a string to be announced by the screen reader.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#announceforaccessibility
     */
    announceForAccessibility: function announceForAccessibility(announcement) {
      if (_Platform.default.OS === 'android') {
        _NativeAccessibilityInfo.default == null ? undefined : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
      } else {
        _NativeAccessibilityManager.default == null ? undefined : _NativeAccessibilityManager.default.announceForAccessibility(announcement);
      }
    },
    /**
     * Post a string to be announced by the screen reader.
     * - `announcement`: The string announced by the screen reader.
     * - `options`: An object that configures the reading options.
     *   - `queue`: The announcement will be queued behind existing announcements. iOS only.
     */
    announceForAccessibilityWithOptions: function announceForAccessibilityWithOptions(announcement, options) {
      if (_Platform.default.OS === 'android') {
        _NativeAccessibilityInfo.default == null ? undefined : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);
      } else {
        if (_NativeAccessibilityManager.default != null && _NativeAccessibilityManager.default.announceForAccessibilityWithOptions) {
          _NativeAccessibilityManager.default == null ? undefined : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions(announcement, options);
        } else {
          _NativeAccessibilityManager.default == null ? undefined : _NativeAccessibilityManager.default.announceForAccessibility(announcement);
        }
      }
    },
    /**
     * Get the recommended timeout for changes to the UI needed by this user.
     *
     * See https://reactnative.dev/docs/accessibilityinfo#getrecommendedtimeoutmillis
     */
    getRecommendedTimeoutMillis: function getRecommendedTimeoutMillis(originalTimeout) {
      if (_Platform.default.OS === 'android') {
        return new Promise(function (resolve, reject) {
          if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis) {
            _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis(originalTimeout, resolve);
          } else {
            resolve(originalTimeout);
          }
        });
      } else {
        return Promise.resolve(originalTimeout);
      }
    }
  };
  var _default = exports.default = AccessibilityInfo;
},3,[1,4,21,41,50,51,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _EventEmitter2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  // FIXME: use typed events
  /**
   * Global EventEmitter used by the native platform to emit events to JavaScript.
   * Events are identified by globally unique event names.
   *
   * NativeModules that emit events should instead subclass `NativeEventEmitter`.
   */
  var RCTDeviceEventEmitter = /*#__PURE__*/function (_EventEmitter) {
    (0, _inherits2.default)(RCTDeviceEventEmitter, _EventEmitter);
    var _super = _createSuper(RCTDeviceEventEmitter);
    function RCTDeviceEventEmitter() {
      (0, _classCallCheck2.default)(this, RCTDeviceEventEmitter);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(RCTDeviceEventEmitter, [{
      key: "emit",
      value:
      // Add systrace to RCTDeviceEventEmitter.emit method for debugging
      function emit(eventType) {
        var _get2;
        (0, _$$_REQUIRE(_dependencyMap[8]).beginEvent)(function () {
          return `RCTDeviceEventEmitter.emit#${eventType}`;
        });
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        (_get2 = (0, _get3.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), "emit", this)).call.apply(_get2, [this, eventType].concat(args));
        (0, _$$_REQUIRE(_dependencyMap[8]).endEvent)();
      }
    }]);
    return RCTDeviceEventEmitter;
  }(_EventEmitter2.default);
  var instance = new RCTDeviceEventEmitter();
  Object.defineProperty(global, '__rctDeviceEventEmitter', {
    configurable: true,
    value: instance
  });
  var _default = exports.default = instance;
},4,[1,5,6,10,13,15,12,17,20]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
},5,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _$$_REQUIRE(_dependencyMap[0])(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
},6,[7]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function toPropertyKey(t) {
    var i = _$$_REQUIRE(_dependencyMap[0])(t, "string");
    return "symbol" == _$$_REQUIRE(_dependencyMap[1])["default"](i) ? i : String(i);
  }
  module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
},7,[8,9]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function toPrimitive(t, r) {
    if ("object" != _$$_REQUIRE(_dependencyMap[0])["default"](t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (undefined !== e) {
      var i = e.call(t, r || "default");
      if ("object" != _$$_REQUIRE(_dependencyMap[0])["default"](i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
},8,[9]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof(o) {
    "@babel/helpers - typeof";

    return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
  }
  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},9,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
    } else {
      module.exports = _get = function _get(target, property, receiver) {
        var base = _$$_REQUIRE(_dependencyMap[0])(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }
        return desc.value;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
    return _get.apply(this, arguments);
  }
  module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
},10,[11]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _$$_REQUIRE(_dependencyMap[0])(object);
      if (object === null) break;
    }
    return object;
  }
  module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
},11,[12]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _getPrototypeOf(o);
  }
  module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},12,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _$$_REQUIRE(_dependencyMap[0])(subClass, superClass);
  }
  module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
},13,[14]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _setPrototypeOf(o, p);
  }
  module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},14,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _possibleConstructorReturn(self, call) {
    if (call && (_$$_REQUIRE(_dependencyMap[0])["default"](call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== undefined) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _$$_REQUIRE(_dependencyMap[1])(self);
  }
  module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
},15,[9,16]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
},16,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _registry = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registry");
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  /**
   * EventEmitter manages listeners and publishes events to them.
   *
   * EventEmitter accepts a single type parameter that defines the valid events
   * and associated listener argument(s).
   *
   * @example
   *
   *   const emitter = new EventEmitter<{
   *     success: [number, string],
   *     error: [Error],
   *   }>();
   *
   *   emitter.on('success', (statusCode, responseText) => {...});
   *   emitter.emit('success', 200, '...');
   *
   *   emitter.on('error', error => {...});
   *   emitter.emit('error', new Error('Resource not found'));
   *
   */
  var EventEmitter = exports.default = /*#__PURE__*/function () {
    function EventEmitter() {
      (0, _classCallCheck2.default)(this, EventEmitter);
      Object.defineProperty(this, _registry, {
        writable: true,
        value: {}
      });
    }
    (0, _createClass2.default)(EventEmitter, [{
      key: "addListener",
      value:
      /**
       * Registers a listener that is called when the supplied event is emitted.
       * Returns a subscription that has a `remove` method to undo registration.
       */
      function addListener(eventType, listener, context) {
        if (typeof listener !== 'function') {
          throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
        }
        var registrations = allocate((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], eventType);
        var registration = {
          context: context,
          listener: listener,
          remove: function remove() {
            registrations.delete(registration);
          }
        };
        registrations.add(registration);
        return registration;
      }

      /**
       * Emits the supplied event. Additional arguments supplied to `emit` will be
       * passed through to each of the registered listeners.
       *
       * If a listener modifies the listeners registered for the same event, those
       * changes will not be reflected in the current invocation of `emit`.
       */
    }, {
      key: "emit",
      value: function emit(eventType) {
        var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        if (registrations != null) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          // Copy `registrations` to take a snapshot when we invoke `emit`, in case
          // registrations are added or removed when listeners are invoked.
          for (var registration of Array.from(registrations)) {
            registration.listener.apply(registration.context, args);
          }
        }
      }

      /**
       * Removes all registered listeners.
       */
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (eventType == null) {
          (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry] = {};
        } else {
          delete (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        }
      }

      /**
       * Returns the number of registered listeners for the supplied event.
       */
    }, {
      key: "listenerCount",
      value: function listenerCount(eventType) {
        var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        return registrations == null ? 0 : registrations.size;
      }
    }]);
    return EventEmitter;
  }();
  function allocate(registry, eventType) {
    var registrations = registry[eventType];
    if (registrations == null) {
      registrations = new Set();
      registry[eventType] = registrations;
    }
    return registrations;
  }
},17,[1,5,6,18,19]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
  module.exports = _classPrivateFieldBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
},18,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var id = 0;
  function _classPrivateFieldKey(name) {
    return "__private_" + id++ + "_" + name;
  }
  module.exports = _classPrivateFieldKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
},19,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.beginAsyncEvent = beginAsyncEvent;
  exports.beginEvent = beginEvent;
  exports.counterEvent = counterEvent;
  exports.endAsyncEvent = endAsyncEvent;
  exports.endEvent = endEvent;
  exports.isEnabled = isEnabled;
  exports.setEnabled = setEnabled;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var TRACE_TAG_REACT_APPS = 131072; // eslint-disable-line no-bitwise

  var _asyncCookie = 0;
  /**
   * Indicates if the application is currently being traced.
   *
   * Calling methods on this module when the application isn't being traced is
   * cheap, but this method can be used to avoid computing expensive values for
   * those functions.
   *
   * @example
   * if (Systrace.isEnabled()) {
   *   const expensiveArgs = computeExpensiveArgs();
   *   Systrace.beginEvent('myEvent', expensiveArgs);
   * }
   */
  function isEnabled() {
    return global.nativeTraceIsTracing ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS) : Boolean(global.__RCTProfileIsProfiling);
  }

  /**
   * @deprecated This function is now a no-op but it's left for backwards
   * compatibility. `isEnabled` will now synchronously check if we're actively
   * profiling or not. This is necessary because we don't have callbacks to know
   * when profiling has started/stopped on Android APIs.
   */
  function setEnabled(_doEnable) {}

  /**
   * Marks the start of a synchronous event that should end in the same stack
   * frame. The end of this event should be marked using the `endEvent` function.
   */
  function beginEvent(eventName, args) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);
    }
  }

  /**
   * Marks the end of a synchronous event started in the same stack frame.
   */
  function endEvent(args) {
    if (isEnabled()) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);
    }
  }

  /**
   * Marks the start of a potentially asynchronous event. The end of this event
   * should be marked calling the `endAsyncEvent` function with the cookie
   * returned by this function.
   */
  function beginAsyncEvent(eventName, args) {
    var cookie = _asyncCookie;
    if (isEnabled()) {
      _asyncCookie++;
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
    return cookie;
  }

  /**
   * Marks the end of a potentially asynchronous event, which was started with
   * the given cookie.
   */
  function endAsyncEvent(eventName, cookie, args) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
  }

  /**
   * Registers a new value for a counter event.
   */
  function counterEvent(eventName, value) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);
    }
  }
},20,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativePlatformConstantsAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var Platform = {
    __constants: null,
    OS: 'android',
    // $FlowFixMe[unsafe-getters-setters]
    get Version() {
      // $FlowFixMe[object-this-reference]
      return this.constants.Version;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get constants() {
      // $FlowFixMe[object-this-reference]
      if (this.__constants == null) {
        // $FlowFixMe[object-this-reference]
        this.__constants = _NativePlatformConstantsAndroid.default.getConstants();
      }
      // $FlowFixMe[object-this-reference]
      return this.__constants;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isTesting() {
      return false;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isDisableAnimations() {
      var _this$constants$isDis;
      // $FlowFixMe[object-this-reference]
      return (_this$constants$isDis = this.constants.isDisableAnimations) != null ? _this$constants$isDis : this.isTesting;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isTV() {
      // $FlowFixMe[object-this-reference]
      return this.constants.uiMode === 'tv';
    },
    select: function select(spec) {
      return 'android' in spec ?
      // $FlowFixMe[incompatible-return]
      spec.android : 'native' in spec ?
      // $FlowFixMe[incompatible-return]
      spec.native :
      // $FlowFixMe[incompatible-return]
      spec.default;
    }
  };
  module.exports = Platform;
},21,[1,22]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('PlatformConstants');
},22,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getEnforcing = getEnforcing;
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                            * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                            *
                                                                            * This source code is licensed under the MIT license found in the
                                                                            * LICENSE file in the root directory of this source tree.
                                                                            *
                                                                            * 
                                                                            * @format
                                                                            */

  var turboModuleProxy = global.__turboModuleProxy;
  var moduleLoadHistory = {
    NativeModules: [],
    TurboModules: [],
    NotFound: []
  };
  function isBridgeless() {
    return global.RN$Bridgeless === true;
  }
  function isTurboModuleInteropEnabled() {
    return global.RN$TurboInterop === true;
  }

  // TODO(154308585): Remove "module not found" debug info logging
  function shouldReportDebugInfo() {
    return true;
  }

  // TODO(148943970): Consider reversing the lookup here:
  // Lookup on __turboModuleProxy, then lookup on nativeModuleProxy
  function requireModule(name) {
    if (!isBridgeless() || isTurboModuleInteropEnabled()) {
      // Backward compatibility layer during migration.
      var legacyModule = _$$_REQUIRE(_dependencyMap[2])[name];
      if (legacyModule != null) {
        if (shouldReportDebugInfo()) {
          moduleLoadHistory.NativeModules.push(name);
        }
        return legacyModule;
      }
    }
    if (turboModuleProxy != null) {
      var module = turboModuleProxy(name);
      if (module != null) {
        if (shouldReportDebugInfo()) {
          moduleLoadHistory.TurboModules.push(name);
        }
        return module;
      }
    }
    if (shouldReportDebugInfo() && !moduleLoadHistory.NotFound.includes(name)) {
      moduleLoadHistory.NotFound.push(name);
    }
    return null;
  }
  function get(name) {
    return requireModule(name);
  }
  function getEnforcing(name) {
    var module = requireModule(name);
    var message = `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` + 'Verify that a module by this name is registered in the native binary.';
    if (shouldReportDebugInfo()) {
      message += 'Bridgeless mode: ' + (isBridgeless() ? 'true' : 'false') + '. ';
      message += 'TurboModule interop: ' + (isTurboModuleInteropEnabled() ? 'true' : 'false') + '. ';
      message += 'Modules loaded: ' + JSON.stringify(moduleLoadHistory);
    }
    (0, _invariant.default)(module != null, message);
    return module;
  }
},23,[1,24,25]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */
  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }
      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  };
  module.exports = invariant;
},24,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);
  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }
    var _config = _slicedToArray(config, 5),
      moduleName = _config[0],
      constants = _config[1],
      methods = _config[2],
      promiseMethods = _config[3],
      syncMethods = _config[4];
    _$$_REQUIRE(_dependencyMap[1])(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side but wasn't for " + moduleName);
    if (!constants && !methods) {
      // Module contents will be filled in lazily later
      return {
        name: moduleName
      };
    }
    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID) || false;
      var isSync = syncMethods && arrayContains(syncMethods, methodID) || false;
      _$$_REQUIRE(_dependencyMap[1])(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    Object.assign(module, constants);
    if (module.getConstants == null) {
      module.getConstants = function () {
        return constants || Object.freeze({});
      };
    } else {
      console.warn(`Unable to define method 'getConstants()' on NativeModule '${moduleName}'. NativeModule '${moduleName}' already has a constant or method called 'getConstants'. Please remove it.`);
    }
    return {
      name: moduleName,
      module: module
    };
  }

  // export this method as a global so we can call it from native
  global.__fbGenNativeModule = genModule;
  function loadModule(name, moduleID) {
    _$$_REQUIRE(_dependencyMap[1])(global.nativeRequireModuleConfig, "Can't lazily create module without nativeRequireModuleConfig");
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }
  function genMethod(moduleID, methodID, type) {
    var fn = null;
    if (type === 'promise') {
      fn = function promiseMethodWrapper() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        // In case we reject, capture a useful stack trace here.
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
         * this parameters */
        var enqueueingFrameError = new Error();
        return new Promise(function (resolve, reject) {
          _$$_REQUIRE(_dependencyMap[2]).enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(updateErrorWithErrorData(errorData, enqueueingFrameError));
          });
        });
      };
    } else {
      fn = function nonPromiseMethodWrapper() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && _$$_REQUIRE(_dependencyMap[1])(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        // $FlowFixMe[incompatible-type]
        var onSuccess = hasSuccessCallback ? lastArg : null;
        // $FlowFixMe[incompatible-type]
        var onFail = hasErrorCallback ? secondLastArg : null;
        // $FlowFixMe[unsafe-addition]
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        var newArgs = args.slice(0, args.length - callbackCount);
        if (type === 'sync') {
          return _$$_REQUIRE(_dependencyMap[2]).callNativeSyncHook(moduleID, methodID, newArgs, onFail, onSuccess);
        } else {
          _$$_REQUIRE(_dependencyMap[2]).enqueueNativeCall(moduleID, methodID, newArgs, onFail, onSuccess);
        }
      };
    }
    // $FlowFixMe[prop-missing]
    fn.type = type;
    return fn;
  }
  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }
  function updateErrorWithErrorData(errorData, error) {
    /* $FlowFixMe[class-object-subtyping] added when improving typing for this
     * parameters */
    return Object.assign(error, errorData || {});
  }
  var NativeModules = {};
  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else if (!global.nativeExtensions) {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    _$$_REQUIRE(_dependencyMap[1])(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');
    var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[3]);
    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      // Initially this config will only contain the module name when running in JSC. The actual
      // configuration of the module will be lazily loaded.
      var info = genModule(config, moduleID);
      if (!info) {
        return;
      }
      if (info.module) {
        NativeModules[info.name] = info.module;
      }
      // If there's no module config, define a lazy getter
      else {
        defineLazyObjectProperty(NativeModules, info.name, {
          get: function get() {
            return loadModule(info.name, moduleID);
          }
        });
      }
    });
  }
  module.exports = NativeModules;
},25,[26,24,32,40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _slicedToArray(arr, i) {
    return _$$_REQUIRE(_dependencyMap[0])(arr) || _$$_REQUIRE(_dependencyMap[1])(arr, i) || _$$_REQUIRE(_dependencyMap[2])(arr, i) || _$$_REQUIRE(_dependencyMap[3])();
  }
  module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},26,[27,28,29,31]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},27,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = false;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
},28,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _$$_REQUIRE(_dependencyMap[0])(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _$$_REQUIRE(_dependencyMap[0])(o, minLen);
  }
  module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},29,[30]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},30,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
},31,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var BatchedBridge = new (_$$_REQUIRE(_dependencyMap[0]))();

  // Wire up the batched bridge on the global object so that we can call into it.
  // Ideally, this would be the inverse relationship. I.e. the native environment
  // provides this global directly with its script embedded. Then this module
  // would export it. A possible fix would be to trim the dependencies in
  // MessageQueue to its minimal features and embed that in the native runtime.

  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},32,[33]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);
  var _createClass = _$$_REQUIRE(_dependencyMap[2]);
  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;

  // eslint-disable-next-line no-bitwise
  var TRACE_TAG_REACT_APPS = 131072;
  var DEBUG_INFO_LIMIT = 32;
  var MessageQueue = /*#__PURE__*/function () {
    function MessageQueue() {
      _classCallCheck(this, MessageQueue);
      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = new Map();
      this._failureCallbacks = new Map();
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = Date.now();
      this._reactNativeMicrotasksCallback = null;
      // $FlowFixMe[cannot-write]
      this.callFunctionReturnFlushedQueue =
      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
      this.callFunctionReturnFlushedQueue.bind(this);
      // $FlowFixMe[cannot-write]
      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
      this.flushedQueue = this.flushedQueue.bind(this);

      // $FlowFixMe[cannot-write]
      this.invokeCallbackAndReturnFlushedQueue =
      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
      this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    /**
     * Public APIs
     */
    _createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;
        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });
        return this.flushedQueue();
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this2 = this;
        this.__guard(function () {
          _this2.__invokeCallback(cbID, args);
        });
        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this3 = this;
        this.__guard(function () {
          _this3.__callReactNativeMicrotasks();
        });
        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return Date.now() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module;
        var getValue = factory;
        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }
          /* $FlowFixMe[class-object-subtyping] added when improving typing for
           * this parameters */
          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "callNativeSyncHook",
      value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {
        this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
        return global.nativeCallSyncHook(moduleID, methodID, params);
      }
    }, {
      key: "processCallbacks",
      value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {
        var _this4 = this;
        if (onFail || onSucc) {
          // Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit
          // to indicate fail (0) or success (1)
          // eslint-disable-next-line no-bitwise
          onFail && params.push(this._callID << 1);
          // eslint-disable-next-line no-bitwise
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks.set(this._callID, onSucc);
          this._failureCallbacks.set(this._callID, onFail);
        }
        this._callID++;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
        this._queue[MODULE_IDS].push(moduleID);
        this._queue[METHOD_IDS].push(methodID);
        this._queue[PARAMS].push(params);
        var now = Date.now();
        if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }
        _$$_REQUIRE(_dependencyMap[3]).counterEvent('pending_js_to_native_queue', this._queue[0].length);
        if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {}

      // For JSTimers to register its callback. Otherwise a circular dependency
      // between modules is introduced. Note that only one callback may be
      // registered at a time.
    }, {
      key: "setReactNativeMicrotasksCallback",
      value: function setReactNativeMicrotasksCallback(fn) {
        this._reactNativeMicrotasksCallback = fn;
      }

      /**
       * Private methods
       */
    }, {
      key: "__guard",
      value: function __guard(fn) {
        if (this.__shouldPauseOnThrow()) {
          fn();
        } else {
          try {
            fn();
          } catch (error) {
            _$$_REQUIRE(_dependencyMap[4]).reportFatalError(error);
          }
        }
      }

      // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior
      // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin
      // This makes stacktraces to be placed at MessageQueue rather than at where they were launched
      // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and
      // can be configured by the VM or any Inspector
    }, {
      key: "__shouldPauseOnThrow",
      value: function __shouldPauseOnThrow() {
        return (
          // $FlowFixMe[cannot-resolve-name]
          typeof DebuggerInternal !== 'undefined' &&
          // $FlowFixMe[cannot-resolve-name]
          DebuggerInternal.shouldPauseOnThrow === true
        );
      }
    }, {
      key: "__callReactNativeMicrotasks",
      value: function __callReactNativeMicrotasks() {
        _$$_REQUIRE(_dependencyMap[3]).beginEvent('JSTimers.callReactNativeMicrotasks()');
        try {
          if (this._reactNativeMicrotasksCallback != null) {
            this._reactNativeMicrotasksCallback();
          }
        } finally {
          _$$_REQUIRE(_dependencyMap[3]).endEvent();
        }
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;
        if (this.__spy) {
          _$$_REQUIRE(_dependencyMap[3]).beginEvent(`${module}.${method}(${_$$_REQUIRE(_dependencyMap[5]).default(args)})`);
        } else {
          _$$_REQUIRE(_dependencyMap[3]).beginEvent(`${module}.${method}(...)`);
        }
        try {
          if (this.__spy) {
            this.__spy({
              type: TO_JS,
              module: module,
              method: method,
              args: args
            });
          }
          var moduleMethods = this.getCallableModule(module);
          if (!moduleMethods) {
            var callableModuleNames = Object.keys(this._lazyCallableModules);
            var n = callableModuleNames.length;
            var callableModuleNameList = callableModuleNames.join(', ');

            // TODO(T122225939): Remove after investigation: Why are we getting to this line in bridgeless mode?
            var isBridgelessMode = global.RN$Bridgeless === true ? 'true' : 'false';
            _$$_REQUIRE(_dependencyMap[6])(false, `Failed to call into JavaScript module method ${module}.${method}(). Module has not been registered as callable. Bridgeless Mode: ${isBridgelessMode}. Registered callable JavaScript modules (n = ${n}): ${callableModuleNameList}.
          A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.`);
          }
          if (!moduleMethods[method]) {
            _$$_REQUIRE(_dependencyMap[6])(false, `Failed to call into JavaScript module method ${module}.${method}(). Module exists, but the method is undefined.`);
          }
          moduleMethods[method].apply(moduleMethods, args);
        } finally {
          _$$_REQUIRE(_dependencyMap[3]).endEvent();
        }
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;

        // The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.
        // eslint-disable-next-line no-bitwise
        var callID = cbID >>> 1;
        // eslint-disable-next-line no-bitwise
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);
        try {
          if (!callback) {
            return;
          }
          this._successCallbacks.delete(callID);
          this._failureCallbacks.delete(callID);
          callback.apply(undefined, _toConsumableArray(args));
        } finally {}
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log(`${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` + `${info.module != null ? info.module + '.' : ''}${info.method}` + `(${JSON.stringify(info.args)})`);
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);
    return MessageQueue;
  }();
  module.exports = MessageQueue;
},33,[34,5,6,20,38,39,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _toConsumableArray(arr) {
    return _$$_REQUIRE(_dependencyMap[0])(arr) || _$$_REQUIRE(_dependencyMap[1])(arr) || _$$_REQUIRE(_dependencyMap[2])(arr) || _$$_REQUIRE(_dependencyMap[3])();
  }
  module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},34,[35,36,29,37]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _$$_REQUIRE(_dependencyMap[0])(arr);
  }
  module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},35,[30]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},36,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
},37,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * The particular require runtime that we are using looks for a global
   * `ErrorUtils` object and if it exists, then it requires modules with the
   * error handler specified via ErrorUtils.setGlobalHandler by calling the
   * require function with applyWithGuard. Since the require module is loaded
   * before any of the modules, this ErrorUtils must be defined (and the handler
   * set) globally before requiring anything.
   *
   * However, we still want to treat ErrorUtils as a module so that other modules
   * that use it aren't just using a global variable, so simply export the global
   * variable here. ErrorUtils is originally defined in a file named error-guard.js.
   */
  module.exports = global.ErrorUtils;
},38,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
  exports.default = undefined;
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * Tries to stringify with JSON.stringify and toString, but catches exceptions
   * (e.g. from circular objects) and always returns a string and never throws.
   */
  function createStringifySafeWithLimits(limits) {
    var _limits$maxDepth = limits.maxDepth,
      maxDepth = _limits$maxDepth === undefined ? Number.POSITIVE_INFINITY : _limits$maxDepth,
      _limits$maxStringLimi = limits.maxStringLimit,
      maxStringLimit = _limits$maxStringLimi === undefined ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
      _limits$maxArrayLimit = limits.maxArrayLimit,
      maxArrayLimit = _limits$maxArrayLimit === undefined ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
      _limits$maxObjectKeys = limits.maxObjectKeysLimit,
      maxObjectKeysLimit = _limits$maxObjectKeys === undefined ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
    var stack = [];
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    function replacer(key, value) {
      while (stack.length && this !== stack[0]) {
        stack.shift();
      }
      if (typeof value === 'string') {
        var truncatedString = '...(truncated)...';
        if (value.length > maxStringLimit + truncatedString.length) {
          return value.substring(0, maxStringLimit) + truncatedString;
        }
        return value;
      }
      if (typeof value !== 'object' || value === null) {
        return value;
      }
      var retval = value;
      if (Array.isArray(value)) {
        if (stack.length >= maxDepth) {
          retval = `[ ... array with ${value.length} values ... ]`;
        } else if (value.length > maxArrayLimit) {
          retval = value.slice(0, maxArrayLimit).concat([`... extra ${value.length - maxArrayLimit} values truncated ...`]);
        }
      } else {
        // Add refinement after Array.isArray call.
        (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
        var keys = Object.keys(value);
        if (stack.length >= maxDepth) {
          retval = `{ ... object with ${keys.length} keys ... }`;
        } else if (keys.length > maxObjectKeysLimit) {
          // Return a sample of the keys.
          retval = {};
          for (var k of keys.slice(0, maxObjectKeysLimit)) {
            retval[k] = value[k];
          }
          var truncatedKey = '...(truncated keys)...';
          retval[truncatedKey] = keys.length - maxObjectKeysLimit;
        }
      }
      stack.unshift(retval);
      return retval;
    }
    return function stringifySafe(arg) {
      if (arg === undefined) {
        return 'undefined';
      } else if (arg === null) {
        return 'null';
      } else if (typeof arg === 'function') {
        try {
          return arg.toString();
        } catch (e) {
          return '[function unknown]';
        }
      } else if (arg instanceof Error) {
        return arg.name + ': ' + arg.message;
      } else {
        // Perform a try catch, just in case the object has a circular
        // reference or stringify throws for some other reason.
        try {
          var ret = JSON.stringify(arg, replacer);
          if (ret === undefined) {
            return '["' + typeof arg + '" failed to stringify]';
          }
          return ret;
        } catch (e) {
          if (typeof arg.toString === 'function') {
            try {
              // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.
              return arg.toString();
            } catch (E) {}
          }
        }
      }
      return '["' + typeof arg + '" failed to stringify]';
    };
  }
  var stringifySafe = createStringifySafeWithLimits({
    maxDepth: 10,
    maxStringLimit: 100,
    maxArrayLimit: 50,
    maxObjectKeysLimit: 50
  });
  var _default = exports.default = stringifySafe;
},39,[1,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * Defines a lazily evaluated property on the supplied `object`.
   */
  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value;
    var valueSet = false;
    function getValue() {
      // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls
      // `setValue` which calls `Object.defineProperty` which somehow triggers
      // `getValue` again. Adding `valueSet` breaks this loop.
      if (!valueSet) {
        // Calling `get()` here can trigger an infinite loop if it fails to
        // remove the getter on the property, which can happen when executing
        // JS in a V8 context.  `valueSet = true` will break this loop, and
        // sets the value of the property to undefined, until the code in `get()`
        // finishes, at which point the property is set to the correct value.
        valueSet = true;
        setValue(get());
      }
      return value;
    }
    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }
    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }
  module.exports = defineLazyObjectProperty;
},40,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * This is a function exposed to the React Renderer that can be used by the
   * pre-Fabric renderer to emit accessibility events to pre-Fabric nodes.
   */
  function legacySendAccessibilityEvent(reactTag, eventType) {
    if (eventType === 'focus') {
      _UIManager.default.sendAccessibilityEvent(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewFocused);
    }
    if (eventType === 'click') {
      _UIManager.default.sendAccessibilityEvent(reactTag, _UIManager.default.getConstants().AccessibilityEventTypes.typeViewClicked);
    }
  }
  module.exports = legacySendAccessibilityEvent;
},41,[1,42]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  function isFabricReactTag(reactTag) {
    // React reserves even numbers for Fabric.
    return reactTag % 2 === 0;
  }
  var UIManagerImpl = global.RN$Bridgeless === true ? _$$_REQUIRE(_dependencyMap[2]) : _$$_REQUIRE(_dependencyMap[3]);

  // $FlowFixMe[cannot-spread-interface]
  var UIManager = Object.assign({}, UIManagerImpl, {
    measure: function measure(reactTag, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[4]).getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measure(shadowNode, callback);
        } else {
          console.warn(`measure cannot find view with tag #${reactTag}`);
          // $FlowFixMe[incompatible-call]
          callback();
        }
      } else {
        // Paper
        UIManagerImpl.measure(reactTag, callback);
      }
    },
    measureInWindow: function measureInWindow(reactTag, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[4]).getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measureInWindow(shadowNode, callback);
        } else {
          console.warn(`measure cannot find view with tag #${reactTag}`);
          // $FlowFixMe[incompatible-call]
          callback();
        }
      } else {
        // Paper
        UIManagerImpl.measureInWindow(reactTag, callback);
      }
    },
    measureLayout: function measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[4]).getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
        if (!shadowNode || !ancestorShadowNode) {
          return;
        }
        FabricUIManager.measureLayout(shadowNode, ancestorShadowNode, errorCallback, callback);
      } else {
        // Paper
        UIManagerImpl.measureLayout(reactTag, ancestorReactTag, errorCallback, callback);
      }
    },
    measureLayoutRelativeToParent: function measureLayoutRelativeToParent(reactTag, errorCallback, callback) {
      if (isFabricReactTag(reactTag)) {
        console.warn('RCTUIManager.measureLayoutRelativeToParent method is deprecated and it will not be implemented in newer versions of RN (Fabric) - T47686450');
        var FabricUIManager = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[4]).getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measure(shadowNode, function (left, top, width, height, pageX, pageY) {
            callback(left, top, width, height);
          });
        }
      } else {
        // Paper
        UIManagerImpl.measureLayoutRelativeToParent(reactTag, errorCallback, callback);
      }
    },
    dispatchViewManagerCommand: function dispatchViewManagerCommand(reactTag, commandName, commandArgs) {
      // Sometimes, libraries directly pass in the output of `findNodeHandle` to
      // this function without checking if it's null. This guards against that
      // case. We throw early here in Javascript so we can get a JS stacktrace
      // instead of a harder-to-debug native Java or Objective-C stacktrace.
      if (typeof reactTag !== 'number') {
        throw new Error('dispatchViewManagerCommand: found null reactTag');
      }
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[4]).getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          // Transform the accidental CommandID into a CommandName which is the stringified number.
          // The interop layer knows how to convert this number into the right method name.
          // Stringify a string is a no-op, so it's safe.
          commandName = `${commandName}`;
          FabricUIManager.dispatchCommand(shadowNode, commandName, commandArgs);
        }
      } else {
        UIManagerImpl.dispatchViewManagerCommand(reactTag,
        // We have some legacy components that are actually already using strings. ¯\_(ツ)_/¯
        // $FlowFixMe[incompatible-call]
        commandName, commandArgs);
      }
    }
  });
  module.exports = UIManager;
},42,[1,43,44,46,49]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }
    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1; // Skip nullthrows's own stack frame.
    throw error;
  }
  module.exports = nullthrows;
  module.exports.default = nullthrows;
  Object.defineProperty(module.exports, '__esModule', {
    value: true
  });
},43,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var cachedConstants = null;
  var errorMessageForMethod = function errorMessageForMethod(methodName) {
    return "[ReactNative Architecture][JS] '" + methodName + "' is not available in the new React Native architecture.";
  };
  function nativeViewConfigsInBridgelessModeEnabled() {
    return global.RN$LegacyInterop_UIManager_getConstants !== undefined;
  }
  function getCachedConstants() {
    if (!cachedConstants) {
      cachedConstants = global.RN$LegacyInterop_UIManager_getConstants();
    }
    return cachedConstants;
  }
  var UIManagerJS = {
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      if (nativeViewConfigsInBridgelessModeEnabled()) {
        return getCachedConstants()[viewManagerName];
      } else {
        console.error(errorMessageForMethod('getViewManagerConfig') + 'Use hasViewManagerConfig instead. viewManagerName: ' + viewManagerName);
        return null;
      }
    },
    hasViewManagerConfig: function hasViewManagerConfig(viewManagerName) {
      return (0, _$$_REQUIRE(_dependencyMap[0]).unstable_hasComponent)(viewManagerName);
    },
    getConstants: function getConstants() {
      if (nativeViewConfigsInBridgelessModeEnabled()) {
        return getCachedConstants();
      } else {
        console.error(errorMessageForMethod('getConstants'));
        return null;
      }
    },
    getConstantsForViewManager: function getConstantsForViewManager(viewManagerName) {
      console.error(errorMessageForMethod('getConstantsForViewManager'));
      return {};
    },
    getDefaultEventTypes: function getDefaultEventTypes() {
      console.error(errorMessageForMethod('getDefaultEventTypes'));
      return [];
    },
    lazilyLoadView: function lazilyLoadView(name) {
      console.error(errorMessageForMethod('lazilyLoadView'));
      return {};
    },
    createView: function createView(reactTag, viewName, rootTag, props) {
      return console.error(errorMessageForMethod('createView'));
    },
    updateView: function updateView(reactTag, viewName, props) {
      return console.error(errorMessageForMethod('updateView'));
    },
    focus: function focus(reactTag) {
      return console.error(errorMessageForMethod('focus'));
    },
    blur: function blur(reactTag) {
      return console.error(errorMessageForMethod('blur'));
    },
    findSubviewIn: function findSubviewIn(reactTag, point, callback) {
      return console.error(errorMessageForMethod('findSubviewIn'));
    },
    dispatchViewManagerCommand: function dispatchViewManagerCommand(reactTag, commandID, commandArgs) {
      return console.error(errorMessageForMethod('dispatchViewManagerCommand'));
    },
    measure: function measure(reactTag, callback) {
      return console.error(errorMessageForMethod('measure'));
    },
    measureInWindow: function measureInWindow(reactTag, callback) {
      return console.error(errorMessageForMethod('measureInWindow'));
    },
    viewIsDescendantOf: function viewIsDescendantOf(reactTag, ancestorReactTag, callback) {
      return console.error(errorMessageForMethod('viewIsDescendantOf'));
    },
    measureLayout: function measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {
      return console.error(errorMessageForMethod('measureLayout'));
    },
    measureLayoutRelativeToParent: function measureLayoutRelativeToParent(reactTag, errorCallback, callback) {
      return console.error(errorMessageForMethod('measureLayoutRelativeToParent'));
    },
    setJSResponder: function setJSResponder(reactTag, blockNativeResponder) {
      return console.error(errorMessageForMethod('setJSResponder'));
    },
    clearJSResponder: function clearJSResponder() {},
    // Don't log error here because we're aware it gets called
    configureNextLayoutAnimation: function configureNextLayoutAnimation(config, callback, errorCallback) {
      return console.error(errorMessageForMethod('configureNextLayoutAnimation'));
    },
    removeSubviewsFromContainerWithID: function removeSubviewsFromContainerWithID(containerID) {
      return console.error(errorMessageForMethod('removeSubviewsFromContainerWithID'));
    },
    replaceExistingNonRootView: function replaceExistingNonRootView(reactTag, newReactTag) {
      return console.error(errorMessageForMethod('replaceExistingNonRootView'));
    },
    setChildren: function setChildren(containerTag, reactTags) {
      return console.error(errorMessageForMethod('setChildren'));
    },
    manageChildren: function manageChildren(containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) {
      return console.error(errorMessageForMethod('manageChildren'));
    },
    // Android only
    setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental(enabled) {
      console.error(errorMessageForMethod('setLayoutAnimationEnabledExperimental'));
    },
    // Please use AccessibilityInfo.sendAccessibilityEvent instead.
    // See SetAccessibilityFocusExample in AccessibilityExample.js for a migration example.
    sendAccessibilityEvent: function sendAccessibilityEvent(reactTag, eventType) {
      return console.error(errorMessageForMethod('sendAccessibilityEvent'));
    },
    showPopupMenu: function showPopupMenu(reactTag, items, error, success) {
      return console.error(errorMessageForMethod('showPopupMenu'));
    },
    dismissPopupMenu: function dismissPopupMenu() {
      return console.error(errorMessageForMethod('dismissPopupMenu'));
    }
  };
  if (nativeViewConfigsInBridgelessModeEnabled()) {
    Object.keys(getCachedConstants()).forEach(function (viewConfigName) {
      UIManagerJS[viewConfigName] = getCachedConstants()[viewConfigName];
    });
  }
  module.exports = UIManagerJS;
},44,[45]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.unstable_hasComponent = unstable_hasComponent;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var componentNameToExists = new Map();

  /**
   * Unstable API. Do not use!
   *
   * This method returns if the component with name received as a parameter
   * is registered in the native platform.
   */
  function unstable_hasComponent(name) {
    var hasNativeComponent = componentNameToExists.get(name);
    if (hasNativeComponent == null) {
      if (global.__nativeComponentRegistry__hasComponent) {
        hasNativeComponent = global.__nativeComponentRegistry__hasComponent(name);
        componentNameToExists.set(name, hasNativeComponent);
      } else {
        throw `unstable_hasComponent('${name}'): Global function is not registered`;
      }
    }
    return hasNativeComponent;
  }
},45,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeUIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                  * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                  *
                                                                                  * This source code is licensed under the MIT license found in the
                                                                                  * LICENSE file in the root directory of this source tree.
                                                                                  *
                                                                                  * 
                                                                                  * @format
                                                                                  */

  var viewManagerConfigs = {};
  var triedLoadingConfig = new Set();
  var NativeUIManagerConstants = {};
  var isNativeUIManagerConstantsSet = false;
  function _getConstants() {
    if (!isNativeUIManagerConstantsSet) {
      NativeUIManagerConstants = _NativeUIManager.default.getConstants();
      isNativeUIManagerConstantsSet = true;
    }
    return NativeUIManagerConstants;
  }
  function _getViewManagerConfig(viewManagerName) {
    if (viewManagerConfigs[viewManagerName] === undefined && global.nativeCallSyncHook &&
    // If we're in the Chrome Debugger, let's not even try calling the sync method
    _NativeUIManager.default.getConstantsForViewManager) {
      try {
        viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
      } catch (e) {
        console.error("NativeUIManager.getConstantsForViewManager('" + viewManagerName + "') threw an exception.", e);
        viewManagerConfigs[viewManagerName] = null;
      }
    }
    var config = viewManagerConfigs[viewManagerName];
    if (config) {
      return config;
    }

    // If we're in the Chrome Debugger, let's not even try calling the sync
    // method.
    if (!global.nativeCallSyncHook) {
      return config;
    }
    if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
      var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);
      triedLoadingConfig.add(viewManagerName);
      if (result != null && result.viewConfig != null) {
        _getConstants()[viewManagerName] = result.viewConfig;
        lazifyViewManagerConfig(viewManagerName);
      }
    }
    return viewManagerConfigs[viewManagerName];
  }

  /* $FlowFixMe[cannot-spread-interface] (>=0.123.0 site=react_native_fb) This
   * comment suppresses an error found when Flow v0.123.0 was deployed. To see
   * the error, delete this comment and run Flow. */
  var UIManagerJS = Object.assign({}, _NativeUIManager.default, {
    createView: function createView(reactTag, viewName, rootTag, props) {
      _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);
    },
    getConstants: function getConstants() {
      return _getConstants();
    },
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      return _getViewManagerConfig(viewManagerName);
    },
    hasViewManagerConfig: function hasViewManagerConfig(viewManagerName) {
      return _getViewManagerConfig(viewManagerName) != null;
    }
  });

  // TODO (T45220498): Remove this.
  // 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`
  // instead of `UIManager.getViewManagerConfig()` off UIManager.js.
  // This is a workaround for now.
  // $FlowFixMe[prop-missing]
  _NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;
  function lazifyViewManagerConfig(viewName) {
    var viewConfig = _getConstants()[viewName];
    viewManagerConfigs[viewName] = viewConfig;
    if (viewConfig.Manager) {
      _$$_REQUIRE(_dependencyMap[2])(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = _$$_REQUIRE(_dependencyMap[3])[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      _$$_REQUIRE(_dependencyMap[2])(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = _$$_REQUIRE(_dependencyMap[3])[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  }

  /**
   * Copies the ViewManager constants and commands into UIManager. This is
   * only needed for iOS, which puts the constants in the ViewManager
   * namespace instead of UIManager, unlike Android.
   */

  if (_getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function (viewManagerName) {
      _$$_REQUIRE(_dependencyMap[2])(_NativeUIManager.default, viewManagerName, {
        get: function get() {
          return _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }
  if (!global.nativeCallSyncHook) {
    Object.keys(_getConstants()).forEach(function (viewManagerName) {
      if (!_$$_REQUIRE(_dependencyMap[4]).includes(viewManagerName)) {
        if (!viewManagerConfigs[viewManagerName]) {
          viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];
        }
        _$$_REQUIRE(_dependencyMap[2])(_NativeUIManager.default, viewManagerName, {
          get: function get() {
            console.warn(`Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` + `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`);
            return UIManagerJS.getViewManagerConfig(viewManagerName);
          }
        });
      }
    });
  }
  module.exports = UIManagerJS;
},46,[1,47,40,25,48]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('UIManager');
},47,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * The list of non-ViewManager related UIManager properties.
   *
   * In an effort to improve startup performance by lazily loading view managers,
   * the interface to access view managers will change from
   * UIManager['viewManagerName'] to UIManager.getViewManagerConfig('viewManagerName').
   * By using a function call instead of a property access, the UIManager will
   * be able to initialize and load the required view manager from native
   * synchronously. All of React Native's core components have been updated to
   * use getViewManagerConfig(). For the next few releases, any usage of
   * UIManager['viewManagerName'] will result in a warning. Because React Native
   * does not support Proxy objects, a view manager access is implied if any of
   * UIManager's properties that are not one of the properties below is being
   * accessed. Once UIManager property accesses for view managers has been fully
   * deprecated, this file will also be removed.
   */
  module.exports = ['clearJSResponder', 'configureNextLayoutAnimation', 'createView', 'dismissPopupMenu', 'dispatchViewManagerCommand', 'findSubviewIn', 'getConstantsForViewManager', 'getDefaultEventTypes', 'manageChildren', 'measure', 'measureInWindow', 'measureLayout', 'measureLayoutRelativeToParent', 'removeRootView', 'removeSubviewsFromContainerWithID', 'replaceExistingNonRootView', 'sendAccessibilityEvent', 'setChildren', 'setJSResponder', 'setLayoutAnimationEnabledExperimental', 'showPopupMenu', 'updateView', 'viewIsDescendantOf', 'PopupMenu', 'LazyViewManagersEnabled', 'ViewManagerNames', 'StyleConstants', 'AccessibilityEventTypes', 'UIView', 'getViewManagerConfig', 'hasViewManagerConfig', 'blur', 'focus', 'genericBubblingEventTypes', 'genericDirectEventTypes', 'lazilyLoadView'];
},48,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getFabricUIManager = getFabricUIManager;
  var _defineLazyObjectProperty = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var nativeFabricUIManagerProxy;

  // This is a list of all the methods in global.nativeFabricUIManager that we'll
  // cache in JavaScript, as the current implementation of the binding
  // creates a new host function every time methods are accessed.
  var CACHED_PROPERTIES = ['createNode', 'cloneNode', 'cloneNodeWithNewChildren', 'cloneNodeWithNewProps', 'cloneNodeWithNewChildrenAndProps', 'createChildSet', 'appendChild', 'appendChildToSet', 'completeRoot', 'measure', 'measureInWindow', 'measureLayout', 'configureNextLayoutAnimation', 'sendAccessibilityEvent', 'findShadowNodeByTag_DEPRECATED', 'setNativeProps', 'dispatchCommand', 'getParentNode', 'getChildNodes', 'isConnected', 'compareDocumentPosition', 'getTextContent', 'getBoundingClientRect', 'getOffset', 'getScrollPosition', 'getScrollSize', 'getInnerSize', 'getBorderSize', 'getTagName', 'hasPointerCapture', 'setPointerCapture', 'releasePointerCapture'];

  // This is exposed as a getter because apps using the legacy renderer AND
  // Fabric can define the binding lazily. If we evaluated the global and cached
  // it in the module we might be caching an `undefined` value before it is set.
  function getFabricUIManager() {
    if (nativeFabricUIManagerProxy == null && global.nativeFabricUIManager != null) {
      nativeFabricUIManagerProxy = createProxyWithCachedProperties(global.nativeFabricUIManager, CACHED_PROPERTIES);
    }
    return nativeFabricUIManagerProxy;
  }

  /**
   *
   * Returns an object that caches the specified properties the first time they
   * are accessed, and falls back to the original object for other properties.
   */
  function createProxyWithCachedProperties(implementation, propertiesToCache) {
    var proxy = Object.create(implementation);
    var _loop = function _loop(propertyName) {
      (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
        // $FlowExpectedError[prop-missing]
        get: function get() {
          return implementation[propertyName];
        }
      });
    };
    for (var propertyName of propertiesToCache) {
      _loop(propertyName);
    }
    return proxy;
  }
},49,[1,40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('AccessibilityInfo');
},50,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('AccessibilityManager');
},51,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[0])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[0])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[0])[key];
      }
    });
  });
},52,[53]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dispatchCommand = dispatchCommand;
  exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
  exports.findNodeHandle = findNodeHandle;
  exports.isProfilingRenderer = isProfilingRenderer;
  exports.renderElement = renderElement;
  exports.sendAccessibilityEvent = sendAccessibilityEvent;
  exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
  exports.unstable_batchedUpdates = unstable_batchedUpdates;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  function renderElement(_ref) {
    var element = _ref.element,
      rootTag = _ref.rootTag,
      useFabric = _ref.useFabric,
      useConcurrentRoot = _ref.useConcurrentRoot;
    if (useFabric) {
      _$$_REQUIRE(_dependencyMap[0]).render(element, rootTag, null, useConcurrentRoot);
    } else {
      _$$_REQUIRE(_dependencyMap[1]).render(element, rootTag);
    }
  }
  function findHostInstance_DEPRECATED(componentOrHandle) {
    return _$$_REQUIRE(_dependencyMap[1]).findHostInstance_DEPRECATED(componentOrHandle);
  }
  function findNodeHandle(componentOrHandle) {
    return _$$_REQUIRE(_dependencyMap[1]).findNodeHandle(componentOrHandle);
  }
  function dispatchCommand(handle, command, args) {
    if (global.RN$Bridgeless === true) {
      // Note: this function has the same implementation in the legacy and new renderer.
      // However, evaluating the old renderer comes with some side effects.
      return _$$_REQUIRE(_dependencyMap[0]).dispatchCommand(handle, command, args);
    } else {
      return _$$_REQUIRE(_dependencyMap[1]).dispatchCommand(handle, command, args);
    }
  }
  function sendAccessibilityEvent(handle, eventType) {
    return _$$_REQUIRE(_dependencyMap[1]).sendAccessibilityEvent(handle, eventType);
  }

  /**
   * This method is used by AppRegistry to unmount a root when using the old
   * React Native renderer (Paper).
   */
  function unmountComponentAtNodeAndRemoveContainer(rootTag) {
    // $FlowExpectedError[incompatible-type] rootTag is an opaque type so we can't really cast it as is.
    var rootTagAsNumber = rootTag;
    _$$_REQUIRE(_dependencyMap[1]).unmountComponentAtNodeAndRemoveContainer(rootTagAsNumber);
  }
  function unstable_batchedUpdates(fn, bookkeeping) {
    // This doesn't actually do anything when batching updates for a Fabric root.
    return _$$_REQUIRE(_dependencyMap[1]).unstable_batchedUpdates(fn, bookkeeping);
  }
  function isProfilingRenderer() {
    return Boolean(false);
  }
},53,[54,239]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @noformat
   * 
   * @nolint
   * @generated SignedSource<<c1cc197c110e3a49a5e8f6bd5d32b23f>>
   */

  'use strict';

  var ReactFabric;
  {
    ReactFabric = _$$_REQUIRE(_dependencyMap[0]);
  }
  global.RN$stopSurface = ReactFabric.stopSurface;
  if (global.RN$Bridgeless !== true) {
    _$$_REQUIRE(_dependencyMap[1]).BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);
  }
  module.exports = ReactFabric;
},54,[55,209]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @nolint
   * @providesModule ReactFabric-prod
   * @preventMunge
   * @generated SignedSource<<fd9d50d45a1497af23e636e66fa0284b>>
   */

  "use strict";

  _$$_REQUIRE(_dependencyMap[0]);
  var React = _$$_REQUIRE(_dependencyMap[1]);
  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }
  var hasError = false,
    caughtError = null,
    hasRethrowError = false,
    rethrowError = null,
    reporter = {
      onError: function onError(error) {
        hasError = true;
        caughtError = error;
      }
    };
  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }
  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);
    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }
  var isArrayImpl = Array.isArray,
    getFiberCurrentPropsFromNode = null,
    getInstanceFromNode = null,
    getNodeFromInstance = null;
  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }
  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
      dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }
  var assign = Object.assign;
  function functionThatReturnsTrue() {
    return true;
  }
  function functionThatReturnsFalse() {
    return false;
  }
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for (var propName in dispatchConfig) dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  assign(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
        propName;
      for (propName in Interface) this[propName] = null;
      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });
  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  SyntheticEvent.extend = function (Interface) {
    function E() {}
    function Class() {
      return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };
  addEventPoolingTo(SyntheticEvent);
  function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }
  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }
  function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
  }
  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });
  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }
  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }
  var startDependencies = ["topTouchStart"],
    moveDependencies = ["topTouchMove"],
    endDependencies = ["topTouchCancel", "topTouchEnd"],
    touchBank = [],
    touchHistory = {
      touchBank: touchBank,
      numberActiveTouches: 0,
      indexOfSingleActiveTouch: -1,
      mostRecentTimeStamp: 0
    };
  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }
  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
  }
  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
      touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }
  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  var instrumentationCallback,
    ResponderTouchHistoryStore = {
      instrument: function instrument(callback) {
        instrumentationCallback = callback;
      },
      recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      },
      touchHistory: touchHistory
    };
  function accumulate(current, next) {
    if (null == next) throw Error("accumulate(...): Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function accumulateInto(current, next) {
    if (null == next) throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
      if (isArrayImpl(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }
    return isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }
  var responderInst = null,
    trackedTouchCount = 0;
  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }
  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  };
  function getParent(inst) {
    do inst = inst.return; while (inst && 5 !== inst.tag);
    return inst ? inst : null;
  }
  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) path.push(inst), inst = getParent(inst);
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
  }
  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }
  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
  var ResponderEventPlugin = {
      _getResponder: function _getResponder() {
        return responderInst;
      },
      eventTypes: eventTypes,
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
          var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
          if (responderInst) b: {
            var JSCompiler_temp = responderInst;
            for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent(tempA)) depthA++;
            tempA = 0;
            for (var tempB = targetInst; tempB; tempB = getParent(tempB)) tempA++;
            for (; 0 < depthA - tempA;) JSCompiler_temp = getParent(JSCompiler_temp), depthA--;
            for (; 0 < tempA - depthA;) targetInst = getParent(targetInst), tempA--;
            for (; depthA--;) {
              if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
              JSCompiler_temp = getParent(JSCompiler_temp);
              targetInst = getParent(targetInst);
            }
            JSCompiler_temp = null;
          } else JSCompiler_temp = targetInst;
          targetInst = JSCompiler_temp;
          JSCompiler_temp = targetInst === responderInst;
          shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
          shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
          JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle);
          b: {
            JSCompiler_temp = shouldSetEventType._dispatchListeners;
            targetInst = shouldSetEventType._dispatchInstances;
            if (isArrayImpl(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++) {
              if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                JSCompiler_temp = targetInst[depthA];
                break b;
              }
            } else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
              JSCompiler_temp = targetInst;
              break b;
            }
            JSCompiler_temp = null;
          }
          shouldSetEventType._dispatchInstances = null;
          shouldSetEventType._dispatchListeners = null;
          shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
          if (JSCompiler_temp && JSCompiler_temp !== responderInst) {
            if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), targetInst = true === executeDirectDispatch(shouldSetEventType), responderInst) {
              if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [shouldSetEventType, depthA]);
                changeResponder(JSCompiler_temp, targetInst);
              } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
          } else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
          if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && undefined !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);
            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = true;
                  break b;
                }
                depthA = getParent(depthA);
              }
              targetInst = false;
            }
            if (targetInst) {
              topLevelType = false;
              break a;
            }
          }
          topLevelType = true;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
      },
      GlobalResponderHandler: null,
      injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
      }
    },
    eventPluginOrder = null,
    namesToPlugins = {};
  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
        pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;
        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
            eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule, eventName$jscomp$0);
            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;
          if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }
  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }
  var plugins = [],
    eventNameDispatchConfigs = {},
    registrationNameModules = {};
  function getListeners(inst, registrationName, phase, dispatchToImperativeListeners) {
    var stateNode = inst.stateNode;
    if (null === stateNode) return null;
    inst = getFiberCurrentPropsFromNode(stateNode);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    if (!(dispatchToImperativeListeners && stateNode.canonical && stateNode.canonical._eventListeners)) return inst;
    var listeners = [];
    inst && listeners.push(inst);
    var requestedPhaseIsCapture = "captured" === phase,
      mangledImperativeRegistrationName = requestedPhaseIsCapture ? "rn:" + registrationName.replace(/Capture$/, "") : "rn:" + registrationName;
    stateNode.canonical._eventListeners[mangledImperativeRegistrationName] && 0 < stateNode.canonical._eventListeners[mangledImperativeRegistrationName].length && stateNode.canonical._eventListeners[mangledImperativeRegistrationName].forEach(function (listenerObj) {
      if ((null != listenerObj.options.capture && listenerObj.options.capture) === requestedPhaseIsCapture) {
        var listenerFnWrapper = function listenerFnWrapper(syntheticEvent) {
          var eventInst = new (_$$_REQUIRE(_dependencyMap[2]).CustomEvent)(mangledImperativeRegistrationName, {
            detail: syntheticEvent.nativeEvent
          });
          eventInst.isTrusted = true;
          eventInst.setSyntheticEvent(syntheticEvent);
          for (var _len = arguments.length, args = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++) args[_key - 1] = arguments[_key];
          listenerObj.listener.apply(listenerObj, [eventInst].concat(args));
        };
        listenerObj.options.once ? listeners.push(function () {
          stateNode.canonical.removeEventListener_unstable(mangledImperativeRegistrationName, listenerObj.listener, listenerObj.capture);
          listenerObj.invalidated || (listenerObj.invalidated = true, listenerObj.listener.apply(listenerObj, arguments));
        }) : listeners.push(listenerFnWrapper);
      }
    });
    return 0 === listeners.length ? null : 1 === listeners.length ? listeners[0] : listeners;
  }
  var customBubblingEventTypes = _$$_REQUIRE(_dependencyMap[2]).ReactNativeViewConfigRegistry.customBubblingEventTypes,
    customDirectEventTypes = _$$_REQUIRE(_dependencyMap[2]).ReactNativeViewConfigRegistry.customDirectEventTypes;
  function accumulateListenersAndInstances(inst, event, listeners) {
    var listenersLength = listeners ? isArrayImpl(listeners) ? listeners.length : 1 : 0;
    if (0 < listenersLength) if (event._dispatchListeners = accumulateInto(event._dispatchListeners, listeners), null == event._dispatchInstances && 1 === listenersLength) event._dispatchInstances = inst;else for (event._dispatchInstances = event._dispatchInstances || [], isArrayImpl(event._dispatchInstances) || (event._dispatchInstances = [event._dispatchInstances]), listeners = 0; listeners < listenersLength; listeners++) event._dispatchInstances.push(inst);
  }
  function accumulateDirectionalDispatches$1(inst, phase, event) {
    phase = getListeners(inst, event.dispatchConfig.phasedRegistrationNames[phase], phase, true);
    accumulateListenersAndInstances(inst, event, phase);
  }
  function traverseTwoPhase$1(inst, fn, arg, skipBubbling) {
    for (var path = []; inst;) {
      path.push(inst);
      do inst = inst.return; while (inst && 5 !== inst.tag);
      inst = inst ? inst : null;
    }
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);else for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event, false);
  }
  function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listeners = getListeners(inst, event.dispatchConfig.registrationName, "bubbled", false);
        accumulateListenersAndInstances(inst, event, listeners);
      }
    }
  }
  if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
  eventPluginOrder = Array.prototype.slice.call(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  recomputePluginOrdering();
  var injectedNamesToPlugins$jscomp$inline_223 = {
      ResponderEventPlugin: ResponderEventPlugin,
      ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (null == targetInst) return null;
          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
          if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
          if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(topLevelType._targetInst, accumulateDirectionalDispatches$1, topLevelType, true) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle$1);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle$1);else return null;
          return topLevelType;
        }
      }
    },
    isOrderingDirty$jscomp$inline_224 = false,
    pluginName$jscomp$inline_225;
  for (pluginName$jscomp$inline_225 in injectedNamesToPlugins$jscomp$inline_223) if (injectedNamesToPlugins$jscomp$inline_223.hasOwnProperty(pluginName$jscomp$inline_225)) {
    var pluginModule$jscomp$inline_226 = injectedNamesToPlugins$jscomp$inline_223[pluginName$jscomp$inline_225];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_225) || namesToPlugins[pluginName$jscomp$inline_225] !== pluginModule$jscomp$inline_226) {
      if (namesToPlugins[pluginName$jscomp$inline_225]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_225 + "`."));
      namesToPlugins[pluginName$jscomp$inline_225] = pluginModule$jscomp$inline_226;
      isOrderingDirty$jscomp$inline_224 = true;
    }
  }
  isOrderingDirty$jscomp$inline_224 && recomputePluginOrdering();
  function getInstanceFromInstance(instanceHandle) {
    return instanceHandle;
  }
  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(inst) {
    return inst.canonical.currentProps;
  };
  getInstanceFromNode = getInstanceFromInstance;
  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode.canonical;
    if (!inst._nativeTag) throw Error("All native instances should have a tag.");
    return inst;
  };
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      var fromOrTo = from || to;
      (fromOrTo = fromOrTo && fromOrTo.stateNode) && fromOrTo.canonical._internalInstanceHandle ? (from && nativeFabricUIManager.setIsJSResponder(from.stateNode.node, false, blockNativeResponder || false), to && nativeFabricUIManager.setIsJSResponder(to.stateNode.node, true, blockNativeResponder || false)) : null !== to ? _$$_REQUIRE(_dependencyMap[2]).UIManager.setJSResponder(to.stateNode.canonical._nativeTag, blockNativeResponder) : _$$_REQUIRE(_dependencyMap[2]).UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    REACT_ELEMENT_TYPE = Symbol.for("react.element"),
    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
    REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
    REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
    REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
    REACT_MEMO_TYPE = Symbol.for("react.memo"),
    REACT_LAZY_TYPE = Symbol.for("react.lazy");
  Symbol.for("react.scope");
  Symbol.for("react.debug_trace_mode");
  var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
  Symbol.for("react.legacy_hidden");
  Symbol.for("react.cache");
  Symbol.for("react.tracing_marker");
  var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";
      case REACT_PORTAL_TYPE:
        return "Portal";
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";
      case REACT_SUSPENSE_TYPE:
        return "Suspense";
      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }
    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Consumer";
      case REACT_PROVIDER_TYPE:
        return (type._context.displayName || "Context") + ".Provider";
      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        type = type.displayName;
        type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
        return type;
      case REACT_MEMO_TYPE:
        return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
      case REACT_LAZY_TYPE:
        innerType = type._payload;
        type = type._init;
        try {
          return getComponentNameFromType(type(innerType));
        } catch (x) {}
    }
    return null;
  }
  function getComponentNameFromFiber(fiber) {
    var type = fiber.type;
    switch (fiber.tag) {
      case 24:
        return "Cache";
      case 9:
        return (type.displayName || "Context") + ".Consumer";
      case 10:
        return (type._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return type;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return getComponentNameFromType(type);
      case 8:
        return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" === typeof type) return type.displayName || type.name || null;
        if ("string" === typeof type) return type;
    }
    return null;
  }
  function getNearestMountedFiber(fiber) {
    var node = fiber,
      nearestMounted = fiber;
    if (fiber.alternate) for (; node.return;) node = node.return;else {
      fiber = node;
      do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return; while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }
  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
  }
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error("Unable to find node on an unmounted component.");
      return alternate !== fiber ? null : fiber;
    }
    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;
      if (null === parentB) {
        b = parentA.return;
        if (null !== b) {
          a = b;
          continue;
        }
        break;
      }
      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }
        throw Error("Unable to find node on an unmounted component.");
      }
      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, child$0 = parentA.child; child$0;) {
          if (child$0 === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (child$0 === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          child$0 = child$0.sibling;
        }
        if (!didFindChild) {
          for (child$0 = parentB.child; child$0;) {
            if (child$0 === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (child$0 === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            child$0 = child$0.sibling;
          }
          if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }
  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    return null !== parent ? findCurrentHostFiberImpl(parent) : null;
  }
  function findCurrentHostFiberImpl(node) {
    if (5 === node.tag || 6 === node.tag) return node;
    for (node = node.child; null !== node;) {
      var match = findCurrentHostFiberImpl(node);
      if (null !== match) return match;
      node = node.sibling;
    }
    return null;
  }
  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }
  var emptyObject = {},
    removedKeys = null,
    removedKeyCount = 0,
    deepDifferOptions = {
      unsafelyIgnoreFunctions: true
    };
  function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? true : _$$_REQUIRE(_dependencyMap[2]).deepDiffer(prevProp, nextProp, deepDifferOptions);
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);else if (node && 0 < removedKeyCount) for (i in removedKeys) if (removedKeys[i]) {
      var nextProp = node[i];
      if (undefined !== nextProp) {
        var attributeConfig = validAttributes[i];
        if (attributeConfig) {
          "function" === typeof nextProp && (nextProp = true);
          "undefined" === typeof nextProp && (nextProp = null);
          if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
          removedKeys[i] = false;
          removedKeyCount--;
        }
      }
    }
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
        i;
      for (i = 0; i < minLength; i++) updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      for (; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      for (; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, _$$_REQUIRE(_dependencyMap[2]).flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, _$$_REQUIRE(_dependencyMap[2]).flattenStyle(nextProp), validAttributes);
  }
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for (var i = 0; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
  }
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for (var i = 0; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
  }
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for (propKey in nextProps) if (attributeConfig = validAttributes[propKey]) {
      var prevProp = prevProps[propKey];
      var nextProp = nextProps[propKey];
      "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
      "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
      removedKeys && (removedKeys[propKey] = false);
      if (updatePayload && undefined !== updatePayload[propKey]) {
        if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
          if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
      } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
        if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
      } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for (var propKey$2 in prevProps) undefined === nextProps[propKey$2] && (!(attributeConfig = validAttributes[propKey$2]) || updatePayload && undefined !== updatePayload[propKey$2] || (prevProp = prevProps[propKey$2], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$2] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$2] || (removedKeys[propKey$2] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
  }
  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }
  var isInsideEventHandler = false;
  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;
    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = false;
    }
  }
  var eventQueue = null;
  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
        dispatchInstances = e._dispatchInstances;
      if (isArrayImpl(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }
  function dispatchEvent(target, topLevelType, nativeEvent) {
    var eventTarget = null;
    if (null != target) {
      var stateNode = target.stateNode;
      null != stateNode && (eventTarget = stateNode.canonical);
    }
    batchedUpdates(function () {
      var event = {
        eventName: topLevelType,
        nativeEvent: nativeEvent
      };
      _$$_REQUIRE(_dependencyMap[2]).RawEventEmitter.emit(topLevelType, event);
      _$$_REQUIRE(_dependencyMap[2]).RawEventEmitter.emit("*", event);
      event = eventTarget;
      for (var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++) {
        var possiblePlugin = legacyPlugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, event)) && (events = accumulateInto(events, possiblePlugin));
      }
      event = events;
      null !== event && (eventQueue = accumulateInto(eventQueue, event));
      event = eventQueue;
      eventQueue = null;
      if (event) {
        forEachAccumulated(event, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        if (hasRethrowError) throw event = rethrowError, hasRethrowError = false, rethrowError = null, event;
      }
    });
  }
  var rendererID = null,
    injectedHook = null;
  function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
      injectedHook.onCommitFiberRoot(rendererID, root, undefined, 128 === (root.current.flags & 128));
    } catch (err) {}
  }
  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
    log = Math.log,
    LN2 = Math.LN2;
  function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
  }
  var nextTransitionLane = 64,
    nextRetryLane = 4194304;
  function getHighestPriorityLanes(lanes) {
    switch (lanes & -lanes) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return lanes & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return lanes & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return lanes;
    }
  }
  function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0,
      suspendedLanes = root.suspendedLanes,
      pingedLanes = root.pingedLanes,
      nonIdlePendingLanes = pendingLanes & 268435455;
    if (0 !== nonIdlePendingLanes) {
      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
      0 !== nonIdleUnblockedLanes ? nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes)));
    } else nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
    if (0 === nextLanes) return 0;
    if (0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, pingedLanes = wipLanes & -wipLanes, suspendedLanes >= pingedLanes || 16 === suspendedLanes && 0 !== (pingedLanes & 4194240))) return wipLanes;
    0 !== (nextLanes & 4) && (nextLanes |= pendingLanes & 16);
    wipLanes = root.entangledLanes;
    if (0 !== wipLanes) for (root = root.entanglements, wipLanes &= nextLanes; 0 < wipLanes;) pendingLanes = 31 - clz32(wipLanes), suspendedLanes = 1 << pendingLanes, nextLanes |= root[pendingLanes], wipLanes &= ~suspendedLanes;
    return nextLanes;
  }
  function computeExpirationTime(lane, currentTime) {
    switch (lane) {
      case 1:
      case 2:
      case 4:
        return currentTime + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return currentTime + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function getLanesToRetrySynchronouslyOnError(root) {
    root = root.pendingLanes & -1073741825;
    return 0 !== root ? root : root & 1073741824 ? 1073741824 : 0;
  }
  function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194240) && (nextTransitionLane = 64);
    return lane;
  }
  function createLaneMap(initial) {
    for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
    return laneMap;
  }
  function markRootUpdated(root, updateLane, eventTime) {
    root.pendingLanes |= updateLane;
    536870912 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0);
    root = root.eventTimes;
    updateLane = 31 - clz32(updateLane);
    root[updateLane] = eventTime;
  }
  function markRootFinished(root, remainingLanes) {
    var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.mutableReadLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    remainingLanes = root.entanglements;
    var eventTimes = root.eventTimes;
    for (root = root.expirationTimes; 0 < noLongerPendingLanes;) {
      var index$7 = 31 - clz32(noLongerPendingLanes),
        lane = 1 << index$7;
      remainingLanes[index$7] = 0;
      eventTimes[index$7] = -1;
      root[index$7] = -1;
      noLongerPendingLanes &= ~lane;
    }
  }
  function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for (root = root.entanglements; rootEntangledLanes;) {
      var index$8 = 31 - clz32(rootEntangledLanes),
        lane = 1 << index$8;
      lane & entangledLanes | root[index$8] & entangledLanes && (root[index$8] |= entangledLanes);
      rootEntangledLanes &= ~lane;
    }
  }
  var currentUpdatePriority = 0;
  function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 1 < lanes ? 4 < lanes ? 0 !== (lanes & 268435455) ? 16 : 536870912 : 4 : 1;
  }
  function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
  }
  var _nativeFabricUIManage = nativeFabricUIManager,
    createNode = _nativeFabricUIManage.createNode,
    cloneNode = _nativeFabricUIManage.cloneNode,
    cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,
    cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,
    cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,
    createChildNodeSet = _nativeFabricUIManage.createChildSet,
    appendChildNode = _nativeFabricUIManage.appendChild,
    appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,
    completeRoot = _nativeFabricUIManage.completeRoot,
    registerEventHandler = _nativeFabricUIManage.registerEventHandler,
    fabricMeasure = _nativeFabricUIManage.measure,
    fabricMeasureInWindow = _nativeFabricUIManage.measureInWindow,
    fabricMeasureLayout = _nativeFabricUIManage.measureLayout,
    FabricDiscretePriority = _nativeFabricUIManage.unstable_DiscreteEventPriority,
    fabricGetCurrentEventPriority = _nativeFabricUIManage.unstable_getCurrentEventPriority,
    _setNativeProps = _nativeFabricUIManage.setNativeProps,
    getViewConfigForType = _$$_REQUIRE(_dependencyMap[2]).ReactNativeViewConfigRegistry.get,
    nextReactTag = 2;
  registerEventHandler && registerEventHandler(dispatchEvent);
  var ReactFabricHostComponent = function () {
    function ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle) {
      this._nativeTag = tag;
      this.viewConfig = viewConfig;
      this.currentProps = props;
      this._internalInstanceHandle = internalInstanceHandle;
    }
    var _proto = ReactFabricHostComponent.prototype;
    _proto.blur = function () {
      _$$_REQUIRE(_dependencyMap[2]).TextInputState.blurTextInput(this);
    };
    _proto.focus = function () {
      _$$_REQUIRE(_dependencyMap[2]).TextInputState.focusTextInput(this);
    };
    _proto.measure = function (callback) {
      var stateNode = this._internalInstanceHandle.stateNode;
      null != stateNode && fabricMeasure(stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };
    _proto.measureInWindow = function (callback) {
      var stateNode = this._internalInstanceHandle.stateNode;
      null != stateNode && fabricMeasureInWindow(stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };
    _proto.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      if ("number" !== typeof relativeToNativeNode && relativeToNativeNode instanceof ReactFabricHostComponent) {
        var toStateNode = this._internalInstanceHandle.stateNode;
        relativeToNativeNode = relativeToNativeNode._internalInstanceHandle.stateNode;
        null != toStateNode && null != relativeToNativeNode && fabricMeasureLayout(toStateNode.node, relativeToNativeNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
      }
    };
    _proto.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      var stateNode = this._internalInstanceHandle.stateNode;
      null != stateNode && null != nativeProps && _setNativeProps(stateNode.node, nativeProps);
    };
    _proto.addEventListener_unstable = function (eventType, listener, options) {
      if ("string" !== typeof eventType) throw Error("addEventListener_unstable eventType must be a string");
      if ("function" !== typeof listener) throw Error("addEventListener_unstable listener must be a function");
      var optionsObj = "object" === typeof options && null !== options ? options : {};
      options = ("boolean" === typeof options ? options : optionsObj.capture) || false;
      var once = optionsObj.once || false;
      optionsObj = optionsObj.passive || false;
      var eventListeners = this._eventListeners || {};
      null == this._eventListeners && (this._eventListeners = eventListeners);
      var namedEventListeners = eventListeners[eventType] || [];
      null == eventListeners[eventType] && (eventListeners[eventType] = namedEventListeners);
      namedEventListeners.push({
        listener: listener,
        invalidated: false,
        options: {
          capture: options,
          once: once,
          passive: optionsObj,
          signal: null
        }
      });
    };
    _proto.removeEventListener_unstable = function (eventType, listener, options) {
      var optionsObj = "object" === typeof options && null !== options ? options : {},
        capture = ("boolean" === typeof options ? options : optionsObj.capture) || false;
      (options = this._eventListeners) && (optionsObj = options[eventType]) && (options[eventType] = optionsObj.filter(function (listenerObj) {
        return !(listenerObj.listener === listener && listenerObj.options.capture === capture);
      }));
    };
    return ReactFabricHostComponent;
  }();
  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }
  var scheduleTimeout = setTimeout,
    cancelTimeout = clearTimeout;
  function cloneHiddenInstance(instance) {
    var node = instance.node;
    var JSCompiler_inline_result = diffProperties(null, emptyObject, {
      style: {
        display: "none"
      }
    }, instance.canonical.viewConfig.validAttributes);
    return {
      node: cloneNodeWithNewProps(node, JSCompiler_inline_result),
      canonical: instance.canonical
    };
  }
  function describeComponentFrame(name, source, ownerName) {
    source = "";
    ownerName && (source = " (created by " + ownerName + ")");
    return "\n    in " + (name || "Unknown") + source;
  }
  function describeFunctionComponentFrame(fn, source) {
    return fn ? describeComponentFrame(fn.displayName || fn.name || null, source, null) : "";
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty,
    valueStack = [],
    index = -1;
  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }
  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }
  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }
  var emptyContextObject = {},
    contextStackCursor = createCursor(emptyContextObject),
    didPerformWorkStackCursor = createCursor(false),
    previousContext = emptyContextObject;
  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
      key;
    for (key in contextTypes) context[key] = unmaskedContext[key];
    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }
  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }
  function popContext() {
    pop(didPerformWorkStackCursor);
    pop(contextStackCursor);
  }
  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context);
    push(didPerformWorkStackCursor, didChange);
  }
  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    type = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();
    for (var contextKey in instance) if (!(contextKey in type)) throw Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
    return assign({}, parentContext, instance);
  }
  function pushContextProvider(workInProgress) {
    workInProgress = (workInProgress = workInProgress.stateNode) && workInProgress.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);
    return true;
  }
  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (workInProgress = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = workInProgress, pop(didPerformWorkStackCursor), pop(contextStackCursor), push(contextStackCursor, workInProgress)) : pop(didPerformWorkStackCursor);
    push(didPerformWorkStackCursor, didChange);
  }
  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = "function" === typeof Object.is ? Object.is : is,
    syncQueue = null,
    includesLegacySyncCallbacks = false,
    isFlushingSyncQueue = false;
  function flushSyncCallbacks() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0,
        previousUpdatePriority = currentUpdatePriority;
      try {
        var queue = syncQueue;
        for (currentUpdatePriority = 1; i < queue.length; i++) {
          var callback = queue[i];
          do callback = callback(true); while (null !== callback);
        }
        syncQueue = null;
        includesLegacySyncCallbacks = false;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), _$$_REQUIRE(_dependencyMap[3]).unstable_scheduleCallback(_$$_REQUIRE(_dependencyMap[3]).unstable_ImmediatePriority, flushSyncCallbacks), error;
      } finally {
        currentUpdatePriority = previousUpdatePriority, isFlushingSyncQueue = false;
      }
    }
    return null;
  }
  var forkStack = [],
    forkStackIndex = 0,
    treeForkProvider = null,
    idStack = [],
    idStackIndex = 0,
    treeContextProvider = null;
  function popTreeContext(workInProgress) {
    for (; workInProgress === treeForkProvider;) treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, --forkStackIndex, forkStack[forkStackIndex] = null;
    for (; workInProgress === treeContextProvider;) treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, --idStackIndex, idStack[idStackIndex] = null, --idStackIndex, idStack[idStackIndex] = null;
  }
  var hydrationErrors = null,
    ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
      keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for (keysB = 0; keysB < keysA.length; keysB++) {
      var currentKey = keysA[keysB];
      if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
    }
    return true;
  }
  function describeFiber(fiber) {
    switch (fiber.tag) {
      case 5:
        return describeComponentFrame(fiber.type, null, null);
      case 16:
        return describeComponentFrame("Lazy", null, null);
      case 13:
        return describeComponentFrame("Suspense", null, null);
      case 19:
        return describeComponentFrame("SuspenseList", null, null);
      case 0:
      case 2:
      case 15:
        return describeFunctionComponentFrame(fiber.type, null);
      case 11:
        return describeFunctionComponentFrame(fiber.type.render, null);
      case 1:
        return fiber = describeFunctionComponentFrame(fiber.type, null), fiber;
      default:
        return "";
    }
  }
  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = assign({}, baseProps);
      Component = Component.defaultProps;
      for (var propName in Component) undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      return baseProps;
    }
    return baseProps;
  }
  var valueCursor = createCursor(null),
    currentlyRenderingFiber = null,
    lastContextDependency = null,
    lastFullyObservedContext = null;
  function resetContextDependencies() {
    lastFullyObservedContext = lastContextDependency = currentlyRenderingFiber = null;
  }
  function popProvider(context) {
    var currentValue = valueCursor.current;
    pop(valueCursor);
    context._currentValue2 = currentValue;
  }
  function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
      if (parent === propagationRoot) break;
      parent = parent.return;
    }
  }
  function prepareToReadContext(workInProgress, renderLanes) {
    currentlyRenderingFiber = workInProgress;
    lastFullyObservedContext = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (0 !== (workInProgress.lanes & renderLanes) && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }
  function readContext(context) {
    var value = context._currentValue2;
    if (lastFullyObservedContext !== context) if (context = {
      context: context,
      memoizedValue: value,
      next: null
    }, null === lastContextDependency) {
      if (null === currentlyRenderingFiber) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      lastContextDependency = context;
      currentlyRenderingFiber.dependencies = {
        lanes: 0,
        firstContext: context
      };
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
  }
  var concurrentQueues = null;
  function pushConcurrentUpdateQueue(queue) {
    null === concurrentQueues ? concurrentQueues = [queue] : concurrentQueues.push(queue);
  }
  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    var interleaved = queue.interleaved;
    null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
    queue.interleaved = update;
    return markUpdateLaneFromFiberToRoot(fiber, lane);
  }
  function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    alternate = sourceFiber;
    for (sourceFiber = sourceFiber.return; null !== sourceFiber;) sourceFiber.childLanes |= lane, alternate = sourceFiber.alternate, null !== alternate && (alternate.childLanes |= lane), alternate = sourceFiber, sourceFiber = sourceFiber.return;
    return 3 === alternate.tag ? alternate.stateNode : null;
  }
  var hasForceUpdate = false;
  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null,
        interleaved: null,
        lanes: 0
      },
      effects: null
    };
  }
  function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
      baseState: current.baseState,
      firstBaseUpdate: current.firstBaseUpdate,
      lastBaseUpdate: current.lastBaseUpdate,
      shared: current.shared,
      effects: current.effects
    });
  }
  function createUpdate(eventTime, lane) {
    return {
      eventTime: eventTime,
      lane: lane,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
  }
  function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
      var pending = updateQueue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      updateQueue.pending = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    pending = updateQueue.interleaved;
    null === pending ? (update.next = update, pushConcurrentUpdateQueue(updateQueue)) : (update.next = pending.next, pending.next = update);
    updateQueue.interleaved = update;
    return markUpdateLaneFromFiberToRoot(fiber, lane);
  }
  function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194240))) {
      var queueLanes = fiber.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      fiber.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue,
      current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
      var newFirst = null,
        newLast = null;
      queue = queue.firstBaseUpdate;
      if (null !== queue) {
        do {
          var clone = {
            eventTime: queue.eventTime,
            lane: queue.lane,
            tag: queue.tag,
            payload: queue.payload,
            callback: queue.callback,
            next: null
          };
          null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
          queue = queue.next;
        } while (null !== queue);
        null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
      } else newFirst = newLast = capturedUpdate;
      queue = {
        baseState: current.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: current.shared,
        effects: current.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
  }
  function processUpdateQueue(workInProgress$jscomp$0, props, instance, renderLanes) {
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = false;
    var firstBaseUpdate = queue.firstBaseUpdate,
      lastBaseUpdate = queue.lastBaseUpdate,
      pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
      queue.shared.pending = null;
      var lastPendingUpdate = pendingQueue,
        firstPendingUpdate = lastPendingUpdate.next;
      lastPendingUpdate.next = null;
      null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
      lastBaseUpdate = lastPendingUpdate;
      var current = workInProgress$jscomp$0.alternate;
      null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
      var newState = queue.baseState;
      lastBaseUpdate = 0;
      current = firstPendingUpdate = lastPendingUpdate = null;
      pendingQueue = firstBaseUpdate;
      do {
        var updateLane = pendingQueue.lane,
          updateEventTime = pendingQueue.eventTime;
        if ((renderLanes & updateLane) === updateLane) {
          null !== current && (current = current.next = {
            eventTime: updateEventTime,
            lane: 0,
            tag: pendingQueue.tag,
            payload: pendingQueue.payload,
            callback: pendingQueue.callback,
            next: null
          });
          a: {
            var workInProgress = workInProgress$jscomp$0,
              update = pendingQueue;
            updateLane = props;
            updateEventTime = instance;
            switch (update.tag) {
              case 1:
                workInProgress = update.payload;
                if ("function" === typeof workInProgress) {
                  newState = workInProgress.call(updateEventTime, newState, updateLane);
                  break a;
                }
                newState = workInProgress;
                break a;
              case 3:
                workInProgress.flags = workInProgress.flags & -65537 | 128;
              case 0:
                workInProgress = update.payload;
                updateLane = "function" === typeof workInProgress ? workInProgress.call(updateEventTime, newState, updateLane) : workInProgress;
                if (null === updateLane || undefined === updateLane) break a;
                newState = assign({}, newState, updateLane);
                break a;
              case 2:
                hasForceUpdate = true;
            }
          }
          null !== pendingQueue.callback && 0 !== pendingQueue.lane && (workInProgress$jscomp$0.flags |= 64, updateLane = queue.effects, null === updateLane ? queue.effects = [pendingQueue] : updateLane.push(pendingQueue));
        } else updateEventTime = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: pendingQueue.callback,
          next: null
        }, null === current ? (firstPendingUpdate = current = updateEventTime, lastPendingUpdate = newState) : current = current.next = updateEventTime, lastBaseUpdate |= updateLane;
        pendingQueue = pendingQueue.next;
        if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;else updateLane = pendingQueue, pendingQueue = updateLane.next, updateLane.next = null, queue.lastBaseUpdate = updateLane, queue.shared.pending = null;
      } while (1);
      null === current && (lastPendingUpdate = newState);
      queue.baseState = lastPendingUpdate;
      queue.firstBaseUpdate = firstPendingUpdate;
      queue.lastBaseUpdate = current;
      props = queue.shared.interleaved;
      if (null !== props) {
        queue = props;
        do lastBaseUpdate |= queue.lane, queue = queue.next; while (queue !== props);
      } else null === firstBaseUpdate && (queue.shared.lanes = 0);
      workInProgressRootSkippedLanes |= lastBaseUpdate;
      workInProgress$jscomp$0.lanes = lastBaseUpdate;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }
  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    finishedWork = finishedQueue.effects;
    finishedQueue.effects = null;
    if (null !== finishedWork) for (finishedQueue = 0; finishedQueue < finishedWork.length; finishedQueue++) {
      var effect = finishedWork[finishedQueue],
        callback = effect.callback;
      if (null !== callback) {
        effect.callback = null;
        if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(instance);
      }
    }
  }
  var emptyRefsObject = new React.Component().refs;
  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
  }
  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      null !== callback && (scheduleUpdateOnFiber(callback, inst, lane, eventTime), entangleTransitions(callback, inst, lane));
    }
  };
  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }
  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
      unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }
  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
  function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4);
  }
  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;
    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        if (element) {
          if (1 !== element.tag) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://react.dev/link/strict-mode-string-ref");
          var inst = element.stateNode;
        }
        if (!inst) throw Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue.");
        var resolvedInst = inst,
          stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && "function" === typeof current.ref && current.ref._stringRef === stringRef) return current.ref;
        current = function current(value) {
          var refs = resolvedInst.refs;
          refs === emptyRefsObject && (refs = resolvedInst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };
        current._stringRef = stringRef;
        return current;
      }
      if ("string" !== typeof returnFiber) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      if (!element._owner) throw Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://react.dev/link/refs-must-have-owner for more information.");
    }
    return returnFiber;
  }
  function throwOnInvalidObjectType(returnFiber, newChild) {
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
  }
  function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
  }
  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var deletions = returnFiber.deletions;
        null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
      }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;
      for (; null !== currentFirstChild;) deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return returnFiber;
    }
    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 2, lastPlacedIndex) : newIndex;
      newFiber.flags |= 2;
      return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 2);
      return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
      var elementType = element.type;
      if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
      if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return lanes = useFiber(current, element.props), lanes.ref = coerceRef(returnFiber, current, element), lanes.return = returnFiber, lanes;
      lanes = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
      lanes.ref = coerceRef(returnFiber, current, element);
      lanes.return = returnFiber;
      return lanes;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
      if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }
    function createChild(returnFiber, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, null, newChild), lanes.return = returnFiber, lanes;
          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            return createChild(returnFiber, init(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_LAZY_TYPE:
            return key = newChild._init, updateSlot(returnFiber, oldFiber, key(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            return updateFromMap(existingChildren, returnFiber, newIdx, init(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw Error("An iterable object provided no iterator.");
      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;
      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        return iteratorFn;
      }
      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            a: {
              for (var key = newChild.key, child = currentFirstChild; null !== child;) {
                if (child.key === key) {
                  key = newChild.type;
                  if (key === REACT_FRAGMENT_TYPE) {
                    if (7 === child.tag) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      currentFirstChild = useFiber(child, newChild.props.children);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }
                  } else if (child.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    currentFirstChild = useFiber(child, newChild.props);
                    currentFirstChild.ref = coerceRef(returnFiber, child, newChild);
                    currentFirstChild.return = returnFiber;
                    returnFiber = currentFirstChild;
                    break a;
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
              }
              newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes);
            }
            return placeSingleChild(returnFiber);
          case REACT_PORTAL_TYPE:
            a: {
              for (child = newChild.key; null !== currentFirstChild;) {
                if (currentFirstChild.key === child) {
                  if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    currentFirstChild = useFiber(currentFirstChild, newChild.children || []);
                    currentFirstChild.return = returnFiber;
                    returnFiber = currentFirstChild;
                    break a;
                  } else {
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  }
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              currentFirstChild.return = returnFiber;
              returnFiber = currentFirstChild;
            }
            return placeSingleChild(returnFiber);
          case REACT_LAZY_TYPE:
            return child = newChild._init, reconcileChildFibers(returnFiber, currentFirstChild, child(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
        if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, lanes), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
  }
  var reconcileChildFibers = ChildReconciler(true),
    mountChildFibers = ChildReconciler(false),
    NO_CONTEXT = {},
    contextStackCursor$1 = createCursor(NO_CONTEXT),
    contextFiberStackCursor = createCursor(NO_CONTEXT),
    rootInstanceStackCursor = createCursor(NO_CONTEXT);
  function requiredContext(c) {
    if (c === NO_CONTEXT) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }
  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor$1, NO_CONTEXT);
    pop(contextStackCursor$1);
    push(contextStackCursor$1, {
      isInAParentText: false
    });
  }
  function popHostContainer() {
    pop(contextStackCursor$1);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }
  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var JSCompiler_inline_result = fiber.type;
    JSCompiler_inline_result = "AndroidTextInput" === JSCompiler_inline_result || "RCTMultilineTextInputView" === JSCompiler_inline_result || "RCTSinglelineTextInputView" === JSCompiler_inline_result || "RCTText" === JSCompiler_inline_result || "RCTVirtualText" === JSCompiler_inline_result;
    JSCompiler_inline_result = context.isInAParentText !== JSCompiler_inline_result ? {
      isInAParentText: JSCompiler_inline_result
    } : context;
    context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor$1, JSCompiler_inline_result));
  }
  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1), pop(contextFiberStackCursor));
  }
  var suspenseStackCursor = createCursor(0);
  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.flags & 128)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === row) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  var workInProgressSources = [];
  function resetWorkInProgressVersions() {
    for (var i = 0; i < workInProgressSources.length; i++) workInProgressSources[i]._workInProgressVersionSecondary = null;
    workInProgressSources.length = 0;
  }
  var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,
    renderLanes = 0,
    currentlyRenderingFiber$1 = null,
    currentHook = null,
    workInProgressHook = null,
    didScheduleRenderPhaseUpdate = false,
    didScheduleRenderPhaseUpdateDuringThisPass = false,
    globalClientIdCounter = 0;
  function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
  }
  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;
    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) if (!objectIs(nextDeps[i], prevDeps[i])) return false;
    return true;
  }
  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactCurrentDispatcher$1.current = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    current = Component(props, secondArg);
    if (didScheduleRenderPhaseUpdateDuringThisPass) {
      nextRenderLanes = 0;
      do {
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        if (25 <= nextRenderLanes) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        nextRenderLanes += 1;
        workInProgressHook = currentHook = null;
        workInProgress.updateQueue = null;
        ReactCurrentDispatcher$1.current = HooksDispatcherOnRerender;
        current = Component(props, secondArg);
      } while (didScheduleRenderPhaseUpdateDuringThisPass);
    }
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    workInProgress = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = false;
    if (workInProgress) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    return current;
  }
  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }
  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;else {
      if (null === nextCurrentHook) throw Error("Rendered more hooks than during the previous render.");
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }
  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }
  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var current = currentHook,
      baseQueue = current.baseQueue,
      pendingQueue = queue.pending;
    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }
      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }
    if (null !== baseQueue) {
      pendingQueue = baseQueue.next;
      current = current.baseState;
      var newBaseQueueFirst = baseFirst = null,
        newBaseQueueLast = null,
        update = pendingQueue;
      do {
        var updateLane = update.lane;
        if ((renderLanes & updateLane) === updateLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
          lane: 0,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        }), current = update.hasEagerState ? update.eagerState : reducer(current, update.action);else {
          var clone = {
            lane: updateLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          };
          null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = clone, baseFirst = current) : newBaseQueueLast = newBaseQueueLast.next = clone;
          currentlyRenderingFiber$1.lanes |= updateLane;
          workInProgressRootSkippedLanes |= updateLane;
        }
        update = update.next;
      } while (null !== update && update !== pendingQueue);
      null === newBaseQueueLast ? baseFirst = current : newBaseQueueLast.next = newBaseQueueFirst;
      objectIs(current, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = current;
      hook.baseState = baseFirst;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = current;
    }
    reducer = queue.interleaved;
    if (null !== reducer) {
      baseQueue = reducer;
      do pendingQueue = baseQueue.lane, currentlyRenderingFiber$1.lanes |= pendingQueue, workInProgressRootSkippedLanes |= pendingQueue, baseQueue = baseQueue.next; while (baseQueue !== reducer);
    } else null === baseQueue && (queue.lanes = 0);
    return [hook.memoizedState, queue.dispatch];
  }
  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch,
      lastRenderPhaseUpdate = queue.pending,
      newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      do newState = reducer(newState, update.action), update = update.next; while (update !== lastRenderPhaseUpdate);
      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }
    return [newState, dispatch];
  }
  function updateMutableSource() {}
  function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1,
      hook = updateWorkInProgressHook(),
      nextSnapshot = getSnapshot(),
      snapshotChanged = !objectIs(hook.memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = true);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [subscribe]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
      fiber.flags |= 2048;
      pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), undefined, null);
      if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      0 !== (renderLanes & 30) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
  }
  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
      getSnapshot: getSnapshot,
      value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = {
      lastEffect: null,
      stores: null
    }, currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
  }
  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  }
  function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function () {
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
  }
  function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
      var nextValue = latestGetSnapshot();
      return !objectIs(inst, nextValue);
    } catch (error) {
      return true;
    }
  }
  function forceStoreRerender(fiber) {
    var root = markUpdateLaneFromFiberToRoot(fiber, 1);
    null !== root && scheduleUpdateOnFiber(root, fiber, 1, -1);
  }
  function mountState(initialState) {
    var hook = mountWorkInProgressHook();
    "function" === typeof initialState && (initialState = initialState());
    hook.memoizedState = hook.baseState = initialState;
    initialState = {
      pending: null,
      interleaved: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    hook.queue = initialState;
    initialState = initialState.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, initialState);
    return [hook.memoizedState, initialState];
  }
  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create ? (create = {
      lastEffect: null,
      stores: null
    }, currentlyRenderingFiber$1.updateQueue = create, create.lastEffect = tag.next = tag) : (destroy = create.lastEffect, null === destroy ? create.lastEffect = tag.next = tag : (deps = destroy.next, destroy.next = tag, tag.next = deps, create.lastEffect = tag));
    return tag;
  }
  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }
  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, undefined, undefined === deps ? null : deps);
  }
  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;
    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;
      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        hook.memoizedState = pushEffect(hookFlags, create, destroy, deps);
        return;
      }
    }
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, destroy, deps);
  }
  function mountEffect(create, deps) {
    return mountEffectImpl(8390656, 8, create, deps);
  }
  function updateEffect(create, deps) {
    return updateEffectImpl(2048, 8, create, deps);
  }
  function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }
  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
  }
  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }
  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
    return updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
  }
  function mountDebugValue() {}
  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }
  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    nextCreate = nextCreate();
    hook.memoizedState = [nextCreate, deps];
    return nextCreate;
  }
  function updateDeferredValueImpl(hook, prevValue, value) {
    if (0 === (renderLanes & 21)) return hook.baseState && (hook.baseState = false, didReceiveUpdate = true), hook.memoizedState = value;
    objectIs(value, prevValue) || (value = claimNextTransitionLane(), currentlyRenderingFiber$1.lanes |= value, workInProgressRootSkippedLanes |= value, hook.baseState = true);
    return prevValue;
  }
  function startTransition(setPending, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 4 > previousPriority ? previousPriority : 4;
    setPending(true);
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = {};
    try {
      setPending(false), callback();
    } finally {
      currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }
  function updateId() {
    return updateWorkInProgressHook().memoizedState;
  }
  function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
      lane: lane,
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, action);else if (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(action, fiber, lane, eventTime);
      entangleTransitionUpdate(action, queue, lane);
    }
  }
  function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber),
      update = {
        lane: lane,
        action: action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);else {
      var alternate = fiber.alternate;
      if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
          eagerState = alternate(currentState, action);
        update.hasEagerState = true;
        update.eagerState = eagerState;
        if (objectIs(eagerState, currentState)) {
          var interleaved = queue.interleaved;
          null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
          queue.interleaved = update;
          return;
        }
      } catch (error) {} finally {}
      action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
      null !== action && (update = requestEventTime(), scheduleUpdateOnFiber(action, fiber, lane, update), entangleTransitionUpdate(action, queue, lane));
    }
  }
  function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
  }
  function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
  }
  function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194240)) {
      var queueLanes = queue.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      queue.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnMount = {
      readContext: readContext,
      useCallback: function useCallback(callback, deps) {
        mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
        return callback;
      },
      useContext: readContext,
      useEffect: mountEffect,
      useImperativeHandle: function useImperativeHandle(ref, create, deps) {
        deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
        return mountEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
      },
      useLayoutEffect: function useLayoutEffect(create, deps) {
        return mountEffectImpl(4, 4, create, deps);
      },
      useInsertionEffect: function useInsertionEffect(create, deps) {
        return mountEffectImpl(4, 2, create, deps);
      },
      useMemo: function useMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = undefined === deps ? null : deps;
        nextCreate = nextCreate();
        hook.memoizedState = [nextCreate, deps];
        return nextCreate;
      },
      useReducer: function useReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        initialArg = undefined !== init ? init(initialArg) : initialArg;
        hook.memoizedState = hook.baseState = initialArg;
        reducer = {
          pending: null,
          interleaved: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialArg
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [hook.memoizedState, reducer];
      },
      useRef: function useRef(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
          current: initialValue
        };
        return hook.memoizedState = initialValue;
      },
      useState: mountState,
      useDebugValue: mountDebugValue,
      useDeferredValue: function useDeferredValue(value) {
        return mountWorkInProgressHook().memoizedState = value;
      },
      useTransition: function useTransition() {
        var _mountState = mountState(false),
          isPending = _mountState[0];
        _mountState = startTransition.bind(null, _mountState[1]);
        mountWorkInProgressHook().memoizedState = _mountState;
        return [isPending, _mountState];
      },
      useMutableSource: function useMutableSource() {},
      useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot) {
        var fiber = currentlyRenderingFiber$1,
          hook = mountWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (renderLanes & 30) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
      },
      useId: function useId() {
        var hook = mountWorkInProgressHook(),
          identifierPrefix = workInProgressRoot.identifierPrefix,
          globalClientId = globalClientIdCounter++;
        identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
      },
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnUpdate = {
      readContext: readContext,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: updateReducer,
      useRef: updateRef,
      useState: function useState() {
        return updateReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function useDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value);
      },
      useTransition: function useTransition() {
        var isPending = updateReducer(basicStateReducer)[0],
          start = updateWorkInProgressHook().memoizedState;
        return [isPending, start];
      },
      useMutableSource: updateMutableSource,
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnRerender = {
      readContext: readContext,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: rerenderReducer,
      useRef: updateRef,
      useState: function useState() {
        return rerenderReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function useDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? hook.memoizedState = value : updateDeferredValueImpl(hook, currentHook.memoizedState, value);
      },
      useTransition: function useTransition() {
        var isPending = rerenderReducer(basicStateReducer)[0],
          start = updateWorkInProgressHook().memoizedState;
        return [isPending, start];
      },
      useMutableSource: updateMutableSource,
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      unstable_isNewReconciler: false
    };
  function createCapturedValueAtFiber(value, source) {
    try {
      var info = "",
        node = source;
      do info += describeFiber(node), node = node.return; while (node);
      var JSCompiler_inline_result = info;
    } catch (x) {
      JSCompiler_inline_result = "\nError generating stack: " + x.message + "\n" + x.stack;
    }
    return {
      value: value,
      source: source,
      stack: JSCompiler_inline_result,
      digest: null
    };
  }
  function createCapturedValue(value, digest, stack) {
    return {
      value: value,
      source: null,
      stack: null != stack ? stack : null,
      digest: null != digest ? digest : null
    };
  }
  if ("function" !== typeof _$$_REQUIRE(_dependencyMap[2]).ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
  function logCapturedError(boundary, errorInfo) {
    try {
      false !== _$$_REQUIRE(_dependencyMap[2]).ReactFiberErrorDialog.showErrorDialog({
        componentStack: null !== errorInfo.stack ? errorInfo.stack : "",
        error: errorInfo.value,
        errorBoundary: null !== boundary && 1 === boundary.tag ? boundary.stateNode : null
      }) && console.error(errorInfo.value);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;
  function createRootErrorUpdate(fiber, errorInfo, lane) {
    lane = createUpdate(-1, lane);
    lane.tag = 3;
    lane.payload = {
      element: null
    };
    var error = errorInfo.value;
    lane.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logCapturedError(fiber, errorInfo);
    };
    return lane;
  }
  function createClassErrorUpdate(fiber, errorInfo, lane) {
    lane = createUpdate(-1, lane);
    lane.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;
      lane.payload = function () {
        return getDerivedStateFromError(error);
      };
      lane.callback = function () {
        logCapturedError(fiber, errorInfo);
      };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (lane.callback = function () {
      logCapturedError(fiber, errorInfo);
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return lane;
  }
  function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
      pingCache = root.pingCache = new PossiblyWeakMap();
      var threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), undefined === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
  }
  var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,
    didReceiveUpdate = false;
  function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
  function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderLanes);
    nextProps = renderWithHooks(current, workInProgress, Component, nextProps, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.flags &= -2053, current.lanes &= ~renderLanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
  }
  function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
      current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return workInProgress.child = current;
    }
    type = current.child;
    if (0 === (current.lanes & renderLanes)) {
      var prevProps = type.memoizedProps;
      Component = Component.compare;
      Component = null !== Component ? Component : shallowEqual;
      if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }
  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
      var prevProps = current.memoizedProps;
      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = false, workInProgress.pendingProps = nextProps = prevProps, 0 !== (current.lanes & renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = true);else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
  }
  function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      nextChildren = nextProps.children,
      prevState = null !== current ? current.memoizedState : null;
    if ("hidden" === nextProps.mode) {
      if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
        baseLanes: 0,
        cachePool: null,
        transitions: null
      }, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= renderLanes;else {
        if (0 === (renderLanes & 1073741824)) return current = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, workInProgress.lanes = workInProgress.childLanes = 1073741824, workInProgress.memoizedState = {
          baseLanes: current,
          cachePool: null,
          transitions: null
        }, workInProgress.updateQueue = null, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= current, null;
        workInProgress.memoizedState = {
          baseLanes: 0,
          cachePool: null,
          transitions: null
        };
        nextProps = null !== prevState ? prevState.baseLanes : renderLanes;
        push(subtreeRenderLanesCursor, subtreeRenderLanes);
        subtreeRenderLanes |= nextProps;
      }
    } else null !== prevState ? (nextProps = prevState.baseLanes | renderLanes, workInProgress.memoizedState = null) : nextProps = renderLanes, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= nextProps;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }
  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.flags |= 512;
  }
  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderLanes);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.flags &= -2053, current.lanes &= ~renderLanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
  }
  function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;
    prepareToReadContext(workInProgress, renderLanes);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = true;else if (null === current) {
      var instance = workInProgress.stateNode,
        oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
        contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
        hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      oldContext = workInProgress.memoizedState;
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4), nextProps = false);
    } else {
      instance = workInProgress.stateNode;
      cloneUpdateQueue(current, workInProgress);
      oldProps = workInProgress.memoizedProps;
      contextType = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
      instance.props = contextType;
      hasNewLifecycles = workInProgress.pendingProps;
      oldState = instance.context;
      oldContext = Component.contextType;
      "object" === typeof oldContext && null !== oldContext ? oldContext = readContext(oldContext) : (oldContext = isContextProvider(Component) ? previousContext : contextStackCursor.current, oldContext = getMaskedContext(workInProgress, oldContext));
      var getDerivedStateFromProps$jscomp$0 = Component.getDerivedStateFromProps;
      (getDerivedStateFromProps = "function" === typeof getDerivedStateFromProps$jscomp$0 || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== hasNewLifecycles || oldState !== oldContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldContext);
      hasForceUpdate = false;
      oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      var newState = workInProgress.memoizedState;
      oldProps !== hasNewLifecycles || oldState !== newState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps$jscomp$0 && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps$jscomp$0, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldContext) || false) ? (getDerivedStateFromProps || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldContext, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = false);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, hasContext, renderLanes);
  }
  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    var didCaptureError = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$1.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes)) : reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }
  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }
  var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
  };
  function mountSuspenseOffscreenState(renderLanes) {
    return {
      baseLanes: renderLanes,
      cachePool: null,
      transitions: null
    };
  }
  function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      suspenseContext = suspenseStackCursor.current,
      showFallback = false,
      didSuspend = 0 !== (workInProgress.flags & 128),
      JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseContext & 2));
    if (JSCompiler_temp) showFallback = true, workInProgress.flags &= -129;else if (null === current || null !== current.memoizedState) suspenseContext |= 1;
    push(suspenseStackCursor, suspenseContext & 1);
    if (null === current) {
      current = workInProgress.memoizedState;
      if (null !== current && null !== current.dehydrated) return 0 === (workInProgress.mode & 1) ? workInProgress.lanes = 1 : shim$1() ? workInProgress.lanes = 8 : workInProgress.lanes = 1073741824, null;
      didSuspend = nextProps.children;
      current = nextProps.fallback;
      return showFallback ? (nextProps = workInProgress.mode, showFallback = workInProgress.child, didSuspend = {
        mode: "hidden",
        children: didSuspend
      }, 0 === (nextProps & 1) && null !== showFallback ? (showFallback.childLanes = 0, showFallback.pendingProps = didSuspend) : showFallback = createFiberFromOffscreen(didSuspend, nextProps, 0, null), current = createFiberFromFragment(current, nextProps, renderLanes, null), showFallback.return = workInProgress, current.return = workInProgress, showFallback.sibling = current, workInProgress.child = showFallback, workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, current) : mountSuspensePrimaryChildren(workInProgress, didSuspend);
    }
    suspenseContext = current.memoizedState;
    if (null !== suspenseContext && (JSCompiler_temp = suspenseContext.dehydrated, null !== JSCompiler_temp)) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, JSCompiler_temp, suspenseContext, renderLanes);
    if (showFallback) {
      showFallback = nextProps.fallback;
      didSuspend = workInProgress.mode;
      suspenseContext = current.child;
      JSCompiler_temp = suspenseContext.sibling;
      var primaryChildProps = {
        mode: "hidden",
        children: nextProps.children
      };
      0 === (didSuspend & 1) && workInProgress.child !== suspenseContext ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(suspenseContext, primaryChildProps), nextProps.subtreeFlags = suspenseContext.subtreeFlags & 14680064);
      null !== JSCompiler_temp ? showFallback = createWorkInProgress(JSCompiler_temp, showFallback) : (showFallback = createFiberFromFragment(showFallback, didSuspend, renderLanes, null), showFallback.flags |= 2);
      showFallback.return = workInProgress;
      nextProps.return = workInProgress;
      nextProps.sibling = showFallback;
      workInProgress.child = nextProps;
      nextProps = showFallback;
      showFallback = workInProgress.child;
      didSuspend = current.child.memoizedState;
      didSuspend = null === didSuspend ? mountSuspenseOffscreenState(renderLanes) : {
        baseLanes: didSuspend.baseLanes | renderLanes,
        cachePool: null,
        transitions: didSuspend.transitions
      };
      showFallback.memoizedState = didSuspend;
      showFallback.childLanes = current.childLanes & ~renderLanes;
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return nextProps;
    }
    showFallback = current.child;
    current = showFallback.sibling;
    nextProps = createWorkInProgress(showFallback, {
      mode: "visible",
      children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (nextProps.lanes = renderLanes);
    nextProps.return = workInProgress;
    nextProps.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [current], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = nextProps;
    workInProgress.memoizedState = null;
    return nextProps;
  }
  function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
      mode: "visible",
      children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
  }
  function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
    null !== recoverableError && (null === hydrationErrors ? hydrationErrors = [recoverableError] : hydrationErrors.push(recoverableError));
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
  }
  function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
    if (didSuspend) {
      if (workInProgress.flags & 256) return workInProgress.flags &= -257, suspenseState = createCapturedValue(Error("There was an error while hydrating this Suspense boundary. Switched to client rendering.")), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
      if (null !== workInProgress.memoizedState) return workInProgress.child = current.child, workInProgress.flags |= 128, null;
      suspenseState = nextProps.fallback;
      didSuspend = workInProgress.mode;
      nextProps = createFiberFromOffscreen({
        mode: "visible",
        children: nextProps.children
      }, didSuspend, 0, null);
      suspenseState = createFiberFromFragment(suspenseState, didSuspend, renderLanes, null);
      suspenseState.flags |= 2;
      nextProps.return = workInProgress;
      suspenseState.return = workInProgress;
      nextProps.sibling = suspenseState;
      workInProgress.child = nextProps;
      0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return suspenseState;
    }
    if (0 === (workInProgress.mode & 1)) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);
    if (shim$1()) return suspenseState = shim$1().digest, suspenseState = createCapturedValue(Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), suspenseState, undefined), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
    didSuspend = 0 !== (renderLanes & current.childLanes);
    if (didReceiveUpdate || didSuspend) {
      nextProps = workInProgressRoot;
      if (null !== nextProps) {
        switch (renderLanes & -renderLanes) {
          case 4:
            didSuspend = 2;
            break;
          case 16:
            didSuspend = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            didSuspend = 32;
            break;
          case 536870912:
            didSuspend = 268435456;
            break;
          default:
            didSuspend = 0;
        }
        didSuspend = 0 !== (didSuspend & (nextProps.suspendedLanes | renderLanes)) ? 0 : didSuspend;
        0 !== didSuspend && didSuspend !== suspenseState.retryLane && (suspenseState.retryLane = didSuspend, markUpdateLaneFromFiberToRoot(current, didSuspend), scheduleUpdateOnFiber(nextProps, current, didSuspend, -1));
      }
      renderDidSuspendDelayIfPossible();
      suspenseState = createCapturedValue(Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
    }
    if (shim$1()) return workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim$1(), null;
    current = mountSuspensePrimaryChildren(workInProgress, nextProps.children);
    current.flags |= 4096;
    return current;
  }
  function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
  }
  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
  }
  function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      revealOrder = nextProps.revealOrder,
      tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;else {
      if (null !== current && 0 !== (current.flags & 128)) a: for (current = workInProgress.child; null !== current;) {
        if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;
        for (; null === current.sibling;) {
          if (null === current.return || current.return === workInProgress) break a;
          current = current.return;
        }
        current.sibling.return = current.return;
        current = current.sibling;
      }
      nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderLanes = workInProgress.child;
        for (revealOrder = null; null !== renderLanes;) current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
        renderLanes = revealOrder;
        null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderLanes, tailMode);
        break;
      case "backwards":
        renderLanes = null;
        revealOrder = workInProgress.child;
        for (workInProgress.child = null; null !== revealOrder;) {
          current = revealOrder.alternate;
          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress.child = revealOrder;
            break;
          }
          current = revealOrder.sibling;
          revealOrder.sibling = renderLanes;
          renderLanes = revealOrder;
          revealOrder = current;
        }
        initSuspenseListRenderState(workInProgress, true, renderLanes, null, tailMode);
        break;
      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;
      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }
  function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
  }
  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
      current = workInProgress.child;
      renderLanes = createWorkInProgress(current, current.pendingProps);
      workInProgress.child = renderLanes;
      for (renderLanes.return = workInProgress; null !== current.sibling;) current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
      renderLanes.sibling = null;
    }
    return workInProgress.child;
  }
  function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch (workInProgress.tag) {
      case 3:
        pushHostRootContext(workInProgress);
        break;
      case 5:
        pushHostContext(workInProgress);
        break;
      case 1:
        isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
        break;
      case 4:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case 10:
        var context = workInProgress.type._context,
          nextValue = workInProgress.memoizedProps.value;
        push(valueCursor, context._currentValue2);
        context._currentValue2 = nextValue;
        break;
      case 13:
        context = workInProgress.memoizedState;
        if (null !== context) {
          if (null !== context.dehydrated) return push(suspenseStackCursor, suspenseStackCursor.current & 1), workInProgress.flags |= 128, null;
          if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
          push(suspenseStackCursor, suspenseStackCursor.current & 1);
          current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          return null !== current ? current.sibling : null;
        }
        push(suspenseStackCursor, suspenseStackCursor.current & 1);
        break;
      case 19:
        context = 0 !== (renderLanes & workInProgress.childLanes);
        if (0 !== (current.flags & 128)) {
          if (context) return updateSuspenseListComponent(current, workInProgress, renderLanes);
          workInProgress.flags |= 128;
        }
        nextValue = workInProgress.memoizedState;
        null !== nextValue && (nextValue.rendering = null, nextValue.tail = null, nextValue.lastEffect = null);
        push(suspenseStackCursor, suspenseStackCursor.current);
        if (context) break;else return null;
      case 22:
      case 23:
        return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }
  function hadNoMutationsEffects(current, completedWork) {
    if (null !== current && current.child === completedWork.child) return true;
    if (0 !== (completedWork.flags & 16)) return false;
    for (current = completedWork.child; null !== current;) {
      if (0 !== (current.flags & 12854) || 0 !== (current.subtreeFlags & 12854)) return false;
      current = current.sibling;
    }
    return true;
  }
  var _appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
  _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
        appendChildNode(parent.node, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNode(parent.node, instance.node);
      } else if (4 !== node.tag) if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), _appendAllChildren(parent, node, true, true);else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };
  function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (4 !== node.tag) if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildrenToContainer(containerChildSet, node, true, true);else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  updateHostContainer = function updateHostContainer(current, workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    if (!hadNoMutationsEffects(current, workInProgress)) {
      current = portalOrRoot.containerInfo;
      var newChildSet = createChildNodeSet(current);
      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet;
      workInProgress.flags |= 4;
      completeRoot(current, newChildSet);
    }
  };
  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    type = current.stateNode;
    var oldProps = current.memoizedProps;
    if ((current = hadNoMutationsEffects(current, workInProgress)) && oldProps === newProps) workInProgress.stateNode = type;else {
      var recyclableInstance = workInProgress.stateNode;
      requiredContext(contextStackCursor$1.current);
      var updatePayload = null;
      oldProps !== newProps && (oldProps = diffProperties(null, oldProps, newProps, recyclableInstance.canonical.viewConfig.validAttributes), recyclableInstance.canonical.currentProps = newProps, updatePayload = oldProps);
      current && null === updatePayload ? workInProgress.stateNode = type : (newProps = updatePayload, oldProps = type.node, type = {
        node: current ? null !== newProps ? cloneNodeWithNewProps(oldProps, newProps) : cloneNode(oldProps) : null !== newProps ? cloneNodeWithNewChildrenAndProps(oldProps, newProps) : cloneNodeWithNewChildren(oldProps),
        canonical: type.canonical
      }, workInProgress.stateNode = type, current ? workInProgress.flags |= 4 : _appendAllChildren(type, workInProgress, false, false));
    }
  };
  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText ? (current = requiredContext(rootInstanceStackCursor.current), oldText = requiredContext(contextStackCursor$1.current), workInProgress.stateNode = createTextInstance(newText, current, oldText, workInProgress), workInProgress.flags |= 4) : workInProgress.stateNode = current.stateNode;
  };
  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;
        for (var lastTailNode = null; null !== hasRenderedATailFallback;) null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;
      case "collapsed":
        lastTailNode = renderState.tail;
        for (var lastTailNode$62 = null; null !== lastTailNode;) null !== lastTailNode.alternate && (lastTailNode$62 = lastTailNode), lastTailNode = lastTailNode.sibling;
        null === lastTailNode$62 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$62.sibling = null;
    }
  }
  function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child,
      newChildLanes = 0,
      subtreeFlags = 0;
    if (didBailout) for (var child$63 = completedWork.child; null !== child$63;) newChildLanes |= child$63.lanes | child$63.childLanes, subtreeFlags |= child$63.subtreeFlags & 14680064, subtreeFlags |= child$63.flags & 14680064, child$63.return = completedWork, child$63 = child$63.sibling;else for (child$63 = completedWork.child; null !== child$63;) newChildLanes |= child$63.lanes | child$63.childLanes, subtreeFlags |= child$63.subtreeFlags, subtreeFlags |= child$63.flags, child$63.return = completedWork, child$63 = child$63.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
  }
  function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    popTreeContext(workInProgress);
    switch (workInProgress.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return bubbleProperties(workInProgress), null;
      case 1:
        return isContextProvider(workInProgress.type) && popContext(), bubbleProperties(workInProgress), null;
      case 3:
        return renderLanes = workInProgress.stateNode, popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), resetWorkInProgressVersions(), renderLanes.pendingContext && (renderLanes.context = renderLanes.pendingContext, renderLanes.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 5:
        popHostContext(workInProgress);
        renderLanes = requiredContext(rootInstanceStackCursor.current);
        var type = workInProgress.type;
        if (null !== current && null != workInProgress.stateNode) updateHostComponent$1(current, workInProgress, type, newProps, renderLanes), current.ref !== workInProgress.ref && (workInProgress.flags |= 512);else {
          if (!newProps) {
            if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            bubbleProperties(workInProgress);
            return null;
          }
          requiredContext(contextStackCursor$1.current);
          current = nextReactTag;
          nextReactTag += 2;
          type = getViewConfigForType(type);
          var updatePayload = diffProperties(null, emptyObject, newProps, type.validAttributes);
          renderLanes = createNode(current, type.uiViewClassName, renderLanes, updatePayload, workInProgress);
          current = new ReactFabricHostComponent(current, type, newProps, workInProgress);
          current = {
            node: renderLanes,
            canonical: current
          };
          _appendAllChildren(current, workInProgress, false, false);
          workInProgress.stateNode = current;
          null !== workInProgress.ref && (workInProgress.flags |= 512);
        }
        bubbleProperties(workInProgress);
        return null;
      case 6:
        if (current && null != workInProgress.stateNode) updateHostText$1(current, workInProgress, current.memoizedProps, newProps);else {
          if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          current = requiredContext(rootInstanceStackCursor.current);
          renderLanes = requiredContext(contextStackCursor$1.current);
          workInProgress.stateNode = createTextInstance(newProps, current, renderLanes, workInProgress);
        }
        bubbleProperties(workInProgress);
        return null;
      case 13:
        pop(suspenseStackCursor);
        newProps = workInProgress.memoizedState;
        if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
          if (null !== newProps && null !== newProps.dehydrated) {
            if (null === current) {
              throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
            0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
            workInProgress.flags |= 4;
            bubbleProperties(workInProgress);
            type = false;
          } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), type = true;
          if (!type) return workInProgress.flags & 65536 ? workInProgress : null;
        }
        if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
        renderLanes = null !== newProps;
        renderLanes !== (null !== current && null !== current.memoizedState) && renderLanes && (workInProgress.child.flags |= 8192, 0 !== (workInProgress.mode & 1) && (null === current || 0 !== (suspenseStackCursor.current & 1) ? 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3) : renderDidSuspendDelayIfPossible()));
        null !== workInProgress.updateQueue && (workInProgress.flags |= 4);
        bubbleProperties(workInProgress);
        return null;
      case 4:
        return popHostContainer(), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 10:
        return popProvider(workInProgress.type._context), bubbleProperties(workInProgress), null;
      case 17:
        return isContextProvider(workInProgress.type) && popContext(), bubbleProperties(workInProgress), null;
      case 19:
        pop(suspenseStackCursor);
        type = workInProgress.memoizedState;
        if (null === type) return bubbleProperties(workInProgress), null;
        newProps = 0 !== (workInProgress.flags & 128);
        updatePayload = type.rendering;
        if (null === updatePayload) {
          if (newProps) cutOffTailIfNeeded(type, false);else {
            if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for (current = workInProgress.child; null !== current;) {
              updatePayload = findFirstSuspended(current);
              if (null !== updatePayload) {
                workInProgress.flags |= 128;
                cutOffTailIfNeeded(type, false);
                current = updatePayload.updateQueue;
                null !== current && (workInProgress.updateQueue = current, workInProgress.flags |= 4);
                workInProgress.subtreeFlags = 0;
                current = renderLanes;
                for (renderLanes = workInProgress.child; null !== renderLanes;) newProps = renderLanes, type = current, newProps.flags &= 14680066, updatePayload = newProps.alternate, null === updatePayload ? (newProps.childLanes = 0, newProps.lanes = type, newProps.child = null, newProps.subtreeFlags = 0, newProps.memoizedProps = null, newProps.memoizedState = null, newProps.updateQueue = null, newProps.dependencies = null, newProps.stateNode = null) : (newProps.childLanes = updatePayload.childLanes, newProps.lanes = updatePayload.lanes, newProps.child = updatePayload.child, newProps.subtreeFlags = 0, newProps.deletions = null, newProps.memoizedProps = updatePayload.memoizedProps, newProps.memoizedState = updatePayload.memoizedState, newProps.updateQueue = updatePayload.updateQueue, newProps.type = updatePayload.type, type = updatePayload.dependencies, newProps.dependencies = null === type ? null : {
                  lanes: type.lanes,
                  firstContext: type.firstContext
                }), renderLanes = renderLanes.sibling;
                push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }
              current = current.sibling;
            }
            null !== type.tail && _$$_REQUIRE(_dependencyMap[3]).unstable_now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          }
        } else {
          if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
            if (workInProgress.flags |= 128, newProps = true, current = current.updateQueue, null !== current && (workInProgress.updateQueue = current, workInProgress.flags |= 4), cutOffTailIfNeeded(type, true), null === type.tail && "hidden" === type.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
          } else 2 * _$$_REQUIRE(_dependencyMap[3]).unstable_now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 1073741824 !== renderLanes && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          type.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = type.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, type.last = updatePayload);
        }
        if (null !== type.tail) return workInProgress = type.tail, type.rendering = workInProgress, type.tail = workInProgress.sibling, type.renderingStartTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
        bubbleProperties(workInProgress);
        return null;
      case 22:
      case 23:
        return popRenderLanes(), renderLanes = null !== workInProgress.memoizedState, null !== current && null !== current.memoizedState !== renderLanes && (workInProgress.flags |= 8192), renderLanes && 0 !== (workInProgress.mode & 1) ? 0 !== (subtreeRenderLanes & 1073741824) && bubbleProperties(workInProgress) : bubbleProperties(workInProgress), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }
  function unwindWork(current, workInProgress) {
    popTreeContext(workInProgress);
    switch (workInProgress.tag) {
      case 1:
        return isContextProvider(workInProgress.type) && popContext(), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 3:
        return popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), resetWorkInProgressVersions(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 5:
        return popHostContext(workInProgress), null;
      case 13:
        pop(suspenseStackCursor);
        current = workInProgress.memoizedState;
        if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
        current = workInProgress.flags;
        return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 19:
        return pop(suspenseStackCursor), null;
      case 4:
        return popHostContainer(), null;
      case 10:
        return popProvider(workInProgress.type._context), null;
      case 22:
      case 23:
        return popRenderLanes(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
    nextEffect = null;
  function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    } else ref.current = null;
  }
  function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
    try {
      destroy();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  var shouldFireAfterActiveInstanceBlur = false;
  function commitBeforeMutationEffects(root, firstChild) {
    for (nextEffect = firstChild; null !== nextEffect;) if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;else for (; null !== nextEffect;) {
      root = nextEffect;
      try {
        var current = root.alternate;
        if (0 !== (root.flags & 1024)) switch (root.tag) {
          case 0:
          case 11:
          case 15:
            break;
          case 1:
            if (null !== current) {
              var prevProps = current.memoizedProps,
                prevState = current.memoizedState,
                instance = root.stateNode,
                snapshot = instance.getSnapshotBeforeUpdate(root.elementType === root.type ? prevProps : resolveDefaultProps(root.type, prevProps), prevState);
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          case 3:
            break;
          case 5:
          case 6:
          case 4:
          case 17:
            break;
          default:
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      } catch (error) {
        captureCommitPhaseError(root, root.return, error);
      }
      firstChild = root.sibling;
      if (null !== firstChild) {
        firstChild.return = root.return;
        nextEffect = firstChild;
        break;
      }
      nextEffect = root.return;
    }
    current = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = false;
    return current;
  }
  function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
    var updateQueue = finishedWork.updateQueue;
    updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;
    if (null !== updateQueue) {
      var effect = updateQueue = updateQueue.next;
      do {
        if ((effect.tag & flags) === flags) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
        }
        effect = effect.next;
      } while (effect !== updateQueue);
    }
  }
  function commitHookEffectListMount(flags, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;
    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;
      do {
        if ((effect.tag & flags) === flags) {
          var create$75 = effect.create;
          effect.destroy = create$75();
        }
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }
  function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
  }
  function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for (parent = parent.child; null !== parent;) commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
  }
  function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch (deletedFiber.tag) {
      case 5:
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
      case 6:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 18:
        break;
      case 4:
        createChildNodeSet(deletedFiber.stateNode.containerInfo);
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = deletedFiber.updateQueue;
        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var effect = updateQueue = updateQueue.next;
          do {
            var _effect = effect,
              destroy = _effect.destroy;
            _effect = _effect.tag;
            undefined !== destroy && (0 !== (_effect & 2) ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : 0 !== (_effect & 4) && safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy));
            effect = effect.next;
          } while (effect !== updateQueue);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 1:
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
        updateQueue = deletedFiber.stateNode;
        if ("function" === typeof updateQueue.componentWillUnmount) try {
          updateQueue.props = deletedFiber.memoizedProps, updateQueue.state = deletedFiber.memoizedState, updateQueue.componentWillUnmount();
        } catch (error) {
          captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 21:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 22:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      default:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
  }
  function attachSuspenseRetryListeners(finishedWork) {
    var wakeables = finishedWork.updateQueue;
    if (null !== wakeables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
      wakeables.forEach(function (wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
      });
    }
  }
  function recursivelyTraverseMutationEffects(root, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i];
      try {
        commitDeletionEffectsOnFiber(root, parentFiber, childToDelete);
        var alternate = childToDelete.alternate;
        null !== alternate && (alternate.return = null);
        childToDelete.return = null;
      } catch (error) {
        captureCommitPhaseError(childToDelete, parentFiber, error);
      }
    }
    if (parentFiber.subtreeFlags & 12854) for (parentFiber = parentFiber.child; null !== parentFiber;) commitMutationEffectsOnFiber(parentFiber, root), parentFiber = parentFiber.sibling;
  }
  function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate,
      flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 4) {
          try {
            commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
          try {
            commitHookEffectListUnmount(5, finishedWork, finishedWork.return);
          } catch (error$79) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$79);
          }
        }
        break;
      case 1:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && null !== current && safelyDetachRef(current, current.return);
        break;
      case 5:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && null !== current && safelyDetachRef(current, current.return);
        break;
      case 6:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 3:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 4:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 13:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        root = finishedWork.child;
        root.flags & 8192 && (current = null !== root.memoizedState, root.stateNode.isHidden = current, !current || null !== root.alternate && null !== root.alternate.memoizedState || (globalMostRecentFallbackTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now()));
        flags & 4 && attachSuspenseRetryListeners(finishedWork);
        break;
      case 22:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 8192 && (finishedWork.stateNode.isHidden = null !== finishedWork.memoizedState);
        break;
      case 19:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && attachSuspenseRetryListeners(finishedWork);
        break;
      case 21:
        break;
      default:
        recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
  }
  function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    flags & 2 && (finishedWork.flags &= -3);
    flags & 4096 && (finishedWork.flags &= -4097);
  }
  function commitLayoutEffects(finishedWork) {
    for (nextEffect = finishedWork; null !== nextEffect;) {
      var fiber = nextEffect,
        firstChild = fiber.child;
      if (0 !== (fiber.subtreeFlags & 8772) && null !== firstChild) firstChild.return = fiber, nextEffect = firstChild;else for (fiber = finishedWork; null !== nextEffect;) {
        firstChild = nextEffect;
        if (0 !== (firstChild.flags & 8772)) {
          var current = firstChild.alternate;
          try {
            if (0 !== (firstChild.flags & 8772)) switch (firstChild.tag) {
              case 0:
              case 11:
              case 15:
                commitHookEffectListMount(5, firstChild);
                break;
              case 1:
                var instance = firstChild.stateNode;
                if (firstChild.flags & 4) if (null === current) instance.componentDidMount();else {
                  var prevProps = firstChild.elementType === firstChild.type ? current.memoizedProps : resolveDefaultProps(firstChild.type, current.memoizedProps);
                  instance.componentDidUpdate(prevProps, current.memoizedState, instance.__reactInternalSnapshotBeforeUpdate);
                }
                var updateQueue = firstChild.updateQueue;
                null !== updateQueue && commitUpdateQueue(firstChild, updateQueue, instance);
                break;
              case 3:
                var updateQueue$76 = firstChild.updateQueue;
                if (null !== updateQueue$76) {
                  current = null;
                  if (null !== firstChild.child) switch (firstChild.child.tag) {
                    case 5:
                      current = firstChild.child.stateNode.canonical;
                      break;
                    case 1:
                      current = firstChild.child.stateNode;
                  }
                  commitUpdateQueue(firstChild, updateQueue$76, current);
                }
                break;
              case 5:
                if (null === current && firstChild.flags & 4) throw Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (firstChild.flags & 512) {
              current = undefined;
              var ref = firstChild.ref;
              if (null !== ref) {
                var instance$jscomp$0 = firstChild.stateNode;
                switch (firstChild.tag) {
                  case 5:
                    current = instance$jscomp$0.canonical;
                    break;
                  default:
                    current = instance$jscomp$0;
                }
                "function" === typeof ref ? ref(current) : ref.current = current;
              }
            }
          } catch (error) {
            captureCommitPhaseError(firstChild, firstChild.return, error);
          }
        }
        if (firstChild === fiber) {
          nextEffect = null;
          break;
        }
        current = firstChild.sibling;
        if (null !== current) {
          current.return = firstChild.return;
          nextEffect = current;
          break;
        }
        nextEffect = firstChild.return;
      }
    }
  }
  var ceil = Math.ceil,
    ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,
    executionContext = 0,
    workInProgressRoot = null,
    workInProgress = null,
    workInProgressRootRenderLanes = 0,
    subtreeRenderLanes = 0,
    subtreeRenderLanesCursor = createCursor(0),
    workInProgressRootExitStatus = 0,
    workInProgressRootFatalError = null,
    workInProgressRootSkippedLanes = 0,
    workInProgressRootInterleavedUpdatedLanes = 0,
    workInProgressRootPingedLanes = 0,
    workInProgressRootConcurrentErrors = null,
    workInProgressRootRecoverableErrors = null,
    globalMostRecentFallbackTime = 0,
    workInProgressRootRenderTargetTime = Infinity,
    workInProgressTransitions = null,
    hasUncaughtError = false,
    firstUncaughtError = null,
    legacyErrorBoundariesThatAlreadyFailed = null,
    rootDoesHavePassiveEffects = false,
    rootWithPendingPassiveEffects = null,
    pendingPassiveEffectsLanes = 0,
    nestedUpdateCount = 0,
    rootWithNestedUpdates = null,
    currentEventTime = -1,
    currentEventTransitionLane = 0;
  function requestEventTime() {
    return 0 !== (executionContext & 6) ? _$$_REQUIRE(_dependencyMap[3]).unstable_now() : -1 !== currentEventTime ? currentEventTime : currentEventTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now();
  }
  function requestUpdateLane(fiber) {
    if (0 === (fiber.mode & 1)) return 1;
    if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes) return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
    if (null !== ReactCurrentBatchConfig.transition) return 0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane()), currentEventTransitionLane;
    fiber = currentUpdatePriority;
    if (0 === fiber) a: {
      fiber = fabricGetCurrentEventPriority ? fabricGetCurrentEventPriority() : null;
      if (null != fiber) switch (fiber) {
        case FabricDiscretePriority:
          fiber = 1;
          break a;
      }
      fiber = 16;
    }
    return fiber;
  }
  function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    markRootUpdated(root, lane, eventTime);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended$1(root, workInProgressRootRenderLanes)), ensureRootIsScheduled(root, eventTime), 1 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now() + 500, includesLegacySyncCallbacks && flushSyncCallbacks());
  }
  function ensureRootIsScheduled(root, currentTime) {
    for (var existingCallbackNode = root.callbackNode, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes; 0 < lanes;) {
      var index$5 = 31 - clz32(lanes),
        lane = 1 << index$5,
        expirationTime = expirationTimes[index$5];
      if (-1 === expirationTime) {
        if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$5] = computeExpirationTime(lane, currentTime);
      } else expirationTime <= currentTime && (root.expiredLanes |= lane);
      lanes &= ~lane;
    }
    suspendedLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
    if (0 === suspendedLanes) null !== existingCallbackNode && _$$_REQUIRE(_dependencyMap[3]).unstable_cancelCallback(existingCallbackNode), root.callbackNode = null, root.callbackPriority = 0;else if (currentTime = suspendedLanes & -suspendedLanes, root.callbackPriority !== currentTime) {
      null != existingCallbackNode && _$$_REQUIRE(_dependencyMap[3]).unstable_cancelCallback(existingCallbackNode);
      if (1 === currentTime) 0 === root.tag ? (existingCallbackNode = performSyncWorkOnRoot.bind(null, root), includesLegacySyncCallbacks = true, null === syncQueue ? syncQueue = [existingCallbackNode] : syncQueue.push(existingCallbackNode)) : (existingCallbackNode = performSyncWorkOnRoot.bind(null, root), null === syncQueue ? syncQueue = [existingCallbackNode] : syncQueue.push(existingCallbackNode)), _$$_REQUIRE(_dependencyMap[3]).unstable_scheduleCallback(_$$_REQUIRE(_dependencyMap[3]).unstable_ImmediatePriority, flushSyncCallbacks), existingCallbackNode = null;else {
        switch (lanesToEventPriority(suspendedLanes)) {
          case 1:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_ImmediatePriority;
            break;
          case 4:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_UserBlockingPriority;
            break;
          case 16:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_NormalPriority;
            break;
          case 536870912:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_IdlePriority;
            break;
          default:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_NormalPriority;
        }
        existingCallbackNode = scheduleCallback$1(existingCallbackNode, performConcurrentWorkOnRoot.bind(null, root));
      }
      root.callbackPriority = currentTime;
      root.callbackNode = existingCallbackNode;
    }
  }
  function performConcurrentWorkOnRoot(root, didTimeout) {
    currentEventTime = -1;
    currentEventTransitionLane = 0;
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
    if (0 === lanes) return null;
    if (0 !== (lanes & 30) || 0 !== (lanes & root.expiredLanes) || didTimeout) didTimeout = renderRootSync(root, lanes);else {
      didTimeout = lanes;
      var prevExecutionContext = executionContext;
      executionContext |= 2;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== didTimeout) workInProgressTransitions = null, workInProgressRootRenderTargetTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now() + 500, prepareFreshStack(root, didTimeout);
      do try {
        workLoopConcurrent();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      } while (1);
      resetContextDependencies();
      ReactCurrentDispatcher$2.current = prevDispatcher;
      executionContext = prevExecutionContext;
      null !== workInProgress ? didTimeout = 0 : (workInProgressRoot = null, workInProgressRootRenderLanes = 0, didTimeout = workInProgressRootExitStatus);
    }
    if (0 !== didTimeout) {
      2 === didTimeout && (prevExecutionContext = getLanesToRetrySynchronouslyOnError(root), 0 !== prevExecutionContext && (lanes = prevExecutionContext, didTimeout = recoverFromConcurrentError(root, prevExecutionContext)));
      if (1 === didTimeout) throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now()), originalCallbackNode;
      if (6 === didTimeout) markRootSuspended$1(root, lanes);else {
        prevExecutionContext = root.current.alternate;
        if (0 === (lanes & 30) && !isRenderConsistentWithExternalStores(prevExecutionContext) && (didTimeout = renderRootSync(root, lanes), 2 === didTimeout && (prevDispatcher = getLanesToRetrySynchronouslyOnError(root), 0 !== prevDispatcher && (lanes = prevDispatcher, didTimeout = recoverFromConcurrentError(root, prevDispatcher))), 1 === didTimeout)) throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now()), originalCallbackNode;
        root.finishedWork = prevExecutionContext;
        root.finishedLanes = lanes;
        switch (didTimeout) {
          case 0:
          case 1:
            throw Error("Root did not complete. This is a bug in React.");
          case 2:
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 3:
            markRootSuspended$1(root, lanes);
            if ((lanes & 130023424) === lanes && (didTimeout = globalMostRecentFallbackTime + 500 - _$$_REQUIRE(_dependencyMap[3]).unstable_now(), 10 < didTimeout)) {
              if (0 !== getNextLanes(root, 0)) break;
              prevExecutionContext = root.suspendedLanes;
              if ((prevExecutionContext & lanes) !== lanes) {
                requestEventTime();
                root.pingedLanes |= root.suspendedLanes & prevExecutionContext;
                break;
              }
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), didTimeout);
              break;
            }
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 4:
            markRootSuspended$1(root, lanes);
            if ((lanes & 4194240) === lanes) break;
            didTimeout = root.eventTimes;
            for (prevExecutionContext = -1; 0 < lanes;) {
              var index$4 = 31 - clz32(lanes);
              prevDispatcher = 1 << index$4;
              index$4 = didTimeout[index$4];
              index$4 > prevExecutionContext && (prevExecutionContext = index$4);
              lanes &= ~prevDispatcher;
            }
            lanes = prevExecutionContext;
            lanes = _$$_REQUIRE(_dependencyMap[3]).unstable_now() - lanes;
            lanes = (120 > lanes ? 120 : 480 > lanes ? 480 : 1080 > lanes ? 1080 : 1920 > lanes ? 1920 : 3e3 > lanes ? 3e3 : 4320 > lanes ? 4320 : 1960 * ceil(lanes / 1960)) - lanes;
            if (10 < lanes) {
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), lanes);
              break;
            }
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 5:
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          default:
            throw Error("Unknown root exit status.");
        }
      }
    }
    ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now());
    return root.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root) : null;
  }
  function recoverFromConcurrentError(root, errorRetryLanes) {
    var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
    root.current.memoizedState.isDehydrated && (prepareFreshStack(root, errorRetryLanes).flags |= 256);
    root = renderRootSync(root, errorRetryLanes);
    2 !== root && (errorRetryLanes = workInProgressRootRecoverableErrors, workInProgressRootRecoverableErrors = errorsFromFirstAttempt, null !== errorRetryLanes && queueRecoverableErrors(errorRetryLanes));
    return root;
  }
  function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
  function isRenderConsistentWithExternalStores(finishedWork) {
    for (var node = finishedWork;;) {
      if (node.flags & 16384) {
        var updateQueue = node.updateQueue;
        if (null !== updateQueue && (updateQueue = updateQueue.stores, null !== updateQueue)) for (var i = 0; i < updateQueue.length; i++) {
          var check = updateQueue[i],
            getSnapshot = check.getSnapshot;
          check = check.value;
          try {
            if (!objectIs(getSnapshot(), check)) return false;
          } catch (error) {
            return false;
          }
        }
      }
      updateQueue = node.child;
      if (node.subtreeFlags & 16384 && null !== updateQueue) updateQueue.return = node, node = updateQueue;else {
        if (node === finishedWork) break;
        for (; null === node.sibling;) {
          if (null === node.return || node.return === finishedWork) return true;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    return true;
  }
  function markRootSuspended$1(root, suspendedLanes) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    for (root = root.expirationTimes; 0 < suspendedLanes;) {
      var index$6 = 31 - clz32(suspendedLanes),
        lane = 1 << index$6;
      root[index$6] = -1;
      suspendedLanes &= ~lane;
    }
  }
  function performSyncWorkOnRoot(root) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    flushPassiveEffects();
    var lanes = getNextLanes(root, 0);
    if (0 === (lanes & 1)) return ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now()), null;
    var exitStatus = renderRootSync(root, lanes);
    if (0 !== root.tag && 2 === exitStatus) {
      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
      0 !== errorRetryLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root, errorRetryLanes));
    }
    if (1 === exitStatus) throw exitStatus = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now()), exitStatus;
    if (6 === exitStatus) throw Error("Root did not complete. This is a bug in React.");
    root.finishedWork = root.current.alternate;
    root.finishedLanes = lanes;
    commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
    ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now());
    return null;
  }
  function popRenderLanes() {
    subtreeRenderLanes = subtreeRenderLanesCursor.current;
    pop(subtreeRenderLanesCursor);
  }
  function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case 1:
          interruptedWork = interruptedWork.type.childContextTypes;
          null !== interruptedWork && undefined !== interruptedWork && popContext();
          break;
        case 3:
          popHostContainer();
          pop(didPerformWorkStackCursor);
          pop(contextStackCursor);
          resetWorkInProgressVersions();
          break;
        case 5:
          popHostContext(interruptedWork);
          break;
        case 4:
          popHostContainer();
          break;
        case 13:
          pop(suspenseStackCursor);
          break;
        case 19:
          pop(suspenseStackCursor);
          break;
        case 10:
          popProvider(interruptedWork.type._context);
          break;
        case 22:
        case 23:
          popRenderLanes();
      }
      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = root = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
    workInProgressRootExitStatus = 0;
    workInProgressRootFatalError = null;
    workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    if (null !== concurrentQueues) {
      for (lanes = 0; lanes < concurrentQueues.length; lanes++) if (timeoutHandle = concurrentQueues[lanes], interruptedWork = timeoutHandle.interleaved, null !== interruptedWork) {
        timeoutHandle.interleaved = null;
        var firstInterleavedUpdate = interruptedWork.next,
          lastPendingUpdate = timeoutHandle.pending;
        if (null !== lastPendingUpdate) {
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = firstInterleavedUpdate;
          interruptedWork.next = firstPendingUpdate;
        }
        timeoutHandle.pending = interruptedWork;
      }
      concurrentQueues = null;
    }
    return root;
  }
  function handleError(root$jscomp$0, thrownValue) {
    do {
      var erroredWork = workInProgress;
      try {
        resetContextDependencies();
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          for (var hook = currentlyRenderingFiber$1.memoizedState; null !== hook;) {
            var queue = hook.queue;
            null !== queue && (queue.pending = null);
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        ReactCurrentOwner$2.current = null;
        if (null === erroredWork || null === erroredWork.return) {
          workInProgressRootExitStatus = 1;
          workInProgressRootFatalError = thrownValue;
          workInProgress = null;
          break;
        }
        a: {
          var root = root$jscomp$0,
            returnFiber = erroredWork.return,
            sourceFiber = erroredWork,
            value = thrownValue;
          thrownValue = workInProgressRootRenderLanes;
          sourceFiber.flags |= 32768;
          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            var wakeable = value,
              sourceFiber$jscomp$0 = sourceFiber,
              tag = sourceFiber$jscomp$0.tag;
            if (0 === (sourceFiber$jscomp$0.mode & 1) && (0 === tag || 11 === tag || 15 === tag)) {
              var currentSource = sourceFiber$jscomp$0.alternate;
              currentSource ? (sourceFiber$jscomp$0.updateQueue = currentSource.updateQueue, sourceFiber$jscomp$0.memoizedState = currentSource.memoizedState, sourceFiber$jscomp$0.lanes = currentSource.lanes) : (sourceFiber$jscomp$0.updateQueue = null, sourceFiber$jscomp$0.memoizedState = null);
            }
            b: {
              sourceFiber$jscomp$0 = returnFiber;
              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === sourceFiber$jscomp$0.tag) {
                  var nextState = sourceFiber$jscomp$0.memoizedState;
                  JSCompiler_temp = null !== nextState ? null !== nextState.dehydrated ? true : false : true;
                }
                if (JSCompiler_temp) {
                  var suspenseBoundary = sourceFiber$jscomp$0;
                  break b;
                }
                sourceFiber$jscomp$0 = sourceFiber$jscomp$0.return;
              } while (null !== sourceFiber$jscomp$0);
              suspenseBoundary = null;
            }
            if (null !== suspenseBoundary) {
              suspenseBoundary.flags &= -257;
              value = suspenseBoundary;
              sourceFiber$jscomp$0 = thrownValue;
              if (0 === (value.mode & 1)) {
                if (value === returnFiber) value.flags |= 65536;else {
                  value.flags |= 128;
                  sourceFiber.flags |= 131072;
                  sourceFiber.flags &= -52805;
                  if (1 === sourceFiber.tag) if (null === sourceFiber.alternate) sourceFiber.tag = 17;else {
                    var update = createUpdate(-1, 1);
                    update.tag = 2;
                    enqueueUpdate(sourceFiber, update, 1);
                  }
                  sourceFiber.lanes |= 1;
                }
              } else value.flags |= 65536, value.lanes = sourceFiber$jscomp$0;
              suspenseBoundary.mode & 1 && attachPingListener(root, wakeable, thrownValue);
              thrownValue = suspenseBoundary;
              root = wakeable;
              var wakeables = thrownValue.updateQueue;
              if (null === wakeables) {
                var updateQueue = new Set();
                updateQueue.add(root);
                thrownValue.updateQueue = updateQueue;
              } else wakeables.add(root);
              break a;
            } else {
              if (0 === (thrownValue & 1)) {
                attachPingListener(root, wakeable, thrownValue);
                renderDidSuspendDelayIfPossible();
                break a;
              }
              value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            }
          }
          root = value = createCapturedValueAtFiber(value, sourceFiber);
          4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
          null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [root] : workInProgressRootConcurrentErrors.push(root);
          root = returnFiber;
          do {
            switch (root.tag) {
              case 3:
                wakeable = value;
                root.flags |= 65536;
                thrownValue &= -thrownValue;
                root.lanes |= thrownValue;
                var update$jscomp$0 = createRootErrorUpdate(root, wakeable, thrownValue);
                enqueueCapturedUpdate(root, update$jscomp$0);
                break a;
              case 1:
                wakeable = value;
                var ctor = root.type,
                  instance = root.stateNode;
                if (0 === (root.flags & 128) && ("function" === typeof ctor.getDerivedStateFromError || null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance)))) {
                  root.flags |= 65536;
                  thrownValue &= -thrownValue;
                  root.lanes |= thrownValue;
                  var update$32 = createClassErrorUpdate(root, wakeable, thrownValue);
                  enqueueCapturedUpdate(root, update$32);
                  break a;
                }
            }
            root = root.return;
          } while (null !== root);
        }
        completeUnitOfWork(erroredWork);
      } catch (yetAnotherThrownValue) {
        thrownValue = yetAnotherThrownValue;
        workInProgress === erroredWork && null !== erroredWork && (workInProgress = erroredWork = erroredWork.return);
        continue;
      }
      break;
    } while (1);
  }
  function pushDispatcher() {
    var prevDispatcher = ReactCurrentDispatcher$2.current;
    ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }
  function renderDidSuspendDelayIfPossible() {
    if (0 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus || 2 === workInProgressRootExitStatus) workInProgressRootExitStatus = 4;
    null === workInProgressRoot || 0 === (workInProgressRootSkippedLanes & 268435455) && 0 === (workInProgressRootInterleavedUpdatedLanes & 268435455) || markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
  function renderRootSync(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    do try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    } while (1);
    resetContextDependencies();
    executionContext = prevExecutionContext;
    ReactCurrentDispatcher$2.current = prevDispatcher;
    if (null !== workInProgress) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    return workInProgressRootExitStatus;
  }
  function workLoopSync() {
    for (; null !== workInProgress;) performUnitOfWork(workInProgress);
  }
  function workLoopConcurrent() {
    for (; null !== workInProgress && !_$$_REQUIRE(_dependencyMap[3]).unstable_shouldYield();) performUnitOfWork(workInProgress);
  }
  function performUnitOfWork(unitOfWork) {
    var next = beginWork$1(unitOfWork.alternate, unitOfWork, subtreeRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
    ReactCurrentOwner$2.current = null;
  }
  function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
      var current = completedWork.alternate;
      unitOfWork = completedWork.return;
      if (0 === (completedWork.flags & 32768)) {
        if (current = completeWork(current, completedWork, subtreeRenderLanes), null !== current) {
          workInProgress = current;
          return;
        }
      } else {
        current = unwindWork(current, completedWork);
        if (null !== current) {
          current.flags &= 32767;
          workInProgress = current;
          return;
        }
        if (null !== unitOfWork) unitOfWork.flags |= 32768, unitOfWork.subtreeFlags = 0, unitOfWork.deletions = null;else {
          workInProgressRootExitStatus = 6;
          workInProgress = null;
          return;
        }
      }
      completedWork = completedWork.sibling;
      if (null !== completedWork) {
        workInProgress = completedWork;
        return;
      }
      workInProgress = completedWork = unitOfWork;
    } while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
  }
  function commitRoot(root, recoverableErrors, transitions) {
    var previousUpdateLanePriority = currentUpdatePriority,
      prevTransition = ReactCurrentBatchConfig$2.transition;
    try {
      ReactCurrentBatchConfig$2.transition = null, currentUpdatePriority = 1, commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
    } finally {
      ReactCurrentBatchConfig$2.transition = prevTransition, currentUpdatePriority = previousUpdateLanePriority;
    }
    return null;
  }
  function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
    do flushPassiveEffects(); while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    transitions = root.finishedWork;
    var lanes = root.finishedLanes;
    if (null === transitions) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (transitions === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    var remainingLanes = transitions.lanes | transitions.childLanes;
    markRootFinished(root, remainingLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (transitions.subtreeFlags & 2064) && 0 === (transitions.flags & 2064) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, scheduleCallback$1(_$$_REQUIRE(_dependencyMap[3]).unstable_NormalPriority, function () {
      flushPassiveEffects();
      return null;
    }));
    remainingLanes = 0 !== (transitions.flags & 15990);
    if (0 !== (transitions.subtreeFlags & 15990) || remainingLanes) {
      remainingLanes = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = null;
      var previousPriority = currentUpdatePriority;
      currentUpdatePriority = 1;
      var prevExecutionContext = executionContext;
      executionContext |= 4;
      ReactCurrentOwner$2.current = null;
      commitBeforeMutationEffects(root, transitions);
      commitMutationEffectsOnFiber(transitions, root);
      root.current = transitions;
      commitLayoutEffects(transitions, root, lanes);
      _$$_REQUIRE(_dependencyMap[3]).unstable_requestPaint();
      executionContext = prevExecutionContext;
      currentUpdatePriority = previousPriority;
      ReactCurrentBatchConfig$2.transition = remainingLanes;
    } else root.current = transitions;
    rootDoesHavePassiveEffects && (rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = lanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(transitions.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now());
    if (null !== recoverableErrors) for (renderPriorityLevel = root.onRecoverableError, transitions = 0; transitions < recoverableErrors.length; transitions++) lanes = recoverableErrors[transitions], renderPriorityLevel(lanes.value, {
      componentStack: lanes.stack,
      digest: lanes.digest
    });
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    0 !== (pendingPassiveEffectsLanes & 1) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (remainingLanes & 1) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncCallbacks();
    return null;
  }
  function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
      var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
        prevTransition = ReactCurrentBatchConfig$2.transition,
        previousPriority = currentUpdatePriority;
      try {
        ReactCurrentBatchConfig$2.transition = null;
        currentUpdatePriority = 16 > renderPriority ? 16 : renderPriority;
        if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = false;else {
          renderPriority = rootWithPendingPassiveEffects;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = 0;
          if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          for (nextEffect = renderPriority.current; null !== nextEffect;) {
            var fiber = nextEffect,
              child = fiber.child;
            if (0 !== (nextEffect.flags & 16)) {
              var deletions = fiber.deletions;
              if (null !== deletions) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  for (nextEffect = fiberToDelete; null !== nextEffect;) {
                    var fiber$jscomp$0 = nextEffect;
                    switch (fiber$jscomp$0.tag) {
                      case 0:
                      case 11:
                      case 15:
                        commitHookEffectListUnmount(8, fiber$jscomp$0, fiber);
                    }
                    var child$jscomp$0 = fiber$jscomp$0.child;
                    if (null !== child$jscomp$0) child$jscomp$0.return = fiber$jscomp$0, nextEffect = child$jscomp$0;else for (; null !== nextEffect;) {
                      fiber$jscomp$0 = nextEffect;
                      var sibling = fiber$jscomp$0.sibling,
                        returnFiber = fiber$jscomp$0.return;
                      detachFiberAfterEffects(fiber$jscomp$0);
                      if (fiber$jscomp$0 === fiberToDelete) {
                        nextEffect = null;
                        break;
                      }
                      if (null !== sibling) {
                        sibling.return = returnFiber;
                        nextEffect = sibling;
                        break;
                      }
                      nextEffect = returnFiber;
                    }
                  }
                }
                var previousFiber = fiber.alternate;
                if (null !== previousFiber) {
                  var detachedChild = previousFiber.child;
                  if (null !== detachedChild) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (null !== detachedChild);
                  }
                }
                nextEffect = fiber;
              }
            }
            if (0 !== (fiber.subtreeFlags & 2064) && null !== child) child.return = fiber, nextEffect = child;else b: for (; null !== nextEffect;) {
              fiber = nextEffect;
              if (0 !== (fiber.flags & 2048)) switch (fiber.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectListUnmount(9, fiber, fiber.return);
              }
              var sibling$jscomp$0 = fiber.sibling;
              if (null !== sibling$jscomp$0) {
                sibling$jscomp$0.return = fiber.return;
                nextEffect = sibling$jscomp$0;
                break b;
              }
              nextEffect = fiber.return;
            }
          }
          var finishedWork = renderPriority.current;
          for (nextEffect = finishedWork; null !== nextEffect;) {
            child = nextEffect;
            var firstChild = child.child;
            if (0 !== (child.subtreeFlags & 2064) && null !== firstChild) firstChild.return = child, nextEffect = firstChild;else b: for (child = finishedWork; null !== nextEffect;) {
              deletions = nextEffect;
              if (0 !== (deletions.flags & 2048)) try {
                switch (deletions.tag) {
                  case 0:
                  case 11:
                  case 15:
                    commitHookEffectListMount(9, deletions);
                }
              } catch (error) {
                captureCommitPhaseError(deletions, deletions.return, error);
              }
              if (deletions === child) {
                nextEffect = null;
                break b;
              }
              var sibling$jscomp$1 = deletions.sibling;
              if (null !== sibling$jscomp$1) {
                sibling$jscomp$1.return = deletions.return;
                nextEffect = sibling$jscomp$1;
                break b;
              }
              nextEffect = deletions.return;
            }
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
            injectedHook.onPostCommitFiberRoot(rendererID, renderPriority);
          } catch (err) {}
          JSCompiler_inline_result = true;
        }
        return JSCompiler_inline_result;
      } finally {
        currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$2.transition = prevTransition;
      }
    }
    return false;
  }
  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 1);
    sourceFiber = requestEventTime();
    null !== rootFiber && (markRootUpdated(rootFiber, 1, sourceFiber), ensureRootIsScheduled(rootFiber, sourceFiber));
  }
  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (nearestMountedAncestor = sourceFiber.return; null !== nearestMountedAncestor;) {
      if (3 === nearestMountedAncestor.tag) {
        captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
        break;
      } else if (1 === nearestMountedAncestor.tag) {
        var instance = nearestMountedAncestor.stateNode;
        if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(nearestMountedAncestor, sourceFiber, 1);
          nearestMountedAncestor = enqueueUpdate(nearestMountedAncestor, sourceFiber, 1);
          sourceFiber = requestEventTime();
          null !== nearestMountedAncestor && (markRootUpdated(nearestMountedAncestor, 1, sourceFiber), ensureRootIsScheduled(nearestMountedAncestor, sourceFiber));
          break;
        }
      }
      nearestMountedAncestor = nearestMountedAncestor.return;
    }
  }
  function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    wakeable = requestEventTime();
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 130023424) === workInProgressRootRenderLanes && 500 > _$$_REQUIRE(_dependencyMap[3]).unstable_now() - globalMostRecentFallbackTime ? prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes);
    ensureRootIsScheduled(root, wakeable);
  }
  function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (0 === (boundaryFiber.mode & 1) ? retryLane = 1 : (retryLane = nextRetryLane, nextRetryLane <<= 1, 0 === (nextRetryLane & 130023424) && (nextRetryLane = 4194304)));
    var eventTime = requestEventTime();
    boundaryFiber = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated(boundaryFiber, retryLane, eventTime), ensureRootIsScheduled(boundaryFiber, eventTime));
  }
  function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState,
      retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch (boundaryFiber.tag) {
      case 13:
        var retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        break;
      case 19:
        retryCache = boundaryFiber.stateNode;
        break;
      default:
        throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  var beginWork$1;
  beginWork$1 = function beginWork$1(current, workInProgress, renderLanes) {
    if (null !== current) {
      if (current.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (0 === (current.lanes & renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
      }
    } else didReceiveUpdate = false;
    workInProgress.lanes = 0;
    switch (workInProgress.tag) {
      case 2:
        var Component = workInProgress.type;
        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
        current = workInProgress.pendingProps;
        var context = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderLanes);
        context = renderWithHooks(null, workInProgress, Component, current, context, renderLanes);
        workInProgress.flags |= 1;
        if ("object" === typeof context && null !== context && "function" === typeof context.render && undefined === context.$$typeof) {
          workInProgress.tag = 1;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          if (isContextProvider(Component)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;
          workInProgress.memoizedState = null !== context.state && undefined !== context.state ? context.state : null;
          initializeUpdateQueue(workInProgress);
          context.updater = classComponentUpdater;
          workInProgress.stateNode = context;
          context._reactInternals = workInProgress;
          mountClassInstance(workInProgress, Component, current, renderLanes);
          workInProgress = finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, context, renderLanes), workInProgress = workInProgress.child;
        return workInProgress;
      case 16:
        Component = workInProgress.elementType;
        a: {
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          context = Component._init;
          Component = context(Component._payload);
          workInProgress.type = Component;
          context = workInProgress.tag = resolveLazyComponentTag(Component);
          current = resolveDefaultProps(Component, current);
          switch (context) {
            case 0:
              workInProgress = updateFunctionComponent(null, workInProgress, Component, current, renderLanes);
              break a;
            case 1:
              workInProgress = updateClassComponent(null, workInProgress, Component, current, renderLanes);
              break a;
            case 11:
              workInProgress = updateForwardRef(null, workInProgress, Component, current, renderLanes);
              break a;
            case 14:
              workInProgress = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, current), renderLanes);
              break a;
          }
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function.");
        }
        return workInProgress;
      case 0:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateFunctionComponent(current, workInProgress, Component, context, renderLanes);
      case 1:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateClassComponent(current, workInProgress, Component, context, renderLanes);
      case 3:
        pushHostRootContext(workInProgress);
        if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
        context = workInProgress.pendingProps;
        Component = workInProgress.memoizedState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, context, null, renderLanes);
        context = workInProgress.memoizedState.element;
        context === Component ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, context, renderLanes), workInProgress = workInProgress.child);
        return workInProgress;
      case 5:
        return pushHostContext(workInProgress), Component = workInProgress.pendingProps.children, markRef(current, workInProgress), reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 6:
        return null;
      case 13:
        return updateSuspenseComponent(current, workInProgress, renderLanes);
      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), Component = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes) : reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 11:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateForwardRef(current, workInProgress, Component, context, renderLanes);
      case 7:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
      case 8:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 12:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 10:
        a: {
          Component = workInProgress.type._context;
          context = workInProgress.pendingProps;
          hasContext = workInProgress.memoizedProps;
          var newValue = context.value;
          push(valueCursor, Component._currentValue2);
          Component._currentValue2 = newValue;
          if (null !== hasContext) if (objectIs(hasContext.value, newValue)) {
            if (hasContext.children === context.children && !didPerformWorkStackCursor.current) {
              workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              break a;
            }
          } else for (hasContext = workInProgress.child, null !== hasContext && (hasContext.return = workInProgress); null !== hasContext;) {
            var list = hasContext.dependencies;
            if (null !== list) {
              newValue = hasContext.child;
              for (var dependency = list.firstContext; null !== dependency;) {
                if (dependency.context === Component) {
                  if (1 === hasContext.tag) {
                    dependency = createUpdate(-1, renderLanes & -renderLanes);
                    dependency.tag = 2;
                    var updateQueue = hasContext.updateQueue;
                    if (null !== updateQueue) {
                      updateQueue = updateQueue.shared;
                      var pending = updateQueue.pending;
                      null === pending ? dependency.next = dependency : (dependency.next = pending.next, pending.next = dependency);
                      updateQueue.pending = dependency;
                    }
                  }
                  hasContext.lanes |= renderLanes;
                  dependency = hasContext.alternate;
                  null !== dependency && (dependency.lanes |= renderLanes);
                  scheduleContextWorkOnParentPath(hasContext.return, renderLanes, workInProgress);
                  list.lanes |= renderLanes;
                  break;
                }
                dependency = dependency.next;
              }
            } else if (10 === hasContext.tag) newValue = hasContext.type === workInProgress.type ? null : hasContext.child;else if (18 === hasContext.tag) {
              newValue = hasContext.return;
              if (null === newValue) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              newValue.lanes |= renderLanes;
              list = newValue.alternate;
              null !== list && (list.lanes |= renderLanes);
              scheduleContextWorkOnParentPath(newValue, renderLanes, workInProgress);
              newValue = hasContext.sibling;
            } else newValue = hasContext.child;
            if (null !== newValue) newValue.return = hasContext;else for (newValue = hasContext; null !== newValue;) {
              if (newValue === workInProgress) {
                newValue = null;
                break;
              }
              hasContext = newValue.sibling;
              if (null !== hasContext) {
                hasContext.return = newValue.return;
                newValue = hasContext;
                break;
              }
              newValue = newValue.return;
            }
            hasContext = newValue;
          }
          reconcileChildren(current, workInProgress, context.children, renderLanes);
          workInProgress = workInProgress.child;
        }
        return workInProgress;
      case 9:
        return context = workInProgress.type, Component = workInProgress.pendingProps.children, prepareToReadContext(workInProgress, renderLanes), context = readContext(context), Component = Component(context), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 14:
        return Component = workInProgress.type, context = resolveDefaultProps(Component, workInProgress.pendingProps), context = resolveDefaultProps(Component.type, context), updateMemoComponent(current, workInProgress, Component, context, renderLanes);
      case 15:
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 17:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, isContextProvider(Component) ? (current = true, pushContextProvider(workInProgress)) : current = false, prepareToReadContext(workInProgress, renderLanes), constructClassInstance(workInProgress, Component, context), mountClassInstance(workInProgress, Component, context, renderLanes), finishClassComponent(null, workInProgress, Component, true, current, renderLanes);
      case 19:
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      case 22:
        return updateOffscreenComponent(current, workInProgress, renderLanes);
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  };
  function scheduleCallback$1(priorityLevel, callback) {
    return _$$_REQUIRE(_dependencyMap[3]).unstable_scheduleCallback(priorityLevel, callback);
  }
  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }
  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }
  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;
    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }
    return 2;
  }
  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 14680064;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      lanes: pendingProps.lanes,
      firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }
  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 8;
        break;
      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;
          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;
          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;
          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;
          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
  }
  function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiber(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
  }
  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiber(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    pendingProps.stateNode = {
      isHidden: false
    };
    return pendingProps;
  }
  function createFiberFromText(content, mode, lanes) {
    content = createFiber(6, content, null, mode);
    content.lanes = lanes;
    return content;
  }
  function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }
  function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = createLaneMap(0);
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.identifierPrefix = identifierPrefix;
    this.onRecoverableError = onRecoverableError;
  }
  function createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }
  function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (undefined === fiber) {
      if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
      component = Object.keys(component).join(",");
      throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }
  function updateContainer(element, container, parentComponent, callback) {
    var current = container.current,
      eventTime = requestEventTime(),
      lane = requestUpdateLane(current);
    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternals;
      b: {
        if (getNearestMountedFiber(parentComponent) !== parentComponent || 1 !== parentComponent.tag) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var JSCompiler_inline_result = parentComponent;
        do {
          switch (JSCompiler_inline_result.tag) {
            case 3:
              JSCompiler_inline_result = JSCompiler_inline_result.stateNode.context;
              break b;
            case 1:
              if (isContextProvider(JSCompiler_inline_result.type)) {
                JSCompiler_inline_result = JSCompiler_inline_result.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }
          }
          JSCompiler_inline_result = JSCompiler_inline_result.return;
        } while (null !== JSCompiler_inline_result);
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;
        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, JSCompiler_inline_result);
          break a;
        }
      }
      parentComponent = JSCompiler_inline_result;
    } else parentComponent = emptyContextObject;
    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = createUpdate(eventTime, lane);
    container.payload = {
      element: element
    };
    callback = undefined === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(current, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, current, lane, eventTime), entangleTransitions(element, current, lane));
    return lane;
  }
  function emptyFindFiberByHostInstance() {
    return null;
  }
  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }
  function onRecoverableError(error) {
    console.error(error);
  }
  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now() + 500, includesLegacySyncCallbacks && flushSyncCallbacks());
    }
  };
  var roots = new Map(),
    devToolsConfig$jscomp$inline_938 = {
      findFiberByHostInstance: getInstanceFromInstance,
      bundleType: 0,
      version: "18.2.0-next-9e3b772b8-20220608",
      rendererPackageName: "react-native-renderer",
      rendererConfig: {
        getInspectorDataForViewTag: function getInspectorDataForViewTag() {
          throw Error("getInspectorDataForViewTag() is not available in production");
        },
        getInspectorDataForViewAtPoint: function () {
          throw Error("getInspectorDataForViewAtPoint() is not available in production.");
        }.bind(null, findNodeHandle)
      }
    };
  var internals$jscomp$inline_1180 = {
    bundleType: devToolsConfig$jscomp$inline_938.bundleType,
    version: devToolsConfig$jscomp$inline_938.version,
    rendererPackageName: devToolsConfig$jscomp$inline_938.rendererPackageName,
    rendererConfig: devToolsConfig$jscomp$inline_938.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setErrorHandler: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
    findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    },
    findFiberByHostInstance: devToolsConfig$jscomp$inline_938.findFiberByHostInstance || emptyFindFiberByHostInstance,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
    reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
  };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1181 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1181.isDisabled && hook$jscomp$inline_1181.supportsFiber) try {
      rendererID = hook$jscomp$inline_1181.inject(internals$jscomp$inline_1180), injectedHook = hook$jscomp$inline_1181;
    } catch (err) {}
  }
  exports.createPortal = function (children, containerTag) {
    return createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
  };
  exports.dispatchCommand = function (handle, command, args) {
    null != handle._nativeTag && (null != handle._internalInstanceHandle ? (handle = handle._internalInstanceHandle.stateNode, null != handle && nativeFabricUIManager.dispatchCommand(handle.node, command, args)) : _$$_REQUIRE(_dependencyMap[2]).UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args));
  };
  exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
    if (null == componentOrHandle) return null;
    if (componentOrHandle._nativeTag) return componentOrHandle;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical : componentOrHandle;
  };
  exports.findNodeHandle = findNodeHandle;
  exports.getInspectorDataForInstance = undefined;
  exports.render = function (element, containerTag, callback, concurrentRoot) {
    var root = roots.get(containerTag);
    root || (root = concurrentRoot ? 1 : 0, concurrentRoot = new FiberRootNode(containerTag, root, false, "", onRecoverableError), root = createFiber(3, null, null, 1 === root ? 1 : 0), concurrentRoot.current = root, root.stateNode = concurrentRoot, root.memoizedState = {
      element: null,
      isDehydrated: false,
      cache: null,
      transitions: null,
      pendingSuspenseBoundaries: null
    }, initializeUpdateQueue(root), root = concurrentRoot, roots.set(containerTag, root));
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch (element.child.tag) {
      case 5:
        element = element.child.stateNode.canonical;
        break a;
      default:
        element = element.child.stateNode;
    } else element = null;
    return element;
  };
  exports.sendAccessibilityEvent = function (handle, eventType) {
    null != handle._nativeTag && (null != handle._internalInstanceHandle ? (handle = handle._internalInstanceHandle.stateNode, null != handle && nativeFabricUIManager.sendAccessibilityEvent(handle.node, eventType)) : _$$_REQUIRE(_dependencyMap[2]).legacySendAccessibilityEvent(handle._nativeTag, eventType));
  };
  exports.stopSurface = function (containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function () {
      roots.delete(containerTag);
    });
  };
  exports.unmountComponentAtNode = function (containerTag) {
    this.stopSurface(containerTag);
  };
},55,[56,153,209,237]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  _$$_REQUIRE(_dependencyMap[0]);
},56,[57]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * Sets up global variables typical in most JavaScript environments.
   *
   *   1. Global timers (via `setTimeout` etc).
   *   2. Global console object.
   *   3. Hooks for printing stack traces with source maps.
   *
   * Leaves enough room in the environment for implementing your own:
   *
   *   1. Require system.
   *   2. Bridged modules.
   *
   */

  'use strict';

  var start = Date.now();
  _$$_REQUIRE(_dependencyMap[0]);
  _$$_REQUIRE(_dependencyMap[1]);
  _$$_REQUIRE(_dependencyMap[2]);
  _$$_REQUIRE(_dependencyMap[3]);
  _$$_REQUIRE(_dependencyMap[4]);
  _$$_REQUIRE(_dependencyMap[5]);
  _$$_REQUIRE(_dependencyMap[6]);
  _$$_REQUIRE(_dependencyMap[7]);
  _$$_REQUIRE(_dependencyMap[8]);
  _$$_REQUIRE(_dependencyMap[9]);
  _$$_REQUIRE(_dependencyMap[10]);
  _$$_REQUIRE(_dependencyMap[11]);
  _$$_REQUIRE(_dependencyMap[12]);
  // We could just call GlobalPerformanceLogger.markPoint at the top of the file,
  // but then we'd be excluding the time it took to require the logger.
  // Instead, we just use Date.now and backdate the timestamp.
  _$$_REQUIRE(_dependencyMap[13]).markPoint('initializeCore_start', _$$_REQUIRE(_dependencyMap[13]).currentTimestamp() - (Date.now() - start));
  _$$_REQUIRE(_dependencyMap[13]).markPoint('initializeCore_end');
},57,[58,59,62,74,84,90,93,98,128,132,133,141,143,106]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * Sets up global variables for React Native.
   * You can use this module directly, or just require InitializeCore.
   */
  if (global.window === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    global.window = global;
  }
  if (global.self === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    global.self = global;
  }

  // Set up process
  // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
  global.process = global.process || {};
  // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
  global.process.env = global.process.env || {};
  if (!global.process.env.NODE_ENV) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    global.process.env.NODE_ENV = 'production';
  }
},58,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _DOMRect = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _DOMRectReadOnly = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it
  global.DOMRect = _DOMRect.default;

  // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it
  global.DOMRectReadOnly = _DOMRectReadOnly.default;
},59,[1,60,61]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _DOMRectReadOnly2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */ /**
 * The JSDoc comments in this file have been extracted from [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect).
 * Content by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect/contributors.txt),
 * licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).
 */
  // flowlint unsafe-getters-setters:off
  /**
   * A `DOMRect` describes the size and position of a rectangle.
   * The type of box represented by the `DOMRect` is specified by the method or property that returned it.
   *
   * This is a (mostly) spec-compliant version of `DOMRect` (https://developer.mozilla.org/en-US/docs/Web/API/DOMRect).
   */
  var DOMRect = exports.default = /*#__PURE__*/function (_DOMRectReadOnly) {
    (0, _inherits2.default)(DOMRect, _DOMRectReadOnly);
    var _super = _createSuper(DOMRect);
    function DOMRect() {
      (0, _classCallCheck2.default)(this, DOMRect);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(DOMRect, [{
      key: "x",
      get:
      /**
       * The x coordinate of the `DOMRect`'s origin.
       */
      function get() {
        return this.__getInternalX();
      },
      set: function set(x) {
        this.__setInternalX(x);
      }

      /**
       * The y coordinate of the `DOMRect`'s origin.
       */
    }, {
      key: "y",
      get: function get() {
        return this.__getInternalY();
      },
      set: function set(y) {
        this.__setInternalY(y);
      }

      /**
       * The width of the `DOMRect`.
       */
    }, {
      key: "width",
      get: function get() {
        return this.__getInternalWidth();
      },
      set: function set(width) {
        this.__setInternalWidth(width);
      }

      /**
       * The height of the `DOMRect`.
       */
    }, {
      key: "height",
      get: function get() {
        return this.__getInternalHeight();
      },
      set: function set(height) {
        this.__setInternalHeight(height);
      }

      /**
       * Creates a new `DOMRect` object with a given location and dimensions.
       */
    }], [{
      key: "fromRect",
      value: function fromRect(rect) {
        if (!rect) {
          return new DOMRect();
        }
        return new DOMRect(rect.x, rect.y, rect.width, rect.height);
      }
    }]);
    return DOMRect;
  }(_DOMRectReadOnly2.default);
},60,[1,5,6,13,15,12,61]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * The JSDoc comments in this file have been extracted from [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly).
   * Content by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/contributors.txt),
   * licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).
   */

  // flowlint sketchy-null:off, unsafe-getters-setters:off

  function castToNumber(value) {
    return value ? Number(value) : 0;
  }

  /**
   * The `DOMRectReadOnly` interface specifies the standard properties used by `DOMRect` to define a rectangle whose properties are immutable.
   *
   * This is a (mostly) spec-compliant version of `DOMRectReadOnly` (https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly).
   */
  var DOMRectReadOnly = exports.default = /*#__PURE__*/function () {
    function DOMRectReadOnly(x, y, width, height) {
      (0, _classCallCheck2.default)(this, DOMRectReadOnly);
      this.__setInternalX(x);
      this.__setInternalY(y);
      this.__setInternalWidth(width);
      this.__setInternalHeight(height);
    }

    /**
     * The x coordinate of the `DOMRectReadOnly`'s origin.
     */
    (0, _createClass2.default)(DOMRectReadOnly, [{
      key: "x",
      get: function get() {
        return this._x;
      }

      /**
       * The y coordinate of the `DOMRectReadOnly`'s origin.
       */
    }, {
      key: "y",
      get: function get() {
        return this._y;
      }

      /**
       * The width of the `DOMRectReadOnly`.
       */
    }, {
      key: "width",
      get: function get() {
        return this._width;
      }

      /**
       * The height of the `DOMRectReadOnly`.
       */
    }, {
      key: "height",
      get: function get() {
        return this._height;
      }

      /**
       * Returns the top coordinate value of the `DOMRect` (has the same value as `y`, or `y + height` if `height` is negative).
       */
    }, {
      key: "top",
      get: function get() {
        var height = this._height;
        var y = this._y;
        if (height < 0) {
          return y + height;
        }
        return y;
      }

      /**
       * Returns the right coordinate value of the `DOMRect` (has the same value as ``x + width`, or `x` if `width` is negative).
       */
    }, {
      key: "right",
      get: function get() {
        var width = this._width;
        var x = this._x;
        if (width < 0) {
          return x;
        }
        return x + width;
      }

      /**
       * Returns the bottom coordinate value of the `DOMRect` (has the same value as `y + height`, or `y` if `height` is negative).
       */
    }, {
      key: "bottom",
      get: function get() {
        var height = this._height;
        var y = this._y;
        if (height < 0) {
          return y;
        }
        return y + height;
      }

      /**
       * Returns the left coordinate value of the `DOMRect` (has the same value as `x`, or `x + width` if `width` is negative).
       */
    }, {
      key: "left",
      get: function get() {
        var width = this._width;
        var x = this._x;
        if (width < 0) {
          return x + width;
        }
        return x;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var x = this.x,
          y = this.y,
          width = this.width,
          height = this.height,
          top = this.top,
          left = this.left,
          bottom = this.bottom,
          right = this.right;
        return {
          x: x,
          y: y,
          width: width,
          height: height,
          top: top,
          left: left,
          bottom: bottom,
          right: right
        };
      }

      /**
       * Creates a new `DOMRectReadOnly` object with a given location and dimensions.
       */
    }, {
      key: "__getInternalX",
      value: function __getInternalX() {
        return this._x;
      }
    }, {
      key: "__getInternalY",
      value: function __getInternalY() {
        return this._y;
      }
    }, {
      key: "__getInternalWidth",
      value: function __getInternalWidth() {
        return this._width;
      }
    }, {
      key: "__getInternalHeight",
      value: function __getInternalHeight() {
        return this._height;
      }
    }, {
      key: "__setInternalX",
      value: function __setInternalX(x) {
        this._x = castToNumber(x);
      }
    }, {
      key: "__setInternalY",
      value: function __setInternalY(y) {
        this._y = castToNumber(y);
      }
    }, {
      key: "__setInternalWidth",
      value: function __setInternalWidth(width) {
        this._width = castToNumber(width);
      }
    }, {
      key: "__setInternalHeight",
      value: function __setInternalHeight(height) {
        this._height = castToNumber(height);
      }
    }], [{
      key: "fromRect",
      value: function fromRect(rect) {
        if (!rect) {
          return new DOMRectReadOnly();
        }
        return new DOMRectReadOnly(rect.x, rect.y, rect.width, rect.height);
      }
    }]);
    return DOMRectReadOnly;
  }();
},61,[1,5,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativePerformance = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _Performance = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  // In case if the native implementation of the Performance API is available, use it,
  // otherwise fall back to the legacy/default one, which only defines 'Performance.now()'
  if (_NativePerformance.default) {
    // $FlowExpectedError[cannot-write]
    global.performance = new _Performance.default();
  } else {
    if (!global.performance) {
      // $FlowExpectedError[cannot-write]
      global.performance = {
        now: function now() {
          var performanceNow = global.nativePerformanceNow || Date.now;
          return performanceNow();
        }
      };
    }
  }
},62,[1,63,64]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('NativePerformanceCxx');
},63,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.PerformanceMeasure = exports.PerformanceMark = undefined;
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _warnOnce = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _EventCounts = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _MemoryInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _NativePerformance = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _ReactNativeStartupTiming = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */ // flowlint unsafe-getters-setters:off
  var getCurrentTimeStamp = global.nativePerformanceNow ? global.nativePerformanceNow : function () {
    return Date.now();
  };

  // We want some of the performance entry types to be always logged,
  // even if they are not currently observed - this is either to be able to
  // retrieve them at any time via Performance.getEntries* or to refer by other entries
  // (such as when measures may refer to marks, even if the latter are not observed)
  if (_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.setIsBuffered) {
    _NativePerformanceObserver.default == null ? undefined : _NativePerformanceObserver.default.setIsBuffered(_$$_REQUIRE(_dependencyMap[12]).ALWAYS_LOGGED_ENTRY_TYPES.map(_$$_REQUIRE(_dependencyMap[13]).performanceEntryTypeToRaw), true);
  }
  var PerformanceMark = exports.PerformanceMark = /*#__PURE__*/function (_PerformanceEntry) {
    (0, _inherits2.default)(PerformanceMark, _PerformanceEntry);
    var _super = _createSuper(PerformanceMark);
    function PerformanceMark(markName, markOptions) {
      var _markOptions$startTim;
      var _this;
      (0, _classCallCheck2.default)(this, PerformanceMark);
      _this = _super.call(this, {
        name: markName,
        entryType: 'mark',
        startTime: (_markOptions$startTim = markOptions == null ? undefined : markOptions.startTime) != null ? _markOptions$startTim : getCurrentTimeStamp(),
        duration: 0
      });
      if (markOptions) {
        _this.detail = markOptions.detail;
      }
      return _this;
    }
    return (0, _createClass2.default)(PerformanceMark);
  }(_$$_REQUIRE(_dependencyMap[12]).PerformanceEntry);
  var PerformanceMeasure = exports.PerformanceMeasure = /*#__PURE__*/function (_PerformanceEntry2) {
    (0, _inherits2.default)(PerformanceMeasure, _PerformanceEntry2);
    var _super2 = _createSuper(PerformanceMeasure);
    function PerformanceMeasure(measureName, measureOptions) {
      var _measureOptions$durat;
      var _this2;
      (0, _classCallCheck2.default)(this, PerformanceMeasure);
      _this2 = _super2.call(this, {
        name: measureName,
        entryType: 'measure',
        startTime: 0,
        duration: (_measureOptions$durat = measureOptions == null ? undefined : measureOptions.duration) != null ? _measureOptions$durat : 0
      });
      if (measureOptions) {
        _this2.detail = measureOptions.detail;
      }
      return _this2;
    }
    return (0, _createClass2.default)(PerformanceMeasure);
  }(_$$_REQUIRE(_dependencyMap[12]).PerformanceEntry);
  function warnNoNativePerformance() {
    (0, _warnOnce.default)('missing-native-performance', 'Missing native implementation of Performance');
  }

  /**
   * Partial implementation of the Performance interface for RN,
   * corresponding to the standard in
   * https://www.w3.org/TR/user-timing/#extensions-performance-interface
   */
  var Performance = exports.default = /*#__PURE__*/function () {
    function Performance() {
      (0, _classCallCheck2.default)(this, Performance);
      this.eventCounts = new _EventCounts.default();
    }
    (0, _createClass2.default)(Performance, [{
      key: "memory",
      get:
      // Get the current JS memory information.
      function get() {
        if (_NativePerformance.default != null && _NativePerformance.default.getSimpleMemoryInfo) {
          // JSI API implementations may have different variants of names for the JS
          // heap information we need here. We will parse the result based on our
          // guess of the implementation for now.
          var memoryInfo = _NativePerformance.default.getSimpleMemoryInfo();
          if (memoryInfo.hasOwnProperty('hermes_heapSize')) {
            // We got memory information from Hermes
            var totalJSHeapSize = memoryInfo.hermes_heapSize,
              usedJSHeapSize = memoryInfo.hermes_allocatedBytes;
            return new _MemoryInfo.default({
              jsHeapSizeLimit: null,
              // We don't know the heap size limit from Hermes.
              totalJSHeapSize: totalJSHeapSize,
              usedJSHeapSize: usedJSHeapSize
            });
          } else {
            // JSC and V8 has no native implementations for memory information in JSI::Instrumentation
            return new _MemoryInfo.default();
          }
        }
        return new _MemoryInfo.default();
      }

      // Startup metrics is not used in web, but only in React Native.
    }, {
      key: "reactNativeStartupTiming",
      get: function get() {
        if (_NativePerformance.default != null && _NativePerformance.default.getReactNativeStartupTiming) {
          var _NativePerformance$ge = _NativePerformance.default.getReactNativeStartupTiming(),
            startTime = _NativePerformance$ge.startTime,
            endTime = _NativePerformance$ge.endTime,
            initializeRuntimeStart = _NativePerformance$ge.initializeRuntimeStart,
            initializeRuntimeEnd = _NativePerformance$ge.initializeRuntimeEnd,
            executeJavaScriptBundleEntryPointStart = _NativePerformance$ge.executeJavaScriptBundleEntryPointStart,
            executeJavaScriptBundleEntryPointEnd = _NativePerformance$ge.executeJavaScriptBundleEntryPointEnd;
          return new _ReactNativeStartupTiming.default({
            startTime: startTime,
            endTime: endTime,
            initializeRuntimeStart: initializeRuntimeStart,
            initializeRuntimeEnd: initializeRuntimeEnd,
            executeJavaScriptBundleEntryPointStart: executeJavaScriptBundleEntryPointStart,
            executeJavaScriptBundleEntryPointEnd: executeJavaScriptBundleEntryPointEnd
          });
        }
        return new _ReactNativeStartupTiming.default();
      }
    }, {
      key: "mark",
      value: function mark(markName, markOptions) {
        var mark = new PerformanceMark(markName, markOptions);
        if (_NativePerformance.default != null && _NativePerformance.default.mark) {
          _NativePerformance.default.mark(markName, mark.startTime);
        } else {
          warnNoNativePerformance();
        }
        return mark;
      }
    }, {
      key: "clearMarks",
      value: function clearMarks(markName) {
        if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.clearEntries)) {
          (0, _$$_REQUIRE(_dependencyMap[14]).warnNoNativePerformanceObserver)();
          return;
        }
        _NativePerformanceObserver.default == null ? undefined : _NativePerformanceObserver.default.clearEntries(_$$_REQUIRE(_dependencyMap[13]).RawPerformanceEntryTypeValues.MARK, markName);
      }
    }, {
      key: "measure",
      value: function measure(measureName, startMarkOrOptions, endMark) {
        var options;
        var startMarkName,
          endMarkName = endMark,
          duration,
          startTime = 0,
          endTime = 0;
        if (typeof startMarkOrOptions === 'string') {
          startMarkName = startMarkOrOptions;
        } else if (startMarkOrOptions !== undefined) {
          var _options$duration;
          options = startMarkOrOptions;
          if (endMark !== undefined) {
            throw new TypeError("Performance.measure: Can't have both options and endMark");
          }
          if (options.start === undefined && options.end === undefined) {
            throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');
          }
          if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {
            throw new TypeError("Performance.measure: Can't have both start/end and duration explicitly in options");
          }
          if (typeof options.start === 'number') {
            startTime = options.start;
          } else {
            startMarkName = options.start;
          }
          if (typeof options.end === 'number') {
            endTime = options.end;
          } else {
            endMarkName = options.end;
          }
          duration = (_options$duration = options.duration) != null ? _options$duration : duration;
        }
        var measure = new PerformanceMeasure(measureName, options);
        if (_NativePerformance.default != null && _NativePerformance.default.measure) {
          _NativePerformance.default.measure(measureName, startTime, endTime, duration, startMarkName, endMarkName);
        } else {
          warnNoNativePerformance();
        }
        return measure;
      }
    }, {
      key: "clearMeasures",
      value: function clearMeasures(measureName) {
        if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.clearEntries)) {
          (0, _$$_REQUIRE(_dependencyMap[14]).warnNoNativePerformanceObserver)();
          return;
        }
        _NativePerformanceObserver.default == null ? undefined : _NativePerformanceObserver.default.clearEntries(_$$_REQUIRE(_dependencyMap[13]).RawPerformanceEntryTypeValues.MEASURE, measureName);
      }

      /**
       * Returns a double, measured in milliseconds.
       * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
       */
    }, {
      key: "now",
      value: function now() {
        return getCurrentTimeStamp();
      }

      /**
       * An extension that allows to get back to JS all currently logged marks/measures
       * (in our case, be it from JS or native), see
       * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface
       */
    }, {
      key: "getEntries",
      value: function getEntries() {
        if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.getEntries)) {
          (0, _$$_REQUIRE(_dependencyMap[14]).warnNoNativePerformanceObserver)();
          return [];
        }
        return _NativePerformanceObserver.default.getEntries().map(_$$_REQUIRE(_dependencyMap[13]).rawToPerformanceEntry);
      }
    }, {
      key: "getEntriesByType",
      value: function getEntriesByType(entryType) {
        if (!_$$_REQUIRE(_dependencyMap[12]).ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {
          console.warn(`Performance.getEntriesByType: Only valid for ${JSON.stringify(_$$_REQUIRE(_dependencyMap[12]).ALWAYS_LOGGED_ENTRY_TYPES)} entry types, got ${entryType}`);
          return [];
        }
        if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.getEntries)) {
          (0, _$$_REQUIRE(_dependencyMap[14]).warnNoNativePerformanceObserver)();
          return [];
        }
        return _NativePerformanceObserver.default.getEntries((0, _$$_REQUIRE(_dependencyMap[13]).performanceEntryTypeToRaw)(entryType)).map(_$$_REQUIRE(_dependencyMap[13]).rawToPerformanceEntry);
      }
    }, {
      key: "getEntriesByName",
      value: function getEntriesByName(entryName, entryType) {
        if (entryType !== undefined && !_$$_REQUIRE(_dependencyMap[12]).ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {
          console.warn(`Performance.getEntriesByName: Only valid for ${JSON.stringify(_$$_REQUIRE(_dependencyMap[12]).ALWAYS_LOGGED_ENTRY_TYPES)} entry types, got ${entryType}`);
          return [];
        }
        if (!(_NativePerformanceObserver.default != null && _NativePerformanceObserver.default.getEntries)) {
          (0, _$$_REQUIRE(_dependencyMap[14]).warnNoNativePerformanceObserver)();
          return [];
        }
        return _NativePerformanceObserver.default.getEntries(entryType != null ? (0, _$$_REQUIRE(_dependencyMap[13]).performanceEntryTypeToRaw)(entryType) : undefined, entryName).map(_$$_REQUIRE(_dependencyMap[13]).rawToPerformanceEntry);
      }
    }]);
    return Performance;
  }();
},64,[1,6,5,13,15,12,65,66,72,63,67,73,71,69,68]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var warnedKeys = {};

  /**
   * A simple function that prints a warning message once per session.
   *
   * @param {string} key - The key used to ensure the message is printed once.
   *                       This should be unique to the callsite.
   * @param {string} message - The message to print
   */
  function warnOnce(key, message) {
    if (warnedKeys[key]) {
      return;
    }
    console.warn(message);
    warnedKeys[key] = true;
  }
  module.exports = warnOnce;
},65,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var cachedEventCounts;
  function getCachedEventCounts() {
    var _cachedEventCounts;
    if (cachedEventCounts) {
      return cachedEventCounts;
    }
    if (!_NativePerformanceObserver.default) {
      (0, _$$_REQUIRE(_dependencyMap[4]).warnNoNativePerformanceObserver)();
      return new Map();
    }
    cachedEventCounts = new Map(_NativePerformanceObserver.default.getEventCounts());
    // $FlowFixMe[incompatible-call]
    global.queueMicrotask(function () {
      // To be consistent with the calls to the API from the same task,
      // but also not to refetch the data from native too often,
      // schedule to invalidate the cache later,
      // after the current task is guaranteed to have finished.
      cachedEventCounts = null;
    });
    return (_cachedEventCounts = cachedEventCounts) != null ? _cachedEventCounts : new Map();
  }
  /**
   * Implementation of the EventCounts Web Performance API
   * corresponding to the standard in
   * https://www.w3.org/TR/event-timing/#eventcounts
   */
  var EventCounts = exports.default = /*#__PURE__*/function () {
    function EventCounts() {
      (0, _classCallCheck2.default)(this, EventCounts);
    }
    (0, _createClass2.default)(EventCounts, [{
      key: "size",
      get:
      // flowlint unsafe-getters-setters:off
      function get() {
        return getCachedEventCounts().size;
      }
    }, {
      key: "entries",
      value: function entries() {
        return getCachedEventCounts().entries();
      }
    }, {
      key: "forEach",
      value: function forEach(callback) {
        return getCachedEventCounts().forEach(callback);
      }
    }, {
      key: "get",
      value: function get(key) {
        return getCachedEventCounts().get(key);
      }
    }, {
      key: "has",
      value: function has(key) {
        return getCachedEventCounts().has(key);
      }
    }, {
      key: "keys",
      value: function keys() {
        return getCachedEventCounts().keys();
      }
    }, {
      key: "values",
      value: function values() {
        return getCachedEventCounts().values();
      }
    }]);
    return EventCounts;
  }();
},66,[1,5,6,67,68]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('NativePerformanceObserverCxx');
},67,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.PerformanceObserverEntryList = undefined;
  exports.warnNoNativePerformanceObserver = warnNoNativePerformanceObserver;
  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _warnOnce = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  var PerformanceObserverEntryList = exports.PerformanceObserverEntryList = /*#__PURE__*/function () {
    function PerformanceObserverEntryList(entries) {
      (0, _classCallCheck2.default)(this, PerformanceObserverEntryList);
      this._entries = entries;
    }
    (0, _createClass2.default)(PerformanceObserverEntryList, [{
      key: "getEntries",
      value: function getEntries() {
        return this._entries;
      }
    }, {
      key: "getEntriesByType",
      value: function getEntriesByType(type) {
        return this._entries.filter(function (entry) {
          return entry.entryType === type;
        });
      }
    }, {
      key: "getEntriesByName",
      value: function getEntriesByName(name, type) {
        if (type === undefined) {
          return this._entries.filter(function (entry) {
            return entry.name === name;
          });
        } else {
          return this._entries.filter(function (entry) {
            return entry.name === name && entry.entryType === type;
          });
        }
      }
    }]);
    return PerformanceObserverEntryList;
  }();
  var observerCountPerEntryType = new Map();
  var registeredObservers = new Map();
  var isOnPerformanceEntryCallbackSet = false;

  // This is a callback that gets scheduled and periodically called from the native side
  var onPerformanceEntry = function onPerformanceEntry() {
    var _entryResult$entries;
    if (!_NativePerformanceObserver.default) {
      return;
    }
    var entryResult = _NativePerformanceObserver.default.popPendingEntries();
    var rawEntries = (_entryResult$entries = entryResult == null ? undefined : entryResult.entries) != null ? _entryResult$entries : [];
    var droppedEntriesCount = entryResult == null ? undefined : entryResult.droppedEntriesCount;
    if (rawEntries.length === 0) {
      return;
    }
    var entries = rawEntries.map(_$$_REQUIRE(_dependencyMap[7]).rawToPerformanceEntry);
    var _loop = function _loop(observerConfig) {
      var entriesForObserver = entries.filter(function (entry) {
        if (!observerConfig.entryTypes.has(entry.entryType)) {
          return false;
        }
        var durationThreshold = observerConfig.entryTypes.get(entry.entryType);
        return entry.duration >= (durationThreshold != null ? durationThreshold : 0);
      });
      observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), _observer, droppedEntriesCount);
    };
    for (var _ref of registeredObservers.entries()) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
      var _observer = _ref2[0];
      var observerConfig = _ref2[1];
      _loop(observerConfig);
    }
  };
  function warnNoNativePerformanceObserver() {
    (0, _warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');
  }
  function applyDurationThresholds() {
    var durationThresholds = Array.from(registeredObservers.values()).map(function (config) {
      return config.entryTypes;
    }).reduce(function (accumulator, currentValue) {
      return union(accumulator, currentValue);
    }, new Map());
    for (var _ref3 of durationThresholds) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
      var entryType = _ref4[0];
      var durationThreshold = _ref4[1];
      _NativePerformanceObserver.default == null ? undefined : _NativePerformanceObserver.default.setDurationThreshold((0, _$$_REQUIRE(_dependencyMap[7]).performanceEntryTypeToRaw)(entryType), durationThreshold != null ? durationThreshold : 0);
    }
  }

  /**
   * Implementation of the PerformanceObserver interface for RN,
   * corresponding to the standard in https://www.w3.org/TR/performance-timeline/
   *
   * @example
   * const observer = new PerformanceObserver((list, _observer) => {
   *   const entries = list.getEntries();
   *   entries.forEach(entry => {
   *     reportEvent({
   *       eventName: entry.name,
   *       startTime: entry.startTime,
   *       endTime: entry.startTime + entry.duration,
   *       processingStart: entry.processingStart,
   *       processingEnd: entry.processingEnd,
   *       interactionId: entry.interactionId,
   *     });
   *   });
   * });
   * observer.observe({ type: "event" });
   */
  var PerformanceObserver = exports.default = /*#__PURE__*/function () {
    function PerformanceObserver(callback) {
      (0, _classCallCheck2.default)(this, PerformanceObserver);
      this._callback = callback;
    }
    (0, _createClass2.default)(PerformanceObserver, [{
      key: "observe",
      value: function observe(options) {
        var _registeredObservers$;
        if (!_NativePerformanceObserver.default) {
          warnNoNativePerformanceObserver();
          return;
        }
        this._validateObserveOptions(options);
        var requestedEntryTypes;
        if (options.entryTypes) {
          this._type = 'multiple';
          requestedEntryTypes = new Map(options.entryTypes.map(function (t) {
            return [t, undefined];
          }));
        } else {
          this._type = 'single';
          requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);
        }

        // The same observer may receive multiple calls to "observe", so we need
        // to check what is new on this call vs. previous ones.
        var currentEntryTypes = (_registeredObservers$ = registeredObservers.get(this)) == null ? undefined : _registeredObservers$.entryTypes;
        var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;

        // This `observe` call is a no-op because there are no new things to observe.
        if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {
          return;
        }
        registeredObservers.set(this, {
          callback: this._callback,
          entryTypes: nextEntryTypes
        });
        if (!isOnPerformanceEntryCallbackSet) {
          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);
          isOnPerformanceEntryCallbackSet = true;
        }

        // We only need to start listenening to new entry types being observed in
        // this observer.
        var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());
        for (var type of newEntryTypes) {
          var _observerCountPerEntr;
          if (!observerCountPerEntryType.has(type)) {
            var rawType = (0, _$$_REQUIRE(_dependencyMap[7]).performanceEntryTypeToRaw)(type);
            _NativePerformanceObserver.default.startReporting(rawType);
          }
          observerCountPerEntryType.set(type, ((_observerCountPerEntr = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr : 0) + 1);
        }
        applyDurationThresholds();
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        if (!_NativePerformanceObserver.default) {
          warnNoNativePerformanceObserver();
          return;
        }
        var observerConfig = registeredObservers.get(this);
        if (!observerConfig) {
          return;
        }

        // Disconnect this observer
        for (var type of observerConfig.entryTypes.keys()) {
          var _observerCountPerEntr2;
          var numberOfObserversForThisType = (_observerCountPerEntr2 = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr2 : 0;
          if (numberOfObserversForThisType === 1) {
            observerCountPerEntryType.delete(type);
            _NativePerformanceObserver.default.stopReporting((0, _$$_REQUIRE(_dependencyMap[7]).performanceEntryTypeToRaw)(type));
          } else if (numberOfObserversForThisType !== 0) {
            observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);
          }
        }

        // Disconnect all observers if this was the last one
        registeredObservers.delete(this);
        if (registeredObservers.size === 0) {
          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);
          isOnPerformanceEntryCallbackSet = false;
        }
        applyDurationThresholds();
      }
    }, {
      key: "_validateObserveOptions",
      value: function _validateObserveOptions(options) {
        var type = options.type,
          entryTypes = options.entryTypes,
          durationThreshold = options.durationThreshold;
        if (!type && !entryTypes) {
          throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.");
        }
        if (entryTypes && type) {
          throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.");
        }
        if (this._type === 'multiple' && type) {
          throw new Error("Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})");
        }
        if (this._type === 'single' && entryTypes) {
          throw new Error("Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})");
        }
        if (entryTypes && durationThreshold !== undefined) {
          throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.");
        }
      }
    }]);
    return PerformanceObserver;
  }(); // As a Set union, except if value exists in both, we take minimum
  PerformanceObserver.supportedEntryTypes = Object.freeze(['mark', 'measure', 'event']);
  function union(a, b) {
    var res = new Map();
    for (var _ref5 of a) {
      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);
      var k = _ref6[0];
      var v = _ref6[1];
      if (!b.has(k)) {
        res.set(k, v);
      } else {
        var _b$get;
        res.set(k, Math.min(v != null ? v : 0, (_b$get = b.get(k)) != null ? _b$get : 0));
      }
    }
    return res;
  }
  function difference(a, b) {
    return new Set((0, _toConsumableArray2.default)(a).filter(function (x) {
      return !b.has(x);
    }));
  }
},68,[1,34,26,5,6,65,67,69]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawPerformanceEntryTypeValues = undefined;
  exports.performanceEntryTypeToRaw = performanceEntryTypeToRaw;
  exports.rawToPerformanceEntry = rawToPerformanceEntry;
  exports.rawToPerformanceEntryType = rawToPerformanceEntryType;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var RawPerformanceEntryTypeValues = exports.RawPerformanceEntryTypeValues = {
    UNDEFINED: 0,
    MARK: 1,
    MEASURE: 2,
    EVENT: 3
  };
  function rawToPerformanceEntry(entry) {
    if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {
      return new (_$$_REQUIRE(_dependencyMap[0]).PerformanceEventTiming)({
        name: entry.name,
        startTime: entry.startTime,
        duration: entry.duration,
        processingStart: entry.processingStart,
        processingEnd: entry.processingEnd,
        interactionId: entry.interactionId
      });
    } else {
      return new (_$$_REQUIRE(_dependencyMap[1]).PerformanceEntry)({
        name: entry.name,
        entryType: rawToPerformanceEntryType(entry.entryType),
        startTime: entry.startTime,
        duration: entry.duration
      });
    }
  }
  function rawToPerformanceEntryType(type) {
    switch (type) {
      case RawPerformanceEntryTypeValues.MARK:
        return 'mark';
      case RawPerformanceEntryTypeValues.MEASURE:
        return 'measure';
      case RawPerformanceEntryTypeValues.EVENT:
        return 'event';
      case RawPerformanceEntryTypeValues.UNDEFINED:
        throw new TypeError("rawToPerformanceEntryType: UNDEFINED can't be cast to PerformanceEntryType");
      default:
        throw new TypeError(`rawToPerformanceEntryType: unexpected performance entry type received: ${type}`);
    }
  }
  function performanceEntryTypeToRaw(type) {
    switch (type) {
      case 'mark':
        return RawPerformanceEntryTypeValues.MARK;
      case 'measure':
        return RawPerformanceEntryTypeValues.MEASURE;
      case 'event':
        return RawPerformanceEntryTypeValues.EVENT;
      default:
        // Verify exhaustive check with Flow
        type;
        throw new TypeError(`performanceEntryTypeToRaw: unexpected performance entry type received: ${type}`);
    }
  }
},69,[70,71]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PerformanceEventTiming = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var PerformanceEventTiming = exports.PerformanceEventTiming = /*#__PURE__*/function (_PerformanceEntry) {
    (0, _inherits2.default)(PerformanceEventTiming, _PerformanceEntry);
    var _super = _createSuper(PerformanceEventTiming);
    function PerformanceEventTiming(init) {
      var _init$startTime, _init$duration, _init$processingStart, _init$processingEnd, _init$interactionId;
      var _this;
      (0, _classCallCheck2.default)(this, PerformanceEventTiming);
      _this = _super.call(this, {
        name: init.name,
        entryType: 'event',
        startTime: (_init$startTime = init.startTime) != null ? _init$startTime : 0,
        duration: (_init$duration = init.duration) != null ? _init$duration : 0
      });
      _this.processingStart = (_init$processingStart = init.processingStart) != null ? _init$processingStart : 0;
      _this.processingEnd = (_init$processingEnd = init.processingEnd) != null ? _init$processingEnd : 0;
      _this.interactionId = (_init$interactionId = init.interactionId) != null ? _init$interactionId : 0;
      return _this;
    }
    (0, _createClass2.default)(PerformanceEventTiming, [{
      key: "toJSON",
      value: function toJSON() {
        return Object.assign({}, (0, _get2.default)((0, _getPrototypeOf2.default)(PerformanceEventTiming.prototype), "toJSON", this).call(this), {
          processingStart: this.processingStart,
          processingEnd: this.processingEnd,
          interactionId: this.interactionId
        });
      }
    }]);
    return PerformanceEventTiming;
  }(_$$_REQUIRE(_dependencyMap[7]).PerformanceEntry);
},70,[1,5,6,10,13,15,12,71]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PerformanceEntry = exports.ALWAYS_LOGGED_ENTRY_TYPES = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var ALWAYS_LOGGED_ENTRY_TYPES = exports.ALWAYS_LOGGED_ENTRY_TYPES = ['mark', 'measure'];
  var PerformanceEntry = exports.PerformanceEntry = /*#__PURE__*/function () {
    function PerformanceEntry(init) {
      (0, _classCallCheck2.default)(this, PerformanceEntry);
      this.name = init.name;
      this.entryType = init.entryType;
      this.startTime = init.startTime;
      this.duration = init.duration;
    }
    (0, _createClass2.default)(PerformanceEntry, [{
      key: "toJSON",
      value: function toJSON() {
        return {
          name: this.name,
          entryType: this.entryType,
          startTime: this.startTime,
          duration: this.duration
        };
      }
    }]);
    return PerformanceEntry;
  }();
},71,[1,5,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   * @oncall react_native
   */
  // flowlint unsafe-getters-setters:off
  // Read-only object with JS memory information. This is returned by the performance.memory API.
  var MemoryInfo = exports.default = /*#__PURE__*/function () {
    function MemoryInfo(memoryInfo) {
      (0, _classCallCheck2.default)(this, MemoryInfo);
      if (memoryInfo != null) {
        this._jsHeapSizeLimit = memoryInfo.jsHeapSizeLimit;
        this._totalJSHeapSize = memoryInfo.totalJSHeapSize;
        this._usedJSHeapSize = memoryInfo.usedJSHeapSize;
      }
    }

    /**
     * The maximum size of the heap, in bytes, that is available to the context
     */
    (0, _createClass2.default)(MemoryInfo, [{
      key: "jsHeapSizeLimit",
      get: function get() {
        return this._jsHeapSizeLimit;
      }

      /**
       * The total allocated heap size, in bytes
       */
    }, {
      key: "totalJSHeapSize",
      get: function get() {
        return this._totalJSHeapSize;
      }

      /**
       * The currently active segment of JS heap, in bytes.
       */
    }, {
      key: "usedJSHeapSize",
      get: function get() {
        return this._usedJSHeapSize;
      }
    }]);
    return MemoryInfo;
  }();
},72,[1,5,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   * @oncall react_native
   */
  // flowlint unsafe-getters-setters:off
  // Read-only object with RN startup timing information.
  // This is returned by the performance.reactNativeStartup API.
  var ReactNativeStartupTiming = exports.default = /*#__PURE__*/function () {
    // All time information here are in ms. The values may be null if not provided.
    // We do NOT match web spect here for two reasons:
    // 1. The `ReactNativeStartupTiming` is non-standard API
    // 2. The timing information is relative to the time origin, which means `0` has valid meaning

    function ReactNativeStartupTiming(startUpTiming) {
      (0, _classCallCheck2.default)(this, ReactNativeStartupTiming);
      if (startUpTiming != null) {
        this._startTime = startUpTiming.startTime;
        this._endTime = startUpTiming.endTime;
        this._initializeRuntimeStart = startUpTiming.initializeRuntimeStart;
        this._initializeRuntimeEnd = startUpTiming.initializeRuntimeEnd;
        this._executeJavaScriptBundleEntryPointStart = startUpTiming.executeJavaScriptBundleEntryPointStart;
        this._executeJavaScriptBundleEntryPointEnd = startUpTiming.executeJavaScriptBundleEntryPointEnd;
      }
    }

    /**
     * Start time of the RN app startup process. This is provided by the platform by implementing the `ReactMarker.setAppStartTime` API in the native platform code.
     */
    (0, _createClass2.default)(ReactNativeStartupTiming, [{
      key: "startTime",
      get: function get() {
        return this._startTime;
      }

      /**
       * End time of the RN app startup process. This is equal to `executeJavaScriptBundleEntryPointEnd`.
       */
    }, {
      key: "endTime",
      get: function get() {
        return this._endTime;
      }

      /**
       * Start time when RN runtime get initialized. This is when RN infra first kicks in app startup process.
       */
    }, {
      key: "initializeRuntimeStart",
      get: function get() {
        return this._initializeRuntimeStart;
      }

      /**
       * End time when RN runtime get initialized. This is the last marker before ends of the app startup process.
       */
    }, {
      key: "initializeRuntimeEnd",
      get: function get() {
        return this._initializeRuntimeEnd;
      }

      /**
       * Start time of JS bundle being executed. This indicates the RN JS bundle is loaded and start to be evaluated.
       */
    }, {
      key: "executeJavaScriptBundleEntryPointStart",
      get: function get() {
        return this._executeJavaScriptBundleEntryPointStart;
      }

      /**
       * End time of JS bundle being executed. This indicates all the synchronous entry point jobs are finished.
       */
    }, {
      key: "executeJavaScriptBundleEntryPointEnd",
      get: function get() {
        return this._executeJavaScriptBundleEntryPointEnd;
      }
    }]);
    return ReactNativeStartupTiming;
  }();
},73,[1,5,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * Sets up the console and exception handling (redbox) for React Native.
   * You can use this module directly, or just require InitializeCore.
   */
  _$$_REQUIRE(_dependencyMap[0]).installConsoleErrorReporter();

  // Set up error handler
  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        _$$_REQUIRE(_dependencyMap[0]).handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };
    var ErrorUtils = _$$_REQUIRE(_dependencyMap[1]);
    ErrorUtils.setGlobalHandler(handleError);
  }
},74,[75,38]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _createClass = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);
  var _inherits = _$$_REQUIRE(_dependencyMap[2]);
  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);
  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);
  var _wrapNativeSuper = _$$_REQUIRE(_dependencyMap[5]);
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var SyntheticError = /*#__PURE__*/function (_Error) {
    _inherits(SyntheticError, _Error);
    var _super = _createSuper(SyntheticError);
    function SyntheticError() {
      var _this;
      _classCallCheck(this, SyntheticError);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.name = '';
      return _this;
    }
    return _createClass(SyntheticError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  var userExceptionDecorator;
  var inUserExceptionDecorator = false;

  // This Symbol is used to decorate an ExtendedError with extra data in select usecases.
  // Note that data passed using this method should be strictly contained,
  // as data that's not serializable/too large may cause issues with passing the error to the native code.
  var decoratedExtraDataKey = Symbol('decoratedExtraDataKey');

  /**
   * Allows the app to add information to the exception report before it is sent
   * to native. This API is not final.
   */

  function unstable_setExceptionDecorator(exceptionDecorator) {
    userExceptionDecorator = exceptionDecorator;
  }
  function preprocessException(data) {
    if (userExceptionDecorator && !inUserExceptionDecorator) {
      inUserExceptionDecorator = true;
      try {
        return userExceptionDecorator(data);
      } catch (_unused) {
        // Fall through
      } finally {
        inUserExceptionDecorator = false;
      }
    }
    return data;
  }

  /**
   * Handles the developer-visible aspect of errors and exceptions
   */
  var exceptionID = 0;
  function reportException(e, isFatal, reportToConsole // only true when coming from handleException; the error has not yet been logged
  ) {
    var parseErrorStack = _$$_REQUIRE(_dependencyMap[6]);
    var stack = parseErrorStack(e == null ? undefined : e.stack);
    var currentExceptionID = ++exceptionID;
    var originalMessage = e.message || '';
    var message = originalMessage;
    if (e.componentStack != null) {
      message += `\n\nThis error is located at:${e.componentStack}`;
    }
    var namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;
    if (!message.startsWith(namePrefix)) {
      message = namePrefix + message;
    }
    message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;

    // $FlowFixMe[unclear-type]
    var extraData = Object.assign({}, e[decoratedExtraDataKey], {
      jsEngine: e.jsEngine,
      rawStack: e.stack
    });
    if (e.cause != null && typeof e.cause === 'object') {
      extraData.stackSymbols = e.cause.stackSymbols;
      extraData.stackReturnAddresses = e.cause.stackReturnAddresses;
      extraData.stackElements = e.cause.stackElements;
    }
    var data = preprocessException({
      message: message,
      originalMessage: message === originalMessage ? null : originalMessage,
      name: e.name == null || e.name === '' ? null : e.name,
      componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
      stack: stack,
      id: currentExceptionID,
      isFatal: isFatal,
      extraData: extraData
    });
    if (reportToConsole) {
      // we feed back into console.error, to make sure any methods that are
      // monkey patched on top of console.error are called when coming from
      // handleException
      console.error(data.message);
    }
    if (isFatal || e.type !== 'warn') {
      var NativeExceptionsManager = _$$_REQUIRE(_dependencyMap[7]).default;
      if (NativeExceptionsManager) {
        NativeExceptionsManager.reportException(data);
      }
    }
  }
  // If we trigger console.error _from_ handleException,
  // we do want to make sure that console.error doesn't trigger error reporting again
  var inExceptionHandler = false;

  /**
   * Logs exceptions to the (native) console and displays them
   */
  function handleException(e, isFatal) {
    var error;
    if (e instanceof Error) {
      error = e;
    } else {
      // Workaround for reporting errors caused by `throw 'some string'`
      // Unfortunately there is no way to figure out the stacktrace in this
      // case, so if you ended up here trying to trace an error, look for
      // `throw '<error message>'` somewhere in your codebase.
      error = new SyntheticError(e);
    }
    try {
      inExceptionHandler = true;
      /* $FlowFixMe[class-object-subtyping] added when improving typing for this
       * parameters */
      reportException(error, isFatal, /*reportToConsole*/true);
    } finally {
      inExceptionHandler = false;
    }
  }

  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */
  function reactConsoleErrorHandler() {
    var _console;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    // bubble up to any original handlers
    (_console = console)._errorOriginal.apply(_console, args);
    if (!console.reportErrorsAsExceptions) {
      return;
    }
    if (inExceptionHandler) {
      // The fundamental trick here is that are multiple entry point to logging errors:
      // (see D19743075 for more background)
      //
      // 1. An uncaught exception being caught by the global handler
      // 2. An error being logged throw console.error
      //
      // However, console.error is monkey patched multiple times: by this module, and by the
      // DevTools setup that sends messages to Metro.
      // The patching order cannot be relied upon.
      //
      // So, some scenarios that are handled by this flag:
      //
      // Logging an error:
      // 1. console.error called from user code
      // 2. (possibly) arrives _first_ at DevTool handler, send to Metro
      // 3. Bubbles to here
      // 4. goes into report Exception.
      // 5. should not trigger console.error again, to avoid looping / logging twice
      // 6. should still bubble up to original console
      //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)
      //
      // Throwing an uncaught exception:
      // 1. exception thrown
      // 2. picked up by handleException
      // 3. should be sent to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)
      // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here
      //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)
      // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)
      return;
    }
    var error;
    var firstArg = args[0];
    if (firstArg != null && firstArg.stack) {
      // reportException will console.error this with high enough fidelity.
      error = firstArg;
    } else {
      var stringifySafe = _$$_REQUIRE(_dependencyMap[8]).default;
      if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
        // React warnings use console.error so that a stack trace is shown, but
        // we don't (currently) want these to show a redbox
        // (Note: Logic duplicated in polyfills/console.js.)
        return;
      }
      var message = args.map(function (arg) {
        return typeof arg === 'string' ? arg : stringifySafe(arg);
      }).join(' ');
      error = new SyntheticError(message);
      error.name = 'console.error';
    }
    reportException(
    /* $FlowFixMe[class-object-subtyping] added when improving typing for this
     * parameters */
    error, false,
    // isFatal
    false // reportToConsole
    );
  }

  /**
   * Shows a redbox with stacktrace for all console.error messages.  Disable by
   * setting `console.reportErrorsAsExceptions = false;` in your app.
   */
  function installConsoleErrorReporter() {
    // Enable reportErrorsAsExceptions
    if (console._errorOriginal) {
      return; // already installed
    }
    // Flow doesn't like it when you set arbitrary values on a global object
    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;
    if (console.reportErrorsAsExceptions === undefined) {
      // Individual apps can disable this
      // Flow doesn't like it when you set arbitrary values on a global object
      console.reportErrorsAsExceptions = true;
    }
  }
  module.exports = {
    decoratedExtraDataKey: decoratedExtraDataKey,
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter,
    SyntheticError: SyntheticError,
    unstable_setExceptionDecorator: unstable_setExceptionDecorator
  };
},75,[6,5,13,15,12,76,80,83,39]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_$$_REQUIRE(_dependencyMap[0])(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return _$$_REQUIRE(_dependencyMap[1])(Class, arguments, _$$_REQUIRE(_dependencyMap[2])(this).constructor);
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _$$_REQUIRE(_dependencyMap[3])(Wrapper, Class);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _wrapNativeSuper(Class);
  }
  module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
},76,[77,78,12,14]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(fn) {
    try {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    } catch (e) {
      return typeof fn === "function";
    }
  }
  module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
},77,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _construct(Parent, args, Class) {
    if (_$$_REQUIRE(_dependencyMap[0])()) {
      module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
    } else {
      module.exports = _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _$$_REQUIRE(_dependencyMap[1])(instance, Class.prototype);
        return instance;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
    return _construct.apply(null, arguments);
  }
  module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
},78,[79,14]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }
  module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
},79,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function convertHermesStack(stack) {
    var frames = [];
    for (var entry of stack.entries) {
      if (entry.type !== 'FRAME') {
        continue;
      }
      var location = entry.location,
        functionName = entry.functionName;
      if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {
        continue;
      }
      frames.push({
        methodName: functionName,
        file: location.sourceUrl,
        lineNumber: location.line1Based,
        column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
      });
    }
    return frames;
  }
  function parseErrorStack(errorStack) {
    if (errorStack == null) {
      return [];
    }
    var stacktraceParser = _$$_REQUIRE(_dependencyMap[0]);
    var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(_$$_REQUIRE(_dependencyMap[1])(errorStack)) : stacktraceParser.parse(errorStack).map(function (frame) {
      return Object.assign({}, frame, {
        column: frame.column != null ? frame.column - 1 : null
      });
    });
    return parsedStack;
  }
  module.exports = parseErrorStack;
},80,[81,82]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var UNKNOWN_FUNCTION = '<unknown>';
  /**
   * This parses the different stack traces and puts them into one format
   * This borrows heavily from TraceKit (https://github.com/csnover/TraceKit)
   */

  function parse(stackString) {
    var lines = stackString.split('\n');
    return lines.reduce(function (stack, line) {
      var parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);
      if (parseResult) {
        stack.push(parseResult);
      }
      return stack;
    }, []);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;
  function parseChrome(line) {
    var parts = chromeRe.exec(line);
    if (!parts) {
      return null;
    }
    var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line

    var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line

    var submatch = chromeEvalRe.exec(parts[2]);
    if (isEval && submatch != null) {
      // throw out eval line/column and use top-most line/column number
      parts[2] = submatch[1]; // url

      parts[3] = submatch[2]; // line

      parts[4] = submatch[3]; // column
    }
    return {
      file: !isNative ? parts[2] : null,
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: isNative ? [parts[2]] : [],
      lineNumber: parts[3] ? +parts[3] : null,
      column: parts[4] ? +parts[4] : null
    };
  }
  var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  function parseWinjs(line) {
    var parts = winjsRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line) {
    var parts = geckoRe.exec(line);
    if (!parts) {
      return null;
    }
    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
    var submatch = geckoEvalRe.exec(parts[3]);
    if (isEval && submatch != null) {
      // throw out eval line/column and use top-most line number
      parts[3] = submatch[1];
      parts[4] = submatch[2];
      parts[5] = null; // no column when eval
    }
    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: parts[2] ? parts[2].split(',') : [],
      lineNumber: parts[4] ? +parts[4] : null,
      column: parts[5] ? +parts[5] : null
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
  function parseJSC(line) {
    var parts = javaScriptCoreRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[4],
      column: parts[5] ? +parts[5] : null
    };
  }
  var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  function parseNode(line) {
    var parts = nodeRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }
  exports.parse = parse;
},81,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  // Capturing groups:
  // 1. function name
  // 2. is this a native stack frame?
  // 3. is this a bytecode address or a source location?
  // 4. source URL (filename)
  // 5. line number (1 based)
  // 6. column number (1 based) or virtual offset (0 based)
  var RE_FRAME = /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.*?):(\d+):(\d+)\))$/;

  // Capturing groups:
  // 1. count of skipped frames
  var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;
  function isInternalBytecodeSourceUrl(sourceUrl) {
    // See https://github.com/facebook/hermes/blob/3332fa020cae0bab751f648db7c94e1d687eeec7/lib/VM/Runtime.cpp#L1100
    return sourceUrl === 'InternalBytecode.js';
  }
  function parseLine(line) {
    var asFrame = line.match(RE_FRAME);
    if (asFrame) {
      return {
        type: 'FRAME',
        functionName: asFrame[1],
        location: asFrame[2] === 'native' ? {
          type: 'NATIVE'
        } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {
          type: 'INTERNAL_BYTECODE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          virtualOffset0Based: Number.parseInt(asFrame[6], 10)
        } : {
          type: 'BYTECODE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          virtualOffset0Based: Number.parseInt(asFrame[6], 10)
        } : {
          type: 'SOURCE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          column1Based: Number.parseInt(asFrame[6], 10)
        }
      };
    }
    var asSkipped = line.match(RE_SKIPPED);
    if (asSkipped) {
      return {
        type: 'SKIPPED',
        count: Number.parseInt(asSkipped[1], 10)
      };
    }
  }
  module.exports = function parseHermesStack(stack) {
    var lines = stack.split(/\n/);
    var entries = [];
    var lastMessageLine = -1;
    for (var i = 0; i < lines.length; ++i) {
      var line = lines[i];
      if (!line) {
        continue;
      }
      var entry = parseLine(line);
      if (entry) {
        entries.push(entry);
        continue;
      }
      // No match - we're still in the message
      lastMessageLine = i;
      entries = [];
    }
    var message = lines.slice(0, lastMessageLine + 1).join('\n');
    return {
      message: message,
      entries: entries
    };
  };
},82,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');
  var ExceptionsManager = {
    reportFatalException: function reportFatalException(message, stack, exceptionId) {
      NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException: function reportSoftException(message, stack, exceptionId) {
      NativeModule.reportSoftException(message, stack, exceptionId);
    },
    updateExceptionMessage: function updateExceptionMessage(message, stack, exceptionId) {
      NativeModule.updateExceptionMessage(message, stack, exceptionId);
    },
    dismissRedbox: function dismissRedbox() {
      if (NativeModule.dismissRedbox) {
        // TODO(T53311281): This is a noop on iOS now. Implement it.
        NativeModule.dismissRedbox();
      }
    },
    reportException: function reportException(data) {
      if (NativeModule.reportException) {
        NativeModule.reportException(data);
        return;
      }
      if (data.isFatal) {
        ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
      } else {
        ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
      }
    }
  };
  var _default = exports.default = ExceptionsManager;
},83,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _global, _global$HermesInterna;
  /**
   * Set up Promise. The native Promise implementation throws the following error:
   * ERROR: Event loop not supported.
   *
   * If you don't need these polyfills, don't use InitializeCore; just directly
   * require the modules you need from InitializeCore for setup.
   */

  // If global.Promise is provided by Hermes, we are confident that it can provide
  // all the methods needed by React Native, so we can directly use it.
  if ((_global = global) != null && (_global$HermesInterna = _global.HermesInternal) != null && _global$HermesInterna.hasPromise != null && _global$HermesInterna.hasPromise()) {
    var HermesPromise = global.Promise;
  } else {
    _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('Promise', function () {
      return _$$_REQUIRE(_dependencyMap[1]);
    });
  }
},84,[85,86]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * Sets an object's property. If a property with the same name exists, this will
   * replace it but maintain its descriptor configuration. The property will be
   * replaced with a lazy getter.
   *
   * In DEV mode the original property value will be preserved as `original[PropertyName]`
   * so that, if necessary, it can be restored. For example, if you want to route
   * network requests through DevTools (to trace them):
   *
   *   global.XMLHttpRequest = global.originalXMLHttpRequest;
   *
   * @see https://github.com/facebook/react-native/issues/934
   */
  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);
    var _ref = descriptor || {},
      enumerable = _ref.enumerable,
      writable = _ref.writable,
      _ref$configurable = _ref.configurable,
      configurable = _ref$configurable === undefined ? false : _ref$configurable;
    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }
    _$$_REQUIRE(_dependencyMap[0])(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }
  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }
  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},85,[40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  _$$_REQUIRE(_dependencyMap[0]);
  module.exports = _$$_REQUIRE(_dependencyMap[1]);
},86,[87,89]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
  _$$_REQUIRE(_dependencyMap[0]).prototype.finally = function (f) {
    return this.then(function (value) {
      return _$$_REQUIRE(_dependencyMap[0]).resolve(f()).then(function () {
        return value;
      });
    }, function (err) {
      return _$$_REQUIRE(_dependencyMap[0]).resolve(f()).then(function () {
        throw err;
      });
    });
  };
},87,[88]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  // States:
  //
  // 0 - pending
  // 1 - fulfilled with _value
  // 2 - rejected with _value
  // 3 - adopted the state of another promise, _value
  //
  // once the state is no longer pending (0) it is immutable

  // All `_` prefixed properties will be reduced to `_{random number}`
  // at build time to obfuscate them and discourage their use.
  // We don't use symbols or Object.defineProperty to fully hide them
  // because the performance isn't good enough.

  // to avoid using try/catch inside critical functions, we
  // extract them to here.
  var LAST_ERROR = null;
  var IS_ERROR = {};
  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  module.exports = Promise;
  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }
    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }
    this._x = 0;
    this._y = 0;
    this._z = null;
    this._A = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }
  Promise._B = null;
  Promise._C = null;
  Promise._D = noop;
  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }
    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };
  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }
  function handle(self, deferred) {
    while (self._y === 3) {
      self = self._z;
    }
    if (Promise._B) {
      Promise._B(self);
    }
    if (self._y === 0) {
      if (self._x === 0) {
        self._x = 1;
        self._A = deferred;
        return;
      }
      if (self._x === 1) {
        self._x = 2;
        self._A = [self._A, deferred];
        return;
      }
      self._A.push(deferred);
      return;
    }
    handleResolved(self, deferred);
  }
  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._y === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        if (self._y === 1) {
          resolve(deferred.promise, self._z);
        } else {
          reject(deferred.promise, self._z);
        }
        return;
      }
      var ret = tryCallOne(cb, self._z);
      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }
  function resolve(self, newValue) {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }
    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);
      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }
      if (then === self.then && newValue instanceof Promise) {
        self._y = 3;
        self._z = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }
    self._y = 1;
    self._z = newValue;
    finale(self);
  }
  function reject(self, newValue) {
    self._y = 2;
    self._z = newValue;
    if (Promise._C) {
      Promise._C(self, newValue);
    }
    finale(self);
  }
  function finale(self) {
    if (self._x === 1) {
      handle(self, self._A);
      self._A = null;
    }
    if (self._x === 2) {
      for (var i = 0; i < self._A.length; i++) {
        handle(self, self._A[i]);
      }
      self._A = null;
    }
  }
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},88,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  //This file contains the ES6 extensions to the core Promises/A+ API
  module.exports = _$$_REQUIRE(_dependencyMap[0]);

  /* Static Functions */

  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');
  function valuePromise(value) {
    var p = new (_$$_REQUIRE(_dependencyMap[0]))(_$$_REQUIRE(_dependencyMap[0])._D);
    p._y = 1;
    p._z = value;
    return p;
  }
  _$$_REQUIRE(_dependencyMap[0]).resolve = function (value) {
    if (value instanceof _$$_REQUIRE(_dependencyMap[0])) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;
    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;
        if (typeof then === 'function') {
          return new (_$$_REQUIRE(_dependencyMap[0]))(then.bind(value));
        }
      } catch (ex) {
        return new (_$$_REQUIRE(_dependencyMap[0]))(function (resolve, reject) {
          reject(ex);
        });
      }
    }
    return valuePromise(value);
  };
  var _iterableToArray = function iterableToArray(iterable) {
    if (typeof Array.from === 'function') {
      // ES2015+, iterables exist
      _iterableToArray = Array.from;
      return Array.from(iterable);
    }

    // ES5, only arrays and array-likes exist
    _iterableToArray = function iterableToArray(x) {
      return Array.prototype.slice.call(x);
    };
    return Array.prototype.slice.call(iterable);
  };
  _$$_REQUIRE(_dependencyMap[0]).all = function (arr) {
    var args = _iterableToArray(arr);
    return new (_$$_REQUIRE(_dependencyMap[0]))(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;
      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof _$$_REQUIRE(_dependencyMap[0]) && val.then === _$$_REQUIRE(_dependencyMap[0]).prototype.then) {
            while (val._y === 3) {
              val = val._z;
            }
            if (val._y === 1) return res(i, val._z);
            if (val._y === 2) reject(val._z);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;
            if (typeof then === 'function') {
              var p = new (_$$_REQUIRE(_dependencyMap[0]))(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      }
      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };
  function onSettledFulfill(value) {
    return {
      status: 'fulfilled',
      value: value
    };
  }
  function onSettledReject(reason) {
    return {
      status: 'rejected',
      reason: reason
    };
  }
  function mapAllSettled(item) {
    if (item && (typeof item === 'object' || typeof item === 'function')) {
      if (item instanceof _$$_REQUIRE(_dependencyMap[0]) && item.then === _$$_REQUIRE(_dependencyMap[0]).prototype.then) {
        return item.then(onSettledFulfill, onSettledReject);
      }
      var then = item.then;
      if (typeof then === 'function') {
        return new (_$$_REQUIRE(_dependencyMap[0]))(then.bind(item)).then(onSettledFulfill, onSettledReject);
      }
    }
    return onSettledFulfill(item);
  }
  _$$_REQUIRE(_dependencyMap[0]).allSettled = function (iterable) {
    return _$$_REQUIRE(_dependencyMap[0]).all(_iterableToArray(iterable).map(mapAllSettled));
  };
  _$$_REQUIRE(_dependencyMap[0]).reject = function (value) {
    return new (_$$_REQUIRE(_dependencyMap[0]))(function (resolve, reject) {
      reject(value);
    });
  };
  _$$_REQUIRE(_dependencyMap[0]).race = function (values) {
    return new (_$$_REQUIRE(_dependencyMap[0]))(function (resolve, reject) {
      _iterableToArray(values).forEach(function (value) {
        _$$_REQUIRE(_dependencyMap[0]).resolve(value).then(resolve, reject);
      });
    });
  };

  /* Prototype Methods */

  _$$_REQUIRE(_dependencyMap[0]).prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
  function getAggregateError(errors) {
    if (typeof AggregateError === 'function') {
      return new AggregateError(errors, 'All promises were rejected');
    }
    var error = new Error('All promises were rejected');
    error.name = 'AggregateError';
    error.errors = errors;
    return error;
  }
  _$$_REQUIRE(_dependencyMap[0]).any = function promiseAny(values) {
    return new (_$$_REQUIRE(_dependencyMap[0]))(function (resolve, reject) {
      var promises = _iterableToArray(values);
      var hasResolved = false;
      var rejectionReasons = [];
      function resolveOnce(value) {
        if (!hasResolved) {
          hasResolved = true;
          resolve(value);
        }
      }
      function rejectionCheck(reason) {
        rejectionReasons.push(reason);
        if (rejectionReasons.length === promises.length) {
          reject(getAggregateError(rejectionReasons));
        }
      }
      if (promises.length === 0) {
        reject(getAggregateError(rejectionReasons));
      } else {
        promises.forEach(function (value) {
          _$$_REQUIRE(_dependencyMap[0]).resolve(value).then(resolveOnce, rejectionCheck);
        });
      }
    });
  };
},89,[88]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * Set up regenerator.
   * You can use this module directly, or just require InitializeCore.
   */

  var hasNativeGenerator;
  try {
    // If this function was lowered by regenerator-transform, it will try to
    // access `global.regeneratorRuntime` which doesn't exist yet and will throw.
    hasNativeGenerator = _$$_REQUIRE(_dependencyMap[0]).hasNativeConstructor(function* () {}, 'GeneratorFunction');
  } catch (_unused) {
    // In this case, we know generators are not provided natively.
    hasNativeGenerator = false;
  }

  // If generators are provided natively, which suggests that there was no
  // regenerator-transform, then there is no need to set up the runtime.
  if (!hasNativeGenerator) {
    _$$_REQUIRE(_dependencyMap[1]).polyfillGlobal('regeneratorRuntime', function () {
      // The require just sets up the global, so make sure when we first
      // invoke it the global does not exist
      delete global.regeneratorRuntime;

      // regenerator-runtime/runtime exports the regeneratorRuntime object, so we
      // can return it safely.
      return _$$_REQUIRE(_dependencyMap[2]); // flowlint-line untyped-import:off
    });
  }
},90,[91,85,92]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * @return whether or not a @param {function} f is provided natively by calling
   * `toString` and check if the result includes `[native code]` in it.
   *
   * Note that a polyfill can technically fake this behavior but few does it.
   * Therefore, this is usually good enough for our purpose.
   */
  function isNativeFunction(f) {
    return typeof f === 'function' && f.toString().indexOf('[native code]') > -1;
  }

  /**
   * @return whether or not the constructor of @param {object} o is an native
   * function named with @param {string} expectedName.
   */
  function hasNativeConstructor(o, expectedName) {
    var con = Object.getPrototypeOf(o).constructor;
    return con.name === expectedName && isNativeFunction(con);
  }
  module.exports = {
    isNativeFunction: isNativeFunction,
    hasNativeConstructor: hasNativeConstructor
  };
},91,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    };
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      });
      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: true
    });
    defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: true
    });
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction ||
      // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }
          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }
      var previousPromise;
      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
        // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      defineProperty(this, "_invoke", {
        value: enqueue
      });
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === undefined) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };
    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }
        context.method = method;
        context.arg = arg;
        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }
            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }
          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
            if (record.arg === ContinueSentinel) {
              continue;
            }
            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method;
      var method = delegate.iterator[methodName];
      if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method, or a missing .next mehtod, always terminate the
        // yield* loop.
        context.delegate = null;

        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (methodName === "throw" && delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);
          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }
        if (methodName !== "return") {
          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
        }
        return ContinueSentinel;
      }
      var record = tryCatch(method, delegate.iterator, context.arg);
      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }
      var info = record.arg;
      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }
      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function () {
      return this;
    });
    define(Gp, "toString", function () {
      return "[object Generator]";
    });
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
      this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
    exports.keys = function (val) {
      var object = Object(val);
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
        if (typeof iterable.next === "function") {
          return iterable;
        }
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }
              next.value = undefined;
              next.done = true;
              return next;
            };
          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return {
        next: doneResult
      };
    }
    exports.values = values;
    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }
    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);
        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }
        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined;
          }
          return !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };
        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined;
        }
        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
  }(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {});
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
},92,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _global$HermesInterna, _global$HermesInterna2;
  // Currently, Hermes `Promise` is implemented via Internal Bytecode.
  var hasHermesPromiseQueuedToJSVM = ((_global$HermesInterna = global.HermesInternal) == null ? undefined : _global$HermesInterna.hasPromise == null ? undefined : _global$HermesInterna.hasPromise()) === true && ((_global$HermesInterna2 = global.HermesInternal) == null ? undefined : _global$HermesInterna2.useEngineQueue == null ? undefined : _global$HermesInterna2.useEngineQueue()) === true;
  var hasNativePromise = _$$_REQUIRE(_dependencyMap[0]).isNativeFunction(Promise);
  var hasPromiseQueuedToJSVM = hasNativePromise || hasHermesPromiseQueuedToJSVM;

  // In bridgeless mode, timers are host functions installed from cpp.
  if (global.RN$Bridgeless !== true) {
    /**
     * Set up timers.
     * You can use this module directly, or just require InitializeCore.
     */
    var defineLazyTimer = function defineLazyTimer(name) {
      _$$_REQUIRE(_dependencyMap[1]).polyfillGlobal(name, function () {
        return _$$_REQUIRE(_dependencyMap[2])[name];
      });
    };
    defineLazyTimer('setTimeout');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('clearInterval');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
  }

  /**
   * Set up immediate APIs, which is required to use the same microtask queue
   * as the Promise.
   */
  if (hasPromiseQueuedToJSVM) {
    // When promise queues to the JSVM microtasks queue, we shim the immediate
    // APIs via `queueMicrotask` to maintain the backward compatibility.
    _$$_REQUIRE(_dependencyMap[1]).polyfillGlobal('setImmediate', function () {
      return _$$_REQUIRE(_dependencyMap[3]).setImmediate;
    });
    _$$_REQUIRE(_dependencyMap[1]).polyfillGlobal('clearImmediate', function () {
      return _$$_REQUIRE(_dependencyMap[3]).clearImmediate;
    });
  } else {
    // When promise was polyfilled hence is queued to the RN microtask queue,
    // we polyfill the immediate APIs as aliases to the ReactNativeMicrotask APIs.
    // Note that in bridgeless mode, immediate APIs are installed from cpp.
    if (global.RN$Bridgeless !== true) {
      _$$_REQUIRE(_dependencyMap[1]).polyfillGlobal('setImmediate', function () {
        return _$$_REQUIRE(_dependencyMap[2]).queueReactNativeMicrotask;
      });
      _$$_REQUIRE(_dependencyMap[1]).polyfillGlobal('clearImmediate', function () {
        return _$$_REQUIRE(_dependencyMap[2]).clearReactNativeMicrotask;
      });
    }
  }

  /**
   * Set up the microtask queueing API, which is required to use the same
   * microtask queue as the Promise.
   */
  if (hasHermesPromiseQueuedToJSVM) {
    // Fast path for Hermes.
    _$$_REQUIRE(_dependencyMap[1]).polyfillGlobal('queueMicrotask', function () {
      var _global$HermesInterna3;
      return (_global$HermesInterna3 = global.HermesInternal) == null ? undefined : _global$HermesInterna3.enqueueJob;
    });
  } else {
    // Polyfill it with promise (regardless it's polyfilled or native) otherwise.
    _$$_REQUIRE(_dependencyMap[1]).polyfillGlobal('queueMicrotask', function () {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    });
  }
},93,[91,85,94,96,97]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeTiming = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                               * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                               *
                                                                               * This source code is licensed under the MIT license found in the
                                                                               * LICENSE file in the root directory of this source tree.
                                                                               *
                                                                               * @format
                                                                               * 
                                                                               */

  /**
   * JS implementation of timer functions. Must be completely driven by an
   * external clock signal, all that's stored here is timerID, timer type, and
   * callback.
   */

  // These timing constants should be kept in sync with the ones in native ios and
  // android `RCTTiming` module.
  var FRAME_DURATION = 16.666666666666668;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;

  // Parallel arrays
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var reactNativeMicrotasks = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var GUID = 1;
  var errors = [];
  var hasEmittedTimeDriftWarning = false;

  // Returns a free index if one is available, and the next consecutive index otherwise.
  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);
    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }
    return freeIndex;
  }
  function _allocateCallback(func, type) {
    var id = GUID++;
    var freeIndex = _getFreeIndex();
    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
  }

  /**
   * Calls the callback associated with the ID. Also unregister that callback
   * if it was a one time timer (setTimeout), and not unregister it if it was
   * recurring (setInterval).
   */
  function _callTimer(timerID, frameTime, didTimeout) {
    if (timerID > GUID) {
      console.warn('Tried to call timer with ID %s but no such timer exists.', timerID);
    }

    // timerIndex of -1 means that no timer with that ID exists. There are
    // two situations when this happens, when a garbage timer ID was given
    // and when a previously existing timer was deleted before this callback
    // fired. In both cases we want to ignore the timer id, but in the former
    // case we warn as well.
    var timerIndex = timerIDs.indexOf(timerID);
    if (timerIndex === -1) {
      return;
    }
    var type = types[timerIndex];
    var callback = callbacks[timerIndex];
    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }
    // Clear the metadata
    if (type !== 'setInterval') {
      _clearIndex(timerIndex);
    }
    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'queueReactNativeMicrotask') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(global.performance.now());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            // TODO: Optimisation: allow running for longer than one frame if
            // there are no pending JS calls on the bridge from native. This
            // would require a way to check the bridge queue synchronously.
            return Math.max(0, FRAME_DURATION - (global.performance.now() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      // Don't rethrow so that we can run all timers.
      errors.push(e);
    }
  }

  /**
   * Performs a single pass over the enqueued reactNativeMicrotasks. Returns whether
   * more reactNativeMicrotasks are queued up (can be used as a condition a while loop).
   */
  function _callReactNativeMicrotasksPass() {
    if (reactNativeMicrotasks.length === 0) {
      return false;
    }
    // The main reason to extract a single pass is so that we can track
    // in the system trace
    var passReactNativeMicrotasks = reactNativeMicrotasks;
    reactNativeMicrotasks = [];

    // Use for loop rather than forEach as per @vjeux's advice
    // https://github.com/facebook/react-native/commit/c8fd9f7588ad02d2293cac7224715f4af7b0f352#commitcomment-14570051
    for (var i = 0; i < passReactNativeMicrotasks.length; ++i) {
      _callTimer(passReactNativeMicrotasks[i], 0);
    }
    return reactNativeMicrotasks.length > 0;
  }
  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
  }
  function _freeCallback(timerID) {
    // timerIDs contains nulls after timers have been removed;
    // ignore nulls upfront so indexOf doesn't find them
    if (timerID == null) {
      return;
    }
    var index = timerIDs.indexOf(timerID);
    // See corresponding comment in `callTimers` for reasoning behind this
    if (index !== -1) {
      var type = types[index];
      _clearIndex(index);
      if (type !== 'queueReactNativeMicrotask' && type !== 'requestIdleCallback') {
        deleteTimer(timerID);
      }
    }
  }

  /**
   * JS implementation of timer functions. Must be completely driven by an
   * external clock signal, all that's stored here is timerID, timer type, and
   * callback.
   */
  var JSTimers = {
    /**
     * @param {function} func Callback to be invoked after `duration` ms.
     * @param {number} duration Number of milliseconds.
     */
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');
      createTimer(id, duration || 0, Date.now(), /* recurring */false);
      return id;
    },
    /**
     * @param {function} func Callback to be invoked every `duration` ms.
     * @param {number} duration Number of milliseconds.
     */
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');
      createTimer(id, duration || 0, Date.now(), /* recurring */true);
      return id;
    },
    /**
     * The React Native microtask mechanism is used to back public APIs e.g.
     * `queueMicrotask`, `clearImmediate`, and `setImmediate` (which is used by
     * the Promise polyfill) when the JSVM microtask mechanism is not used.
     *
     * @param {function} func Callback to be invoked before the end of the
     * current JavaScript execution loop.
     */
    queueReactNativeMicrotask: function queueReactNativeMicrotask(func) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'queueReactNativeMicrotask');
      reactNativeMicrotasks.push(id);
      return id;
    },
    /**
     * @param {function} func Callback to be invoked every frame.
     */
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');
      createTimer(id, 1, Date.now(), /* recurring */false);
      return id;
    },
    /**
     * @param {function} func Callback to be invoked every frame and provided
     * with time remaining in frame.
     * @param {?object} options
     */
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(true);
      }
      var timeout = options && options.timeout;
      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];
        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }
        return func(deadline);
      } : func, 'requestIdleCallback');
      requestIdleCallbacks.push(id);
      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);
          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);
            _callTimer(id, global.performance.now(), true);
          }
          delete requestIdleCallbackTimeouts[id];
          if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }
      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);
      var index = requestIdleCallbacks.indexOf(timerID);
      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }
      var timeoutId = requestIdleCallbackTimeouts[timerID];
      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearReactNativeMicrotask: function clearReactNativeMicrotask(timerID) {
      _freeCallback(timerID);
      var index = reactNativeMicrotasks.indexOf(timerID);
      if (index !== -1) {
        reactNativeMicrotasks.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    /**
     * This is called from the native side. We are passed an array of timerIDs,
     * and
     */
    callTimers: function callTimers(timersToCall) {
      _$$_REQUIRE(_dependencyMap[2])(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors.length = 0;
      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }
      var errorCount = errors.length;
      if (errorCount > 0) {
        if (errorCount > 1) {
          // Throw all the other errors in a setTimeout, which will throw each
          // error one at a time
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }
        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (Date.now() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }
      errors.length = 0;
      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks;
        requestIdleCallbacks = [];
        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(false);
      }
      errors.forEach(function (error) {
        return JSTimers.setTimeout(function () {
          throw error;
        }, 0);
      });
    },
    /**
     * This is called after we execute any command we receive from native but
     * before we hand control back to native.
     */
    callReactNativeMicrotasks: function callReactNativeMicrotasks() {
      errors.length = 0;
      while (_callReactNativeMicrotasksPass()) {}
      errors.forEach(function (error) {
        return JSTimers.setTimeout(function () {
          throw error;
        }, 0);
      });
    },
    /**
     * Called from native (in development) when environment times are out-of-sync.
     */
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }
      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };
  function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
    _$$_REQUIRE(_dependencyMap[2])(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);
  }
  function deleteTimer(timerID) {
    _$$_REQUIRE(_dependencyMap[2])(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.deleteTimer(timerID);
  }
  function setSendIdleEvents(sendIdleEvents) {
    _$$_REQUIRE(_dependencyMap[2])(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.setSendIdleEvents(sendIdleEvents);
  }
  var ExportedJSTimers;
  if (!_NativeTiming.default) {
    console.warn("Timing native module is not available, can't set timers.");
    // $FlowFixMe[prop-missing] : we can assume timers are generally available
    ExportedJSTimers = {
      callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,
      queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask
    };
  } else {
    ExportedJSTimers = JSTimers;
  }
  _$$_REQUIRE(_dependencyMap[3]).setReactNativeMicrotasksCallback(JSTimers.callReactNativeMicrotasks);
  module.exports = ExportedJSTimers;
},94,[1,95,24,32]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('Timing');
},95,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  // Globally Unique Immediate ID.
  var GUIID = 1;

  // A global set of the currently cleared immediates.
  var clearedImmediates = new Set();

  /**
   * Shim the setImmediate API on top of queueMicrotask.
   * @param {function} func Callback to be invoked before the end of the
   * current JavaScript execution loop.
   */
  function setImmediate(callback) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (arguments.length < 1) {
      throw new TypeError('setImmediate must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
      throw new TypeError('The first argument to setImmediate must be a function.');
    }
    var id = GUIID++;
    // This is an edgey case in which the sequentially assigned ID has been
    // "guessed" and "cleared" ahead of time, so we need to clear it up first.
    if (clearedImmediates.has(id)) {
      clearedImmediates.delete(id);
    }

    // $FlowFixMe[incompatible-call]
    global.queueMicrotask(function () {
      if (!clearedImmediates.has(id)) {
        callback.apply(undefined, args);
      } else {
        // Free up the Set entry.
        clearedImmediates.delete(id);
      }
    });
    return id;
  }

  /**
   * @param {number} immediateID The ID of the immediate to be clearred.
   */
  function clearImmediate(immediateID) {
    clearedImmediates.add(immediateID);
  }
  var immediateShim = {
    setImmediate: setImmediate,
    clearImmediate: clearImmediate
  };
  module.exports = immediateShim;
},96,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = queueMicrotask;
  var resolvedPromise;

  /**
   * Polyfill for the microtask queueing API defined by WHATWG HTML spec.
   * https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
   *
   * The method must queue a microtask to invoke @param {function} callback, and
   * if the callback throws an exception, report the exception.
   */
  function queueMicrotask(callback) {
    if (arguments.length < 1) {
      throw new TypeError('queueMicrotask must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
      throw new TypeError('The argument to queueMicrotask must be a function.');
    }

    // Try to reuse a lazily allocated resolved promise from closure.
    (resolvedPromise || (resolvedPromise = Promise.resolve())).then(callback).catch(function (error) {
      return (
        // Report the exception until the next tick.
        setTimeout(function () {
          throw error;
        }, 0)
      );
    });
  }
},97,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * Set up XMLHttpRequest. The native XMLHttpRequest in Chrome dev tools is CORS
   * aware and won't let you fetch anything from the internet.
   *
   * You can use this module directly, or just require InitializeCore.
   */
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('XMLHttpRequest', function () {
    return _$$_REQUIRE(_dependencyMap[1]);
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('FormData', function () {
    return _$$_REQUIRE(_dependencyMap[2]);
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('fetch', function () {
    return _$$_REQUIRE(_dependencyMap[3]).fetch;
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('Headers', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Headers;
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('Request', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Request;
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('Response', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Response;
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('WebSocket', function () {
    return _$$_REQUIRE(_dependencyMap[4]);
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('Blob', function () {
    return _$$_REQUIRE(_dependencyMap[5]);
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('File', function () {
    return _$$_REQUIRE(_dependencyMap[6]);
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('FileReader', function () {
    return _$$_REQUIRE(_dependencyMap[7]);
  });
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('URL', function () {
    return _$$_REQUIRE(_dependencyMap[8]).URL;
  }); // flowlint-line untyped-import:off
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('URLSearchParams', function () {
    return _$$_REQUIRE(_dependencyMap[8]).URLSearchParams;
  }); // flowlint-line untyped-import:off
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('AbortController', function () {
    return _$$_REQUIRE(_dependencyMap[9]).AbortController;
  } // flowlint-line untyped-import:off
  );
  _$$_REQUIRE(_dependencyMap[0]).polyfillGlobal('AbortSignal', function () {
    return _$$_REQUIRE(_dependencyMap[9]).AbortSignal;
  } // flowlint-line untyped-import:off
  );
},98,[85,99,113,116,118,104,123,124,126,127]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _eventTargetShim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var DEBUG_NETWORK_SEND_DELAY = false; // Set to a number of milliseconds when debugging

  // The native blob module is optional so inject it here if available.
  if (_$$_REQUIRE(_dependencyMap[9]).isAvailable) {
    _$$_REQUIRE(_dependencyMap[9]).addNetworkingHandler();
  }
  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');
  var XMLHttpRequestEventTarget = /*#__PURE__*/function (_ref) {
    (0, _inherits2.default)(XMLHttpRequestEventTarget, _ref);
    var _super = _createSuper(XMLHttpRequestEventTarget);
    function XMLHttpRequestEventTarget() {
      (0, _classCallCheck2.default)(this, XMLHttpRequestEventTarget);
      return _super.apply(this, arguments);
    }
    return (0, _createClass2.default)(XMLHttpRequestEventTarget);
  }(_eventTargetShim.default.apply(undefined, REQUEST_EVENTS));
  /**
   * Shared base for platform-specific XMLHttpRequest implementations.
   */
  var XMLHttpRequest = /*#__PURE__*/function (_ref2) {
    (0, _inherits2.default)(XMLHttpRequest, _ref2);
    var _super2 = _createSuper(XMLHttpRequest);
    function XMLHttpRequest() {
      var _this;
      (0, _classCallCheck2.default)(this, XMLHttpRequest);
      _this = _super2.call(this);
      _this.UNSENT = UNSENT;
      _this.OPENED = OPENED;
      _this.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this.readyState = UNSENT;
      _this.status = 0;
      _this.timeout = 0;
      _this.withCredentials = true;
      _this.upload = new XMLHttpRequestEventTarget();
      _this._aborted = false;
      _this._hasError = false;
      _this._method = null;
      _this._perfKey = null;
      _this._response = '';
      _this._url = null;
      _this._timedOut = false;
      _this._trackingName = 'unknown';
      _this._incrementalEvents = false;
      _this._performanceLogger = _$$_REQUIRE(_dependencyMap[10]);
      _this._reset();
      return _this;
    }
    (0, _createClass2.default)(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};
        this._clearSubscriptions();
        this._timedOut = false;
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The response type cannot be set after the request has been sent.");
        }
        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          console.warn(`The provided value '${responseType}' is not a valid 'responseType'.`);
          return;
        }

        // redboxes early, e.g. for 'arraybuffer' on ios 7
        _$$_REQUIRE(_dependencyMap[11])(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', `The provided value '${responseType}' is unsupported in this environment.`);
        if (responseType === 'blob') {
          _$$_REQUIRE(_dependencyMap[11])(_$$_REQUIRE(_dependencyMap[9]).isAvailable, 'Native module BlobModule is required for blob support');
        }
        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + `is set to '' or 'text', but it is '${this._responseType}'.`);
        }
        if (this.readyState < LOADING) {
          return '';
        }
        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;
        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }
        if (this.readyState !== DONE) {
          return null;
        }
        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }
        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;
          case 'arraybuffer':
            this._cachedResponse = _$$_REQUIRE(_dependencyMap[12]).toByteArray(this._response).buffer;
            break;
          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = _$$_REQUIRE(_dependencyMap[9]).createFromOptions(this._response);
            } else if (this._response === '') {
              this._cachedResponse = _$$_REQUIRE(_dependencyMap[9]).createFromParts([]);
            } else {
              throw new Error(`Invalid response for blob: ${this._response}`);
            }
            break;
          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }
            break;
          default:
            this._cachedResponse = null;
        }
        return this._cachedResponse;
      }

      // exposed for testing
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }

      // exposed for testing
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);
          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }
        this._response = response;
        this._cachedResponse = undefined; // force lazy recomputation
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }
        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);
        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }
        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }

      // exposed for testing
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }
            this._hasError = true;
            if (timeOutError) {
              this._timedOut = true;
            }
          }
          this._clearSubscriptions();
          this._requestId = null;
          this.setReadyState(this.DONE);
          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          // according to the spec, return null if no response has been received
          return null;
        }

        // Assign to non-nullable local variable.
        var responseHeaders = this.responseHeaders;
        var unsortedHeaders = new Map();
        for (var rawHeaderName of Object.keys(responseHeaders)) {
          var headerValue = responseHeaders[rawHeaderName];
          var lowerHeaderName = rawHeaderName.toLowerCase();
          var header = unsortedHeaders.get(lowerHeaderName);
          if (header) {
            header.headerValue += ', ' + headerValue;
            unsortedHeaders.set(lowerHeaderName, header);
          } else {
            unsortedHeaders.set(lowerHeaderName, {
              lowerHeaderName: lowerHeaderName,
              upperHeaderName: rawHeaderName.toUpperCase(),
              headerValue: headerValue
            });
          }
        }

        // Sort in ascending order, with a being less than b if a's name is legacy-uppercased-byte less than b's name.
        var sortedHeaders = (0, _toConsumableArray2.default)(unsortedHeaders.values()).sort(function (a, b) {
          if (a.upperHeaderName < b.upperHeaderName) {
            return -1;
          }
          if (a.upperHeaderName > b.upperHeaderName) {
            return 1;
          }
          return 0;
        });

        // Combine into single text response.
        return sortedHeaders.map(function (header) {
          return header.lowerHeaderName + ': ' + header.headerValue;
        }).join('\r\n') + '\r\n';
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }
        this._headers[header.toLowerCase()] = String(value);
      }

      /**
       * Custom extension for tracking origins of request.
       */
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }

      /**
       * Custom extension for setting a custom performance logger
       */
    }, {
      key: "setPerformanceLogger",
      value: function setPerformanceLogger(performanceLogger) {
        this._performanceLogger = performanceLogger;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        /* Other optional arguments are not supported yet */
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }
        if (async !== undefined && !async) {
          // async is default
          throw new Error('Synchronous http requests are not supported');
        }
        if (!url) {
          throw new Error('Cannot load an empty url');
        }
        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this2 = this;
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }
        if (this._sent) {
          throw new Error('Request has already been sent');
        }
        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[13]).default.addListener('didSendNetworkData', function (args) {
          return _this2.__didUploadProgress.apply(_this2, (0, _toConsumableArray2.default)(args));
        }));
        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[13]).default.addListener('didReceiveNetworkResponse', function (args) {
          return _this2.__didReceiveResponse.apply(_this2, (0, _toConsumableArray2.default)(args));
        }));
        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[13]).default.addListener('didReceiveNetworkData', function (args) {
          return _this2.__didReceiveData.apply(_this2, (0, _toConsumableArray2.default)(args));
        }));
        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[13]).default.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this2.__didReceiveIncrementalData.apply(_this2, (0, _toConsumableArray2.default)(args));
        }));
        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[13]).default.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this2.__didReceiveDataProgress.apply(_this2, (0, _toConsumableArray2.default)(args));
        }));
        this._subscriptions.push(_$$_REQUIRE(_dependencyMap[13]).default.addListener('didCompleteNetworkResponse', function (args) {
          return _this2.__didCompleteResponse.apply(_this2, (0, _toConsumableArray2.default)(args));
        }));
        var nativeResponseType = 'text';
        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }
        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }
        var doSend = function doSend() {
          var friendlyName = _this2._trackingName !== 'unknown' ? _this2._trackingName : _this2._url;
          _this2._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
          _this2._performanceLogger.startTimespan(_this2._perfKey);
          _$$_REQUIRE(_dependencyMap[11])(_this2._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
          _$$_REQUIRE(_dependencyMap[11])(_this2._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
          _$$_REQUIRE(_dependencyMap[13]).default.sendRequest(_this2._method, _this2._trackingName, _this2._url, _this2._headers, data,
          /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
           * when making Flow check .android.js files. */
          nativeResponseType, incrementalEvents, _this2.timeout,
          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
          _this2.__didCreateRequest.bind(_this2), _this2.withCredentials);
        };
        {
          doSend();
        }
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;
        if (this._requestId) {
          _$$_REQUIRE(_dependencyMap[13]).default.abortRequest(this._requestId);
        }
        // only call onreadystatechange if there is something to abort,
        // below logic is per spec
        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();
          this.setReadyState(this.DONE);
        }
        // Reset again after, in case modified in handler
        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });
        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }
          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }

      /* global EventListener */
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        // If we dont' have a 'readystatechange' event handler, we don't
        // have to send repeated LOADING events with incremental updates
        // to responseText, which will avoid a bunch of native -> JS
        // bridge traffic.
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }
        (0, _get2.default)((0, _getPrototypeOf2.default)(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }], [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);
    return XMLHttpRequest;
  }(_eventTargetShim.default.apply(undefined, (0, _toConsumableArray2.default)(XHR_EVENTS)));
  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  module.exports = XMLHttpRequest;
},99,[1,34,10,6,5,13,15,12,100,101,106,24,103,110]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @author Toru Nagashima <https://github.com/mysticatea>
   * @copyright 2015 Toru Nagashima. All rights reserved.
   * See LICENSE file in root directory for full license.
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  /**
   * @typedef {object} PrivateData
   * @property {EventTarget} eventTarget The event target.
   * @property {{type:string}} event The original event object.
   * @property {number} eventPhase The current event phase.
   * @property {EventTarget|null} currentTarget The current event target.
   * @property {boolean} canceled The flag to prevent default.
   * @property {boolean} stopped The flag to stop propagation.
   * @property {boolean} immediateStopped The flag to stop propagation immediately.
   * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
   * @property {number} timeStamp The unix time.
   * @private
   */

  /**
   * Private data for event wrappers.
   * @type {WeakMap<Event, PrivateData>}
   * @private
   */
  var privateData = new WeakMap();

  /**
   * Cache for wrapper classes.
   * @type {WeakMap<Object, Function>}
   * @private
   */
  var wrappers = new WeakMap();

  /**
   * Get private data.
   * @param {Event} event The event object to get private data.
   * @returns {PrivateData} The private data of the event.
   * @private
   */
  function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
  }

  /**
   * https://dom.spec.whatwg.org/#set-the-canceled-flag
   * @param data {PrivateData} private data.
   */
  function setCancelFlag(data) {
    if (data.passiveListener != null) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
      }
      return;
    }
    if (!data.event.cancelable) {
      return;
    }
    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
      data.event.preventDefault();
    }
  }

  /**
   * @see https://dom.spec.whatwg.org/#interface-event
   * @private
   */
  /**
   * The event wrapper.
   * @constructor
   * @param {EventTarget} eventTarget The event target of this dispatching.
   * @param {Event|{type:string}} event The original event to wrap.
   */
  function Event(eventTarget, event) {
    privateData.set(this, {
      eventTarget: eventTarget,
      event: event,
      eventPhase: 2,
      currentTarget: eventTarget,
      canceled: false,
      stopped: false,
      immediateStopped: false,
      passiveListener: null,
      timeStamp: event.timeStamp || Date.now()
    });

    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", {
      value: false,
      enumerable: true
    });

    // Define accessors
    var keys = Object.keys(event);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!(key in this)) {
        Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
  }

  // Should be enumerable, but class methods are not enumerable.
  Event.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */
    get type() {
      return pd(this).event.type;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get target() {
      return pd(this).eventTarget;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get currentTarget() {
      return pd(this).currentTarget;
    },
    /**
     * @returns {EventTarget[]} The composed path of this event.
     */
    composedPath: function composedPath() {
      var currentTarget = pd(this).currentTarget;
      if (currentTarget == null) {
        return [];
      }
      return [currentTarget];
    },
    /**
     * Constant of NONE.
     * @type {number}
     */
    get NONE() {
      return 0;
    },
    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */
    get CAPTURING_PHASE() {
      return 1;
    },
    /**
     * Constant of AT_TARGET.
     * @type {number}
     */
    get AT_TARGET() {
      return 2;
    },
    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */
    get BUBBLING_PHASE() {
      return 3;
    },
    /**
     * The target of this event.
     * @type {number}
     */
    get eventPhase() {
      return pd(this).eventPhase;
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopPropagation: function stopPropagation() {
      var data = pd(this);
      data.stopped = true;
      if (typeof data.event.stopPropagation === "function") {
        data.event.stopPropagation();
      }
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopImmediatePropagation: function stopImmediatePropagation() {
      var data = pd(this);
      data.stopped = true;
      data.immediateStopped = true;
      if (typeof data.event.stopImmediatePropagation === "function") {
        data.event.stopImmediatePropagation();
      }
    },
    /**
     * The flag to be bubbling.
     * @type {boolean}
     */
    get bubbles() {
      return Boolean(pd(this).event.bubbles);
    },
    /**
     * The flag to be cancelable.
     * @type {boolean}
     */
    get cancelable() {
      return Boolean(pd(this).event.cancelable);
    },
    /**
     * Cancel this event.
     * @returns {void}
     */
    preventDefault: function preventDefault() {
      setCancelFlag(pd(this));
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */
    get defaultPrevented() {
      return pd(this).canceled;
    },
    /**
     * The flag to be composed.
     * @type {boolean}
     */
    get composed() {
      return Boolean(pd(this).event.composed);
    },
    /**
     * The unix time of this event.
     * @type {number}
     */
    get timeStamp() {
      return pd(this).timeStamp;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */
    get srcElement() {
      return pd(this).eventTarget;
    },
    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */
    get cancelBubble() {
      return pd(this).stopped;
    },
    set cancelBubble(value) {
      if (!value) {
        return;
      }
      var data = pd(this);
      data.stopped = true;
      if (typeof data.event.cancelBubble === "boolean") {
        data.event.cancelBubble = true;
      }
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */
    get returnValue() {
      return !pd(this).canceled;
    },
    set returnValue(value) {
      if (!value) {
        setCancelFlag(pd(this));
      }
    },
    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */
    initEvent: function initEvent() {
      // Do nothing.
    }
  };

  // `constructor` is not enumerable.
  Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
  });

  // Ensure `event instanceof window.Event` is `true`.
  if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);

    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event);
  }

  /**
   * Get the property descriptor to redirect a given property.
   * @param {string} key Property name to define property descriptor.
   * @returns {PropertyDescriptor} The property descriptor to redirect the property.
   * @private
   */
  function defineRedirectDescriptor(key) {
    return {
      get: function get() {
        return pd(this).event[key];
      },
      set: function set(value) {
        pd(this).event[key] = value;
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Get the property descriptor to call a given method property.
   * @param {string} key Property name to define property descriptor.
   * @returns {PropertyDescriptor} The property descriptor to call the method property.
   * @private
   */
  function defineCallDescriptor(key) {
    return {
      value: function value() {
        var event = pd(this).event;
        return event[key].apply(event, arguments);
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Define new wrapper class.
   * @param {Function} BaseEvent The base wrapper class.
   * @param {Object} proto The prototype of the original event.
   * @returns {Function} The defined wrapper class.
   * @private
   */
  function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);
    if (keys.length === 0) {
      return BaseEvent;
    }

    /** CustomEvent */
    function CustomEvent(eventTarget, event) {
      BaseEvent.call(this, eventTarget, event);
    }
    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
      constructor: {
        value: CustomEvent,
        configurable: true,
        writable: true
      }
    });

    // Define accessors.
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!(key in BaseEvent.prototype)) {
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        var isFunc = typeof descriptor.value === "function";
        Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
      }
    }
    return CustomEvent;
  }

  /**
   * Get the wrapper class of a given prototype.
   * @param {Object} proto The prototype of the original event to get its wrapper.
   * @returns {Function} The wrapper class.
   * @private
   */
  function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
      return Event;
    }
    var wrapper = wrappers.get(proto);
    if (wrapper == null) {
      wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
      wrappers.set(proto, wrapper);
    }
    return wrapper;
  }

  /**
   * Wrap a given event to management a dispatching.
   * @param {EventTarget} eventTarget The event target of this dispatching.
   * @param {Object} event The event to wrap.
   * @returns {Event} The wrapper instance.
   * @private
   */
  function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
  }

  /**
   * Get the immediateStopped flag of a given event.
   * @param {Event} event The event to get.
   * @returns {boolean} The flag to stop propagation immediately.
   * @private
   */
  function isStopped(event) {
    return pd(event).immediateStopped;
  }

  /**
   * Set the current event phase of a given event.
   * @param {Event} event The event to set current target.
   * @param {number} eventPhase New event phase.
   * @returns {void}
   * @private
   */
  function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
  }

  /**
   * Set the current target of a given event.
   * @param {Event} event The event to set current target.
   * @param {EventTarget|null} currentTarget New current target.
   * @returns {void}
   * @private
   */
  function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
  }

  /**
   * Set a passive listener of a given event.
   * @param {Event} event The event to set current target.
   * @param {Function|null} passiveListener New passive listener.
   * @returns {void}
   * @private
   */
  function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
  }

  /**
   * @typedef {object} ListenerNode
   * @property {Function} listener
   * @property {1|2|3} listenerType
   * @property {boolean} passive
   * @property {boolean} once
   * @property {ListenerNode|null} next
   * @private
   */

  /**
   * @type {WeakMap<object, Map<string, ListenerNode>>}
   * @private
   */
  var listenersMap = new WeakMap();

  // Listener types
  var CAPTURE = 1;
  var BUBBLE = 2;
  var ATTRIBUTE = 3;

  /**
   * Check whether a given value is an object or not.
   * @param {any} x The value to check.
   * @returns {boolean} `true` if the value is an object.
   */
  function isObject(x) {
    return x !== null && typeof x === "object"; //eslint-disable-line no-restricted-syntax
  }

  /**
   * Get listeners.
   * @param {EventTarget} eventTarget The event target to get.
   * @returns {Map<string, ListenerNode>} The listeners.
   * @private
   */
  function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
      throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }
    return listeners;
  }

  /**
   * Get the property descriptor for the event attribute of a given event.
   * @param {string} eventName The event name to get property descriptor.
   * @returns {PropertyDescriptor} The property descriptor.
   * @private
   */
  function defineEventAttributeDescriptor(eventName) {
    return {
      get: function get() {
        var listeners = getListeners(this);
        var node = listeners.get(eventName);
        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            return node.listener;
          }
          node = node.next;
        }
        return null;
      },
      set: function set(listener) {
        if (typeof listener !== "function" && !isObject(listener)) {
          listener = null; // eslint-disable-line no-param-reassign
        }
        var listeners = getListeners(this);

        // Traverse to the tail while removing old value.
        var prev = null;
        var node = listeners.get(eventName);
        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            // Remove old value.
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }
          node = node.next;
        }

        // Add new value.
        if (listener !== null) {
          var newNode = {
            listener: listener,
            listenerType: ATTRIBUTE,
            passive: false,
            once: false,
            next: null
          };
          if (prev === null) {
            listeners.set(eventName, newNode);
          } else {
            prev.next = newNode;
          }
        }
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Define an event attribute (e.g. `eventTarget.onclick`).
   * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
   * @param {string} eventName The event name to define.
   * @returns {void}
   */
  function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));
  }

  /**
   * Define a custom EventTarget with event attributes.
   * @param {string[]} eventNames Event names for event attributes.
   * @returns {EventTarget} The custom EventTarget.
   * @private
   */
  function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */
    function CustomEventTarget() {
      EventTarget.call(this);
    }
    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
      constructor: {
        value: CustomEventTarget,
        configurable: true,
        writable: true
      }
    });
    for (var i = 0; i < eventNames.length; ++i) {
      defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }
    return CustomEventTarget;
  }

  /**
   * EventTarget.
   *
   * - This is constructor if no arguments.
   * - This is a function which returns a CustomEventTarget constructor if there are arguments.
   *
   * For example:
   *
   *     class A extends EventTarget {}
   *     class B extends EventTarget("message") {}
   *     class C extends EventTarget("message", "error") {}
   *     class D extends EventTarget(["message", "error"]) {}
   */
  function EventTarget() {
    /*eslint-disable consistent-return */
    if (this instanceof EventTarget) {
      listenersMap.set(this, new Map());
      return;
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(arguments[0]);
    }
    if (arguments.length > 0) {
      var types = new Array(arguments.length);
      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }
      return defineCustomEventTarget(types);
    }
    throw new TypeError("Cannot call a class as a function");
    /*eslint-enable consistent-return */
  }

  // Should be enumerable, but class methods are not enumerable.
  EventTarget.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    addEventListener: function addEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }
      if (typeof listener !== "function" && !isObject(listener)) {
        throw new TypeError("'listener' should be a function or an object.");
      }
      var listeners = getListeners(this);
      var optionsIsObj = isObject(options);
      var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var newNode = {
        listener: listener,
        listenerType: listenerType,
        passive: optionsIsObj && Boolean(options.passive),
        once: optionsIsObj && Boolean(options.once),
        next: null
      };

      // Set it as the first node if the first node is null.
      var node = listeners.get(eventName);
      if (node === undefined) {
        listeners.set(eventName, newNode);
        return;
      }

      // Traverse to the tail while checking duplication..
      var prev = null;
      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          // Should ignore duplication.
          return;
        }
        prev = node;
        node = node.next;
      }

      // Add it.
      prev.next = newNode;
    },
    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    removeEventListener: function removeEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }
      var listeners = getListeners(this);
      var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var prev = null;
      var node = listeners.get(eventName);
      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
          return;
        }
        prev = node;
        node = node.next;
      }
    },
    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */
    dispatchEvent: function dispatchEvent(event) {
      if (event == null || typeof event.type !== "string") {
        throw new TypeError('"event.type" should be a string.');
      }

      // If listeners aren't registered, terminate.
      var listeners = getListeners(this);
      var eventName = event.type;
      var node = listeners.get(eventName);
      if (node == null) {
        return true;
      }

      // Since we cannot rewrite several properties, so wrap object.
      var wrappedEvent = wrapEvent(this, event);

      // This doesn't process capturing phase and bubbling phase.
      // This isn't participating in a tree.
      var prev = null;
      while (node != null) {
        // Remove this listener if it's once
        if (node.once) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        // Call this listener
        setPassiveListener(wrappedEvent, node.passive ? node.listener : null);
        if (typeof node.listener === "function") {
          try {
            node.listener.call(this, wrappedEvent);
          } catch (err) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(err);
            }
          }
        } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
          node.listener.handleEvent(wrappedEvent);
        }

        // Break if `event.stopImmediatePropagation` was called.
        if (isStopped(wrappedEvent)) {
          break;
        }
        node = node.next;
      }
      setPassiveListener(wrappedEvent, null);
      setEventPhase(wrappedEvent, 0);
      setCurrentTarget(wrappedEvent, null);
      return !wrappedEvent.defaultPrevented;
    }
  };

  // `constructor` is not enumerable.
  Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
  });

  // Ensure `eventTarget instanceof window.EventTarget` is `true`.
  if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
  }
  exports.defineEventAttribute = defineEventAttribute;
  exports.EventTarget = EventTarget;
  exports.default = EventTarget;
  module.exports = EventTarget;
  module.exports.EventTarget = module.exports["default"] = EventTarget;
  module.exports.defineEventAttribute = defineEventAttribute;
},100,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativeBlobModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4])); /**
                                                                            * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                            *
                                                                            * This source code is licensed under the MIT license found in the
                                                                            * LICENSE file in the root directory of this source tree.
                                                                            *
                                                                            * 
                                                                            * @format
                                                                            */

  /*eslint-disable no-bitwise */
  /*eslint-disable eqeqeq */

  /**
   * Based on the rfc4122-compliant solution posted at
   * http://stackoverflow.com/questions/105034
   */
  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
        v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  // **Temporary workaround**
  // TODO(#24654): Use turbomodules for the Blob module.
  // Blob collector is a jsi::HostObject that is used by native to know
  // when the a Blob instance is deallocated. This allows to free the
  // underlying native resources. This is a hack to workaround the fact
  // that the current bridge infra doesn't allow to track js objects
  // deallocation. Ideally the whole Blob object should be a jsi::HostObject.
  function createBlobCollector(blobId) {
    if (global.__blobCollectorProvider == null) {
      return null;
    } else {
      return global.__blobCollectorProvider(blobId);
    }
  }

  /**
   * Module to manage blobs. Wrapper around the native blob module.
   */
  var BlobManager = /*#__PURE__*/function () {
    function BlobManager() {
      (0, _classCallCheck2.default)(this, BlobManager);
    }
    (0, _createClass2.default)(BlobManager, null, [{
      key: "createFromParts",
      value:
      /**
       * Create blob from existing array of blobs.
       */
      function createFromParts(parts, options) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        var blobId = uuidv4();
        var items = parts.map(function (part) {
          if (part instanceof ArrayBuffer || ArrayBuffer.isView(part)) {
            return {
              // $FlowFixMe[incompatible-cast]
              data: (0, _$$_REQUIRE(_dependencyMap[5]).fromByteArray)(new Uint8Array(part)),
              type: 'string'
            };
          } else if (part instanceof _$$_REQUIRE(_dependencyMap[6])) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce(function (acc, curr) {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        _NativeBlobModule.default.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId: blobId,
          offset: 0,
          size: size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }

      /**
       * Create blob instance from blob data from native.
       * Used internally by modules like XHR, WebSocket, etc.
       */
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        _$$_REQUIRE(_dependencyMap[7]).register(options.blobId);
        // $FlowFixMe[prop-missing]
        return Object.assign(Object.create(_$$_REQUIRE(_dependencyMap[6]).prototype), {
          data:
          // Reuse the collector instance when creating from an existing blob.
          // This will make sure that the underlying resource is only deallocated
          // when all blobs that refer to it are deallocated.
          options.__collector == null ? Object.assign({}, options, {
            __collector: createBlobCollector(options.blobId)
          }) : options
        });
      }

      /**
       * Deallocate resources for a blob.
       */
    }, {
      key: "release",
      value: function release(blobId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _$$_REQUIRE(_dependencyMap[7]).unregister(blobId);
        if (_$$_REQUIRE(_dependencyMap[7]).has(blobId)) {
          return;
        }
        _NativeBlobModule.default.release(blobId);
      }

      /**
       * Inject the blob content handler in the networking module to support blob
       * requests and responses.
       */
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addNetworkingHandler();
      }

      /**
       * Indicate the websocket should return a blob for incoming binary
       * messages.
       */
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addWebSocketHandler(socketId);
      }

      /**
       * Indicate the websocket should no longer return a blob for incoming
       * binary messages.
       */
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.removeWebSocketHandler(socketId);
      }

      /**
       * Send a blob message to a websocket.
       */
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
      }
    }]);
    return BlobManager;
  }();
  /**
   * If the native blob module is available.
   */
  BlobManager.isAvailable = !!_NativeBlobModule.default;
  module.exports = BlobManager;
},101,[1,5,6,102,24,103,104,105]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var NativeModule = TurboModuleRegistry.get('BlobModule');
  var constants = null;
  var NativeBlobModule = null;
  if (NativeModule != null) {
    NativeBlobModule = {
      getConstants: function getConstants() {
        if (constants == null) {
          constants = NativeModule.getConstants();
        }
        return constants;
      },
      addNetworkingHandler: function addNetworkingHandler() {
        NativeModule.addNetworkingHandler();
      },
      addWebSocketHandler: function addWebSocketHandler(id) {
        NativeModule.addWebSocketHandler(id);
      },
      removeWebSocketHandler: function removeWebSocketHandler(id) {
        NativeModule.removeWebSocketHandler(id);
      },
      sendOverSocket: function sendOverSocket(blob, socketID) {
        NativeModule.sendOverSocket(blob, socketID);
      },
      createFromParts: function createFromParts(parts, withId) {
        NativeModule.createFromParts(parts, withId);
      },
      release: function release(blobId) {
        NativeModule.release(blobId);
      }
    };
  }
  var _default = exports.default = NativeBlobModule;
},102,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
  function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }

  // base64 is 4/3 + up to two characters of the original data
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;

    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for (i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }
    return output.join('');
  }
  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
  }
},103,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);
  var _createClass = _$$_REQUIRE(_dependencyMap[1]);
  /**
   * Opaque JS representation of some binary data in native.
   *
   * The API is modeled after the W3C Blob API, with one caveat
   * regarding explicit deallocation. Refer to the `close()`
   * method for further details.
   *
   * Example usage in a React component:
   *
   *   class WebSocketImage extends React.Component {
   *      state = {blob: null};
   *      componentDidMount() {
   *        let ws = this.ws = new WebSocket(...);
   *        ws.binaryType = 'blob';
   *        ws.onmessage = (event) => {
   *          if (this.state.blob) {
   *            this.state.blob.close();
   *          }
   *          this.setState({blob: event.data});
   *        };
   *      }
   *      componentUnmount() {
   *        if (this.state.blob) {
   *          this.state.blob.close();
   *        }
   *        this.ws.close();
   *      }
   *      render() {
   *        if (!this.state.blob) {
   *          return <View />;
   *        }
   *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;
   *      }
   *   }
   *
   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob
   */
  var Blob = /*#__PURE__*/function () {
    /**
     * Constructor for JS consumers.
     * Currently we only support creating Blobs from other Blobs.
     * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob
     */
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 ? arguments[1] : undefined;
      _classCallCheck(this, Blob);
      var BlobManager = _$$_REQUIRE(_dependencyMap[2]);
      this.data = BlobManager.createFromParts(parts, options).data;
    }

    /*
     * This method is used to create a new Blob object containing
     * the data in the specified range of bytes of the source Blob.
     * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
     */
    // $FlowFixMe[unsafe-getters-setters]
    _createClass(Blob, [{
      key: "data",
      get:
      // $FlowFixMe[unsafe-getters-setters]
      function get() {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }
        return this._data;
      },
      set: function set(data) {
        this._data = data;
      }
    }, {
      key: "slice",
      value: function slice(start, end) {
        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var BlobManager = _$$_REQUIRE(_dependencyMap[2]);
        var _this$data = this.data,
          offset = _this$data.offset,
          size = _this$data.size;
        if (typeof start === 'number') {
          if (start > size) {
            // $FlowFixMe[reassign-const]
            start = size;
          }
          offset += start;
          size -= start;
          if (typeof end === 'number') {
            if (end < 0) {
              // $FlowFixMe[reassign-const]
              end = this.size + end;
            }
            if (end > this.size) {
              // $FlowFixMe[reassign-const]
              end = this.size;
            }
            size = end - start;
          }
        }
        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset: offset,
          size: size,
          type: contentType,
          /* Since `blob.slice()` creates a new view onto the same binary
           * data as the original blob, we should re-use the same collector
           * object so that the underlying resource gets deallocated when
           * the last view into the data is released, not the first.
           */
          __collector: this.data.__collector
        });
      }

      /**
       * This method is in the standard, but not actually implemented by
       * any browsers at this point. It's important for how Blobs work in
       * React Native, however, since we cannot de-allocate resources automatically,
       * so consumers need to explicitly de-allocate them.
       *
       * Note that the semantics around Blobs created via `blob.slice()`
       * and `new Blob([blob])` are different. `blob.slice()` creates a
       * new *view* onto the same binary data, so calling `close()` on any
       * of those views is enough to deallocate the data, whereas
       * `new Blob([blob, ...])` actually copies the data in memory.
       */
    }, {
      key: "close",
      value: function close() {
        var BlobManager = _$$_REQUIRE(_dependencyMap[2]);
        BlobManager.release(this.data.blobId);
        this.data = null;
      }

      /**
       * Size of the data contained in the Blob object, in bytes.
       */
      // $FlowFixMe[unsafe-getters-setters]
    }, {
      key: "size",
      get: function get() {
        return this.data.size;
      }

      /*
       * String indicating the MIME type of the data contained in the Blob.
       * If the type is unknown, this string is empty.
       */
      // $FlowFixMe[unsafe-getters-setters]
    }, {
      key: "type",
      get: function get() {
        return this.data.type || '';
      }
    }]);
    return Blob;
  }();
  module.exports = Blob;
},104,[5,6,101]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var registry = new Map();
  var register = function register(id) {
    var used = registry.get(id);
    if (used != null) {
      registry.set(id, used + 1);
    } else {
      registry.set(id, 1);
    }
  };
  var unregister = function unregister(id) {
    var used = registry.get(id);
    if (used != null) {
      if (used <= 1) {
        registry.delete(id);
      } else {
        registry.set(id, used - 1);
      }
    }
  };
  var has = function has(id) {
    return registry.get(id) || false;
  };
  module.exports = {
    register: register,
    unregister: unregister,
    has: has
  };
},105,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _createPerformanceLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * This is a global shared instance of IPerformanceLogger that is created with
   * createPerformanceLogger().
   * This logger should be used only for global performance metrics like the ones
   * that are logged during loading bundle. If you want to log something from your
   * React component you should use PerformanceLoggerContext instead.
   */
  var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)(true);
  module.exports = GlobalPerformanceLogger;
},106,[1,107]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createPerformanceLogger;
  exports.getCurrentTimestamp = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var Systrace = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _NativePerformance = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _infoLog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _global$nativeQPLTime;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _cookies = {};
  var PRINT_TO_CONSOLE = false; // Type as false to prevent accidentally committing `true`;

  // This is the prefix for optional logging points/timespans as marks/measures via Performance API,
  // used to separate these internally from other marks/measures
  var WEB_PERFORMANCE_PREFIX = 'global_perf_';
  var getCurrentTimestamp = exports.getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : function () {
    return global.performance.now();
  };
  var PerformanceLogger = /*#__PURE__*/function () {
    function PerformanceLogger(isGlobalLogger) {
      (0, _classCallCheck2.default)(this, PerformanceLogger);
      this._timespans = {};
      this._extras = {};
      this._points = {};
      this._pointExtras = {};
      this._closed = false;
      this._isGlobalLogger = false;
      this._isGlobalLogger = isGlobalLogger === true;
    }
    (0, _createClass2.default)(PerformanceLogger, [{
      key: "_isLoggingForWebPerformance",
      value: function _isLoggingForWebPerformance() {
        if (!this._isGlobalLogger || _NativePerformance.default == null) {
          return false;
        }
        if (this._isGlobalWebPerformanceLoggerEnabled == null) {
          this._isGlobalWebPerformanceLoggerEnabled = _ReactNativeFeatureFlags.default.isGlobalWebPerformanceLoggerEnabled();
        }
        return this._isGlobalWebPerformanceLoggerEnabled === true;
      }

      // NOTE: The Performance.mark/measure calls are wrapped here to ensure that
      // we are safe from the cases when the global 'peformance' object is still not yet defined.
      // It is only necessary in this file because of potential race conditions in the initialization
      // order between 'createPerformanceLogger' and 'setUpPerformance'.
      //
      // In most of the other cases this kind of check for `performance` being defined
      // wouldn't be necessary.
    }, {
      key: "_performanceMark",
      value: function _performanceMark(key, startTime) {
        if (this._isLoggingForWebPerformance()) {
          var _global$performance;
          (_global$performance = global.performance) == null ? undefined : _global$performance.mark == null ? undefined : _global$performance.mark(key, {
            startTime: startTime
          });
        }
      }
    }, {
      key: "_performanceMeasure",
      value: function _performanceMeasure(key, start, end) {
        if (this._isLoggingForWebPerformance()) {
          var _global$performance2;
          (_global$performance2 = global.performance) == null ? undefined : _global$performance2.measure == null ? undefined : _global$performance2.measure(key, {
            start: start,
            end: end
          });
        }
      }
    }, {
      key: "addTimespan",
      value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {
        if (this._closed) {
          return;
        }
        if (this._timespans[key]) {
          return;
        }
        this._timespans[key] = {
          startTime: startTime,
          endTime: endTime,
          totalTime: endTime - (startTime || 0),
          startExtras: startExtras,
          endExtras: endExtras
        };
        this._performanceMeasure(`${WEB_PERFORMANCE_PREFIX}_${key}`, startTime, endTime);
      }
    }, {
      key: "append",
      value: function append(performanceLogger) {
        this._timespans = Object.assign({}, performanceLogger.getTimespans(), this._timespans);
        this._extras = Object.assign({}, performanceLogger.getExtras(), this._extras);
        this._points = Object.assign({}, performanceLogger.getPoints(), this._points);
        this._pointExtras = Object.assign({}, performanceLogger.getPointExtras(), this._pointExtras);
      }
    }, {
      key: "clear",
      value: function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
      }
    }, {
      key: "clearCompleted",
      value: function clearCompleted() {
        for (var _key in this._timespans) {
          var _this$_timespans$_key;
          if (((_this$_timespans$_key = this._timespans[_key]) == null ? undefined : _this$_timespans$_key.totalTime) != null) {
            delete this._timespans[_key];
          }
        }
        this._extras = {};
        this._points = {};
      }
    }, {
      key: "close",
      value: function close() {
        this._closed = true;
      }
    }, {
      key: "currentTimestamp",
      value: function currentTimestamp() {
        return getCurrentTimestamp();
      }
    }, {
      key: "getExtras",
      value: function getExtras() {
        return this._extras;
      }
    }, {
      key: "getPoints",
      value: function getPoints() {
        return this._points;
      }
    }, {
      key: "getPointExtras",
      value: function getPointExtras() {
        return this._pointExtras;
      }
    }, {
      key: "getTimespans",
      value: function getTimespans() {
        return this._timespans;
      }
    }, {
      key: "hasTimespan",
      value: function hasTimespan(key) {
        return !!this._timespans[key];
      }
    }, {
      key: "isClosed",
      value: function isClosed() {
        return this._closed;
      }
    }, {
      key: "logEverything",
      value: function logEverything() {}
    }, {
      key: "markPoint",
      value: function markPoint(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        if (this._points[key] != null) {
          return;
        }
        this._points[key] = timestamp;
        if (extras) {
          this._pointExtras[key] = extras;
        }
        this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_${key}`, timestamp);
      }
    }, {
      key: "removeExtra",
      value: function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
      }
    }, {
      key: "setExtra",
      value: function setExtra(key, value) {
        if (this._closed) {
          return;
        }
        if (this._extras.hasOwnProperty(key)) {
          return;
        }
        this._extras[key] = value;
      }
    }, {
      key: "startTimespan",
      value: function startTimespan(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        if (this._timespans[key]) {
          return;
        }
        this._timespans[key] = {
          startTime: timestamp,
          startExtras: extras
        };
        _cookies[key] = Systrace.beginAsyncEvent(key);
        this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, timestamp);
      }
    }, {
      key: "stopTimespan",
      value: function stopTimespan(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        var timespan = this._timespans[key];
        if (!timespan || timespan.startTime == null) {
          return;
        }
        if (timespan.endTime != null) {
          return;
        }
        timespan.endExtras = extras;
        timespan.endTime = timestamp;
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
        if (_cookies[key] != null) {
          Systrace.endAsyncEvent(key, _cookies[key]);
          delete _cookies[key];
        }
        this._performanceMeasure(`${WEB_PERFORMANCE_PREFIX}_${key}`, `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, timestamp);
      }
    }]);
    return PerformanceLogger;
  }(); // Re-exporting for backwards compatibility with all the clients that
  // may still import it from this module.
  /**
   * This function creates performance loggers that can be used to collect and log
   * various performance data such as timespans, points and extras.
   * The loggers need to have minimal overhead since they're used in production.
   */
  function createPerformanceLogger(isGlobalLogger) {
    return new PerformanceLogger(isGlobalLogger);
  }
},107,[1,5,6,20,108,63,109]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var ReactNativeFeatureFlags = {
    isLayoutAnimationEnabled: function isLayoutAnimationEnabled() {
      return true;
    },
    shouldEmitW3CPointerEvents: function shouldEmitW3CPointerEvents() {
      return false;
    },
    shouldPressibilityUseW3CPointerEventsForHover: function shouldPressibilityUseW3CPointerEventsForHover() {
      return false;
    },
    animatedShouldDebounceQueueFlush: function animatedShouldDebounceQueueFlush() {
      return false;
    },
    animatedShouldUseSingleOp: function animatedShouldUseSingleOp() {
      return false;
    },
    isGlobalWebPerformanceLoggerEnabled: function isGlobalWebPerformanceLoggerEnabled() {
      return undefined;
    },
    enableAccessToHostTreeInFabric: function enableAccessToHostTreeInFabric() {
      return false;
    },
    shouldUseAnimatedObjectForTransform: function shouldUseAnimatedObjectForTransform() {
      return false;
    },
    shouldUseSetNativePropsInFabric: function shouldUseSetNativePropsInFabric() {
      return false;
    },
    shouldForceUnflattenForElevation: function shouldForceUnflattenForElevation() {
      return false;
    }
  };
  module.exports = ReactNativeFeatureFlags;
},108,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * Intentional info-level logging for clear separation from ad-hoc console debug logging.
   */
  function infoLog() {
    var _console;
    return (_console = console).log.apply(_console, arguments);
  }
  module.exports = infoLog;
},109,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _NativeEventEmitter2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _convertRequestBody = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _NativeNetworkingAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */ // Do not require the native RCTNetworking module directly! Use this wrapper module instead.
  // It will add the necessary requestId, so that you don't have to generate it yourself.
  // Convert FormData headers to arrays, which are easier to consume in
  // native on Android.
  function convertHeadersMapToArray(headers) {
    var headerArray = [];
    for (var name in headers) {
      headerArray.push([name, headers[name]]);
    }
    return headerArray;
  }
  var _requestId = 1;
  function generateRequestId() {
    return _requestId++;
  }

  /**
   * This class is a wrapper around the native RCTNetworking module. It adds a necessary unique
   * requestId to each network request that can be used to abort that request later on.
   */
  // FIXME: use typed events
  var RCTNetworking = /*#__PURE__*/function (_NativeEventEmitter) {
    (0, _inherits2.default)(RCTNetworking, _NativeEventEmitter);
    var _super = _createSuper(RCTNetworking);
    function RCTNetworking() {
      (0, _classCallCheck2.default)(this, RCTNetworking);
      return _super.call(this,
      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
      // If you want to use the native module on other platforms, please remove this condition and test its behavior
      _Platform.default.OS !== 'ios' ? null : _NativeNetworkingAndroid.default);
    }
    (0, _createClass2.default)(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = (0, _convertRequestBody.default)(data);
        if (body && body.formData) {
          body.formData = body.formData.map(function (part) {
            return Object.assign({}, part, {
              headers: convertHeadersMapToArray(part.headers)
            });
          });
        }
        var requestId = generateRequestId();
        _NativeNetworkingAndroid.default.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), Object.assign({}, body, {
          trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        _NativeNetworkingAndroid.default.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        _NativeNetworkingAndroid.default.clearCookies(callback);
      }
    }]);
    return RCTNetworking;
  }(_NativeEventEmitter2.default);
  var _default = exports.default = new RCTNetworking();
},110,[1,5,6,13,15,12,111,21,112,115]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  /**
   * `NativeEventEmitter` is intended for use by Native Modules to emit events to
   * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it
   * will be notified (via `addListener` and `removeListeners`) when the listener
   * count changes to manage "native memory".
   *
   * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.
   * This means event names must be globally unique, and it means that call sites
   * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).
   */
  var NativeEventEmitter = exports.default = /*#__PURE__*/function () {
    function NativeEventEmitter(nativeModule) {
      (0, _classCallCheck2.default)(this, NativeEventEmitter);
      if (_Platform.default.OS === 'ios') {
        (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
      }
      var hasAddListener =
      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
      !!nativeModule && typeof nativeModule.addListener === 'function';
      var hasRemoveListeners =
      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
      !!nativeModule && typeof nativeModule.removeListeners === 'function';
      if (nativeModule && hasAddListener && hasRemoveListeners) {
        this._nativeModule = nativeModule;
      } else if (nativeModule != null) {
        if (!hasAddListener) {
          console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
        }
        if (!hasRemoveListeners) {
          console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
        }
      }
    }
    (0, _createClass2.default)(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        var _this$_nativeModule,
          _this = this;
        (_this$_nativeModule = this._nativeModule) == null ? undefined : _this$_nativeModule.addListener(eventType);
        var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
        return {
          remove: function remove() {
            if (subscription != null) {
              var _this$_nativeModule2;
              (_this$_nativeModule2 = _this._nativeModule) == null ? undefined : _this$_nativeModule2.removeListeners(1);
              // $FlowFixMe[incompatible-use]
              subscription.remove();
              subscription = null;
            }
          }
        };
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is
        // included for completeness.
        _RCTDeviceEventEmitter.default.emit.apply(_RCTDeviceEventEmitter.default, [eventType].concat(args));
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        var _this$_nativeModule3;
        (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
        (_this$_nativeModule3 = this._nativeModule) == null ? undefined : _this$_nativeModule3.removeListeners(this.listenerCount(eventType));
        _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
      }
    }, {
      key: "listenerCount",
      value: function listenerCount(eventType) {
        return _RCTDeviceEventEmitter.default.listenerCount(eventType);
      }
    }]);
    return NativeEventEmitter;
  }();
},111,[1,5,6,21,4,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }
    if (body instanceof _$$_REQUIRE(_dependencyMap[0])) {
      return {
        blob: body.data
      };
    }
    if (body instanceof _$$_REQUIRE(_dependencyMap[1])) {
      return {
        formData: body.getParts()
      };
    }
    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      /* $FlowFixMe[incompatible-call] : no way to assert that 'body' is indeed
       * an ArrayBufferView */
      return {
        base64: _$$_REQUIRE(_dependencyMap[2])(body)
      };
    }
    return body;
  }
  module.exports = convertRequestBody;
},112,[104,113,114]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);
  var _createClass = _$$_REQUIRE(_dependencyMap[2]);
  /**
   * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests
   * with mixed data (string, native files) to be submitted via XMLHttpRequest.
   *
   * Example:
   *
   *   var photo = {
   *     uri: uriFromCameraRoll,
   *     type: 'image/jpeg',
   *     name: 'photo.jpg',
   *   };
   *
   *   var body = new FormData();
   *   body.append('authToken', 'secret');
   *   body.append('photo', photo);
   *   body.append('title', 'A beautiful photo!');
   *
   *   xhr.open('POST', serverURL);
   *   xhr.send(body);
   */
  var FormData = /*#__PURE__*/function () {
    function FormData() {
      _classCallCheck(this, FormData);
      this._parts = [];
    }
    _createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.
        // MDN says that any new values should be appended to existing values.
        // In any case, major browsers allow duplicate keys, so that's what we'll do
        // too. They'll simply get appended as additional form data parts in the
        // request body, leaving the server to deal with them.
        this._parts.push([key, value]);
      }
    }, {
      key: "getAll",
      value: function getAll(key) {
        return this._parts.filter(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 1),
            name = _ref2[0];
          return name === key;
        }).map(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
            value = _ref4[1];
          return value;
        });
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2),
            name = _ref6[0],
            value = _ref6[1];
          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          // The body part is a "blob", which in React Native just means
          // an object with a `uri` attribute. Optionally, it can also
          // have a `name` and `type` attribute to specify filename and
          // content type (cf. web Blob interface.)
          if (typeof value === 'object' && !Array.isArray(value) && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }
            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }
            return Object.assign({}, value, {
              headers: headers,
              fieldName: name
            });
          }
          // Convert non-object values to strings as per FormData.append() spec
          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);
    return FormData;
  }();
  module.exports = FormData;
},113,[26,5,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      // $FlowFixMe[reassign-const]
      data = new Uint8Array(data);
    }
    if (data instanceof Uint8Array) {
      return _$$_REQUIRE(_dependencyMap[0]).fromByteArray(data);
    }
    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }
    // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`
    var _ref = data,
      buffer = _ref.buffer,
      byteOffset = _ref.byteOffset,
      byteLength = _ref.byteLength;
    return _$$_REQUIRE(_dependencyMap[0]).fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }
  module.exports = binaryToBase64;
},114,[103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Networking');
},115,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /* globals Headers, Request, Response */

  'use strict';

  // side-effectful require() to put fetch,
  // Headers, Request, Response in global scope
  _$$_REQUIRE(_dependencyMap[0]);
  module.exports = {
    fetch: fetch,
    Headers: Headers,
    Request: Request,
    Response: Response
  };
},116,[117]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
  })(this, function (exports) {
    'use strict';

    /* eslint-disable no-prototype-builtins */
    var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self ||
    // eslint-disable-next-line no-undef
    typeof global !== 'undefined' && global || {};
    var support = {
      searchParams: 'URLSearchParams' in g,
      iterable: 'Symbol' in g && 'iterator' in Symbol,
      blob: 'FileReader' in g && 'Blob' in g && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in g,
      arrayBuffer: 'ArrayBuffer' in g
    };
    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }
    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];
      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }
    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }
      if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
        throw new TypeError('Invalid character in header field name: "' + name + '"');
      }
      return name.toLowerCase();
    }
    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }
      return value;
    }

    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };
      if (support.iterable) {
        iterator[Symbol.iterator] = function () {
          return iterator;
        };
      }
      return iterator;
    }
    function Headers(headers) {
      this.map = {};
      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          if (header.length != 2) {
            throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
          }
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }
    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };
    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };
    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };
    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };
    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
    function consumed(body) {
      if (body._noBody) return;
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }
      body.bodyUsed = true;
    }
    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };
        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }
    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
      var encoding = match ? match[1] : 'utf-8';
      reader.readAsText(blob, encoding);
      return promise;
    }
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);
      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }
      return chars.join('');
    }
    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }
    function Body() {
      this.bodyUsed = false;
      this._initBody = function (body) {
        /*
          fetch-mock wraps the Response object in an ES6 Proxy to
          provide useful test harness features such as flush. However, on
          ES5 browsers without fetch or Proxy support pollyfills must be used;
          the proxy-pollyfill is unable to proxy an attribute unless it exists
          on the object before the Proxy is created. This change ensures
          Response.bodyUsed exists on the instance, while maintaining the
          semantic of setting Request.bodyUsed in the constructor before
          _initBody is called.
        */
        // eslint-disable-next-line no-self-assign
        this.bodyUsed = this.bodyUsed;
        this._bodyInit = body;
        if (!body) {
          this._noBody = true;
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }
        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };
      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };
      }
      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed;
          } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
          } else {
            return Promise.resolve(this._bodyArrayBuffer);
          }
        } else if (support.blob) {
          return this.blob().then(readBlobAsArrayBuffer);
        } else {
          throw new Error('could not read as ArrayBuffer');
        }
      };
      this.text = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }
        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };
      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }
      this.json = function () {
        return this.text().then(JSON.parse);
      };
      return this;
    }

    // HTTP methods whose capitalization should be normalized
    var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];
    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }
    function Request(input, options) {
      if (!(this instanceof Request)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }
      options = options || {};
      var body = options.body;
      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }
      this.credentials = options.credentials || this.credentials || 'same-origin';
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }
      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal || function () {
        if ('AbortController' in g) {
          var ctrl = new AbortController();
          return ctrl.signal;
        }
      }();
      this.referrer = null;
      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }
      this._initBody(body);
      if (this.method === 'GET' || this.method === 'HEAD') {
        if (options.cache === 'no-store' || options.cache === 'no-cache') {
          // Search for a '_' parameter in the query string
          var reParamSearch = /([?&])_=[^&]*/;
          if (reParamSearch.test(this.url)) {
            // If it already exists then set the value with the current time
            this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
          } else {
            // Otherwise add a new '_' parameter to the end with the current time
            var reQueryString = /\?/;
            this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
          }
        }
      }
    }
    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };
    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }
    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
      // https://github.com/github/fetch/issues/748
      // https://github.com/zloirock/core-js/issues/751
      preProcessedHeaders.split('\r').map(function (header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
      }).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          try {
            headers.append(key, value);
          } catch (error) {
            console.warn('Response ' + error.message);
          }
        }
      });
      return headers;
    }
    Body.call(Request.prototype);
    function Response(bodyInit, options) {
      if (!(this instanceof Response)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }
      if (!options) {
        options = {};
      }
      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      if (this.status < 200 || this.status > 599) {
        throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
      }
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
      this.headers = new Headers(options.headers);
      this.url = options.url || '';
      this._initBody(bodyInit);
    }
    Body.call(Response.prototype);
    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };
    Response.error = function () {
      var response = new Response(null, {
        status: 200,
        statusText: ''
      });
      response.ok = false;
      response.status = 0;
      response.type = 'error';
      return response;
    };
    var redirectStatuses = [301, 302, 303, 307, 308];
    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }
      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };
    exports.DOMException = g.DOMException;
    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function (message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };
      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }
    function fetch(input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'));
        }
        var xhr = new XMLHttpRequest();
        function abortXhr() {
          xhr.abort();
        }
        xhr.onload = function () {
          var options = {
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          // This check if specifically for when a user fetches a file locally from the file system
          // Only if the status is out of a normal range
          if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
            options.status = 200;
          } else {
            options.status = xhr.status;
          }
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          setTimeout(function () {
            resolve(new Response(body, options));
          }, 0);
        };
        xhr.onerror = function () {
          setTimeout(function () {
            reject(new TypeError('Network request failed'));
          }, 0);
        };
        xhr.ontimeout = function () {
          setTimeout(function () {
            reject(new TypeError('Network request timed out'));
          }, 0);
        };
        xhr.onabort = function () {
          setTimeout(function () {
            reject(new exports.DOMException('Aborted', 'AbortError'));
          }, 0);
        };
        function fixUrl(url) {
          try {
            return url === '' && g.location.href ? g.location.href : url;
          } catch (e) {
            return url;
          }
        }
        xhr.open(request.method, fixUrl(request.url), true);
        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }
        if ('responseType' in xhr) {
          if (support.blob) {
            xhr.responseType = 'blob';
          } else if (support.arrayBuffer) {
            xhr.responseType = 'arraybuffer';
          }
        }
        if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
          var names = [];
          Object.getOwnPropertyNames(init.headers).forEach(function (name) {
            names.push(normalizeName(name));
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
          });
          request.headers.forEach(function (value, name) {
            if (names.indexOf(name) === -1) {
              xhr.setRequestHeader(name, value);
            }
          });
        } else {
          request.headers.forEach(function (value, name) {
            xhr.setRequestHeader(name, value);
          });
        }
        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);
          xhr.onreadystatechange = function () {
            // DONE (success or failure)
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    }
    fetch.polyfill = true;
    if (!g.fetch) {
      g.fetch = fetch;
      g.Headers = Headers;
      g.Request = Request;
      g.Response = Response;
    }
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
},117,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Blob = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _BlobManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _binaryToBase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _NativeWebSocketModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  var _WebSocketEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));
  var _base64Js = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));
  var _eventTargetShim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));
  var _excluded = ["headers"];
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;

  // Abnormal closure where no code is provided in a control frame
  // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5
  var CLOSE_ABNORMAL = 1006;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;
  /**
   * Browser-compatible WebSockets implementation.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
   * See https://github.com/websockets/ws
   */
  var WebSocket = /*#__PURE__*/function (_ref) {
    (0, _inherits2.default)(WebSocket, _ref);
    var _super = _createSuper(WebSocket);
    function WebSocket(url, protocols, options) {
      var _this;
      (0, _classCallCheck2.default)(this, WebSocket);
      _this = _super.call(this);
      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;
      _this.url = url;
      if (typeof protocols === 'string') {
        protocols = [protocols];
      }
      var _ref2 = options || {},
        _ref2$headers = _ref2.headers,
        headers = _ref2$headers === undefined ? {} : _ref2$headers,
        unrecognized = (0, _objectWithoutProperties2.default)(_ref2, _excluded);

      // Preserve deprecated backwards compatibility for the 'origin' option
      // $FlowFixMe[prop-missing]
      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
         * oss) This comment suppresses an error found when Flow v0.54 was
         * deployed. To see the error delete this comment and run Flow. */
        headers.origin = unrecognized.origin;
        /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
         * oss) This comment suppresses an error found when Flow v0.54 was
         * deployed. To see the error delete this comment and run Flow. */
        delete unrecognized.origin;
      }

      // Warn about and discard anything else
      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }
      if (!Array.isArray(protocols)) {
        protocols = null;
      }
      _this._eventEmitter = new _NativeEventEmitter.default(
      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
      // If you want to use the native module on other platforms, please remove this condition and test its behavior
      _Platform.default.OS !== 'ios' ? null : _NativeWebSocketModule.default);
      _this._socketId = nextWebSocketId++;
      _this._registerEvents();
      _NativeWebSocketModule.default.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }
    (0, _createClass2.default)(WebSocket, [{
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
        }
        if (this._binaryType === 'blob' || binaryType === 'blob') {
          (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
          if (binaryType === 'blob') {
            _BlobManager.default.addWebSocketHandler(this._socketId);
          } else {
            _BlobManager.default.removeWebSocketHandler(this._socketId);
          }
        }
        this._binaryType = binaryType;
      }
    }, {
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }
        this.readyState = this.CLOSING;
        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }
        if (data instanceof _Blob.default) {
          (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
          _BlobManager.default.sendOverSocket(data, this._socketId);
          return;
        }
        if (typeof data === 'string') {
          _NativeWebSocketModule.default.send(data, this._socketId);
          return;
        }
        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          _NativeWebSocketModule.default.sendBinary((0, _binaryToBase.default)(data), this._socketId);
          return;
        }
        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }
        _NativeWebSocketModule.default.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        // See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);
        if (_BlobManager.default.isAvailable && this._binaryType === 'blob') {
          _BlobManager.default.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });
        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;
        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }
          var data = ev.data;
          switch (ev.type) {
            case 'binary':
              data = _base64Js.default.toByteArray(ev.data).buffer;
              break;
            case 'blob':
              data = _BlobManager.default.createFromOptions(ev.data);
              break;
          }
          _this2.dispatchEvent(new _WebSocketEvent.default('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }
          _this2.readyState = _this2.OPEN;
          _this2.protocol = ev.protocol;
          _this2.dispatchEvent(new _WebSocketEvent.default('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }
          _this2.readyState = _this2.CLOSED;
          _this2.dispatchEvent(new _WebSocketEvent.default('close', {
            code: ev.code,
            reason: ev.reason
            // TODO: missing `wasClean` (exposed on iOS as `clean` but missing on Android)
          }));
          _this2._unregisterEvents();
          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }
          _this2.readyState = _this2.CLOSED;
          _this2.dispatchEvent(new _WebSocketEvent.default('error', {
            message: ev.message
          }));
          _this2.dispatchEvent(new _WebSocketEvent.default('close', {
            code: CLOSE_ABNORMAL,
            reason: ev.message
            // TODO: Expose `wasClean`
          }));
          _this2._unregisterEvents();
          _this2.close();
        })];
      }
    }]);
    return WebSocket;
  }(_eventTargetShim.default.apply(undefined, WEBSOCKET_EVENTS));
  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  module.exports = WebSocket;
},118,[1,119,5,6,13,15,12,104,101,111,114,21,121,122,103,100,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _$$_REQUIRE(_dependencyMap[0])(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;
},119,[120]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
},120,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('WebSocketModule');
},121,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  'use strict';

  /**
   * Event object passed to the `onopen`, `onclose`, `onmessage`, `onerror`
   * callbacks of `WebSocket`.
   *
   * The `type` property is "open", "close", "message", "error" respectively.
   *
   * In case of "message", the `data` property contains the incoming data.
   */
  var _createClass = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);
  var WebSocketEvent = /*#__PURE__*/_createClass(function WebSocketEvent(type, eventInitDict) {
    _classCallCheck(this, WebSocketEvent);
    this.type = type.toString();
    Object.assign(this, eventInitDict);
  });
  module.exports = WebSocketEvent;
},122,[6,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);
  var _createClass = _$$_REQUIRE(_dependencyMap[1]);
  var _inherits = _$$_REQUIRE(_dependencyMap[2]);
  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);
  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * The File interface provides information about files.
   */
  var File = /*#__PURE__*/function (_Blob) {
    _inherits(File, _Blob);
    var _super = _createSuper(File);
    /**
     * Constructor for JS consumers.
     */
    function File(parts, name, options) {
      var _this;
      _classCallCheck(this, File);
      _$$_REQUIRE(_dependencyMap[5])(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');
      _this = _super.call(this, parts, options);
      _this.data.name = name;
      return _this;
    }

    /**
     * Name of the file.
     */
    _createClass(File, [{
      key: "name",
      get: function get() {
        _$$_REQUIRE(_dependencyMap[5])(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }

      /*
       * Last modified time of the file.
       */
    }, {
      key: "lastModified",
      get: function get() {
        return this.data.lastModified || 0;
      }
    }]);
    return File;
  }(_$$_REQUIRE(_dependencyMap[6]));
  module.exports = File;
},123,[5,6,13,15,12,24,104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _NativeFileReaderModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _eventTargetShim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  // DONE

  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;
  var FileReader = /*#__PURE__*/function (_ref) {
    (0, _inherits2.default)(FileReader, _ref);
    var _super = _createSuper(FileReader);
    function FileReader() {
      var _this;
      (0, _classCallCheck2.default)(this, FileReader);
      _this = _super.call(this);
      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._reset();
      return _this;
    }
    (0, _createClass2.default)(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });
        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }
          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer(blob) {
        var _this2 = this;
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(function (text) {
          if (_this2._aborted) {
            return;
          }
          var base64 = text.split(',')[1];
          var typedArray = (0, _$$_REQUIRE(_dependencyMap[8]).toByteArray)(base64);
          _this2._result = typedArray.buffer;
          _this2._setReadyState(DONE);
        }, function (error) {
          if (_this2._aborted) {
            return;
          }
          _this2._error = error;
          _this2._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        var _this3 = this;
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(function (text) {
          if (_this3._aborted) {
            return;
          }
          _this3._result = text;
          _this3._setReadyState(DONE);
        }, function (error) {
          if (_this3._aborted) {
            return;
          }
          _this3._error = error;
          _this3._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var _this4 = this;
        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsText(blob.data, encoding).then(function (text) {
          if (_this4._aborted) {
            return;
          }
          _this4._result = text;
          _this4._setReadyState(DONE);
        }, function (error) {
          if (_this4._aborted) {
            return;
          }
          _this4._error = error;
          _this4._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;
        // only call onreadystatechange if there is something to abort, as per spec
        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();
          this._setReadyState(DONE);
        }
        // Reset again after, in case modified in handler
        this._reset();
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function get() {
        return this._error;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);
    return FileReader;
  }(_eventTargetShim.default.apply(undefined, READER_EVENTS));
  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  module.exports = FileReader;
},124,[1,5,6,13,15,12,125,100,103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('FileReaderModule');
},125,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.URLSearchParams = exports.URL = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativeBlobModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _Symbol$iterator;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  var BLOB_URL_PREFIX = null;
  if (_NativeBlobModule.default && typeof _NativeBlobModule.default.getConstants().BLOB_URI_SCHEME === 'string') {
    var constants = _NativeBlobModule.default.getConstants();
    // $FlowFixMe[incompatible-type] asserted above
    // $FlowFixMe[unsafe-addition]
    BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';
    if (typeof constants.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += `//${constants.BLOB_URI_HOST}/`;
    }
  }

  /**
   * To allow Blobs be accessed via `content://` URIs,
   * you need to register `BlobProvider` as a ContentProvider in your app's `AndroidManifest.xml`:
   *
   * ```xml
   * <manifest>
   *   <application>
   *     <provider
   *       android:name="com.facebook.react.modules.blob.BlobProvider"
   *       android:authorities="@string/blob_provider_authority"
   *       android:exported="false"
   *     />
   *   </application>
   * </manifest>
   * ```
   * And then define the `blob_provider_authority` string in `res/values/strings.xml`.
   * Use a dotted name that's entirely unique to your app:
   *
   * ```xml
   * <resources>
   *   <string name="blob_provider_authority">your.app.package.blobs</string>
   * </resources>
   * ```
   */

  // Small subset from whatwg-url: https://github.com/jsdom/whatwg-url/tree/master/src
  // The reference code bloat comes from Unicode issues with URLs, so those won't work here.
  _Symbol$iterator = Symbol.iterator;
  var URLSearchParams = exports.URLSearchParams = /*#__PURE__*/function () {
    function URLSearchParams(params) {
      var _this = this;
      (0, _classCallCheck2.default)(this, URLSearchParams);
      this._searchParams = [];
      if (typeof params === 'object') {
        Object.keys(params).forEach(function (key) {
          return _this.append(key, params[key]);
        });
      }
    }
    (0, _createClass2.default)(URLSearchParams, [{
      key: "append",
      value: function append(key, value) {
        this._searchParams.push([key, value]);
      }
    }, {
      key: "delete",
      value: function _delete(name) {
        throw new Error('URLSearchParams.delete is not implemented');
      }
    }, {
      key: "get",
      value: function get(name) {
        throw new Error('URLSearchParams.get is not implemented');
      }
    }, {
      key: "getAll",
      value: function getAll(name) {
        throw new Error('URLSearchParams.getAll is not implemented');
      }
    }, {
      key: "has",
      value: function has(name) {
        throw new Error('URLSearchParams.has is not implemented');
      }
    }, {
      key: "set",
      value: function set(name, value) {
        throw new Error('URLSearchParams.set is not implemented');
      }
    }, {
      key: "sort",
      value: function sort() {
        throw new Error('URLSearchParams.sort is not implemented');
      }

      // $FlowFixMe[unsupported-syntax]
      // $FlowFixMe[missing-local-annot]
    }, {
      key: _Symbol$iterator,
      value: function value() {
        return this._searchParams[Symbol.iterator]();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this._searchParams.length === 0) {
          return '';
        }
        var last = this._searchParams.length - 1;
        return this._searchParams.reduce(function (acc, curr, index) {
          return acc + encodeURIComponent(curr[0]) + '=' + encodeURIComponent(curr[1]) + (index === last ? '' : '&');
        }, '');
      }
    }]);
    return URLSearchParams;
  }();
  function validateBaseUrl(url) {
    // from this MIT-licensed gist: https://gist.github.com/dperini/729294
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.test(url);
  }
  var URL = exports.URL = /*#__PURE__*/function () {
    // $FlowFixMe[missing-local-annot]
    function URL(url, base) {
      (0, _classCallCheck2.default)(this, URL);
      this._searchParamsInstance = null;
      var baseUrl = null;
      if (!base || validateBaseUrl(url)) {
        this._url = url;
        if (!this._url.endsWith('/')) {
          this._url += '/';
        }
      } else {
        if (typeof base === 'string') {
          baseUrl = base;
          if (!validateBaseUrl(baseUrl)) {
            throw new TypeError(`Invalid base URL: ${baseUrl}`);
          }
        } else {
          baseUrl = base.toString();
        }
        if (baseUrl.endsWith('/')) {
          baseUrl = baseUrl.slice(0, baseUrl.length - 1);
        }
        if (!url.startsWith('/')) {
          url = `/${url}`;
        }
        if (baseUrl.endsWith(url)) {
          url = '';
        }
        this._url = `${baseUrl}${url}`;
      }
    }
    (0, _createClass2.default)(URL, [{
      key: "hash",
      get: function get() {
        throw new Error('URL.hash is not implemented');
      }
    }, {
      key: "host",
      get: function get() {
        throw new Error('URL.host is not implemented');
      }
    }, {
      key: "hostname",
      get: function get() {
        throw new Error('URL.hostname is not implemented');
      }
    }, {
      key: "href",
      get: function get() {
        return this.toString();
      }
    }, {
      key: "origin",
      get: function get() {
        throw new Error('URL.origin is not implemented');
      }
    }, {
      key: "password",
      get: function get() {
        throw new Error('URL.password is not implemented');
      }
    }, {
      key: "pathname",
      get: function get() {
        throw new Error('URL.pathname not implemented');
      }
    }, {
      key: "port",
      get: function get() {
        throw new Error('URL.port is not implemented');
      }
    }, {
      key: "protocol",
      get: function get() {
        throw new Error('URL.protocol is not implemented');
      }
    }, {
      key: "search",
      get: function get() {
        throw new Error('URL.search is not implemented');
      }
    }, {
      key: "searchParams",
      get: function get() {
        if (this._searchParamsInstance == null) {
          this._searchParamsInstance = new URLSearchParams();
        }
        return this._searchParamsInstance;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toString();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this._searchParamsInstance === null) {
          return this._url;
        }
        // $FlowFixMe[incompatible-use]
        var instanceString = this._searchParamsInstance.toString();
        var separator = this._url.indexOf('?') > -1 ? '&' : '?';
        return this._url + separator + instanceString;
      }
    }, {
      key: "username",
      get: function get() {
        throw new Error('URL.username is not implemented');
      }
    }], [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }
        return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {
        // Do nothing.
      }
    }]);
    return URL;
  }();
},126,[1,5,6,102]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @author Toru Nagashima <https://github.com/mysticatea>
   * See LICENSE file in root directory for full license.
   */
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);
  var _createClass = _$$_REQUIRE(_dependencyMap[1]);
  var _inherits = _$$_REQUIRE(_dependencyMap[2]);
  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);
  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  /**
   * The signal class.
   * @see https://dom.spec.whatwg.org/#abortsignal
   */
  var AbortSignal = /*#__PURE__*/function (_eventTargetShim$Even) {
    _inherits(AbortSignal, _eventTargetShim$Even);
    var _super = _createSuper(AbortSignal);
    /**
     * AbortSignal cannot be constructed directly.
     */
    function AbortSignal() {
      var _this;
      _classCallCheck(this, AbortSignal);
      _this = _super.call(this);
      throw new TypeError("AbortSignal cannot be constructed directly");
      return _this;
    }
    /**
     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
     */
    _createClass(AbortSignal, [{
      key: "aborted",
      get: function get() {
        var aborted = abortedFlags.get(this);
        if (typeof aborted !== "boolean") {
          throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
        }
        return aborted;
      }
    }]);
    return AbortSignal;
  }(_$$_REQUIRE(_dependencyMap[5]).EventTarget);
  _$$_REQUIRE(_dependencyMap[5]).defineEventAttribute(AbortSignal.prototype, "abort");
  /**
   * Create an AbortSignal object.
   */
  function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    _$$_REQUIRE(_dependencyMap[5]).EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
  }
  /**
   * Abort a given signal.
   */
  function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
      return;
    }
    abortedFlags.set(signal, true);
    signal.dispatchEvent({
      type: "abort"
    });
  }
  /**
   * Aborted flag for each instances.
   */
  var abortedFlags = new WeakMap();
  // Properties should be enumerable.
  Object.defineProperties(AbortSignal.prototype, {
    aborted: {
      enumerable: true
    }
  });
  // `toString()` should return `"[object AbortSignal]"`
  if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortSignal"
    });
  }

  /**
   * The AbortController.
   * @see https://dom.spec.whatwg.org/#abortcontroller
   */
  var AbortController = /*#__PURE__*/function () {
    /**
     * Initialize this controller.
     */
    function AbortController() {
      _classCallCheck(this, AbortController);
      signals.set(this, createAbortSignal());
    }
    /**
     * Returns the `AbortSignal` object associated with this object.
     */
    _createClass(AbortController, [{
      key: "signal",
      get: function get() {
        return getSignal(this);
      }
      /**
       * Abort and signal to any observers that the associated activity is to be aborted.
       */
    }, {
      key: "abort",
      value: function abort() {
        abortSignal(getSignal(this));
      }
    }]);
    return AbortController;
  }();
  /**
   * Associated signals.
   */
  var signals = new WeakMap();
  /**
   * Get the associated signal of a given controller.
   */
  function getSignal(controller) {
    var signal = signals.get(controller);
    if (signal == null) {
      throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
    }
    return signal;
  }
  // Properties should be enumerable.
  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: true
    },
    abort: {
      enumerable: true
    }
  });
  if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortController"
    });
  }
  exports.AbortController = AbortController;
  exports.AbortSignal = AbortSignal;
  exports.default = AbortController;
  module.exports = AbortController;
  module.exports.AbortController = module.exports["default"] = AbortController;
  module.exports.AbortSignal = AbortSignal;
},127,[5,6,13,15,12,100]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * Set up alert().
   * You can use this module directly, or just require InitializeCore.
   */
  if (!global.alert) {
    global.alert = function (text) {
      // Require Alert on demand. Requiring it too early can lead to issues
      // with things like Platform not being fully initialized.
      _$$_REQUIRE(_dependencyMap[0]).alert('Alert', '' + text);
    };
  }
},128,[129]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _RCTAlertManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  /**
   * Launches an alert dialog with the specified title and message.
   *
   * See https://reactnative.dev/docs/alert
   */
  var Alert = /*#__PURE__*/function () {
    function Alert() {
      (0, _classCallCheck2.default)(this, Alert);
    }
    (0, _createClass2.default)(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        if (_Platform.default.OS === 'ios') {
          Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);
        } else if (_Platform.default.OS === 'android') {
          var NativeDialogManagerAndroid = _$$_REQUIRE(_dependencyMap[5]).default;
          if (!NativeDialogManagerAndroid) {
            return;
          }
          var constants = NativeDialogManagerAndroid.getConstants();
          var config = {
            title: title || '',
            message: message || '',
            cancelable: false
          };
          if (options && options.cancelable) {
            config.cancelable = options.cancelable;
          }
          // At most three buttons (neutral, negative, positive). Ignore rest.
          // The text 'OK' should be probably localized. iOS Alert does that in native.
          var defaultPositiveText = 'OK';
          var validButtons = buttons ? buttons.slice(0, 3) : [{
            text: defaultPositiveText
          }];
          var buttonPositive = validButtons.pop();
          var buttonNegative = validButtons.pop();
          var buttonNeutral = validButtons.pop();
          if (buttonNeutral) {
            config.buttonNeutral = buttonNeutral.text || '';
          }
          if (buttonNegative) {
            config.buttonNegative = buttonNegative.text || '';
          }
          if (buttonPositive) {
            config.buttonPositive = buttonPositive.text || defaultPositiveText;
          }

          /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
           * Flow's LTI update could not be added via codemod */
          var onAction = function onAction(action, buttonKey) {
            if (action === constants.buttonClicked) {
              if (buttonKey === constants.buttonNeutral) {
                buttonNeutral.onPress && buttonNeutral.onPress();
              } else if (buttonKey === constants.buttonNegative) {
                buttonNegative.onPress && buttonNegative.onPress();
              } else if (buttonKey === constants.buttonPositive) {
                buttonPositive.onPress && buttonPositive.onPress();
              }
            } else if (action === constants.dismissed) {
              options && options.onDismiss && options.onDismiss();
            }
          };
          var onError = function onError(errorMessage) {
            return console.warn(errorMessage);
          };
          NativeDialogManagerAndroid.showAlert(config, onError, onAction);
        }
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments.length > 4 ? arguments[4] : undefined;
        var keyboardType = arguments.length > 5 ? arguments[5] : undefined;
        var options = arguments.length > 6 ? arguments[6] : undefined;
        if (_Platform.default.OS === 'ios') {
          var callbacks = [];
          var buttons = [];
          var cancelButtonKey;
          var destructiveButtonKey;
          var preferredButtonKey;
          if (typeof callbackOrButtons === 'function') {
            callbacks = [callbackOrButtons];
          } else if (Array.isArray(callbackOrButtons)) {
            callbackOrButtons.forEach(function (btn, index) {
              callbacks[index] = btn.onPress;
              if (btn.style === 'cancel') {
                cancelButtonKey = String(index);
              } else if (btn.style === 'destructive') {
                destructiveButtonKey = String(index);
              }
              if (btn.isPreferred) {
                preferredButtonKey = String(index);
              }
              if (btn.text || index < (callbackOrButtons || []).length - 1) {
                var btnDef = {};
                btnDef[index] = btn.text || '';
                buttons.push(btnDef);
              }
            });
          }
          _RCTAlertManager.default.alertWithArgs({
            title: title || '',
            message: message || undefined,
            buttons: buttons,
            type: type || undefined,
            defaultValue: defaultValue,
            cancelButtonKey: cancelButtonKey,
            destructiveButtonKey: destructiveButtonKey,
            preferredButtonKey: preferredButtonKey,
            keyboardType: keyboardType,
            userInterfaceStyle: (options == null ? undefined : options.userInterfaceStyle) || undefined
          }, function (id, value) {
            var cb = callbacks[id];
            cb && cb(value);
          });
        }
      }
    }]);
    return Alert;
  }();
  module.exports = Alert;
},129,[1,5,6,21,130,131]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeDialogManagerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  function emptyCallback() {}
  module.exports = {
    alertWithArgs: function alertWithArgs(args, callback) {
      // TODO(5998984): Polyfill it correctly with DialogManagerAndroid
      if (!_NativeDialogManagerAndroid.default) {
        return;
      }
      _NativeDialogManagerAndroid.default.showAlert(args, emptyCallback, callback || emptyCallback);
    }
  };
},130,[1,131]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  /* 'buttonClicked' | 'dismissed' */
  /*
    buttonPositive = -1,
    buttonNegative = -2,
    buttonNeutral = -3
  */
  var _default = exports.default = TurboModuleRegistry.get('DialogManagerAndroid');
},131,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var navigator = global.navigator;
  if (navigator === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    global.navigator = {
      product: 'ReactNative'
    };
  } else {
    // see https://github.com/facebook/react-native/issues/10881
    _$$_REQUIRE(_dependencyMap[0]).polyfillObjectProperty(navigator, 'product', function () {
      return 'ReactNative';
    });
  }
},132,[85]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var registerModule;
  if (global.RN$Bridgeless === true && global.RN$registerCallableModule) {
    registerModule = global.RN$registerCallableModule;
  } else {
    var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);
    registerModule = function registerModule(moduleName,
    /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    factory) {
      return BatchedBridge.registerLazyCallableModule(moduleName, factory);
    };
  }
  registerModule('Systrace', function () {
    return _$$_REQUIRE(_dependencyMap[1]);
  });
  if (!(global.RN$Bridgeless === true)) {
    registerModule('JSTimers', function () {
      return _$$_REQUIRE(_dependencyMap[2]);
    });
  }
  registerModule('HeapCapture', function () {
    return _$$_REQUIRE(_dependencyMap[3]);
  });
  registerModule('SamplingProfiler', function () {
    return _$$_REQUIRE(_dependencyMap[4]);
  });
  registerModule('RCTLog', function () {
    return _$$_REQUIRE(_dependencyMap[5]);
  });
  registerModule('RCTDeviceEventEmitter', function () {
    return _$$_REQUIRE(_dependencyMap[6]).default;
  });
  registerModule('RCTNativeAppEventEmitter', function () {
    return _$$_REQUIRE(_dependencyMap[7]);
  });
  registerModule('GlobalPerformanceLogger', function () {
    return _$$_REQUIRE(_dependencyMap[8]);
  });
  {
    registerModule('HMRClient', function () {
      return _$$_REQUIRE(_dependencyMap[9]);
    });
  }
},133,[32,20,94,134,136,138,4,139,106,140]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeJSCHeapCapture = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;
      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }
      if (_NativeJSCHeapCapture.default) {
        _NativeJSCHeapCapture.default.captureComplete(path, error);
      }
    }
  };
  module.exports = HeapCapture;
},134,[1,135]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('JSCHeapCapture');
},135,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;
      try {
        result = global.pokeSamplingProfiler();
        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }
      var NativeJSCSamplingProfiler = _$$_REQUIRE(_dependencyMap[0]).default;
      if (NativeJSCSamplingProfiler) {
        NativeJSCSamplingProfiler.operationComplete(token, result, error);
      }
    }
  };
  module.exports = SamplingProfiler;
},136,[137]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('JSCSamplingProfiler');
},137,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    // level one of log, info, warn, error, mustfix
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      // We already printed in the native console, so only log here if using a js debugger
      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(args));
      } else {
        // Report native warnings to LogBox
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, args);
        }
      }
    },
    // Log to console regardless of nativeLoggingHook
    logToConsole: function logToConsole(level) {
      var _console;
      var logFn = levelsMap[level];
      _$$_REQUIRE(_dependencyMap[0])(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      (_console = console)[logFn].apply(_console, args);
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},138,[24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * Deprecated - subclass NativeEventEmitter to create granular event modules instead of
   * adding all event listeners directly to RCTNativeAppEventEmitter.
   */
  var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
  module.exports = RCTNativeAppEventEmitter;
},139,[1,4]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  // This shim ensures DEV binary builds don't crash in JS
  // when they're combined with a PROD JavaScript build.
  var HMRClientProdShim = {
    setup: function setup() {},
    enable: function enable() {
      console.error("Fast Refresh is disabled in JavaScript bundles built in production mode. Did you forget to run Metro?");
    },
    disable: function disable() {},
    registerBundle: function registerBundle() {},
    log: function log() {}
  };
  module.exports = HMRClientProdShim;
},140,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * Set up SegmentFetcher.
   * You can use this module directly, or just require InitializeCore.
   */

  function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;
    SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code; // flowlint-line unclear-type: off
        callback(error);
      }
      callback(null);
    });
  }
  global.__fetchSegment = __fetchSegment;
},141,[142]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('SegmentFetcher');
},142,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _BatchedBridge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _BugReporting = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createPerformanceLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _infoLog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _SceneTracker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _HeadlessJsTaskError = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeHeadlessJsTaskSupport = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _renderApplication = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var taskProviders = new Map();
  var taskCancelProviders = new Map();
  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };
  var wrapperComponentProvider;
  var showArchitectureIndicator = false;

  /**
   * `AppRegistry` is the JavaScript entry point to running all React Native apps.
   *
   * See https://reactnative.dev/docs/appregistry
   */
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    enableArchitectureIndicator: function enableArchitectureIndicator(enabled) {
      showArchitectureIndicator = enabled;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          (0, _invariant.default)(appConfig.component != null, "AppRegistry.registerConfig(...): Every config is expected to set either `run` or `component`, but `%s` has neither.", appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    /**
     * Registers an app's root component.
     *
     * See https://reactnative.dev/docs/appregistry#registercomponent
     */
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
      runnables[appKey] = function (appParameters, displayMode) {
        var _appParameters$initia;
        var concurrentRootEnabled = Boolean(((_appParameters$initia = appParameters.initialProps) == null ? undefined : _appParameters$initia.concurrentRoot) || appParameters.concurrentRoot);
        (0, _renderApplication.default)(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.fabric, showArchitectureIndicator, scopedPerformanceLogger, appKey === 'LogBox',
        // is logbox
        appKey, displayMode, concurrentRootEnabled);
      };
      if (section) {
        sections[appKey] = runnables[appKey];
      }
      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = run;
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return Object.assign({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: Object.assign({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    /**
     * Loads the JavaScript bundle and runs the app.
     *
     * See https://reactnative.dev/docs/appregistry#runapplication
     */
    runApplication: function runApplication(appKey, appParameters, displayMode) {
      if (appKey !== 'LogBox') {
        var logParams = '';
        var msg = 'Running "' + appKey + logParams;
        (0, _infoLog.default)(msg);
        _BugReporting.default.addSource('AppRegistry.runApplication' + runCount++, function () {
          return msg;
        });
      }
      (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
      _SceneTracker.default.setActiveScene({
        name: appKey
      });
      runnables[appKey](appParameters, (0, _$$_REQUIRE(_dependencyMap[10]).coerceDisplayMode)(displayMode));
    },
    /**
     * Update initial props for a surface that's already rendered
     */
    setSurfaceProps: function setSurfaceProps(appKey, appParameters, displayMode) {
      if (appKey !== 'LogBox') {
        var msg = 'Updating props for Surface "' + appKey + '" with ' + JSON.stringify(appParameters);
        (0, _infoLog.default)(msg);
        _BugReporting.default.addSource('AppRegistry.setSurfaceProps' + runCount++, function () {
          return msg;
        });
      }
      (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
      runnables[appKey](appParameters, (0, _$$_REQUIRE(_dependencyMap[10]).coerceDisplayMode)(displayMode));
    },
    /**
     * Stops an application when a view should be destroyed.
     *
     * See https://reactnative.dev/docs/appregistry#unmountapplicationcomponentatroottag
     */
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      (0, _$$_REQUIRE(_dependencyMap[11]).unmountComponentAtNodeAndRemoveContainer)(rootTag);
    },
    /**
     * Register a headless task. A headless task is a bit of code that runs without a UI.
     *
     * See https://reactnative.dev/docs/appregistry#registerheadlesstask
     */
    registerHeadlessTask: function registerHeadlessTask(taskKey, taskProvider) {
      // $FlowFixMe[object-this-reference]
      this.registerCancellableHeadlessTask(taskKey, taskProvider, function () {
        return function () {
          /* Cancel is no-op */
        };
      });
    },
    /**
     * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.
     *
     * See https://reactnative.dev/docs/appregistry#registercancellableheadlesstask
     */
    registerCancellableHeadlessTask: function registerCancellableHeadlessTask(taskKey, taskProvider, taskCancelProvider) {
      if (taskProviders.has(taskKey)) {
        console.warn(`registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`);
      }
      taskProviders.set(taskKey, taskProvider);
      taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    /**
     * Only called from native code. Starts a headless task.
     *
     * See https://reactnative.dev/docs/appregistry#startheadlesstask
     */
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = taskProviders.get(taskKey);
      if (!taskProvider) {
        console.warn(`No task registered for key ${taskKey}`);
        if (_NativeHeadlessJsTaskSupport.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
        }
        return;
      }
      taskProvider()(data).then(function () {
        if (_NativeHeadlessJsTaskSupport.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
        }
      }).catch(function (reason) {
        console.error(reason);
        if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
          // $FlowFixMe[unused-promise]
          _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then(function (retryPosted) {
            if (!retryPosted) {
              _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
          });
        }
      });
    },
    /**
     * Only called from native code. Cancels a headless task.
     *
     * See https://reactnative.dev/docs/appregistry#cancelheadlesstask
     */
    cancelHeadlessTask: function cancelHeadlessTask(taskId, taskKey) {
      var taskCancelProvider = taskCancelProviders.get(taskKey);
      if (!taskCancelProvider) {
        throw new Error(`No task canceller registered for key '${taskKey}'`);
      }
      taskCancelProvider()();
    }
  };

  // Register LogBox as a default surface
  AppRegistry.registerComponent('LogBox', function () {
    {
      return function NoOp() {
        return null;
      };
    }
  });
  global.RN$AppRegistry = AppRegistry;

  // Backwards compat with SurfaceRegistry, remove me later
  global.RN$SurfaceRegistry = {
    renderSurface: AppRegistry.runApplication,
    setSurfaceProps: AppRegistry.setSurfaceProps
  };
  if (global.RN$Bridgeless !== true) {
    _BatchedBridge.default.registerCallableModule('AppRegistry', AppRegistry);
  }
  module.exports = AppRegistry;
},143,[1,32,144,107,109,148,149,150,151,24,233,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _NativeRedBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _NativeBugReporting = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return _$$_REQUIRE(_dependencyMap[7])();
    });
  }

  /**
   * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report
   * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows
   * that are currently visible on screen. Components should also remember to call `remove()` on the object that is
   * returned by `addSource` when they are unmounted.
   */
  var BugReporting = /*#__PURE__*/function () {
    function BugReporting() {
      (0, _classCallCheck2.default)(this, BugReporting);
    }
    (0, _createClass2.default)(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData',
          // $FlowFixMe[method-unbinding]
          BugReporting.collectExtraData, null);
          defaultExtras();
        }
        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData',
          // $FlowFixMe[method-unbinding]
          BugReporting.collectExtraData, null);
        }
      }

      /**
       * Maps a string key to a simple callback that should return a string payload to be attached
       * to a bug report. Source callbacks are called when `collectExtraData` is called.
       *
       * Returns an object to remove the source when the component unmounts.
       *
       * Conflicts trample with a warning.
       */
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }

      /**
       * Maps a string key to a simple callback that should return a string payload to be attached
       * to a bug report. Source callbacks are called when `collectExtraData` is called.
       *
       * Returns an object to remove the source when the component unmounts.
       *
       * Conflicts trample with a warning.
       */
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();
        if (source.has(key)) {
          console.warn(`BugReporting.add* called multiple times for same key '${key}'`);
        }
        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }

      /**
       * This can be called from a native bug reporting flow, or from JS code.
       *
       * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`
       * after collecting `extraData`.
       */
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};
        for (var _ref of BugReporting._extraSources) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }
        var fileData = {};
        for (var _ref3 of BugReporting._fileSources) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
          var _key2 = _ref4[0];
          var _callback = _ref4[1];
          fileData[_key2] = _callback();
        }
        if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
          _NativeBugReporting.default.setExtraData(extraData, fileData);
        }
        if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
          _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
        }
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);
    return BugReporting;
  }();
  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  module.exports = BugReporting;
},144,[1,26,5,6,4,145,146,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('RedBox');
},145,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  var _default = exports.default = TurboModuleRegistry.get('BugReporting');
},146,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /*
  const getReactData = require('getReactData');
  
  const INDENTATION_SIZE = 2;
  const MAX_DEPTH = 2;
  const MAX_STRING_LENGTH = 50;
  */

  /**
   * Dump all React Native root views and their content. This function tries
   * it best to get the content but ultimately relies on implementation details
   * of React and will fail in future versions.
   */
  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }
  function getReactTree() {
    // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684
    return "React tree dumps have been temporarily disabled while React is upgraded to Fiber.";
    /*
    let output = '';
    const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);
    for (const rootId of rootIds) {
      const instance = ReactNativeMount._instancesByContainerID[rootId];
      output += `============ Root ID: ${rootId} ============\n`;
      output += dumpNode(instance, 0);
      output += `============ End root ID: ${rootId} ============\n`;
    }
    return output;
    */
  }

  /*
  function dumpNode(node: Object, indentation: number) {
    const data = getReactData(node);
    if (data.nodeType === 'Text') {
      return indent(indentation) + data.text + '\n';
    } else if (data.nodeType === 'Empty') {
      return '';
    }
    let output = indent(indentation) + `<${data.name}`;
    if (data.nodeType === 'Composite') {
      for (const propName of Object.getOwnPropertyNames(data.props || {})) {
        if (isNormalProp(propName)) {
          try {
            const value = convertValue(data.props[propName]);
            if (value) {
              output += ` ${propName}=${value}`;
            }
          } catch (e) {
            const message = `[Failed to get property: ${e}]`;
            output += ` ${propName}=${message}`;
          }
        }
      }
    }
    let childOutput = '';
    for (const child of data.children || []) {
      childOutput += dumpNode(child, indentation + 1);
    }
  
    if (childOutput) {
      output += '>\n' + childOutput + indent(indentation) + `</${data.name}>\n`;
    } else {
      output += ' />\n';
    }
  
    return output;
  }
  
  function isNormalProp(name: string): boolean {
    switch (name) {
      case 'children':
      case 'key':
      case 'ref':
        return false;
      default:
        return true;
    }
  }
  
  function convertObject(object: Object, depth: number) {
    if (depth >= MAX_DEPTH) {
      return '[...omitted]';
    }
    let output = '{';
    let first = true;
    for (const key of Object.getOwnPropertyNames(object)) {
      if (!first) {
        output += ', ';
      }
      output += `${key}: ${convertValue(object[key], depth + 1)}`;
      first = false;
    }
    return output + '}';
  }
  
  function convertValue(value, depth = 0): ?string {
    if (!value) {
      return null;
    }
  
    switch (typeof value) {
      case 'string':
        return JSON.stringify(possiblyEllipsis(value).replace('\n', '\\n'));
      case 'boolean':
      case 'number':
        return JSON.stringify(value);
      case 'function':
        return '[function]';
      case 'object':
        return convertObject(value, depth);
      default:
        return null;
    }
  }
  
  function possiblyEllipsis(value: string) {
    if (value.length > MAX_STRING_LENGTH) {
      return value.slice(0, MAX_STRING_LENGTH) + '...';
    } else {
      return value;
    }
  }
  
  function indent(size: number) {
    return ' '.repeat(size * INDENTATION_SIZE);
  }
  */

  module.exports = dumpReactTree;
},147,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;
      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);
      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},148,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var HeadlessJsTaskError = exports.default = /*#__PURE__*/function (_Error) {
    (0, _inherits2.default)(HeadlessJsTaskError, _Error);
    var _super = _createSuper(HeadlessJsTaskError);
    function HeadlessJsTaskError() {
      (0, _classCallCheck2.default)(this, HeadlessJsTaskError);
      return _super.apply(this, arguments);
    }
    return (0, _createClass2.default)(HeadlessJsTaskError);
  }( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
},149,[1,6,5,13,15,12,76]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('HeadlessJsTaskSupport');
},150,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = renderApplication;
  var _GlobalPerformanceLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _PerformanceLoggerContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _AppContainer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _DisplayMode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getCachedComponentWithDebugName = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var Renderer = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));
  _$$_REQUIRE(_dependencyMap[9]);
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  // require BackHandler so it sets the default handler that exits the app if no listeners respond

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showArchitectureIndicator, scopedPerformanceLogger, isLogBox, debugName, displayMode, useConcurrentRoot, useOffscreen) {
    (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var performanceLogger = scopedPerformanceLogger != null ? scopedPerformanceLogger : _GlobalPerformanceLogger.default;
    var renderable = /*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceLoggerContext.default.Provider, {
      value: performanceLogger,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppContainer.default, {
        rootTag: rootTag,
        fabric: fabric,
        showArchitectureIndicator: showArchitectureIndicator,
        WrapperComponent: WrapperComponent,
        initialProps: initialProps != null ? initialProps : Object.freeze({}),
        internal_excludeLogBox: isLogBox,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(RootComponent, Object.assign({}, initialProps, {
          rootTag: rootTag
        }))
      })
    });
    if (useOffscreen && displayMode != null) {
      // $FlowFixMe[incompatible-type]
      // $FlowFixMe[prop-missing]
      var Offscreen = React.unstable_Offscreen;
      renderable = /*#__PURE__*/(0, _jsxRuntime.jsx)(Offscreen, {
        mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
        children: renderable
      });
    }
    performanceLogger.startTimespan('renderApplication_React_render');
    performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
    performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
    performanceLogger.setExtra('usedReactProfiler', Renderer.isProfilingRenderer());
    Renderer.renderElement({
      element: renderable,
      rootTag: rootTag,
      useFabric: Boolean(fabric),
      useConcurrentRoot: Boolean(useConcurrentRoot)
    });
    performanceLogger.stopTimespan('renderApplication_React_render');
  }
},151,[1,106,152,155,233,234,52,24,153,235,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.usePerformanceLogger = usePerformanceLogger;
  var _GlobalPerformanceLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));
  var React = _react;
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * This is a React Context that provides a scoped instance of IPerformanceLogger.
   * We wrap every <AppContainer /> with a Provider for this context so the logger
   * should be available in every component.
   * See React docs about using Context: https://react.dev/docs/context.html
   */
  var PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);
  function usePerformanceLogger() {
    return (0, _react.useContext)(PerformanceLoggerContext);
  }
  var _default = exports.default = PerformanceLoggerContext;
},152,[1,106,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},153,[154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var l = Symbol.for("react.element"),
    n = Symbol.for("react.portal"),
    p = Symbol.for("react.fragment"),
    q = Symbol.for("react.strict_mode"),
    r = Symbol.for("react.profiler"),
    t = Symbol.for("react.provider"),
    u = Symbol.for("react.context"),
    v = Symbol.for("react.forward_ref"),
    w = Symbol.for("react.suspense"),
    x = Symbol.for("react.memo"),
    y = Symbol.for("react.lazy"),
    z = Symbol.iterator;
  function A(a) {
    if (null === a || "object" !== typeof a) return null;
    a = z && a[z] || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }
  var B = {
      isMounted: function isMounted() {
        return false;
      },
      enqueueForceUpdate: function enqueueForceUpdate() {},
      enqueueReplaceState: function enqueueReplaceState() {},
      enqueueSetState: function enqueueSetState() {}
    },
    C = Object.assign,
    D = {};
  function E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }
  E.prototype.isReactComponent = {};
  E.prototype.setState = function (a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a, b, "setState");
  };
  E.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };
  function F() {}
  F.prototype = E.prototype;
  function G(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }
  var H = G.prototype = new F();
  H.constructor = G;
  C(H, E.prototype);
  H.isPureReactComponent = true;
  var I = Array.isArray,
    J = Object.prototype.hasOwnProperty,
    K = {
      current: null
    },
    L = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
  function M(a, b, e) {
    var d,
      c = {},
      k = null,
      h = null;
    if (null != b) for (d in undefined !== b.ref && (h = b.ref), undefined !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
    var g = arguments.length - 2;
    if (1 === g) c.children = e;else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
      c.children = f;
    }
    if (a && a.defaultProps) for (d in g = a.defaultProps, g) undefined === c[d] && (c[d] = g[d]);
    return {
      $$typeof: l,
      type: a,
      key: k,
      ref: h,
      props: c,
      _owner: K.current
    };
  }
  function N(a, b) {
    return {
      $$typeof: l,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    };
  }
  function O(a) {
    return "object" === typeof a && null !== a && a.$$typeof === l;
  }
  function escape(a) {
    var b = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function (a) {
      return b[a];
    });
  }
  var P = /\/+/g;
  function Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
  }
  function R(a, b, e, d, c) {
    var k = typeof a;
    if ("undefined" === k || "boolean" === k) a = null;
    var h = false;
    if (null === a) h = true;else switch (k) {
      case "string":
      case "number":
        h = true;
        break;
      case "object":
        switch (a.$$typeof) {
          case l:
          case n:
            h = true;
        }
    }
    if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {
      return a;
    })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
    h = 0;
    d = "" === d ? "." : d + ":";
    if (I(a)) for (var g = 0; g < a.length; g++) {
      k = a[g];
      var f = d + Q(k, g);
      h += R(k, b, e, f, c);
    } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
    return h;
  }
  function S(a, b, e) {
    if (null == a) return a;
    var d = [],
      c = 0;
    R(a, d, "", "", function (a) {
      return b.call(e, a, c++);
    });
    return d;
  }
  function T(a) {
    if (-1 === a._status) {
      var b = a._result;
      b = b();
      b.then(function (b) {
        if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
      }, function (b) {
        if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
      });
      -1 === a._status && (a._status = 0, a._result = b);
    }
    if (1 === a._status) return a._result.default;
    throw a._result;
  }
  var U = {
      current: null
    },
    V = {
      transition: null
    },
    W = {
      ReactCurrentDispatcher: U,
      ReactCurrentBatchConfig: V,
      ReactCurrentOwner: K
    };
  exports.Children = {
    map: S,
    forEach: function forEach(a, b, e) {
      S(a, function () {
        b.apply(this, arguments);
      }, e);
    },
    count: function count(a) {
      var b = 0;
      S(a, function () {
        b++;
      });
      return b;
    },
    toArray: function toArray(a) {
      return S(a, function (a) {
        return a;
      }) || [];
    },
    only: function only(a) {
      if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    }
  };
  exports.Component = E;
  exports.Fragment = p;
  exports.Profiler = r;
  exports.PureComponent = G;
  exports.StrictMode = q;
  exports.Suspense = w;
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
  exports.cloneElement = function (a, b, e) {
    if (null === a || undefined === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
    var d = C({}, a.props),
      c = a.key,
      k = a.ref,
      h = a._owner;
    if (null != b) {
      undefined !== b.ref && (k = b.ref, h = K.current);
      undefined !== b.key && (c = "" + b.key);
      if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
      for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = undefined === b[f] && undefined !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      g = Array(f);
      for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
      d.children = g;
    }
    return {
      $$typeof: l,
      type: a.type,
      key: c,
      ref: k,
      props: d,
      _owner: h
    };
  };
  exports.createContext = function (a) {
    a = {
      $$typeof: u,
      _currentValue: a,
      _currentValue2: a,
      _threadCount: 0,
      Provider: null,
      Consumer: null,
      _defaultValue: null,
      _globalName: null
    };
    a.Provider = {
      $$typeof: t,
      _context: a
    };
    return a.Consumer = a;
  };
  exports.createElement = M;
  exports.createFactory = function (a) {
    var b = M.bind(null, a);
    b.type = a;
    return b;
  };
  exports.createRef = function () {
    return {
      current: null
    };
  };
  exports.forwardRef = function (a) {
    return {
      $$typeof: v,
      render: a
    };
  };
  exports.isValidElement = O;
  exports.lazy = function (a) {
    return {
      $$typeof: y,
      _payload: {
        _status: -1,
        _result: a
      },
      _init: T
    };
  };
  exports.memo = function (a, b) {
    return {
      $$typeof: x,
      type: a,
      compare: undefined === b ? null : b
    };
  };
  exports.startTransition = function (a) {
    var b = V.transition;
    V.transition = {};
    try {
      a();
    } finally {
      V.transition = b;
    }
  };
  exports.unstable_act = function () {
    throw Error("act(...) is not supported in production builds of React.");
  };
  exports.useCallback = function (a, b) {
    return U.current.useCallback(a, b);
  };
  exports.useContext = function (a) {
    return U.current.useContext(a);
  };
  exports.useDebugValue = function () {};
  exports.useDeferredValue = function (a) {
    return U.current.useDeferredValue(a);
  };
  exports.useEffect = function (a, b) {
    return U.current.useEffect(a, b);
  };
  exports.useId = function () {
    return U.current.useId();
  };
  exports.useImperativeHandle = function (a, b, e) {
    return U.current.useImperativeHandle(a, b, e);
  };
  exports.useInsertionEffect = function (a, b) {
    return U.current.useInsertionEffect(a, b);
  };
  exports.useLayoutEffect = function (a, b) {
    return U.current.useLayoutEffect(a, b);
  };
  exports.useMemo = function (a, b) {
    return U.current.useMemo(a, b);
  };
  exports.useReducer = function (a, b, e) {
    return U.current.useReducer(a, b, e);
  };
  exports.useRef = function (a) {
    return U.current.useRef(a);
  };
  exports.useState = function (a) {
    return U.current.useState(a);
  };
  exports.useSyncExternalStore = function (a, b, e) {
    return U.current.useSyncExternalStore(a, b, e);
  };
  exports.useTransition = function () {
    return U.current.useTransition();
  };
  exports.version = "18.2.0";
},154,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var AppContainer = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(AppContainer, _React$Component);
    var _super = _createSuper(AppContainer);
    function AppContainer() {
      var _this;
      (0, _classCallCheck2.default)(this, AppContainer);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        inspector: null,
        devtoolsOverlay: null,
        traceUpdateOverlay: null,
        mainKey: 1
      };
      _this._subscription = null;
      _this._reactDevToolsAgentListener = null;
      return _this;
    }
    (0, _createClass2.default)(AppContainer, [{
      key: "mountReactDevToolsOverlays",
      value: function mountReactDevToolsOverlays() {
        var DevtoolsOverlay = _$$_REQUIRE(_dependencyMap[11]).default;
        var devtoolsOverlay = /*#__PURE__*/(0, _jsxRuntime.jsx)(DevtoolsOverlay, {
          inspectedView: this._mainRef
        });
        var TraceUpdateOverlay = _$$_REQUIRE(_dependencyMap[12]).default;
        var traceUpdateOverlay = /*#__PURE__*/(0, _jsxRuntime.jsx)(TraceUpdateOverlay, {});
        this.setState({
          devtoolsOverlay: devtoolsOverlay,
          traceUpdateOverlay: traceUpdateOverlay
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription != null) {
          this._subscription.remove();
        }
        if (reactDevToolsHook != null && this._reactDevToolsAgentListener != null) {
          reactDevToolsHook.off('react-devtools', this._reactDevToolsAgentListener);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;
        var logBox = null;
        var innerView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
          collapsable: !this.state.inspector && !this.state.devtoolsOverlay,
          pointerEvents: "box-none",
          style: styles.appContainer,
          ref: function ref(_ref) {
            _this3._mainRef = _ref;
          },
          children: this.props.children
        }, this.state.mainKey);
        var Wrapper = this.props.WrapperComponent;
        if (Wrapper != null) {
          innerView = /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapper, {
            initialProps: this.props.initialProps,
            fabric: this.props.fabric === true,
            showArchitectureIndicator: this.props.showArchitectureIndicator === true,
            children: innerView
          });
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[13]).RootTagContext.Provider, {
          value: (0, _$$_REQUIRE(_dependencyMap[13]).createRootTag)(this.props.rootTag),
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
            style: styles.appContainer,
            pointerEvents: "box-none",
            children: [innerView, this.state.traceUpdateOverlay, this.state.devtoolsOverlay, this.state.inspector, logBox]
          })
        });
      }
    }]);
    return AppContainer;
  }(React.Component);
  AppContainer.getDerivedStateFromError = undefined;
  var styles = _StyleSheet.default.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},155,[1,5,6,13,15,12,156,4,196,153,194,197,204,232]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _TextAncestor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _ViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[7]);
  var _excluded = ["accessibilityElementsHidden", "accessibilityLabel", "accessibilityLabelledBy", "accessibilityLiveRegion", "accessibilityState", "accessibilityValue", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-hidden", "aria-label", "aria-labelledby", "aria-live", "aria-selected", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext", "focusable", "id", "importantForAccessibility", "nativeID", "pointerEvents", "tabIndex"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * The most fundamental component for building a UI, View is a container that
   * supports layout with flexbox, style, some touch handling, and accessibility
   * controls.
   *
   * @see https://reactnative.dev/docs/view
   */
  var View = React.forwardRef(function (_ref, forwardedRef) {
    var _ariaLabelledBy$split;
    var accessibilityElementsHidden = _ref.accessibilityElementsHidden,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityLabelledBy = _ref.accessibilityLabelledBy,
      accessibilityLiveRegion = _ref.accessibilityLiveRegion,
      accessibilityState = _ref.accessibilityState,
      accessibilityValue = _ref.accessibilityValue,
      ariaBusy = _ref['aria-busy'],
      ariaChecked = _ref['aria-checked'],
      ariaDisabled = _ref['aria-disabled'],
      ariaExpanded = _ref['aria-expanded'],
      ariaHidden = _ref['aria-hidden'],
      ariaLabel = _ref['aria-label'],
      ariaLabelledBy = _ref['aria-labelledby'],
      ariaLive = _ref['aria-live'],
      ariaSelected = _ref['aria-selected'],
      ariaValueMax = _ref['aria-valuemax'],
      ariaValueMin = _ref['aria-valuemin'],
      ariaValueNow = _ref['aria-valuenow'],
      ariaValueText = _ref['aria-valuetext'],
      focusable = _ref.focusable,
      id = _ref.id,
      importantForAccessibility = _ref.importantForAccessibility,
      nativeID = _ref.nativeID,
      pointerEvents = _ref.pointerEvents,
      tabIndex = _ref.tabIndex,
      otherProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var hasTextAncestor = React.useContext(_TextAncestor.default);
    var _accessibilityLabelledBy = (_ariaLabelledBy$split = ariaLabelledBy == null ? undefined : ariaLabelledBy.split(/\s*,\s*/g)) != null ? _ariaLabelledBy$split : accessibilityLabelledBy;
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      _accessibilityState = {
        busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? undefined : accessibilityState.busy,
        checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? undefined : accessibilityState.checked,
        disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? undefined : accessibilityState.disabled,
        expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? undefined : accessibilityState.expanded,
        selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? undefined : accessibilityState.selected
      };
    }
    var _accessibilityValue;
    if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
      _accessibilityValue = {
        max: ariaValueMax != null ? ariaValueMax : accessibilityValue == null ? undefined : accessibilityValue.max,
        min: ariaValueMin != null ? ariaValueMin : accessibilityValue == null ? undefined : accessibilityValue.min,
        now: ariaValueNow != null ? ariaValueNow : accessibilityValue == null ? undefined : accessibilityValue.now,
        text: ariaValueText != null ? ariaValueText : accessibilityValue == null ? undefined : accessibilityValue.text
      };
    }

    // $FlowFixMe[underconstrained-implicit-instantiation]
    var style = (0, _flattenStyle.default)(otherProps.style);

    // $FlowFixMe[sketchy-null-mixed]
    var newPointerEvents = (style == null ? undefined : style.pointerEvents) || pointerEvents;
    var collapsableOverride = _ReactNativeFeatureFlags.default.shouldForceUnflattenForElevation() ? {
      collapsable: style != null && style.elevation != null && style.elevation !== 0 ? false : otherProps.collapsable
    } : {};
    var actualView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ViewNativeComponent.default, Object.assign({}, otherProps, collapsableOverride, {
      accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : accessibilityLiveRegion,
      accessibilityLabel: ariaLabel != null ? ariaLabel : accessibilityLabel,
      focusable: tabIndex !== undefined ? !tabIndex : focusable,
      accessibilityState: _accessibilityState,
      accessibilityElementsHidden: ariaHidden != null ? ariaHidden : accessibilityElementsHidden,
      accessibilityLabelledBy: _accessibilityLabelledBy,
      accessibilityValue: _accessibilityValue,
      importantForAccessibility: ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
      nativeID: id != null ? id : nativeID,
      style: style
      // $FlowFixMe[incompatible-type]
      ,
      pointerEvents: newPointerEvents,
      ref: forwardedRef
    }));
    if (hasTextAncestor) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
        value: false,
        children: actualView
      });
    }
    return actualView;
  });
  View.displayName = 'View';
  module.exports = View;
},156,[1,119,108,157,158,159,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  // $FlowFixMe[unsupported-variance-annotation]
  function flattenStyle(style
  // $FlowFixMe[underconstrained-implicit-instantiation]
  ) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }
    if (!Array.isArray(style)) {
      return style;
    }
    var result = {};
    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      // $FlowFixMe[underconstrained-implicit-instantiation]
      var computedStyle = flattenStyle(style[i]);
      if (computedStyle) {
        // $FlowFixMe[invalid-in-rhs]
        for (var key in computedStyle) {
          // $FlowFixMe[incompatible-use]
          result[key] = computedStyle[key];
        }
      }
    }
    // $FlowFixMe[incompatible-return]
    return result;
  }
  module.exports = flattenStyle;
},157,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  /**
   * Whether the current element is the descendant of a <Text> element.
   */
  var TextAncestorContext = React.createContext(false);
  module.exports = TextAncestorContext;
},158,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTView',
    validAttributes: {
      // ReactClippingViewManager @ReactProps
      removeClippedSubviews: true,
      // ReactViewManager @ReactProps
      accessible: true,
      hasTVPreferredFocus: true,
      nextFocusDown: true,
      nextFocusForward: true,
      nextFocusLeft: true,
      nextFocusRight: true,
      nextFocusUp: true,
      borderRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderBottomRightRadius: true,
      borderBottomLeftRadius: true,
      borderTopStartRadius: true,
      borderTopEndRadius: true,
      borderBottomStartRadius: true,
      borderBottomEndRadius: true,
      borderEndEndRadius: true,
      borderEndStartRadius: true,
      borderStartEndRadius: true,
      borderStartStartRadius: true,
      borderStyle: true,
      hitSlop: true,
      pointerEvents: true,
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true,
      needsOffscreenAlphaCompositing: true,
      borderWidth: true,
      borderLeftWidth: true,
      borderRightWidth: true,
      borderTopWidth: true,
      borderBottomWidth: true,
      borderStartWidth: true,
      borderEndWidth: true,
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderLeftColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderRightColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderTopColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderBottomColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderStartColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderEndColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderBlockColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderBlockEndColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      borderBlockStartColor: {
        process: _$$_REQUIRE(_dependencyMap[5]).default
      },
      focusable: true,
      overflow: true,
      backfaceVisibility: true,
      experimental_layoutConformance: true
    }
  } : {
    uiViewClassName: 'RCTView'
  };
  var ViewNativeComponent = NativeComponentRegistry.get('RCTView', function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['hotspotUpdate', 'setPressed']
  });
  var _default = exports.default = ViewNativeComponent;
},159,[1,160,193,21,153,164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getWithFallback_DEPRECATED = getWithFallback_DEPRECATED;
  exports.setRuntimeConfigProvider = setRuntimeConfigProvider;
  exports.unstable_hasStaticViewConfig = unstable_hasStaticViewConfig;
  var _getNativeComponentAttributes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _ReactNativeViewConfigRegistry = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _verifyComponentAttributeEquivalence = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var StaticViewConfigValidator = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var getRuntimeConfig;

  /**
   * Configures a function that is called to determine whether a given component
   * should be registered using reflection of the native component at runtime.
   *
   * The provider should return null if the native component is unavailable in
   * the current environment.
   */
  function setRuntimeConfigProvider(runtimeConfigProvider) {
    if (getRuntimeConfig === undefined) {
      getRuntimeConfig = runtimeConfigProvider;
    }
  }

  /**
   * Gets a `NativeComponent` that can be rendered by React Native.
   *
   * The supplied `viewConfigProvider` may or may not be invoked and utilized,
   * depending on how `setRuntimeConfigProvider` is configured.
   */
  function get(name, viewConfigProvider) {
    _ReactNativeViewConfigRegistry.default.register(name, function () {
      var _getRuntimeConfig;
      var _ref = (_getRuntimeConfig = getRuntimeConfig == null ? undefined : getRuntimeConfig(name)) != null ? _getRuntimeConfig : {
          native: !global.RN$Bridgeless,
          strict: false,
          verify: false
        },
        native = _ref.native,
        strict = _ref.strict,
        verify = _ref.verify;
      var viewConfig;
      if (native) {
        viewConfig = (0, _getNativeComponentAttributes.default)(name);
      } else {
        viewConfig = (0, _$$_REQUIRE(_dependencyMap[8]).createViewConfig)(viewConfigProvider());
        if (viewConfig == null) {
          viewConfig = (0, _getNativeComponentAttributes.default)(name);
        }
      }
      if (verify) {
        var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);
        var staticViewConfig = native ? (0, _$$_REQUIRE(_dependencyMap[8]).createViewConfig)(viewConfigProvider()) : viewConfig;
        if (strict) {
          var validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);
          if (validationOutput.type === 'invalid') {
            console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));
          }
        } else {
          (0, _verifyComponentAttributeEquivalence.default)(nativeViewConfig, staticViewConfig);
        }
      }
      return viewConfig;
    });

    // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!
    return name;
  }

  /**
   * Same as `NativeComponentRegistry.get(...)`, except this will check either
   * the `setRuntimeConfigProvider` configuration or use native reflection (slow)
   * to determine whether this native component is available.
   *
   * If the native component is not available, a stub component is returned. Note
   * that the return value of this is not `HostComponent` because the returned
   * component instance is not guaranteed to have native methods.
   */
  function getWithFallback_DEPRECATED(name, viewConfigProvider) {
    if (getRuntimeConfig == null) {
      // `getRuntimeConfig == null` when static view configs are disabled
      // If `setRuntimeConfigProvider` is not configured, use native reflection.
      if (hasNativeViewConfig(name)) {
        return get(name, viewConfigProvider);
      }
    } else {
      // If there is no runtime config, then the native component is unavailable.
      if (getRuntimeConfig(name) != null) {
        return get(name, viewConfigProvider);
      }
    }
    var FallbackNativeComponent = function FallbackNativeComponent(props) {
      return null;
    };
    FallbackNativeComponent.displayName = `Fallback(${name})`;
    return FallbackNativeComponent;
  }
  function hasNativeViewConfig(name) {
    (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');
    return _UIManager.default.getViewManagerConfig(name) != null;
  }

  /**
   * Unstable API. Do not use!
   *
   * This method returns if there is a StaticViewConfig registered for the
   * component name received as a parameter.
   */
  function unstable_hasStaticViewConfig(name) {
    var _getRuntimeConfig2;
    var _ref2 = (_getRuntimeConfig2 = getRuntimeConfig == null ? undefined : getRuntimeConfig(name)) != null ? _getRuntimeConfig2 : {
        native: true
      },
      native = _ref2.native;
    return !native;
  }
},160,[1,161,42,186,187,191,24,153,192]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  function getNativeComponentAttributes(uiViewClassName) {
    var _bubblingEventTypes, _directEventTypes;
    var viewConfig = _$$_REQUIRE(_dependencyMap[0]).getViewManagerConfig(uiViewClassName);
    _$$_REQUIRE(_dependencyMap[1])(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: "%s" was not found in the UIManager.', uiViewClassName);

    // TODO: This seems like a whole lot of runtime initialization for every
    // native component that can be either avoided or simplified.
    var baseModuleName = viewConfig.baseModuleName,
      bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;
    bubblingEventTypes = (_bubblingEventTypes = bubblingEventTypes) != null ? _bubblingEventTypes : {};
    directEventTypes = (_directEventTypes = directEventTypes) != null ? _directEventTypes : {};
    while (baseModuleName) {
      var baseModule = _$$_REQUIRE(_dependencyMap[0]).getViewManagerConfig(baseModuleName);
      if (!baseModule) {
        baseModuleName = null;
      } else {
        bubblingEventTypes = Object.assign({}, baseModule.bubblingEventTypes, bubblingEventTypes);
        directEventTypes = Object.assign({}, baseModule.directEventTypes, directEventTypes);
        nativeProps = Object.assign({}, baseModule.NativeProps, nativeProps);
        baseModuleName = baseModule.baseModuleName;
      }
    }
    var validAttributes = {};
    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);

      // If diff or process == null, omit the corresponding property from the Attribute
      // Why:
      //  1. Consistency with AttributeType flow type
      //  2. Consistency with Static View Configs, which omit the null properties
      validAttributes[key] = diff == null ? process == null ? true : {
        process: process
      } : process == null ? {
        diff: diff
      } : {
        diff: diff,
        process: process
      };
    }

    // Unfortunately, the current setup declares style properties as top-level
    // props. This makes it so we allow style properties in the `style` prop.
    // TODO: Move style properties into a `style` prop and disallow them as
    // top-level props on the native side.
    validAttributes.style = _$$_REQUIRE(_dependencyMap[2]);
    Object.assign(viewConfig, {
      uiViewClassName: uiViewClassName,
      validAttributes: validAttributes,
      bubblingEventTypes: bubblingEventTypes,
      directEventTypes: directEventTypes
    });
    attachDefaultEventTypes(viewConfig);
    return viewConfig;
  }
  function attachDefaultEventTypes(viewConfig) {
    // This is supported on UIManager platforms (ex: Android),
    // as lazy view managers are not implemented for all platforms.
    // See [UIManager] for details on constants and implementations.
    var constants = _$$_REQUIRE(_dependencyMap[0]).getConstants();
    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
      // Lazy view managers enabled.
      viewConfig = merge(viewConfig, _$$_REQUIRE(_dependencyMap[0]).getDefaultEventTypes());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
  }

  // TODO: Figure out how to avoid all this runtime initialization cost.
  function merge(destination, source) {
    if (!source) {
      return destination;
    }
    if (!destination) {
      return source;
    }
    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }
      var sourceValue = source[key];
      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];
        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }
      destination[key] = sourceValue;
    }
    return destination;
  }
  function getDifferForType(typeName) {
    switch (typeName) {
      // iOS Types
      case 'CATransform3D':
        return _$$_REQUIRE(_dependencyMap[3]);
      case 'CGPoint':
        return _$$_REQUIRE(_dependencyMap[4]);
      case 'CGSize':
        return _$$_REQUIRE(_dependencyMap[5]);
      case 'UIEdgeInsets':
        return _$$_REQUIRE(_dependencyMap[6]);
      // Android Types
      case 'Point':
        return _$$_REQUIRE(_dependencyMap[4]);
      case 'EdgeInsets':
        return _$$_REQUIRE(_dependencyMap[6]);
    }
    return null;
  }
  function getProcessorForType(typeName) {
    switch (typeName) {
      // iOS Types
      case 'CGColor':
      case 'UIColor':
        return _$$_REQUIRE(_dependencyMap[7]).default;
      case 'CGColorArray':
      case 'UIColorArray':
        return _$$_REQUIRE(_dependencyMap[8]);
      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return _$$_REQUIRE(_dependencyMap[9]);
      // Android Types
      case 'Color':
        return _$$_REQUIRE(_dependencyMap[7]).default;
      case 'ColorArray':
        return _$$_REQUIRE(_dependencyMap[8]);
      case 'ImageSource':
        return _$$_REQUIRE(_dependencyMap[9]);
    }
    return null;
  }
  module.exports = getNativeComponentAttributes;
},161,[42,24,162,173,174,172,175,164,176,177]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _processAspectRatio = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _processFontVariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _processTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _processTransformOrigin = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _sizesDiffer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format strict-local
   * 
   */

  var colorAttributes = {
    process: _processColor.default
  };
  var ReactNativeStyleAttributes = {
    /**
     * Layout
     */
    alignContent: true,
    alignItems: true,
    alignSelf: true,
    aspectRatio: {
      process: _processAspectRatio.default
    },
    borderBottomWidth: true,
    borderEndWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    borderStartWidth: true,
    borderTopWidth: true,
    columnGap: true,
    borderWidth: true,
    bottom: true,
    direction: true,
    display: true,
    end: true,
    flex: true,
    flexBasis: true,
    flexDirection: true,
    flexGrow: true,
    flexShrink: true,
    flexWrap: true,
    gap: true,
    height: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    justifyContent: true,
    left: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    overflow: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    position: true,
    right: true,
    rowGap: true,
    start: true,
    top: true,
    width: true,
    zIndex: true,
    /**
     * Shadow
     */
    elevation: true,
    shadowColor: colorAttributes,
    shadowOffset: {
      diff: _sizesDiffer.default
    },
    shadowOpacity: true,
    shadowRadius: true,
    /**
     * Transform
     */
    transform: {
      process: _processTransform.default
    },
    transformOrigin: {
      process: _processTransformOrigin.default
    },
    /**
     * View
     */
    backfaceVisibility: true,
    backgroundColor: colorAttributes,
    borderBlockColor: colorAttributes,
    borderBlockEndColor: colorAttributes,
    borderBlockStartColor: colorAttributes,
    borderBottomColor: colorAttributes,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderColor: colorAttributes,
    borderCurve: true,
    borderEndColor: colorAttributes,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderLeftColor: colorAttributes,
    borderRadius: true,
    borderRightColor: colorAttributes,
    borderStartColor: colorAttributes,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    borderStyle: true,
    borderTopColor: colorAttributes,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    opacity: true,
    pointerEvents: true,
    /**
     * Text
     */
    color: colorAttributes,
    fontFamily: true,
    fontSize: true,
    fontStyle: true,
    fontVariant: {
      process: _processFontVariant.default
    },
    fontWeight: true,
    includeFontPadding: true,
    letterSpacing: true,
    lineHeight: true,
    textAlign: true,
    textAlignVertical: true,
    textDecorationColor: colorAttributes,
    textDecorationLine: true,
    textDecorationStyle: true,
    textShadowColor: colorAttributes,
    textShadowOffset: true,
    textShadowRadius: true,
    textTransform: true,
    userSelect: true,
    verticalAlign: true,
    writingDirection: true,
    /**
     * Image
     */
    overlayColor: colorAttributes,
    resizeMode: true,
    tintColor: colorAttributes,
    objectFit: true
  };
  module.exports = ReactNativeStyleAttributes;
},162,[1,163,164,168,169,171,172]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function processAspectRatio(aspectRatio) {
    if (typeof aspectRatio === 'number') {
      return aspectRatio;
    }
    if (typeof aspectRatio !== 'string') {
      return;
    }
    var matches = aspectRatio.split('/').map(function (s) {
      return s.trim();
    });
    if (matches.includes('auto')) {
      return;
    }
    var hasNonNumericValues = matches.some(function (n) {
      return Number.isNaN(Number(n));
    });
    if (hasNonNumericValues) {
      return;
    }
    if (matches.length === 2) {
      return Number(matches[0]) / Number(matches[1]);
    }
    return Number(matches[0]);
  }
  module.exports = processAspectRatio;
},163,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /* eslint no-bitwise: 0 */
  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }
    var normalizedColor = _$$_REQUIRE(_dependencyMap[0])(color);
    if (normalizedColor === null || normalizedColor === undefined) {
      return undefined;
    }
    if (typeof normalizedColor === 'object') {
      var processColorObject = _$$_REQUIRE(_dependencyMap[1]).processColorObject;
      var processedColorObj = processColorObject(normalizedColor);
      if (processedColorObj != null) {
        return processedColorObj;
      }
    }
    if (typeof normalizedColor !== 'number') {
      return null;
    }

    // Converts 0xrrggbbaa into 0xaarrggbb
    normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
    {
      // Android use 32 bit *signed* integer to represent the color
      // We utilize the fact that bitwise operations in JS also operates on
      // signed 32 bit integers, so that we can use those to convert from
      // *unsigned* to *signed* 32bit int that way.
      normalizedColor = normalizedColor | 0x0;
    }
    return normalizedColor;
  }
  var _default = exports.default = processColor;
},164,[165,167]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _normalizeColors = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /* eslint no-bitwise: 0 */

  function normalizeColor(color) {
    if (typeof color === 'object' && color != null) {
      var _require = _$$_REQUIRE(_dependencyMap[2]),
        normalizeColorObject = _require.normalizeColorObject;
      var normalizedColor = normalizeColorObject(color);
      if (normalizedColor != null) {
        return normalizedColor;
      }
    }
    if (typeof color === 'string' || typeof color === 'number') {
      return (0, _normalizeColors.default)(color);
    }
  }
  module.exports = normalizeColor;
},165,[1,166,167]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /* eslint no-bitwise: 0 */

  'use strict';

  function normalizeColor(color) {
    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }
      return null;
    }
    if (typeof color !== 'string') {
      return null;
    }
    var matchers = getMatchers();
    var match;

    // Ordered based on occurrences on Facebook codebase
    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }
    var colorFromKeyword = normalizeKeyword(color);
    if (colorFromKeyword != null) {
      return colorFromKeyword;
    }
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 |
      // r
      parse255(match[2]) << 16 |
      // g
      parse255(match[3]) << 8 |
      // b
      0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.rgba.exec(color)) {
      // rgba(R G B / A) notation
      if (match[6] !== undefined) {
        return (parse255(match[6]) << 24 |
        // r
        parse255(match[7]) << 16 |
        // g
        parse255(match[8]) << 8 |
        // b
        parse1(match[9])) >>>
        // a
        0;
      }

      // rgba(R, G, B, A) notation
      return (parse255(match[2]) << 24 |
      // r
      parse255(match[3]) << 16 |
      // g
      parse255(match[4]) << 8 |
      // b
      parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      'ff',
      // a
      16) >>> 0;
    }

    // https://drafts.csswg.org/css-color-4/#hex-notation
    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }
    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      match[4] + match[4],
      // a
      16) >>> 0;
    }
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3]) // l
      ) | 0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.hsla.exec(color)) {
      // hsla(H S L / A) notation
      if (match[6] !== undefined) {
        return (hslToRgb(parse360(match[6]),
        // h
        parsePercentage(match[7]),
        // s
        parsePercentage(match[8]) // l
        ) | parse1(match[9])) >>>
        // a
        0;
      }

      // hsla(H, S, L, A) notation
      return (hslToRgb(parse360(match[2]),
      // h
      parsePercentage(match[3]),
      // s
      parsePercentage(match[4]) // l
      ) | parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hwb.exec(color)) {
      return (hwbToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // w
      parsePercentage(match[3]) // b
      ) | 0x000000ff) >>>
      // a
      0;
    }
    return null;
  }
  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }
    if (t < 0.5) {
      return q;
    }
    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }
  function hwbToRgb(h, w, b) {
    if (w + b >= 1) {
      var gray = Math.round(w * 255 / (w + b));
      return gray << 24 | gray << 16 | gray << 8;
    }
    var red = hue2rgb(0, 1, h + 0.3333333333333333) * (1 - w - b) + w;
    var green = hue2rgb(0, 1, h) * (1 - w - b) + w;
    var blue = hue2rgb(0, 1, h - 0.3333333333333333) * (1 - w - b) + w;
    return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;
  }
  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";
  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return '\\(\\s*(' + args.join(')\\s*,?\\s*(') + ')\\s*\\)';
  }
  function callWithSlashSeparator() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return '\\(\\s*(' + args.slice(0, args.length - 1).join(')\\s*,?\\s*(') + ')\\s*/\\s*(' + args[args.length - 1] + ')\\s*\\)';
  }
  function commaSeparatedCall() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }
  var cachedMatchers;
  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba(' + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + '|' + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ')'),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla(' + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + '|' + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ')'),
        hwb: new RegExp('hwb' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }
    return cachedMatchers;
  }
  function parse255(str) {
    var int = parseInt(str, 10);
    if (int < 0) {
      return 0;
    }
    if (int > 255) {
      return 255;
    }
    return int;
  }
  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }
  function parse1(str) {
    var num = parseFloat(str);
    if (num < 0) {
      return 0;
    }
    if (num > 1) {
      return 255;
    }
    return Math.round(num * 255);
  }
  function parsePercentage(str) {
    // parseFloat conveniently ignores the final %
    var int = parseFloat(str);
    if (int < 0) {
      return 0;
    }
    if (int > 100) {
      return 1;
    }
    return int / 100;
  }
  function normalizeKeyword(name) {
    // prettier-ignore
    switch (name) {
      case 'transparent':
        return 0x00000000;
      // http://www.w3.org/TR/css3-color/#svg-color
      case 'aliceblue':
        return 0xf0f8ffff;
      case 'antiquewhite':
        return 0xfaebd7ff;
      case 'aqua':
        return 0x00ffffff;
      case 'aquamarine':
        return 0x7fffd4ff;
      case 'azure':
        return 0xf0ffffff;
      case 'beige':
        return 0xf5f5dcff;
      case 'bisque':
        return 0xffe4c4ff;
      case 'black':
        return 0x000000ff;
      case 'blanchedalmond':
        return 0xffebcdff;
      case 'blue':
        return 0x0000ffff;
      case 'blueviolet':
        return 0x8a2be2ff;
      case 'brown':
        return 0xa52a2aff;
      case 'burlywood':
        return 0xdeb887ff;
      case 'burntsienna':
        return 0xea7e5dff;
      case 'cadetblue':
        return 0x5f9ea0ff;
      case 'chartreuse':
        return 0x7fff00ff;
      case 'chocolate':
        return 0xd2691eff;
      case 'coral':
        return 0xff7f50ff;
      case 'cornflowerblue':
        return 0x6495edff;
      case 'cornsilk':
        return 0xfff8dcff;
      case 'crimson':
        return 0xdc143cff;
      case 'cyan':
        return 0x00ffffff;
      case 'darkblue':
        return 0x00008bff;
      case 'darkcyan':
        return 0x008b8bff;
      case 'darkgoldenrod':
        return 0xb8860bff;
      case 'darkgray':
        return 0xa9a9a9ff;
      case 'darkgreen':
        return 0x006400ff;
      case 'darkgrey':
        return 0xa9a9a9ff;
      case 'darkkhaki':
        return 0xbdb76bff;
      case 'darkmagenta':
        return 0x8b008bff;
      case 'darkolivegreen':
        return 0x556b2fff;
      case 'darkorange':
        return 0xff8c00ff;
      case 'darkorchid':
        return 0x9932ccff;
      case 'darkred':
        return 0x8b0000ff;
      case 'darksalmon':
        return 0xe9967aff;
      case 'darkseagreen':
        return 0x8fbc8fff;
      case 'darkslateblue':
        return 0x483d8bff;
      case 'darkslategray':
        return 0x2f4f4fff;
      case 'darkslategrey':
        return 0x2f4f4fff;
      case 'darkturquoise':
        return 0x00ced1ff;
      case 'darkviolet':
        return 0x9400d3ff;
      case 'deeppink':
        return 0xff1493ff;
      case 'deepskyblue':
        return 0x00bfffff;
      case 'dimgray':
        return 0x696969ff;
      case 'dimgrey':
        return 0x696969ff;
      case 'dodgerblue':
        return 0x1e90ffff;
      case 'firebrick':
        return 0xb22222ff;
      case 'floralwhite':
        return 0xfffaf0ff;
      case 'forestgreen':
        return 0x228b22ff;
      case 'fuchsia':
        return 0xff00ffff;
      case 'gainsboro':
        return 0xdcdcdcff;
      case 'ghostwhite':
        return 0xf8f8ffff;
      case 'gold':
        return 0xffd700ff;
      case 'goldenrod':
        return 0xdaa520ff;
      case 'gray':
        return 0x808080ff;
      case 'green':
        return 0x008000ff;
      case 'greenyellow':
        return 0xadff2fff;
      case 'grey':
        return 0x808080ff;
      case 'honeydew':
        return 0xf0fff0ff;
      case 'hotpink':
        return 0xff69b4ff;
      case 'indianred':
        return 0xcd5c5cff;
      case 'indigo':
        return 0x4b0082ff;
      case 'ivory':
        return 0xfffff0ff;
      case 'khaki':
        return 0xf0e68cff;
      case 'lavender':
        return 0xe6e6faff;
      case 'lavenderblush':
        return 0xfff0f5ff;
      case 'lawngreen':
        return 0x7cfc00ff;
      case 'lemonchiffon':
        return 0xfffacdff;
      case 'lightblue':
        return 0xadd8e6ff;
      case 'lightcoral':
        return 0xf08080ff;
      case 'lightcyan':
        return 0xe0ffffff;
      case 'lightgoldenrodyellow':
        return 0xfafad2ff;
      case 'lightgray':
        return 0xd3d3d3ff;
      case 'lightgreen':
        return 0x90ee90ff;
      case 'lightgrey':
        return 0xd3d3d3ff;
      case 'lightpink':
        return 0xffb6c1ff;
      case 'lightsalmon':
        return 0xffa07aff;
      case 'lightseagreen':
        return 0x20b2aaff;
      case 'lightskyblue':
        return 0x87cefaff;
      case 'lightslategray':
        return 0x778899ff;
      case 'lightslategrey':
        return 0x778899ff;
      case 'lightsteelblue':
        return 0xb0c4deff;
      case 'lightyellow':
        return 0xffffe0ff;
      case 'lime':
        return 0x00ff00ff;
      case 'limegreen':
        return 0x32cd32ff;
      case 'linen':
        return 0xfaf0e6ff;
      case 'magenta':
        return 0xff00ffff;
      case 'maroon':
        return 0x800000ff;
      case 'mediumaquamarine':
        return 0x66cdaaff;
      case 'mediumblue':
        return 0x0000cdff;
      case 'mediumorchid':
        return 0xba55d3ff;
      case 'mediumpurple':
        return 0x9370dbff;
      case 'mediumseagreen':
        return 0x3cb371ff;
      case 'mediumslateblue':
        return 0x7b68eeff;
      case 'mediumspringgreen':
        return 0x00fa9aff;
      case 'mediumturquoise':
        return 0x48d1ccff;
      case 'mediumvioletred':
        return 0xc71585ff;
      case 'midnightblue':
        return 0x191970ff;
      case 'mintcream':
        return 0xf5fffaff;
      case 'mistyrose':
        return 0xffe4e1ff;
      case 'moccasin':
        return 0xffe4b5ff;
      case 'navajowhite':
        return 0xffdeadff;
      case 'navy':
        return 0x000080ff;
      case 'oldlace':
        return 0xfdf5e6ff;
      case 'olive':
        return 0x808000ff;
      case 'olivedrab':
        return 0x6b8e23ff;
      case 'orange':
        return 0xffa500ff;
      case 'orangered':
        return 0xff4500ff;
      case 'orchid':
        return 0xda70d6ff;
      case 'palegoldenrod':
        return 0xeee8aaff;
      case 'palegreen':
        return 0x98fb98ff;
      case 'paleturquoise':
        return 0xafeeeeff;
      case 'palevioletred':
        return 0xdb7093ff;
      case 'papayawhip':
        return 0xffefd5ff;
      case 'peachpuff':
        return 0xffdab9ff;
      case 'peru':
        return 0xcd853fff;
      case 'pink':
        return 0xffc0cbff;
      case 'plum':
        return 0xdda0ddff;
      case 'powderblue':
        return 0xb0e0e6ff;
      case 'purple':
        return 0x800080ff;
      case 'rebeccapurple':
        return 0x663399ff;
      case 'red':
        return 0xff0000ff;
      case 'rosybrown':
        return 0xbc8f8fff;
      case 'royalblue':
        return 0x4169e1ff;
      case 'saddlebrown':
        return 0x8b4513ff;
      case 'salmon':
        return 0xfa8072ff;
      case 'sandybrown':
        return 0xf4a460ff;
      case 'seagreen':
        return 0x2e8b57ff;
      case 'seashell':
        return 0xfff5eeff;
      case 'sienna':
        return 0xa0522dff;
      case 'silver':
        return 0xc0c0c0ff;
      case 'skyblue':
        return 0x87ceebff;
      case 'slateblue':
        return 0x6a5acdff;
      case 'slategray':
        return 0x708090ff;
      case 'slategrey':
        return 0x708090ff;
      case 'snow':
        return 0xfffafaff;
      case 'springgreen':
        return 0x00ff7fff;
      case 'steelblue':
        return 0x4682b4ff;
      case 'tan':
        return 0xd2b48cff;
      case 'teal':
        return 0x008080ff;
      case 'thistle':
        return 0xd8bfd8ff;
      case 'tomato':
        return 0xff6347ff;
      case 'turquoise':
        return 0x40e0d0ff;
      case 'violet':
        return 0xee82eeff;
      case 'wheat':
        return 0xf5deb3ff;
      case 'white':
        return 0xffffffff;
      case 'whitesmoke':
        return 0xf5f5f5ff;
      case 'yellow':
        return 0xffff00ff;
      case 'yellowgreen':
        return 0x9acd32ff;
    }
    return null;
  }
  module.exports = normalizeColor;
},166,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.processColorObject = exports.normalizeColorObject = exports.PlatformColor = undefined;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /** The actual type of the opaque NativeColorValue on Android platform */

  var PlatformColor = exports.PlatformColor = function PlatformColor() {
    for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
      names[_key] = arguments[_key];
    }
    /* $FlowExpectedError[incompatible-return]
     * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */
    return {
      resource_paths: names
    };
  };
  var normalizeColorObject = exports.normalizeColorObject = function normalizeColorObject(color) {
    /* $FlowExpectedError[incompatible-cast]
     * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */
    if ('resource_paths' in color) {
      return color;
    }
    return null;
  };
  var processColorObject = exports.processColorObject = function processColorObject(color) {
    return color;
  };
},167,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function processFontVariant(fontVariant) {
    if (Array.isArray(fontVariant)) {
      return fontVariant;
    }

    // $FlowFixMe[incompatible-type]
    var match = fontVariant.split(' ').filter(Boolean);
    return match;
  }
  module.exports = processFontVariant;
},168,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _defineProperty = _$$_REQUIRE(_dependencyMap[0]);
  /**
   * Generate a transform matrix based on the provided transforms, and use that
   * within the style object instead.
   *
   * This allows us to provide an API that is similar to CSS, where transforms may
   * be applied in an arbitrary order, and yet have a universal, singular
   * interface to native code.
   */
  function processTransform(transform) {
    if (typeof transform === 'string') {
      var regex = new RegExp(/(\w+)\(([^)]+)\)/g);
      var transformArray = [];
      var matches;
      while (matches = regex.exec(transform)) {
        var _getKeyAndValueFromCS = _getKeyAndValueFromCSSTransform(matches[1], matches[2]),
          _key = _getKeyAndValueFromCS.key,
          value = _getKeyAndValueFromCS.value;
        if (value !== undefined) {
          transformArray.push(_defineProperty({}, _key, value));
        }
      }
      transform = transformArray;
    }
    return transform;
  }
  var _getKeyAndValueFromCSSTransform = function _getKeyAndValueFromCSSTransform(key, args) {
    var _args$match;
    var argsWithUnitsRegex = new RegExp(/([+-]?\d+(\.\d+)?)([a-zA-Z]+)?/g);
    switch (key) {
      case 'matrix':
        return {
          key: key,
          value: (_args$match = args.match(/[+-]?\d+(\.\d+)?/g)) == null ? undefined : _args$match.map(Number)
        };
      case 'translate':
      case 'translate3d':
        var parsedArgs = [];
        var missingUnitOfMeasurement = false;
        var matches;
        while (matches = argsWithUnitsRegex.exec(args)) {
          var _value = Number(matches[1]);
          var _unitOfMeasurement = matches[3];
          if (_value !== 0 && !_unitOfMeasurement) {
            missingUnitOfMeasurement = true;
          }
          parsedArgs.push(_value);
        }
        if (parsedArgs.length === 1) {
          parsedArgs.push(0);
        }
        return {
          key: 'translate',
          value: parsedArgs
        };
      case 'translateX':
      case 'translateY':
      case 'perspective':
        var argMatches = argsWithUnitsRegex.exec(args);
        if (!(argMatches != null && argMatches.length)) {
          return {
            key: key,
            value: undefined
          };
        }
        var value = Number(argMatches[1]);
        var unitOfMeasurement = argMatches[3];
        return {
          key: key,
          value: value
        };
      default:
        return {
          key: key,
          value: !isNaN(args) ? Number(args) : args
        };
    }
  };
  module.exports = processTransform;
},169,[170]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperty(obj, key, value) {
    key = _$$_REQUIRE(_dependencyMap[0])(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
},170,[7]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = processTransformOrigin;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var INDEX_X = 0;
  var INDEX_Y = 1;
  var INDEX_Z = 2;

  /* eslint-disable no-labels */
  function processTransformOrigin(transformOrigin) {
    if (typeof transformOrigin === 'string') {
      var transformOriginString = transformOrigin;
      var regex = /(top|bottom|left|right|center|\d+(?:%|px)|0)/gi;
      var transformOriginArray = ['50%', '50%', 0];
      var index = INDEX_X;
      var matches;
      outer: while (matches = regex.exec(transformOriginString)) {
        var nextIndex = index + 1;
        var value = matches[0];
        var valueLower = value.toLowerCase();
        switch (valueLower) {
          case 'left':
          case 'right':
            {
              (0, _invariant.default)(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);
              transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';
              break;
            }
          case 'top':
          case 'bottom':
            {
              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);
              transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';

              // Handle [[ center | left | right ] && [ center | top | bottom ]] <length>?
              if (index === INDEX_X) {
                var horizontal = regex.exec(transformOriginString);
                if (horizontal == null) {
                  break outer;
                }
                switch (horizontal[0].toLowerCase()) {
                  case 'left':
                    transformOriginArray[INDEX_X] = 0;
                    break;
                  case 'right':
                    transformOriginArray[INDEX_X] = '100%';
                    break;
                  case 'center':
                    transformOriginArray[INDEX_X] = '50%';
                    break;
                  default:
                    (0, _invariant.default)(false, 'Could not parse transform-origin: %s', transformOriginString);
                }
                nextIndex = INDEX_Z;
              }
              break;
            }
          case 'center':
            {
              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);
              transformOriginArray[index] = '50%';
              break;
            }
          default:
            {
              if (value.endsWith('%')) {
                transformOriginArray[index] = value;
              } else {
                transformOriginArray[index] = parseFloat(value); // Remove `px`
              }
              break;
            }
        }
        index = nextIndex;
      }
      transformOrigin = transformOriginArray;
    }
    return transformOrigin;
  }
},171,[1,26,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };
  var sizesDiffer = function sizesDiffer(one, two) {
    var defaultedOne = one || dummySize;
    var defaultedTwo = two || dummySize;
    return defaultedOne !== defaultedTwo && (defaultedOne.width !== defaultedTwo.width || defaultedOne.height !== defaultedTwo.height);
  };
  module.exports = sizesDiffer;
},172,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * Unrolls an array comparison specially for matrices. Prioritizes
   * checking of indices that are most likely to change so that the comparison
   * bails as early as possible.
   *
   * @param {MatrixMath.Matrix} one First matrix.
   * @param {MatrixMath.Matrix} two Second matrix.
   * @return {boolean} Whether or not the two matrices differ.
   */
  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }
    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[0] !== two[0] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };
  module.exports = matricesDiffer;
},173,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };
  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };
  module.exports = pointsDiffer;
},174,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };
  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };
  module.exports = insetsDiffer;
},175,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var TRANSPARENT = 0; // rgba(0, 0, 0, 0)

  function processColorArray(colors) {
    return colors == null ? null : colors.map(processColorElement);
  }
  function processColorElement(color) {
    var value = (0, _processColor.default)(color);
    // For invalid colors, fallback to transparent.
    if (value == null) {
      console.error('Invalid value in color array:', color);
      return TRANSPARENT;
    }
    return value;
  }
  module.exports = processColorArray;
},176,[1,164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  // Resolves an asset into a `source` for `Image`.

  'use strict';

  var _customSourceTransformer, _serverURL, _scriptURL;
  var _sourceCodeScriptURL;
  function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL) {
      return _sourceCodeScriptURL;
    }
    var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;
    if (!sourceCode) {
      sourceCode = _$$_REQUIRE(_dependencyMap[0]).default;
    }
    _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;
    return _sourceCodeScriptURL;
  }
  function getDevServerURL() {
    if (_serverURL === undefined) {
      var sourceCodeScriptURL = getSourceCodeScriptURL();
      var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
      if (match) {
        // jsBundle was loaded from network
        _serverURL = match[0];
      } else {
        // jsBundle was loaded from file
        _serverURL = null;
      }
    }
    return _serverURL;
  }
  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        // android: running from within assets, no offline path to use
        return null;
      }
      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
      if (!scriptURL.includes('://')) {
        // Add file protocol in case we have an absolute file path and not a URL.
        // This shouldn't really be necessary. scriptURL should be a URL.
        scriptURL = 'file://' + scriptURL;
      }
    }
    return scriptURL;
  }
  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }
    return _scriptURL;
  }
  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  /**
   * `source` is either a number (opaque type returned by require('./foo.png'))
   * or an `ImageSource` like { uri: '<http location || file path>' }
   */
  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }
    var asset = _$$_REQUIRE(_dependencyMap[1]).getAssetByID(source);
    if (!asset) {
      return null;
    }
    var resolver = new (_$$_REQUIRE(_dependencyMap[2]))(getDevServerURL(), getScriptURL(), asset);
    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }
    return resolver.defaultAsset();
  }
  resolveAssetSource.pickScale = _$$_REQUIRE(_dependencyMap[3]).pickScale;
  resolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;
  module.exports = resolveAssetSource;
},177,[178,179,180,181]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var NativeModule = TurboModuleRegistry.getEnforcing('SourceCode');
  var constants = null;
  var NativeSourceCode = {
    getConstants: function getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    }
  };
  var _default = exports.default = NativeSourceCode;
},178,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var assets = [];
  function registerAsset(asset) {
    // `push` returns new array length, so the first asset will
    // get id 1 (not 0) to make the value truthy
    return assets.push(asset);
  }
  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }
  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},179,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);
  var _createClass = _$$_REQUIRE(_dependencyMap[1]);
  /**
   * Returns a path like 'assets/AwesomeModule/icon@2x.png'
   */
  function getScaledAssetPath(asset) {
    var scale = _$$_REQUIRE(_dependencyMap[2]).pickScale(asset.scales, _$$_REQUIRE(_dependencyMap[3]).default.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = _$$_REQUIRE(_dependencyMap[4]).getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  /**
   * Returns a path like 'drawable-mdpi/icon.png'
   */
  function getAssetPathInDrawableFolder(asset) {
    var scale = _$$_REQUIRE(_dependencyMap[2]).pickScale(asset.scales, _$$_REQUIRE(_dependencyMap[3]).default.get());
    var drawableFolder = _$$_REQUIRE(_dependencyMap[4]).getAndroidResourceFolderName(asset, scale);
    var fileName = _$$_REQUIRE(_dependencyMap[4]).getAndroidResourceIdentifier(asset);
    return drawableFolder + '/' + fileName + '.' + asset.type;
  }
  var AssetSourceResolver = /*#__PURE__*/function () {
    // where the jsbundle is being run from

    // the asset to resolve

    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      _classCallCheck(this, AssetSourceResolver);
      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }
    _createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }
        {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        }
      }

      /**
       * Returns an absolute URL which can be used to fetch the asset
       * from the devserver
       */
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        _$$_REQUIRE(_dependencyMap[5])(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + "android" + '&hash=' + this.asset.hash);
      }

      /**
       * Resolves to just the scaled asset filename
       * E.g. 'assets/AwesomeModule/icon@2x.png'
       */
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }

      /**
       * Resolves to where the bundle is running from, with a scaled asset filename
       * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'
       */
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(
        // Assets can have relative paths outside of the project root.
        // When bundling them we replace `../` with `_` to make sure they
        // don't end up outside of the expected assets directory.
        path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
      }

      /**
       * The default location of assets bundled with the app, located by
       * resource identifier
       * The Android resource system picks the correct scale.
       * E.g. 'assets_awesomemodule_icon'
       */
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        _$$_REQUIRE(_dependencyMap[5])(true, 'resource identifiers work on Android');
        return this.fromSource(_$$_REQUIRE(_dependencyMap[4]).getAndroidResourceIdentifier(this.asset));
      }

      /**
       * If the jsbundle is running from a sideload location, this resolves assets
       * relative to its location
       * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'
       */
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: _$$_REQUIRE(_dependencyMap[2]).pickScale(this.asset.scales, _$$_REQUIRE(_dependencyMap[3]).default.get())
        };
      }
    }]);
    return AssetSourceResolver;
  }();
  AssetSourceResolver.pickScale = _$$_REQUIRE(_dependencyMap[2]).pickScale;
  module.exports = AssetSourceResolver;
},180,[5,6,181,182,185,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getUrlCacheBreaker = getUrlCacheBreaker;
  exports.pickScale = pickScale;
  exports.setUrlCacheBreaker = setUrlCacheBreaker;
  var _PixelRatio = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var cacheBreaker;
  var warnIfCacheBreakerUnset = true;
  function pickScale(scales, deviceScale) {
    if (deviceScale == null) {
      deviceScale = _PixelRatio.default.get();
    }
    // Packager guarantees that `scales` array is sorted
    for (var i = 0; i < scales.length; i++) {
      if (scales[i] >= deviceScale) {
        return scales[i];
      }
    }

    // If nothing matches, device scale is larger than any available
    // scales, so we return the biggest one. Unless the array is empty,
    // in which case we default to 1
    return scales[scales.length - 1] || 1;
  }
  function setUrlCacheBreaker(appendage) {
    cacheBreaker = appendage;
  }
  function getUrlCacheBreaker() {
    if (cacheBreaker == null) {
      return '';
    }
    return cacheBreaker;
  }
},181,[1,182]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * PixelRatio class gives access to the device pixel density.
   *
   * ## Fetching a correctly sized image
   *
   * You should get a higher resolution image if you are on a high pixel density
   * device. A good rule of thumb is to multiply the size of the image you display
   * by the pixel ratio.
   *
   * ```
   * var image = getImage({
   *   width: PixelRatio.getPixelSizeForLayoutSize(200),
   *   height: PixelRatio.getPixelSizeForLayoutSize(100),
   * });
   * <Image source={image} style={{width: 200, height: 100}} />
   * ```
   *
   * ## Pixel grid snapping
   *
   * In iOS, you can specify positions and dimensions for elements with arbitrary
   * precision, for example 29.674825. But, ultimately the physical display only
   * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334
   * for iPhone 6. iOS tries to be as faithful as possible to the user value by
   * spreading one original pixel into multiple ones to trick the eye. The
   * downside of this technique is that it makes the resulting element look
   * blurry.
   *
   * In practice, we found out that developers do not want this feature and they
   * have to work around it by doing manual rounding in order to avoid having
   * blurry elements. In React Native, we are rounding all the pixels
   * automatically.
   *
   * We have to be careful when to do this rounding. You never want to work with
   * rounded and unrounded values at the same time as you're going to accumulate
   * rounding errors. Having even one rounding error is deadly because a one
   * pixel border may vanish or be twice as big.
   *
   * In React Native, everything in JavaScript and within the layout engine works
   * with arbitrary precision numbers. It's only when we set the position and
   * dimensions of the native element on the main thread that we round. Also,
   * rounding is done relative to the root rather than the parent, again to avoid
   * accumulating rounding errors.
   *
   */
  var PixelRatio = /*#__PURE__*/function () {
    function PixelRatio() {
      (0, _classCallCheck2.default)(this, PixelRatio);
    }
    (0, _createClass2.default)(PixelRatio, null, [{
      key: "get",
      value:
      /**
       * Returns the device pixel density. Some examples:
       *
       *   - PixelRatio.get() === 1
       *     - mdpi Android devices (160 dpi)
       *   - PixelRatio.get() === 1.5
       *     - hdpi Android devices (240 dpi)
       *   - PixelRatio.get() === 2
       *     - iPhone 4, 4S
       *     - iPhone 5, 5c, 5s
       *     - iPhone 6
       *     - iPhone 7
       *     - iPhone 8
       *     - iPhone SE
       *     - xhdpi Android devices (320 dpi)
       *   - PixelRatio.get() === 3
       *     - iPhone 6 Plus
       *     - iPhone 7 Plus
       *     - iPhone 8 Plus
       *     - iPhone X
       *     - xxhdpi Android devices (480 dpi)
       *   - PixelRatio.get() === 3.5
       *     - Nexus 6
       */
      function get() {
        return _$$_REQUIRE(_dependencyMap[3]).default.get('window').scale;
      }

      /**
       * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the
       * absolute font size, so any elements that heavily depend on that should use this to do
       * calculations.
       *
       * If a font scale is not set, this returns the device pixel ratio.
       *
       * This reflects the user preference set in:
       *  - Settings > Display > Font size on Android,
       *  - Settings > Display & Brightness > Text Size on iOS.
       */
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return _$$_REQUIRE(_dependencyMap[3]).default.get('window').fontScale || PixelRatio.get();
      }

      /**
       * Converts a layout size (dp) to pixel size (px).
       *
       * Guaranteed to return an integer number.
       */
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }

      /**
       * Rounds a layout size (dp) to the nearest layout size that corresponds to
       * an integer number of pixels. For example, on a device with a PixelRatio
       * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to
       * exactly (8.33 * 3) = 25 pixels.
       */
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }

      // No-op for iOS, but used on the web. Should not be documented.
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);
    return PixelRatio;
  }();
  var _default = exports.default = PixelRatio;
},182,[1,5,6,183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _NativeDeviceInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var eventEmitter = new _EventEmitter.default();
  var dimensionsInitialized = false;
  var dimensions;
  var Dimensions = /*#__PURE__*/function () {
    function Dimensions() {
      (0, _classCallCheck2.default)(this, Dimensions);
    }
    (0, _createClass2.default)(Dimensions, null, [{
      key: "get",
      value:
      /**
       * NOTE: `useWindowDimensions` is the preferred API for React components.
       *
       * Initial dimensions are set before `runApplication` is called so they should
       * be available before any other require's are run, but may be updated later.
       *
       * Note: Although dimensions are available immediately, they may change (e.g
       * due to device rotation) so any rendering logic or styles that depend on
       * these constants should try to call this function on every render, rather
       * than caching the value (for example, using inline styles rather than
       * setting a value in a `StyleSheet`).
       *
       * Example: `const {height, width} = Dimensions.get('window');`
       *
       * @param {string} dim Name of dimension as defined when calling `set`.
       * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.
       */
      function get(dim) {
        (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }

      /**
       * This should only be called from native code by sending the
       * didUpdateDimensions event.
       *
       * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set
       */
    }, {
      key: "set",
      value: function set(dims) {
        // We calculate the window dimensions in JS so that we don't encounter loss of
        // precision in transferring the dimensions (which could be non-integers) over
        // the bridge.
        var screen = dims.screen,
          window = dims.window;
        var windowPhysicalPixels = dims.windowPhysicalPixels;
        if (windowPhysicalPixels) {
          window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };
        }
        var screenPhysicalPixels = dims.screenPhysicalPixels;
        if (screenPhysicalPixels) {
          screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };
        } else if (screen == null) {
          screen = window;
        }
        dimensions = {
          window: window,
          screen: screen
        };
        if (dimensionsInitialized) {
          // Don't fire 'change' the first time the dimensions are set.
          eventEmitter.emit('change', dimensions);
        } else {
          dimensionsInitialized = true;
        }
      }

      /**
       * Add an event handler. Supported events:
       *
       * - `change`: Fires when a property within the `Dimensions` object changes. The argument
       *   to the event handler is an object with `window` and `screen` properties whose values
       *   are the same as the return values of `Dimensions.get('window')` and
       *   `Dimensions.get('screen')`, respectively.
       */
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        return eventEmitter.addListener(type, handler);
      }
    }]);
    return Dimensions;
  }();
  var initialDims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
  if (!initialDims) {
    // Subscribe before calling getConstants to make sure we don't miss any updates in between.
    _RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', function (update) {
      Dimensions.set(update);
    });
    initialDims = _NativeDeviceInfo.default.getConstants().Dimensions;
  }
  Dimensions.set(initialDims);
  var _default = exports.default = Dimensions;
},183,[1,5,6,4,17,184,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var NativeModule = TurboModuleRegistry.getEnforcing('DeviceInfo');
  var constants = null;
  var NativeDeviceInfo = {
    getConstants: function getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    }
  };
  var _default = exports.default = NativeDeviceInfo;
},184,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var androidScaleSuffix = {
    '0.75': 'ldpi',
    '1': 'mdpi',
    '1.5': 'hdpi',
    '2': 'xhdpi',
    '3': 'xxhdpi',
    '4': 'xxxhdpi'
  };
  var ANDROID_BASE_DENSITY = 160;

  /**
   * FIXME: using number to represent discrete scale numbers is fragile in essence because of
   * floating point numbers imprecision.
   */
  function getAndroidAssetSuffix(scale) {
    if (scale.toString() in androidScaleSuffix) {
      return androidScaleSuffix[scale.toString()];
    }
    // NOTE: Android Gradle Plugin does not fully support the nnndpi format.
    // See https://issuetracker.google.com/issues/72884435
    if (Number.isFinite(scale) && scale > 0) {
      return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';
    }
    throw new Error('no such scale ' + scale.toString());
  }

  // See https://developer.android.com/guide/topics/resources/drawable-resource.html
  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'ktx', 'png', 'svg', 'webp', 'xml']);
  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }
    var suffix = getAndroidAssetSuffix(scale);
    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
    }
    return 'drawable-' + suffix;
  }
  function getAndroidResourceIdentifier(asset) {
    return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\//g, '_') // Encode folder structure in file name
    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars
    .replace(/^assets_/, ''); // Remove "assets_" prefix
  }
  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;
    return basePath.startsWith('/') ? basePath.slice(1) : basePath;
  }
  module.exports = {
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},185,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @noformat
   * 
   * @nolint
   * @generated SignedSource<<1b39316520f5af25f0a141d7d78b0809>>
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  // Event configs
  var customBubblingEventTypes = {};
  var customDirectEventTypes = {};
  exports.customBubblingEventTypes = customBubblingEventTypes;
  exports.customDirectEventTypes = customDirectEventTypes;
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();
  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;
    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }
    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }

  /**
   * Registers a native view/component by name.
   * A callback is provided to load the view config from UIManager.
   * The callback is deferred until the view is actually rendered.
   */
  exports.register = function (name, callback) {
    (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
    viewConfigCallbacks.set(name, callback);
    return name;
  };

  /**
   * Retrieves a config for the specified view.
   * If this is the first time the view has been used,
   * This configuration will be lazy-loaded from UIManager.
   */
  exports.get = function (name) {
    var viewConfig;
    if (!viewConfigs.has(name)) {
      var callback = viewConfigCallbacks.get(name);
      if (typeof callback !== 'function') {
        (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback,
        // $FlowFixMe[recursive-definition]
        typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }
      viewConfig = callback();
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);

      // Clear the callback after the config is set so that
      // we don't mask any errors during registration.
      viewConfigCallbacks.set(name, null);
    } else {
      viewConfig = viewConfigs.get(name);
    }
    (0, _invariant.default)(viewConfig, 'View config not found for name %s', name);
    return viewConfig;
  };
},186,[1,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = verifyComponentAttributeEquivalence;
  exports.getConfigWithoutViewProps = getConfigWithoutViewProps;
  exports.stringifyViewConfig = stringifyViewConfig;
  var _PlatformBaseViewConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var IGNORED_KEYS = ['transform', 'hitSlop'];

  /**
   * The purpose of this function is to validate that the view config that
   * native exposes for a given view manager is the same as the view config
   * that is specified for that view manager in JS.
   *
   * In order to improve perf, we want to avoid calling into native to get
   * the view config when each view manager is used. To do this, we are moving
   * the configs to JS. In the future we will use these JS based view configs
   * to codegen the view manager on native to ensure they stay in sync without
   * this runtime check.
   *
   * If this function fails, that likely means a change was made to the native
   * view manager without updating the JS config as well. Ideally you can make
   * that direct change to the JS config. If you don't know what the differences
   * are, the best approach I've found is to create a view that prints
   * the return value of getNativeComponentAttributes, and then copying that
   * text and pasting it back into JS:
   * <Text selectable={true}>{JSON.stringify(getNativeComponentAttributes('RCTView'))}</Text>
   *
   * This is meant to be a stopgap until the time comes when we only have a
   * single source of truth. I wonder if this message will still be here two
   * years from now...
   */
  function verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig) {
    for (var prop of ['validAttributes', 'bubblingEventTypes', 'directEventTypes']) {
      var diff = Object.keys(lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]));
      if (diff.length > 0) {
        var _staticViewConfig$uiV;
        var name = (_staticViewConfig$uiV = staticViewConfig.uiViewClassName) != null ? _staticViewConfig$uiV : nativeViewConfig.uiViewClassName;
        console.error(`'${name}' has a view config that does not match native. ` + `'${prop}' is missing: ${diff.join(', ')}`);
      }
    }
  }

  // Return the different key-value pairs of the right object, by iterating through the keys in the left object
  // Note it won't return a difference where a key is missing in the left but exists the right.
  function lefthandObjectDiff(leftObj, rightObj) {
    var differentKeys = {};
    function compare(leftItem, rightItem, key) {
      if (typeof leftItem !== typeof rightItem && leftItem != null) {
        differentKeys[key] = rightItem;
        return;
      }
      if (typeof leftItem === 'object') {
        var objDiff = lefthandObjectDiff(leftItem, rightItem);
        if (Object.keys(objDiff).length > 1) {
          differentKeys[key] = objDiff;
        }
        return;
      }
      if (leftItem !== rightItem) {
        differentKeys[key] = rightItem;
        return;
      }
    }
    for (var key in leftObj) {
      if (IGNORED_KEYS.includes(key)) {
        continue;
      }
      if (!rightObj) {
        differentKeys[key] = {};
      } else if (leftObj.hasOwnProperty(key)) {
        compare(leftObj[key], rightObj[key], key);
      }
    }
    return differentKeys;
  }
  function getConfigWithoutViewProps(viewConfig, propName) {
    if (!viewConfig[propName]) {
      return {};
    }
    return Object.keys(viewConfig[propName]).filter(function (prop) {
      return !_PlatformBaseViewConfig.default[propName][prop];
    }).reduce(function (obj, prop) {
      obj[prop] = viewConfig[propName][prop];
      return obj;
    }, {});
  }
  function stringifyViewConfig(viewConfig) {
    return JSON.stringify(viewConfig, function (key, val) {
      if (typeof val === 'function') {
        return `ƒ ${val.name}`;
      }
      return val;
    }, 2);
  }
},187,[1,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _BaseViewConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var PlatformBaseViewConfig = _BaseViewConfig.default;

  // In Wilde/FB4A, use RNHostComponentListRoute in Bridge mode to verify
  // whether the JS props defined here match the native props defined
  // in RCTViewManagers in iOS, and ViewManagers in Android.
  var _default = exports.default = PlatformBaseViewConfig;
},188,[1,189]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ReactNativeStyleAttributes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var bubblingEventTypes = {
    // Bubbling events from UIManagerModuleConstants.java
    topChange: {
      phasedRegistrationNames: {
        captured: 'onChangeCapture',
        bubbled: 'onChange'
      }
    },
    topSelect: {
      phasedRegistrationNames: {
        captured: 'onSelectCapture',
        bubbled: 'onSelect'
      }
    },
    topTouchEnd: {
      phasedRegistrationNames: {
        captured: 'onTouchEndCapture',
        bubbled: 'onTouchEnd'
      }
    },
    topTouchCancel: {
      phasedRegistrationNames: {
        captured: 'onTouchCancelCapture',
        bubbled: 'onTouchCancel'
      }
    },
    topTouchStart: {
      phasedRegistrationNames: {
        captured: 'onTouchStartCapture',
        bubbled: 'onTouchStart'
      }
    },
    topTouchMove: {
      phasedRegistrationNames: {
        captured: 'onTouchMoveCapture',
        bubbled: 'onTouchMove'
      }
    },
    // Experimental/Work in Progress Pointer Events (not yet ready for use)
    topPointerCancel: {
      phasedRegistrationNames: {
        captured: 'onPointerCancelCapture',
        bubbled: 'onPointerCancel'
      }
    },
    topPointerDown: {
      phasedRegistrationNames: {
        captured: 'onPointerDownCapture',
        bubbled: 'onPointerDown'
      }
    },
    topPointerEnter: {
      phasedRegistrationNames: {
        captured: 'onPointerEnterCapture',
        bubbled: 'onPointerEnter',
        skipBubbling: true
      }
    },
    topPointerLeave: {
      phasedRegistrationNames: {
        captured: 'onPointerLeaveCapture',
        bubbled: 'onPointerLeave',
        skipBubbling: true
      }
    },
    topPointerMove: {
      phasedRegistrationNames: {
        captured: 'onPointerMoveCapture',
        bubbled: 'onPointerMove'
      }
    },
    topPointerUp: {
      phasedRegistrationNames: {
        captured: 'onPointerUpCapture',
        bubbled: 'onPointerUp'
      }
    },
    topPointerOut: {
      phasedRegistrationNames: {
        captured: 'onPointerOutCapture',
        bubbled: 'onPointerOut'
      }
    },
    topPointerOver: {
      phasedRegistrationNames: {
        captured: 'onPointerOverCapture',
        bubbled: 'onPointerOver'
      }
    },
    topClick: {
      phasedRegistrationNames: {
        captured: 'onClickCapture',
        bubbled: 'onClick'
      }
    }
  };
  var directEventTypes = {
    topAccessibilityAction: {
      registrationName: 'onAccessibilityAction'
    },
    onGestureHandlerEvent: (0, _$$_REQUIRE(_dependencyMap[2]).DynamicallyInjectedByGestureHandler)({
      registrationName: 'onGestureHandlerEvent'
    }),
    onGestureHandlerStateChange: (0, _$$_REQUIRE(_dependencyMap[2]).DynamicallyInjectedByGestureHandler)({
      registrationName: 'onGestureHandlerStateChange'
    }),
    // Direct events from UIManagerModuleConstants.java
    topContentSizeChange: {
      registrationName: 'onContentSizeChange'
    },
    topScrollBeginDrag: {
      registrationName: 'onScrollBeginDrag'
    },
    topMessage: {
      registrationName: 'onMessage'
    },
    topSelectionChange: {
      registrationName: 'onSelectionChange'
    },
    topLoadingFinish: {
      registrationName: 'onLoadingFinish'
    },
    topMomentumScrollEnd: {
      registrationName: 'onMomentumScrollEnd'
    },
    topLoadingStart: {
      registrationName: 'onLoadingStart'
    },
    topLoadingError: {
      registrationName: 'onLoadingError'
    },
    topMomentumScrollBegin: {
      registrationName: 'onMomentumScrollBegin'
    },
    topScrollEndDrag: {
      registrationName: 'onScrollEndDrag'
    },
    topScroll: {
      registrationName: 'onScroll'
    },
    topLayout: {
      registrationName: 'onLayout'
    }
  };
  var validAttributesForNonEventProps = {
    // @ReactProps from BaseViewManager
    backgroundColor: {
      process: _$$_REQUIRE(_dependencyMap[3]).default
    },
    transform: true,
    transformOrigin: true,
    opacity: true,
    elevation: true,
    shadowColor: {
      process: _$$_REQUIRE(_dependencyMap[3]).default
    },
    zIndex: true,
    renderToHardwareTextureAndroid: true,
    testID: true,
    nativeID: true,
    accessibilityLabelledBy: true,
    accessibilityLabel: true,
    accessibilityHint: true,
    accessibilityRole: true,
    accessibilityCollection: true,
    accessibilityCollectionItem: true,
    accessibilityState: true,
    accessibilityActions: true,
    accessibilityValue: true,
    importantForAccessibility: true,
    role: true,
    rotation: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true,
    accessibilityLiveRegion: true,
    // @ReactProps from LayoutShadowNode
    width: true,
    minWidth: true,
    collapsable: true,
    maxWidth: true,
    height: true,
    minHeight: true,
    maxHeight: true,
    flex: true,
    flexGrow: true,
    rowGap: true,
    columnGap: true,
    gap: true,
    flexShrink: true,
    flexBasis: true,
    aspectRatio: true,
    flexDirection: true,
    flexWrap: true,
    alignSelf: true,
    alignItems: true,
    alignContent: true,
    justifyContent: true,
    overflow: true,
    display: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    borderWidth: true,
    borderStartWidth: true,
    borderEndWidth: true,
    borderTopWidth: true,
    borderBottomWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    start: true,
    end: true,
    left: true,
    right: true,
    top: true,
    bottom: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    position: true,
    style: _ReactNativeStyleAttributes.default,
    experimental_layoutConformance: true
  };

  // Props for bubbling and direct events
  var validAttributesForEventProps = {
    onLayout: true,
    // PanResponder handlers
    onMoveShouldSetResponder: true,
    onMoveShouldSetResponderCapture: true,
    onStartShouldSetResponder: true,
    onStartShouldSetResponderCapture: true,
    onResponderGrant: true,
    onResponderReject: true,
    onResponderStart: true,
    onResponderEnd: true,
    onResponderRelease: true,
    onResponderMove: true,
    onResponderTerminate: true,
    onResponderTerminationRequest: true,
    onShouldBlockNativeResponder: true,
    // Touch events
    onTouchStart: true,
    onTouchMove: true,
    onTouchEnd: true,
    onTouchCancel: true,
    // Pointer events
    onPointerEnter: true,
    onPointerEnterCapture: true,
    onPointerLeave: true,
    onPointerLeaveCapture: true,
    onPointerMove: true,
    onPointerMoveCapture: true,
    onPointerOut: true,
    onPointerOutCapture: true,
    onPointerOver: true,
    onPointerOverCapture: true
  };

  /**
   * On Android, Props are derived from a ViewManager and its ShadowNode.
   *
   * Where did we find these base platform props from?
   * - Nearly all component ViewManagers descend from BaseViewManager,
   * - and BaseViewManagers' ShadowNodes descend from LayoutShadowNode.
   * - Also, all components inherit ViewConfigs from UIManagerModuleConstants.java.
   *
   * So, these ViewConfigs are generated from LayoutShadowNode and BaseViewManager.
   */
  var PlatformBaseViewConfigAndroid = {
    directEventTypes: directEventTypes,
    bubblingEventTypes: bubblingEventTypes,
    validAttributes: Object.assign({}, validAttributesForNonEventProps, validAttributesForEventProps)
  };
  var _default = exports.default = PlatformBaseViewConfigAndroid;
},189,[1,162,190,164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConditionallyIgnoredEventHandlers = ConditionallyIgnoredEventHandlers;
  exports.DynamicallyInjectedByGestureHandler = DynamicallyInjectedByGestureHandler;
  exports.isIgnored = isIgnored;
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var ignoredViewConfigProps = new WeakSet();

  /**
   * Decorates ViewConfig values that are dynamically injected by the library,
   * react-native-gesture-handler. (T45765076)
   */
  function DynamicallyInjectedByGestureHandler(object) {
    ignoredViewConfigProps.add(object);
    return object;
  }

  /**
   * On iOS, ViewManager event declarations generate {eventName}: true entries
   * in ViewConfig valueAttributes. These entries aren't generated for Android.
   * This annotation allows Static ViewConfigs to insert these entries into
   * iOS but not Android.
   *
   * In the future, we want to remove this platform-inconsistency. We want
   * to set RN$ViewConfigEventValidAttributesDisabled = true server-side,
   * so that iOS does not generate validAttributes from event props in iOS RCTViewManager,
   * since Android does not generate validAttributes from events props in Android ViewManager.
   *
   * TODO(T110872225): Remove this logic, after achieving platform-consistency
   */
  function ConditionallyIgnoredEventHandlers(value) {
    if (_Platform.default.OS === 'ios') {
      return value;
    }
    return undefined;
  }
  function isIgnored(value) {
    if (typeof value === 'object' && value != null) {
      return ignoredViewConfigProps.has(value);
    }
    return false;
  }
},190,[1,21]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.stringifyValidationResult = stringifyValidationResult;
  exports.validate = validate;
  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * During the migration from native view configs to static view configs, this is
   * used to validate that the two are equivalent.
   */
  function validate(name, nativeViewConfig, staticViewConfig) {
    var differences = [];
    accumulateDifferences(differences, [], {
      bubblingEventTypes: nativeViewConfig.bubblingEventTypes,
      directEventTypes: nativeViewConfig.directEventTypes,
      uiViewClassName: nativeViewConfig.uiViewClassName,
      validAttributes: nativeViewConfig.validAttributes
    }, {
      bubblingEventTypes: staticViewConfig.bubblingEventTypes,
      directEventTypes: staticViewConfig.directEventTypes,
      uiViewClassName: staticViewConfig.uiViewClassName,
      validAttributes: staticViewConfig.validAttributes
    });
    if (differences.length === 0) {
      return {
        type: 'valid'
      };
    }
    return {
      type: 'invalid',
      differences: differences
    };
  }
  function stringifyValidationResult(name, validationResult) {
    var differences = validationResult.differences;
    return [`StaticViewConfigValidator: Invalid static view config for '${name}'.`, ''].concat((0, _toConsumableArray2.default)(differences.map(function (difference) {
      var type = difference.type,
        path = difference.path;
      switch (type) {
        case 'missing':
          return `- '${path.join('.')}' is missing.`;
        case 'unequal':
          return `- '${path.join('.')}' is the wrong value.`;
        case 'unexpected':
          return `- '${path.join('.')}' is present but not expected to be.`;
      }
    })), ['']).join('\n');
  }
  function accumulateDifferences(differences, path, nativeObject, staticObject) {
    for (var nativeKey in nativeObject) {
      var nativeValue = nativeObject[nativeKey];
      if (!staticObject.hasOwnProperty(nativeKey)) {
        differences.push({
          path: [].concat((0, _toConsumableArray2.default)(path), [nativeKey]),
          type: 'missing',
          nativeValue: nativeValue
        });
        continue;
      }
      var staticValue = staticObject[nativeKey];
      var nativeValueIfObject = ifObject(nativeValue);
      if (nativeValueIfObject != null) {
        var staticValueIfObject = ifObject(staticValue);
        if (staticValueIfObject != null) {
          path.push(nativeKey);
          accumulateDifferences(differences, path, nativeValueIfObject, staticValueIfObject);
          path.pop();
          continue;
        }
      }
      if (nativeValue !== staticValue) {
        differences.push({
          path: [].concat((0, _toConsumableArray2.default)(path), [nativeKey]),
          type: 'unequal',
          nativeValue: nativeValue,
          staticValue: staticValue
        });
      }
    }
    for (var staticKey in staticObject) {
      if (!nativeObject.hasOwnProperty(staticKey) && !(0, _$$_REQUIRE(_dependencyMap[2]).isIgnored)(staticObject[staticKey])) {
        differences.push({
          path: [].concat((0, _toConsumableArray2.default)(path), [staticKey]),
          type: 'unexpected',
          staticValue: staticObject[staticKey]
        });
      }
    }
  }
  function ifObject(value) {
    return typeof value === 'object' && !Array.isArray(value) ? value : null;
  }
},191,[1,34,190]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createViewConfig = createViewConfig;
  var _PlatformBaseViewConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * Creates a complete `ViewConfig` from a `PartialViewConfig`.
   */
  function createViewConfig(partialViewConfig) {
    return {
      uiViewClassName: partialViewConfig.uiViewClassName,
      Commands: {},
      bubblingEventTypes: composeIndexers(_PlatformBaseViewConfig.default.bubblingEventTypes, partialViewConfig.bubblingEventTypes),
      directEventTypes: composeIndexers(_PlatformBaseViewConfig.default.directEventTypes, partialViewConfig.directEventTypes),
      // $FlowFixMe[incompatible-return]
      validAttributes: composeIndexers(
      // $FlowFixMe[incompatible-call] `style` property confuses Flow.
      _PlatformBaseViewConfig.default.validAttributes,
      // $FlowFixMe[incompatible-call] `style` property confuses Flow.
      partialViewConfig.validAttributes)
    };
  }
  function composeIndexers(maybeA, maybeB) {
    var _ref;
    return maybeA == null || maybeB == null ? (_ref = maybeA != null ? maybeA : maybeB) != null ? _ref : {} : Object.assign({}, maybeA, maybeB);
  }
},192,[1,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach(function (command) {
      // $FlowFixMe[missing-local-annot]
      commandObj[command] = function (ref) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        // $FlowFixMe[incompatible-call]
        _$$_REQUIRE(_dependencyMap[0]).dispatchCommand(ref, command, args);
      };
    });
    return commandObj;
  }
  var _default = exports.default = codegenNativeCommands;
},193,[52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},194,[195]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var f = _$$_REQUIRE(_dependencyMap[0]),
    k = Symbol.for("react.element"),
    l = Symbol.for("react.fragment"),
    m = Object.prototype.hasOwnProperty,
    n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
    p = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
  function q(c, a, g) {
    var b,
      d = {},
      e = null,
      h = null;
    undefined !== g && (e = "" + g);
    undefined !== a.key && (e = "" + a.key);
    undefined !== a.ref && (h = a.ref);
    for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps) for (b in a = c.defaultProps, a) undefined === d[b] && (d[b] = a[b]);
    return {
      $$typeof: k,
      type: c,
      key: e,
      ref: h,
      props: d,
      _owner: n.current
    };
  }
  exports.Fragment = l;
  exports.jsx = q;
  exports.jsxs = q;
},195,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  /**
   * This type should be used as the type for anything that is a color. It is
   * most useful when using DynamicColorIOS which can be a string or a dynamic
   * color object.
   *
   * type props = {backgroundColor: ColorValue};
   */

  /**
   * This type should be used as the type for a prop that is passed through
   * to a <View>'s `style` prop. This ensures call sites of the component
   * can't pass styles that View doesn't support such as `fontSize`.`
   *
   * type Props = {style: ViewStyleProp}
   * const MyComponent = (props: Props) => <View style={props.style} />
   */

  /**
   * This type should be used as the type for a prop that is passed through
   * to a <Text>'s `style` prop. This ensures call sites of the component
   * can't pass styles that Text doesn't support such as `resizeMode`.`
   *
   * type Props = {style: TextStyleProp}
   * const MyComponent = (props: Props) => <Text style={props.style} />
   */

  /**
   * This type should be used as the type for a prop that is passed through
   * to an <Image>'s `style` prop. This ensures call sites of the component
   * can't pass styles that Image doesn't support such as `fontSize`.`
   *
   * type Props = {style: ImageStyleProp}
   * const MyComponent = (props: Props) => <Image style={props.style} />
   */

  /**
   * WARNING: You probably shouldn't be using this type. This type
   * is similar to the ones above except it allows styles that are accepted
   * by all of View, Text, or Image. It is therefore very unsafe to pass this
   * through to an underlying component. Using this is almost always a mistake
   * and using one of the other more restrictive types is likely the right choice.
   */

  /**
   * Utility type for getting the values for specific style keys.
   *
   * The following is bad because position is more restrictive than 'string':
   * ```
   * type Props = {position: string};
   * ```
   *
   * You should use the following instead:
   *
   * ```
   * type Props = {position: TypeForStyleKey<'position'>};
   * ```
   *
   * This will correctly give you the type 'absolute' | 'relative'
   */

  /**
   * This type is an object of the different possible style
   * properties that can be specified for View.
   *
   * Note that this isn't a safe way to type a style prop for a component as
   * results from StyleSheet.create return an internal identifier, not
   * an object of styles.
   *
   * If you want to type the style prop of a function,
   * consider using ViewStyleProp.
   *
   * A reasonable usage of this type is for helper functions that return an
   * object of styles to pass to a View that can't be precomputed with
   * StyleSheet.create.
   */

  /**
   * This type is an object of the different possible style
   * properties that can be specified for Text.
   *
   * Note that this isn't a safe way to type a style prop for a component as
   * results from StyleSheet.create return an internal identifier, not
   * an object of styles.
   *
   * If you want to type the style prop of a function,
   * consider using TextStyleProp.
   *
   * A reasonable usage of this type is for helper functions that return an
   * object of styles to pass to a Text that can't be precomputed with
   * StyleSheet.create.
   */

  /**
   * This type is an object of the different possible style
   * properties that can be specified for Image.
   *
   * Note that this isn't a safe way to type a style prop for a component as
   * results from StyleSheet.create return an internal identifier, not
   * an object of styles.
   *
   * If you want to type the style prop of a function,
   * consider using ImageStyleProp.
   *
   * A reasonable usage of this type is for helper functions that return an
   * object of styles to pass to an Image that can't be precomputed with
   * StyleSheet.create.
   */

  /**
   * WARNING: You probably shouldn't be using this type. This type is an object
   * with all possible style keys and their values. Note that this isn't
   * a safe way to type a style prop for a component as results from
   * StyleSheet.create return an internal identifier, not an object of styles.
   *
   * If you want to type the style prop of a function, consider using
   * ViewStyleProp, TextStyleProp, or ImageStyleProp.
   *
   * This should only be used by very core utilities that operate on an object
   * containing any possible style value.
   */

  var hairlineWidth = _$$_REQUIRE(_dependencyMap[0]).default.roundToNearestPixel(0.4);
  if (hairlineWidth === 0) {
    hairlineWidth = 1 / _$$_REQUIRE(_dependencyMap[0]).default.get();
  }
  var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  /**
   * A StyleSheet is an abstraction similar to CSS StyleSheets
   *
   * Create a new StyleSheet:
   *
   * ```
   * const styles = StyleSheet.create({
   *   container: {
   *     borderRadius: 4,
   *     borderWidth: 0.5,
   *     borderColor: '#d6d7da',
   *   },
   *   title: {
   *     fontSize: 19,
   *     fontWeight: 'bold',
   *   },
   *   activeTitle: {
   *     color: 'red',
   *   },
   * });
   * ```
   *
   * Use a StyleSheet:
   *
   * ```
   * <View style={styles.container}>
   *   <Text style={[styles.title, this.props.isActive && styles.activeTitle]} />
   * </View>
   * ```
   *
   * Code quality:
   *
   *  - By moving styles away from the render function, you're making the code
   *  easier to understand.
   *  - Naming the styles is a good way to add meaning to the low level components
   *  in the render function.
   *
   * Performance:
   *
   *  - Making a stylesheet from a style object makes it possible to refer to it
   * by ID instead of creating a new style object every time.
   *  - It also allows to send the style only once through the bridge. All
   * subsequent uses are going to refer an id (not implemented yet).
   */
  module.exports = {
    /**
     * This is defined as the width of a thin line on the platform. It can be
     * used as the thickness of a border or division between two elements.
     * Example:
     * ```
     *   {
     *     borderBottomColor: '#bbb',
     *     borderBottomWidth: StyleSheet.hairlineWidth
     *   }
     * ```
     *
     * This constant will always be a round number of pixels (so a line defined
     * by it look crisp) and will try to match the standard width of a thin line
     * on the underlying platform. However, you should not rely on it being a
     * constant size, because on different platforms and screen densities its
     * value may be calculated differently.
     *
     * A line with hairline width may not be visible if your simulator is downscaled.
     */
    hairlineWidth: hairlineWidth,
    /**
     * A very common pattern is to create overlays with position absolute and zero positioning,
     * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated
     * styles.
     */
    absoluteFill: absoluteFill,
    // TODO: This should be updated after we fix downstream Flow sites.

    /**
     * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be
     * used to create a customized entry in a `StyleSheet`, e.g.:
     *
     *   const styles = StyleSheet.create({
     *     wrapper: {
     *       ...StyleSheet.absoluteFillObject,
     *       top: 10,
     *       backgroundColor: 'transparent',
     *     },
     *   });
     */
    absoluteFillObject: absoluteFill,
    /**
     * Combines two styles such that `style2` will override any styles in `style1`.
     * If either style is falsy, the other one is returned without allocating an
     * array, saving allocations and maintaining reference equality for
     * PureComponent checks.
     */
    compose: function compose(style1, style2) {
      if (style1 != null && style2 != null) {
        return [style1, style2];
      } else {
        return style1 != null ? style1 : style2;
      }
    },
    /**
     * Flattens an array of style objects, into one aggregated style object.
     * Alternatively, this method can be used to lookup IDs, returned by
     * StyleSheet.register.
     *
     * > **NOTE**: Exercise caution as abusing this can tax you in terms of
     * > optimizations.
     * >
     * > IDs enable optimizations through the bridge and memory in general. Referring
     * > to style objects directly will deprive you of these optimizations.
     *
     * Example:
     * ```
     * const styles = StyleSheet.create({
     *   listItem: {
     *     flex: 1,
     *     fontSize: 16,
     *     color: 'white'
     *   },
     *   selectedListItem: {
     *     color: 'green'
     *   }
     * });
     *
     * StyleSheet.flatten([styles.listItem, styles.selectedListItem])
     * // returns { flex: 1, fontSize: 16, color: 'green' }
     * ```
     * Alternative use:
     * ```
     * StyleSheet.flatten(styles.listItem);
     * // return { flex: 1, fontSize: 16, color: 'white' }
     * // Simply styles.listItem would return its ID (number)
     * ```
     * This method internally uses `StyleSheetRegistry.getStyleByID(style)`
     * to resolve style objects represented by IDs. Thus, an array of style
     * objects (instances of StyleSheet.create), are individually resolved to,
     * their respective objects, merged as one and then returned. This also explains
     * the alternative use.
     */
    flatten: _$$_REQUIRE(_dependencyMap[1]),
    /**
     * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will
     * not be reliably announced. The whole thing might be deleted, who knows? Use
     * at your own risk.
     *
     * Sets a function to use to pre-process a style property value. This is used
     * internally to process color and transform values. You should not use this
     * unless you really know what you are doing and have exhausted other options.
     */
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var _ReactNativeStyleAttr, _ReactNativeStyleAttr2;
      var value;
      if (_$$_REQUIRE(_dependencyMap[2])[property] === true) {
        value = {
          process: process
        };
      } else if (typeof _$$_REQUIRE(_dependencyMap[2])[property] === 'object') {
        value = Object.assign({}, _$$_REQUIRE(_dependencyMap[2])[property], {
          process: process
        });
      } else {
        console.error(`${property} is not a valid style attribute`);
        return;
      }
      _$$_REQUIRE(_dependencyMap[2])[property] = value;
    },
    /**
     * Creates a StyleSheet style reference from the given object.
     */
    // $FlowFixMe[unsupported-variance-annotation]
    create: function create(obj) {
      // TODO: This should return S as the return type. But first,
      // we need to codemod all the callsites that are typing this
      // return value as a number (even though it was opaque).

      return obj;
    }
  };
},196,[182,157,162]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = DevtoolsOverlay;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _Dimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _ElementBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var useEffect = React.useEffect,
    useState = React.useState,
    useCallback = React.useCallback,
    useRef = React.useRef;
  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  function DevtoolsOverlay(_ref) {
    var inspectedView = _ref.inspectedView;
    var _useState = useState(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      inspected = _useState2[0],
      setInspected = _useState2[1];
    var _useState3 = useState(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isInspecting = _useState4[0],
      setIsInspecting = _useState4[1];
    var devToolsAgentRef = useRef(null);
    useEffect(function () {
      var devToolsAgent = null;
      var hideTimeoutId = null;
      function onAgentHideNativeHighlight() {
        // we wait to actually hide in order to avoid flicker
        clearTimeout(hideTimeoutId);
        hideTimeoutId = setTimeout(function () {
          setInspected(null);
        }, 100);
      }
      function onAgentShowNativeHighlight(node) {
        var _ref2, _ref3;
        clearTimeout(hideTimeoutId);

        // `canonical.publicInstance` => Fabric
        // `canonical` => Legacy Fabric
        // `node` => Legacy renderer
        var component = (_ref2 = (_ref3 = node.canonical && node.canonical.publicInstance) != null ? _ref3 :
        // TODO: remove this check when syncing the new version of the renderer from React to React Native.
        node.canonical) != null ? _ref2 : node;
        if (!component || !component.measure) {
          return;
        }
        component.measure(function (x, y, width, height, left, top) {
          setInspected({
            frame: {
              left: left,
              top: top,
              width: width,
              height: height
            }
          });
        });
      }
      function cleanup() {
        var currentAgent = devToolsAgent;
        if (currentAgent != null) {
          currentAgent.removeListener('hideNativeHighlight', onAgentHideNativeHighlight);
          currentAgent.removeListener('showNativeHighlight', onAgentShowNativeHighlight);
          currentAgent.removeListener('shutdown', cleanup);
          currentAgent.removeListener('startInspectingNative', onStartInspectingNative);
          currentAgent.removeListener('stopInspectingNative', onStopInspectingNative);
          devToolsAgent = null;
        }
        devToolsAgentRef.current = null;
      }
      function onStartInspectingNative() {
        setIsInspecting(true);
      }
      function onStopInspectingNative() {
        setIsInspecting(false);
      }
      function _attachToDevtools(agent) {
        devToolsAgent = agent;
        devToolsAgentRef.current = agent;
        agent.addListener('hideNativeHighlight', onAgentHideNativeHighlight);
        agent.addListener('showNativeHighlight', onAgentShowNativeHighlight);
        agent.addListener('shutdown', cleanup);
        agent.addListener('startInspectingNative', onStartInspectingNative);
        agent.addListener('stopInspectingNative', onStopInspectingNative);
      }
      hook.on('react-devtools', _attachToDevtools);
      if (hook.reactDevtoolsAgent) {
        _attachToDevtools(hook.reactDevtoolsAgent);
      }
      return function () {
        hook.off('react-devtools', _attachToDevtools);
        cleanup();
      };
    }, []);
    var findViewForLocation = useCallback(function (x, y) {
      var agent = devToolsAgentRef.current;
      if (agent == null) {
        return;
      }
      _$$_REQUIRE(_dependencyMap[9])(inspectedView, x, y, function (viewData) {
        var touchedViewTag = viewData.touchedViewTag,
          closestInstance = viewData.closestInstance,
          frame = viewData.frame;
        if (closestInstance != null || touchedViewTag != null) {
          // We call `selectNode` for both non-fabric(viewTag) and fabric(instance),
          // this makes sure it works for both architectures.
          agent.selectNode(_$$_REQUIRE(_dependencyMap[10]).findNodeHandle(touchedViewTag));
          if (closestInstance != null) {
            agent.selectNode(closestInstance);
          }
          setInspected({
            frame: frame
          });
          return true;
        }
        return false;
      });
    }, [inspectedView]);
    var stopInspecting = useCallback(function () {
      var agent = devToolsAgentRef.current;
      if (agent == null) {
        return;
      }
      agent.stopInspectingNative(true);
      setIsInspecting(false);
      setInspected(null);
    }, []);
    var onPointerMove = useCallback(function (e) {
      findViewForLocation(e.nativeEvent.x, e.nativeEvent.y);
    }, [findViewForLocation]);
    var onResponderMove = useCallback(function (e) {
      findViewForLocation(e.nativeEvent.touches[0].locationX, e.nativeEvent.touches[0].locationY);
    }, [findViewForLocation]);
    var shouldSetResponder = useCallback(function (e) {
      onResponderMove(e);
      return true;
    }, [onResponderMove]);
    var highlight = inspected ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ElementBox.default, {
      frame: inspected.frame
    }) : null;
    if (isInspecting) {
      var events =
      // Pointer events only work on fabric
      _ReactNativeFeatureFlags.default.shouldEmitW3CPointerEvents() ? {
        onPointerMove: onPointerMove,
        onPointerDown: onPointerMove,
        onPointerUp: stopInspecting
      } : {
        onStartShouldSetResponder: shouldSetResponder,
        onResponderMove: onResponderMove,
        onResponderRelease: stopInspecting
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, Object.assign({
        nativeID: "devToolsInspectorOverlay",
        style: [styles.inspector, {
          height: _Dimensions.default.get('window').height
        }]
      }, events, {
        children: highlight
      }));
    }
    return highlight;
  }
  var styles = _StyleSheet.default.create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });
},197,[1,26,156,108,196,183,198,153,194,203,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _reactJsxRuntime = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);
  var _createClass = _$$_REQUIRE(_dependencyMap[2]);
  var _inherits = _$$_REQUIRE(_dependencyMap[3]);
  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);
  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var React = _$$_REQUIRE(_dependencyMap[6]);
  var ElementBox = /*#__PURE__*/function (_React$Component) {
    _inherits(ElementBox, _React$Component);
    var _super = _createSuper(ElementBox);
    function ElementBox() {
      _classCallCheck(this, ElementBox);
      return _super.apply(this, arguments);
    }
    _createClass(ElementBox, [{
      key: "render",
      value: function render() {
        // $FlowFixMe[underconstrained-implicit-instantiation]
        var style = _$$_REQUIRE(_dependencyMap[7])(this.props.style) || {};
        var margin = _$$_REQUIRE(_dependencyMap[8])('margin', style);
        var padding = _$$_REQUIRE(_dependencyMap[8])('padding', style);
        var frameStyle = Object.assign({}, this.props.frame);
        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };
        if (margin != null) {
          margin = resolveRelativeSizes(margin);
          frameStyle.top -= margin.top;
          frameStyle.left -= margin.left;
          frameStyle.height += margin.top + margin.bottom;
          frameStyle.width += margin.left + margin.right;
          if (margin.top < 0) {
            contentStyle.height += margin.top;
          }
          if (margin.bottom < 0) {
            contentStyle.height += margin.bottom;
          }
          if (margin.left < 0) {
            contentStyle.width += margin.left;
          }
          if (margin.right < 0) {
            contentStyle.width += margin.right;
          }
        }
        if (padding != null) {
          padding = resolveRelativeSizes(padding);
          contentStyle.width -= padding.left + padding.right;
          contentStyle.height -= padding.top + padding.bottom;
        }
        return /*#__PURE__*/_reactJsxRuntime.jsx(_$$_REQUIRE(_dependencyMap[9]), {
          style: [styles.frame, frameStyle],
          pointerEvents: "none",
          children: /*#__PURE__*/_reactJsxRuntime.jsx(_$$_REQUIRE(_dependencyMap[10]), {
            box: margin,
            style: styles.margin,
            children: /*#__PURE__*/_reactJsxRuntime.jsx(_$$_REQUIRE(_dependencyMap[10]), {
              box: padding,
              style: styles.padding,
              children: /*#__PURE__*/_reactJsxRuntime.jsx(_$$_REQUIRE(_dependencyMap[9]), {
                style: [styles.content, contentStyle]
              })
            })
          })
        });
      }
    }]);
    return ElementBox;
  }(React.Component);
  var styles = _$$_REQUIRE(_dependencyMap[11]).create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)' // blue
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)' // green
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)' // orange
    }
  });
  /**
   * Resolves relative sizes (percentages and auto) in a style object.
   *
   * @param style the style to resolve
   * @return a modified copy
   */
  function resolveRelativeSizes(style) {
    var resolvedStyle = Object.assign({}, style);
    resolveSizeInPlace(resolvedStyle, 'top', 'height');
    resolveSizeInPlace(resolvedStyle, 'right', 'width');
    resolveSizeInPlace(resolvedStyle, 'bottom', 'height');
    resolveSizeInPlace(resolvedStyle, 'left', 'width');
    return resolvedStyle;
  }

  /**
   * Resolves the given size of a style object in place.
   *
   * @param style the style object to modify
   * @param direction the direction to resolve (e.g. 'top')
   * @param dimension the window dimension that this direction belongs to (e.g. 'height')
   */
  function resolveSizeInPlace(style, direction, dimension) {
    if (style[direction] !== null && typeof style[direction] === 'string') {
      if (style[direction].indexOf('%') !== -1) {
        // $FlowFixMe[prop-missing]
        style[direction] = parseFloat(style[direction]) / 100.0 * _$$_REQUIRE(_dependencyMap[12]).default.get('window')[dimension];
      }
      if (style[direction] === 'auto') {
        // Ignore auto sizing in frame drawing due to complexity of correctly rendering this
        // $FlowFixMe[prop-missing]
        style[direction] = 0;
      }
    }
  }
  module.exports = ElementBox;
},198,[194,5,6,13,15,12,153,157,199,156,202,196,183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * Resolve a style property into its component parts.
   *
   * For example:
   *
   *   > resolveProperties('margin', {margin: 5, marginBottom: 10})
   *   {top: 5, left: 5, right: 5, bottom: 10}
   *
   * If no parts exist, this returns null.
   */
  function resolveBoxStyle(prefix, style) {
    var hasParts = false;
    var result = {
      bottom: 0,
      left: 0,
      right: 0,
      top: 0
    };

    // TODO: Fix issues with multiple properties affecting the same side.

    var styleForAll = style[prefix];
    if (styleForAll != null) {
      for (var key of Object.keys(result)) {
        result[key] = styleForAll;
      }
      hasParts = true;
    }
    var styleForHorizontal = style[prefix + 'Horizontal'];
    if (styleForHorizontal != null) {
      result.left = styleForHorizontal;
      result.right = styleForHorizontal;
      hasParts = true;
    } else {
      var styleForLeft = style[prefix + 'Left'];
      if (styleForLeft != null) {
        result.left = styleForLeft;
        hasParts = true;
      }
      var styleForRight = style[prefix + 'Right'];
      if (styleForRight != null) {
        result.right = styleForRight;
        hasParts = true;
      }
      var styleForEnd = style[prefix + 'End'];
      if (styleForEnd != null) {
        var constants = _$$_REQUIRE(_dependencyMap[0]).getConstants();
        if (constants.isRTL && constants.doLeftAndRightSwapInRTL) {
          result.left = styleForEnd;
        } else {
          result.right = styleForEnd;
        }
        hasParts = true;
      }
      var styleForStart = style[prefix + 'Start'];
      if (styleForStart != null) {
        var _constants = _$$_REQUIRE(_dependencyMap[0]).getConstants();
        if (_constants.isRTL && _constants.doLeftAndRightSwapInRTL) {
          result.right = styleForStart;
        } else {
          result.left = styleForStart;
        }
        hasParts = true;
      }
    }
    var styleForVertical = style[prefix + 'Vertical'];
    if (styleForVertical != null) {
      result.bottom = styleForVertical;
      result.top = styleForVertical;
      hasParts = true;
    } else {
      var styleForBottom = style[prefix + 'Bottom'];
      if (styleForBottom != null) {
        result.bottom = styleForBottom;
        hasParts = true;
      }
      var styleForTop = style[prefix + 'Top'];
      if (styleForTop != null) {
        result.top = styleForTop;
        hasParts = true;
      }
    }
    return hasParts ? result : null;
  }
  module.exports = resolveBoxStyle;
},199,[200]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeI18nManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var i18nConstants = getI18nManagerConstants();
  function getI18nManagerConstants() {
    if (_NativeI18nManager.default) {
      var _NativeI18nManager$ge = _NativeI18nManager.default.getConstants(),
        isRTL = _NativeI18nManager$ge.isRTL,
        doLeftAndRightSwapInRTL = _NativeI18nManager$ge.doLeftAndRightSwapInRTL,
        localeIdentifier = _NativeI18nManager$ge.localeIdentifier;
      return {
        isRTL: isRTL,
        doLeftAndRightSwapInRTL: doLeftAndRightSwapInRTL,
        localeIdentifier: localeIdentifier
      };
    }
    return {
      isRTL: false,
      doLeftAndRightSwapInRTL: true
    };
  }
  module.exports = {
    getConstants: function getConstants() {
      return i18nConstants;
    },
    allowRTL: function allowRTL(shouldAllow) {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.allowRTL(shouldAllow);
    },
    forceRTL: function forceRTL(shouldForce) {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.forceRTL(shouldForce);
    },
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL(flipStyles) {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.swapLeftAndRightInRTL(flipStyles);
    },
    isRTL: i18nConstants.isRTL,
    doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL
  };
},200,[1,201]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('I18nManager');
},201,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _reactJsxRuntime = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);
  var _createClass = _$$_REQUIRE(_dependencyMap[2]);
  var _inherits = _$$_REQUIRE(_dependencyMap[3]);
  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);
  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var React = _$$_REQUIRE(_dependencyMap[6]);
  var BorderBox = /*#__PURE__*/function (_React$Component) {
    _inherits(BorderBox, _React$Component);
    var _super = _createSuper(BorderBox);
    function BorderBox() {
      _classCallCheck(this, BorderBox);
      return _super.apply(this, arguments);
    }
    _createClass(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        if (!box) {
          return this.props.children;
        }
        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return /*#__PURE__*/_reactJsxRuntime.jsx(_$$_REQUIRE(_dependencyMap[7]), {
          style: [style, this.props.style],
          children: this.props.children
        });
      }
    }]);
    return BorderBox;
  }(React.Component);
  module.exports = BorderBox;
},202,[194,5,6,13,15,12,153,156]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var React = _$$_REQUIRE(_dependencyMap[0]);
  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderers = findRenderers();
  function findRenderers() {
    var allRenderers = Array.from(hook.renderers.values());
    _$$_REQUIRE(_dependencyMap[1])(allRenderers.length >= 1, 'Expected to find at least one React Native renderer on DevTools hook.');
    return allRenderers;
  }
  module.exports = function getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, callback) {
    var shouldBreak = false;
    // Check all renderers for inspector data.
    for (var i = 0; i < renderers.length; i++) {
      var _renderer$rendererCon;
      if (shouldBreak) {
        break;
      }
      var renderer = renderers[i];
      if ((renderer == null ? undefined : (_renderer$rendererCon = renderer.rendererConfig) == null ? undefined : _renderer$rendererCon.getInspectorDataForViewAtPoint) != null) {
        renderer.rendererConfig.getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, function (viewData) {
          // Only return with non-empty view data since only one renderer will have this view.
          if (viewData && viewData.hierarchy.length > 0) {
            shouldBreak = callback(viewData);
          }
        });
      }
    }
  };
},203,[153,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = TraceUpdateOverlay;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _TraceUpdateOverlayNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var useEffect = React.useEffect,
    useRef = React.useRef,
    useState = React.useState;
  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var isNativeComponentReady = _Platform.default.OS === 'android' && _UIManager.default.hasViewManagerConfig('TraceUpdateOverlay');
  var devToolsAgent;
  function TraceUpdateOverlay() {
    var _useState = useState(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      overlayDisabled = _useState2[0],
      setOverlayDisabled = _useState2[1];
    // This effect is designed to be explicitly shown here to avoid re-subscribe from the same
    // overlay component.
    useEffect(function () {
      if (!isNativeComponentReady) {
        return;
      }
      function attachToDevtools(agent) {
        devToolsAgent = agent;
        agent.addListener('drawTraceUpdates', onAgentDrawTraceUpdates);
        agent.addListener('disableTraceUpdates', onAgentDisableTraceUpdates);
      }
      function subscribe() {
        hook == null ? undefined : hook.on('react-devtools', attachToDevtools);
        if (hook != null && hook.reactDevtoolsAgent) {
          attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
      function unsubscribe() {
        hook == null ? undefined : hook.off('react-devtools', attachToDevtools);
        var agent = devToolsAgent;
        if (agent != null) {
          agent.removeListener('drawTraceUpdates', onAgentDrawTraceUpdates);
          agent.removeListener('disableTraceUpdates', onAgentDisableTraceUpdates);
          devToolsAgent = null;
        }
      }
      function onAgentDrawTraceUpdates() {
        var nodesToDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        // If overlay is disabled before, now it's enabled.
        setOverlayDisabled(false);
        var newFramesToDraw = [];
        nodesToDraw.forEach(function (_ref) {
          var _ref2, _ref3;
          var node = _ref.node,
            color = _ref.color;
          // `canonical.publicInstance` => Fabric
          // TODO: remove this check when syncing the new version of the renderer from React to React Native.
          // `canonical` => Legacy Fabric
          // `node` => Legacy renderer
          var component = (_ref2 = (_ref3 = node.canonical && node.canonical.publicInstance) != null ? _ref3 : node.canonical) != null ? _ref2 : node;
          if (!component || !component.measure) {
            return;
          }
          var frameToDrawPromise = new Promise(function (resolve) {
            // The if statement here is to make flow happy
            if (component.measure) {
              // TODO(T145522797): We should refactor this to use `getBoundingClientRect` when Paper is no longer supported.
              component.measure(function (x, y, width, height, left, top) {
                resolve({
                  rect: {
                    left: left,
                    top: top,
                    width: width,
                    height: height
                  },
                  color: (0, _processColor.default)(color)
                });
              });
            }
          });
          newFramesToDraw.push(frameToDrawPromise);
        });
        Promise.all(newFramesToDraw).then(function (results) {
          if (nativeComponentRef.current != null) {
            _TraceUpdateOverlayNativeComponent.Commands.draw(nativeComponentRef.current, JSON.stringify(results.filter(function (_ref4) {
              var rect = _ref4.rect,
                color = _ref4.color;
              return rect.width >= 0 && rect.height >= 0;
            })));
          }
        }, function (err) {
          console.error(`Failed to measure updated traces. Error: ${err}`);
        });
      }
      function onAgentDisableTraceUpdates() {
        // When trace updates are disabled from the backend, we won't receive draw events until it's enabled by the next draw. We can safely remove the overlay as it's not needed now.
        setOverlayDisabled(true);
      }
      subscribe();
      return unsubscribe;
    }, []); // Only run once when the overlay initially rendered

    var nativeComponentRef = useRef(null);
    return !overlayDisabled && isNativeComponentReady && /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
      pointerEvents: "none",
      style: styles.overlay,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TraceUpdateOverlayNativeComponent.default, {
        ref: nativeComponentRef,
        style: styles.overlay
      })
    });
  }
  var styles = _StyleSheet.default.create({
    overlay: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    }
  });
},204,[1,26,42,164,196,21,156,205,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var nativeComponentName = 'TraceUpdateOverlay';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'TraceUpdateOverlay',
    validAttributes: {}
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[4]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var Commands = exports.Commands = {
    draw: function draw(ref, overlays) {
      _$$_REQUIRE(_dependencyMap[5]).dispatchCommand(ref, "draw", [overlays]);
    }
  };
},205,[1,193,206,153,160,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _requireNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  // TODO: move this file to shims/ReactNative (requires React update and sync)

  // TODO: import from CodegenSchema once workspaces are enabled

  // If this function runs then that means the view configs were not
  // generated at build time using `GenerateViewConfigJs.js`. Thus
  // we need to `requireNativeComponent` to get the view configs from view managers.
  // `requireNativeComponent` is not available in Bridgeless mode.
  // e.g. This function runs at runtime if `codegenNativeComponent` was not called
  // from a file suffixed with NativeComponent.js.
  function codegenNativeComponent(componentName, options) {
    if (global.RN$Bridgeless === true) {
      var errorMessage = "Native Component '" + componentName + "' that calls codegenNativeComponent was not code generated at build time. Please check its definition.";
      console.error(errorMessage);
    }
    var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
    if (options != null && options.paperComponentNameDeprecated != null) {
      if (_UIManager.default.hasViewManagerConfig(componentName)) {
        componentNameInUse = componentName;
      } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
        // $FlowFixMe[incompatible-type]
        componentNameInUse = options.paperComponentNameDeprecated;
      } else {
        var _options$paperCompone;
        throw new Error(`Failed to find native component for either ${componentName} or ${(_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'}`);
      }
    }
    return (0, _requireNativeComponent.default)(
    // $FlowFixMe[incompatible-call]
    componentNameInUse);
  }
  var _default = exports.default = codegenNativeComponent;
},206,[1,207,42]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /**
   * Creates values that can be used like React components which represent native
   * view managers. You should create JavaScript modules that wrap these values so
   * that the results are memoized. Example:
   *
   *   const View = requireNativeComponent('RCTView');
   *
   */

  var requireNativeComponent = function requireNativeComponent(uiViewClassName) {
    return _$$_REQUIRE(_dependencyMap[0])(uiViewClassName, function () {
      return _$$_REQUIRE(_dependencyMap[1])(uiViewClassName);
    });
  };
  var _default = exports.default = requireNativeComponent;
},207,[208,161]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @noformat
   * 
   * @nolint
   * @generated SignedSource<<ede54ac2fa1b9a09e234cdf098048989>>
   */

  'use strict';

  var register = _$$_REQUIRE(_dependencyMap[0]).ReactNativeViewConfigRegistry.register;

  /**
   * Creates a renderable ReactNative host component.
   * Use this method for view configs that are loaded from UIManager.
   * Use createReactNativeComponentClass() for view configs defined within JavaScript.
   *
   * @param {string} config iOS View configuration.
   * @private
   */
  var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
    return register(name, callback);
  };
  module.exports = createReactNativeComponentClass;
},208,[209]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  // flowlint unsafe-getters-setters:off
  module.exports = {
    get BatchedBridge() {
      return _$$_REQUIRE(_dependencyMap[0]);
    },
    get ExceptionsManager() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },
    get Platform() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },
    get RCTEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },
    get ReactNativeViewConfigRegistry() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },
    get TextInputState() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },
    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[6]);
    },
    // TODO: Remove when React has migrated to `createAttributePayload` and `diffAttributePayloads`
    get deepDiffer() {
      return _$$_REQUIRE(_dependencyMap[7]);
    },
    get deepFreezeAndThrowOnMutationInDev() {
      return _$$_REQUIRE(_dependencyMap[8]);
    },
    // TODO: Remove when React has migrated to `createAttributePayload` and `diffAttributePayloads`
    get flattenStyle() {
      // $FlowFixMe[underconstrained-implicit-instantiation]
      // $FlowFixMe[incompatible-return]
      return _$$_REQUIRE(_dependencyMap[9]);
    },
    get ReactFiberErrorDialog() {
      return _$$_REQUIRE(_dependencyMap[10]).default;
    },
    get legacySendAccessibilityEvent() {
      return _$$_REQUIRE(_dependencyMap[11]);
    },
    get RawEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[12]).default;
    },
    get CustomEvent() {
      return _$$_REQUIRE(_dependencyMap[13]).default;
    },
    get createAttributePayload() {
      return _$$_REQUIRE(_dependencyMap[14]).create;
    },
    get diffAttributePayloads() {
      return _$$_REQUIRE(_dependencyMap[14]).diff;
    },
    get createPublicInstance() {
      return _$$_REQUIRE(_dependencyMap[15]).createPublicInstance;
    },
    get createPublicTextInstance() {
      return _$$_REQUIRE(_dependencyMap[15]).createPublicTextInstance;
    },
    get getNativeTagFromPublicInstance() {
      return _$$_REQUIRE(_dependencyMap[15]).getNativeTagFromPublicInstance;
    },
    get getNodeFromPublicInstance() {
      return _$$_REQUIRE(_dependencyMap[15]).getNodeFromPublicInstance;
    }
  };
},209,[32,75,21,210,186,211,42,213,214,157,215,41,216,217,219,220]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      if (global.RN$Bridgeless) {
        global.RN$registerCallableModule('RCTEventEmitter', function () {
          return eventEmitter;
        });
      } else {
        _$$_REQUIRE(_dependencyMap[0]).registerCallableModule('RCTEventEmitter', eventEmitter);
      }
    }
  };
  module.exports = RCTEventEmitter;
},210,[32]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  // This class is responsible for coordinating the "focused" state for
  // TextInputs. All calls relating to the keyboard should be funneled
  // through here.

  var React = _$$_REQUIRE(_dependencyMap[0]);
  var currentlyFocusedInputRef = null;
  var inputs = new Set();
  function currentlyFocusedInput() {
    return currentlyFocusedInputRef;
  }

  /**
   * Returns the ID of the currently focused text field, if one exists
   * If no text field is focused it returns null
   */
  function currentlyFocusedField() {
    return _$$_REQUIRE(_dependencyMap[1]).findNodeHandle(currentlyFocusedInputRef);
  }
  function focusInput(textField) {
    if (currentlyFocusedInputRef !== textField && textField != null) {
      currentlyFocusedInputRef = textField;
    }
  }
  function blurInput(textField) {
    if (currentlyFocusedInputRef === textField && textField != null) {
      currentlyFocusedInputRef = null;
    }
  }
  function focusField(textFieldID) {
    return;
  }
  function blurField(textFieldID) {
    return;
  }

  /**
   * @param {number} TextInputID id of the text field to focus
   * Focuses the specified text field
   * noop if the text field was already focused or if the field is not editable
   */
  function focusTextInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    if (textField != null) {
      var _textField$currentPro;
      var fieldCanBeFocused = currentlyFocusedInputRef !== textField &&
      // $FlowFixMe - `currentProps` is missing in `NativeMethods`
      ((_textField$currentPro = textField.currentProps) == null ? undefined : _textField$currentPro.editable) !== false;
      if (!fieldCanBeFocused) {
        return;
      }
      focusInput(textField);
      {
        _$$_REQUIRE(_dependencyMap[2]).Commands.focus(textField);
      }
    }
  }

  /**
   * @param {number} textFieldID id of the text field to unfocus
   * Unfocuses the specified text field
   * noop if it wasn't focused
   */
  function blurTextInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    if (currentlyFocusedInputRef === textField && textField != null) {
      blurInput(textField);
      {
        _$$_REQUIRE(_dependencyMap[2]).Commands.blur(textField);
      }
    }
  }
  function registerInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    inputs.add(textField);
  }
  function unregisterInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    inputs.delete(textField);
  }
  function isTextInput(textField) {
    if (typeof textField === 'number') {
      return false;
    }
    return inputs.has(textField);
  }
  module.exports = {
    currentlyFocusedInput: currentlyFocusedInput,
    focusInput: focusInput,
    blurInput: blurInput,
    currentlyFocusedField: currentlyFocusedField,
    focusField: focusField,
    blurField: blurField,
    focusTextInput: focusTextInput,
    blurTextInput: blurTextInput,
    registerInput: registerInput,
    unregisterInput: unregisterInput,
    isTextInput: isTextInput
  };
},211,[153,52,212]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidTextInput',
    bubblingEventTypes: {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTextInput: {
        phasedRegistrationNames: {
          bubbled: 'onTextInput',
          captured: 'onTextInputCapture'
        }
      }
    },
    directEventTypes: {
      topScroll: {
        registrationName: 'onScroll'
      }
    },
    validAttributes: {
      maxFontSizeMultiplier: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      autoFocus: true,
      placeholder: true,
      inlineImagePadding: true,
      contextMenuHidden: true,
      textShadowColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      maxLength: true,
      selectTextOnFocus: true,
      textShadowRadius: true,
      underlineColorAndroid: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      textDecorationLine: true,
      submitBehavior: true,
      textAlignVertical: true,
      fontStyle: true,
      textShadowOffset: true,
      selectionColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      placeholderTextColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      importantForAutofill: true,
      lineHeight: true,
      textTransform: true,
      returnKeyType: true,
      keyboardType: true,
      multiline: true,
      color: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      autoComplete: true,
      numberOfLines: true,
      letterSpacing: true,
      returnKeyLabel: true,
      fontSize: true,
      onKeyPress: true,
      cursorColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      text: true,
      showSoftInputOnFocus: true,
      textAlign: true,
      autoCapitalize: true,
      autoCorrect: true,
      caretHidden: true,
      secureTextEntry: true,
      textBreakStrategy: true,
      onScroll: true,
      onContentSizeChange: true,
      disableFullscreenUI: true,
      includeFontPadding: true,
      fontWeight: true,
      fontFamily: true,
      allowFontScaling: true,
      onSelectionChange: true,
      mostRecentEventCount: true,
      inlineImageLeft: true,
      editable: true,
      fontVariant: true,
      borderBottomRightRadius: true,
      borderBottomColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      borderRadius: true,
      borderRightColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      borderTopRightRadius: true,
      borderStyle: true,
      borderBottomLeftRadius: true,
      borderLeftColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      borderTopLeftRadius: true,
      borderTopColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      }
    }
  };
  var AndroidTextInputNativeComponent = NativeComponentRegistry.get('AndroidTextInput', function () {
    return __INTERNAL_VIEW_CONFIG;
  });

  // flowlint-next-line unclear-type:off
  var _default = exports.default = AndroidTextInputNativeComponent;
},212,[1,160,193,164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var logListeners;
  function unstable_setLogListeners(listeners) {
    logListeners = listeners;
  }

  /*
   * @returns {bool} true if different, false if equal
   */
  var deepDiffer = function deepDiffer(one, two) {
    var maxDepthOrOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
    var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
    var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
    var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
    if (maxDepth === 0) {
      return true;
    }
    if (one === two) {
      // Short circuit on identical object references instead of traversing them.
      return false;
    }
    if (typeof one === 'function' && typeof two === 'function') {
      // We consider all functions equal unless explicitly configured otherwise
      var unsafelyIgnoreFunctions = options == null ? undefined : options.unsafelyIgnoreFunctions;
      if (unsafelyIgnoreFunctions == null) {
        if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
          logListeners.onDifferentFunctionsIgnored(one.name, two.name);
        }
        unsafelyIgnoreFunctions = true;
      }
      return !unsafelyIgnoreFunctions;
    }
    if (typeof one !== 'object' || one === null) {
      // Primitives can be directly compared
      return one !== two;
    }
    if (typeof two !== 'object' || two === null) {
      // We know they are different because the previous case would have triggered
      // otherwise.
      return true;
    }
    if (one.constructor !== two.constructor) {
      return true;
    }
    if (Array.isArray(one)) {
      // We know two is also an array because the constructors are equal
      var len = one.length;
      if (two.length !== len) {
        return true;
      }
      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
          return true;
        }
      }
      for (var twoKey in two) {
        // The only case we haven't checked yet is keys that are in two but aren't
        // in one, which means they are different.
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }
    return false;
  };
  deepDiffer.unstable_setLogListeners = unstable_setLogListeners;
  module.exports = deepDiffer;
},213,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * If your application is accepting different values for the same field over
   * time and is doing a diff on them, you can either (1) create a copy or
   * (2) ensure that those values are not mutated behind two passes.
   * This function helps you with (2) by freezing the object and throwing if
   * the user subsequently modifies the value.
   *
   * There are two caveats with this function:
   *   - If the call site is not in strict mode, it will only throw when
   *     mutating existing fields, adding a new one
   *     will unfortunately fail silently :(
   *   - If the object is already frozen or sealed, it will not continue the
   *     deep traversal and will leave leaf nodes unfrozen.
   *
   * Freezing the object and adding the throw mechanism is expensive and will
   * only be used in DEV.
   */
  function deepFreezeAndThrowOnMutationInDev(object) {
    return object;
  }

  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */

  module.exports = deepFreezeAndThrowOnMutationInDev;
},214,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var ReactFiberErrorDialog = {
    /**
     * Intercept lifecycle errors and ensure they are shown with the correct stack
     * trace within the native redbox component.
     */
    showErrorDialog: function showErrorDialog(_ref) {
      var componentStack = _ref.componentStack,
        errorValue = _ref.error;
      var error;

      // Typically, `errorValue` should be an error. However, other values such as
      // strings (or even null) are sometimes thrown.
      if (errorValue instanceof Error) {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
         * this parameters */
        error = errorValue;
      } else if (typeof errorValue === 'string') {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
         * this parameters */
        error = new (_$$_REQUIRE(_dependencyMap[0]).SyntheticError)(errorValue);
      } else {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
         * this parameters */
        error = new (_$$_REQUIRE(_dependencyMap[0]).SyntheticError)('Unspecified error');
      }
      try {
        error.componentStack = componentStack;
        error.isComponentError = true;
      } catch (_unused) {
        // Ignored.
      }
      (0, _$$_REQUIRE(_dependencyMap[0]).handleException)(error, false);

      // Return false here to prevent ReactFiberErrorLogger default behavior of
      // logging error details to console.error. Calls to console.error are
      // automatically routed to the native redbox controller, which we've already
      // done above by calling ExceptionsManager.
      return false;
    }
  };
  var _default = exports.default = ReactFiberErrorDialog;
},215,[75]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var RawEventEmitter = new _EventEmitter.default();

  // See the React renderer / react repo for how this is used.
  // Raw events are emitted here when they are received in JS
  // and before any event Plugins process them or before components
  // have a chance to respond to them. This allows you to implement
  // app-specific perf monitoring, which is unimplemented by default,
  // making this entire RawEventEmitter do nothing by default until
  // *you* add listeners for your own app.
  // Besides perf monitoring and maybe debugging, this RawEventEmitter
  // should not be used.
  var _default = exports.default = RawEventEmitter;
},216,[1,17]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _EventPolyfill2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */ // Make sure global Event is defined
  var CustomEvent = /*#__PURE__*/function (_EventPolyfill) {
    (0, _inherits2.default)(CustomEvent, _EventPolyfill);
    var _super = _createSuper(CustomEvent);
    function CustomEvent(typeArg, options) {
      var _this;
      (0, _classCallCheck2.default)(this, CustomEvent);
      var bubbles = options.bubbles,
        cancelable = options.cancelable,
        composed = options.composed;
      _this = _super.call(this, typeArg, {
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed
      });
      _this.detail = options.detail; // this would correspond to `NativeEvent` in SyntheticEvent
      return _this;
    }
    return (0, _createClass2.default)(CustomEvent);
  }(_EventPolyfill2.default);
  var _default = exports.default = CustomEvent;
},217,[1,6,5,13,15,12,218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  // https://dom.spec.whatwg.org/#dictdef-eventinit
  /**
   * This is a copy of the Event interface defined in Flow:
   * https://github.com/facebook/flow/blob/741104e69c43057ebd32804dd6bcc1b5e97548ea/lib/dom.js
   * which is itself a faithful interface of the W3 spec:
   * https://dom.spec.whatwg.org/#interface-event
   *
   * Since Flow assumes that Event is provided and is on the global object,
   * we must provide an implementation of Event for CustomEvent (and future
   * alignment of React Native's event system with the W3 spec).
   */
  var EventPolyfill = /*#__PURE__*/function () {
    // Non-standard. See `composed` instead.

    // https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase

    // TODO: nullable
    // TODO: nullable
    /** @deprecated */
    // TODO: nullable

    // React Native-specific: proxy data to a SyntheticEvent when
    // certain methods are called.
    // SyntheticEvent will also have a reference to this instance -
    // it is circular - and both classes use this reference to keep
    // data with the other in sync.

    function EventPolyfill(type, eventInitDict) {
      (0, _classCallCheck2.default)(this, EventPolyfill);
      this.type = type;
      this.bubbles = !!(eventInitDict != null && eventInitDict.bubbles || false);
      this.cancelable = !!(eventInitDict != null && eventInitDict.cancelable || false);
      this.composed = !!(eventInitDict != null && eventInitDict.composed || false);
      this.scoped = !!(eventInitDict != null && eventInitDict.scoped || false);

      // TODO: somehow guarantee that only "private" instantiations of Event
      // can set this to true
      this.isTrusted = false;

      // TODO: in the future we'll want to make sure this has the same
      // time-basis as events originating from native
      this.timeStamp = Date.now();
      this.defaultPrevented = false;

      // https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase
      this.NONE = 0;
      this.AT_TARGET = 1;
      this.BUBBLING_PHASE = 2;
      this.CAPTURING_PHASE = 3;
      this.eventPhase = this.NONE;

      // $FlowFixMe
      this.currentTarget = null;
      // $FlowFixMe
      this.target = null;
      // $FlowFixMe
      this.srcElement = null;
    }
    (0, _createClass2.default)(EventPolyfill, [{
      key: "composedPath",
      value: function composedPath() {
        throw new Error('TODO: not yet implemented');
      }
    }, {
      key: "preventDefault",
      value: function preventDefault() {
        this.defaultPrevented = true;
        if (this._syntheticEvent != null) {
          // $FlowFixMe
          this._syntheticEvent.preventDefault();
        }
      }
    }, {
      key: "initEvent",
      value: function initEvent(type, bubbles, cancelable) {
        throw new Error('TODO: not yet implemented. This method is also deprecated.');
      }
    }, {
      key: "stopImmediatePropagation",
      value: function stopImmediatePropagation() {
        throw new Error('TODO: not yet implemented');
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        if (this._syntheticEvent != null) {
          // $FlowFixMe
          this._syntheticEvent.stopPropagation();
        }
      }
    }, {
      key: "setSyntheticEvent",
      value: function setSyntheticEvent(value) {
        this._syntheticEvent = value;
      }
    }]);
    return EventPolyfill;
  }(); // Assertion magic for polyfill follows.
  // eslint-disable-line no-unused-vars

  /*::
  // This can be a strict mode error at runtime so put it in a Flow comment.
  (checkEvent: IEvent);
  */

  global.Event = EventPolyfill;
  var _default = exports.default = EventPolyfill;
},218,[1,5,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.diff = diff;
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _deepDiffer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var emptyObject = {};

  /**
   * Create a payload that contains all the updates between two sets of props.
   *
   * These helpers are all encapsulated into a single module, because they use
   * mutation as a performance optimization which leads to subtle shared
   * dependencies between the code paths. To avoid this mutable state leaking
   * across modules, I've kept them isolated to this module.
   */

  // Tracks removed keys
  var removedKeys = null;
  var removedKeyCount = 0;
  var deepDifferOptions = {
    unsafelyIgnoreFunctions: true
  };
  function defaultDiffer(prevProp, nextProp) {
    if (typeof nextProp !== 'object' || nextProp === null) {
      // Scalars have already been checked for equality
      return true;
    } else {
      // For objects and arrays, the default diffing algorithm is a deep compare
      return (0, _deepDiffer.default)(prevProp, nextProp, deepDifferOptions);
    }
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) {
      var i = node.length;
      while (i-- && removedKeyCount > 0) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
      }
    } else if (node && removedKeyCount > 0) {
      var obj = node;
      for (var propKey in removedKeys) {
        // $FlowFixMe[incompatible-use] found when upgrading Flow
        if (!removedKeys[propKey]) {
          continue;
        }
        var nextProp = obj[propKey];
        if (nextProp === undefined) {
          continue;
        }
        var attributeConfig = validAttributes[propKey];
        if (!attributeConfig) {
          continue; // not a valid native prop
        }
        if (typeof nextProp === 'function') {
          // $FlowFixMe[incompatible-type] found when upgrading Flow
          nextProp = true;
        }
        if (typeof nextProp === 'undefined') {
          // $FlowFixMe[incompatible-type] found when upgrading Flow
          nextProp = null;
        }
        if (typeof attributeConfig !== 'object') {
          // case: !Object is the default case
          updatePayload[propKey] = nextProp;
        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
          // case: CustomAttributeConfiguration
          var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
          updatePayload[propKey] = nextValue;
        }
        // $FlowFixMe[incompatible-use] found when upgrading Flow
        removedKeys[propKey] = false;
        removedKeyCount--;
      }
    }
  }
  function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    var i;
    for (i = 0; i < minLength; i++) {
      // Diff any items in the array in the forward direction. Repeated keys
      // will be overwritten by later values.
      updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }
    for (; i < prevArray.length; i++) {
      // Clear out all remaining properties.
      updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }
    for (; i < nextArray.length; i++) {
      // Add all remaining properties.
      updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }
    return updatePayload;
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) {
      // If no properties have been added, then we can bail out quickly on object
      // equality.
      return updatePayload;
    }
    if (!prevProp || !nextProp) {
      if (nextProp) {
        return addNestedProperty(updatePayload, nextProp, validAttributes);
      }
      if (prevProp) {
        return clearNestedProperty(updatePayload, prevProp, validAttributes);
      }
      return updatePayload;
    }
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
      // Both are leaves, we can diff the leaves.
      return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    }
    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      // Both are arrays, we can diff the arrays.
      return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
    }
    if (Array.isArray(prevProp)) {
      return diffProperties(updatePayload,
      // $FlowFixMe - We know that this is always an object when the input is.
      (0, _flattenStyle.default)(prevProp),
      // $FlowFixMe - We know that this isn't an array because of above flow.
      nextProp, validAttributes);
    }
    return diffProperties(updatePayload, prevProp,
    // $FlowFixMe - We know that this is always an object when the input is.
    (0, _flattenStyle.default)(nextProp), validAttributes);
  }

  /**
   * addNestedProperty takes a single set of props and valid attribute
   * attribute configurations. It processes each prop and adds it to the
   * updatePayload.
   */
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) {
      return updatePayload;
    }
    if (!Array.isArray(nextProp)) {
      // Add each property of the leaf.
      return addProperties(updatePayload, nextProp, validAttributes);
    }
    for (var i = 0; i < nextProp.length; i++) {
      // Add all the properties of the array.
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }
    return updatePayload;
  }

  /**
   * clearNestedProperty takes a single set of props and valid attributes. It
   * adds a null sentinel to the updatePayload, for each prop key.
   */
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) {
      return updatePayload;
    }
    if (!Array.isArray(prevProp)) {
      // Add each property of the leaf.
      return clearProperties(updatePayload, prevProp, validAttributes);
    }
    for (var i = 0; i < prevProp.length; i++) {
      // Add all the properties of the array.
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }
    return updatePayload;
  }

  /**
   * diffProperties takes two sets of props and a set of valid attributes
   * and write to updatePayload the values that changed or were deleted.
   * If no updatePayload is provided, a new one is created and returned if
   * anything changed.
   */
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig;
    var nextProp;
    var prevProp;
    for (var propKey in nextProps) {
      attributeConfig = validAttributes[propKey];
      if (!attributeConfig) {
        continue; // not a valid native prop
      }
      prevProp = prevProps[propKey];
      nextProp = nextProps[propKey];

      // functions are converted to booleans as markers that the associated
      // events should be sent from native.
      if (typeof nextProp === 'function') {
        nextProp = true;
        // If nextProp is not a function, then don't bother changing prevProp
        // since nextProp will win and go into the updatePayload regardless.
        if (typeof prevProp === 'function') {
          prevProp = true;
        }
      }

      // An explicit value of undefined is treated as a null because it overrides
      // any other preceding value.
      if (typeof nextProp === 'undefined') {
        nextProp = null;
        if (typeof prevProp === 'undefined') {
          prevProp = null;
        }
      }
      if (removedKeys) {
        removedKeys[propKey] = false;
      }
      if (updatePayload && updatePayload[propKey] !== undefined) {
        // Something else already triggered an update to this key because another
        // value diffed. Since we're now later in the nested arrays our value is
        // more important so we need to calculate it and override the existing
        // value. It doesn't matter if nothing changed, we'll set it anyway.

        // Pattern match on: attributeConfig
        if (typeof attributeConfig !== 'object') {
          // case: !Object is the default case
          updatePayload[propKey] = nextProp;
        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
          // case: CustomAttributeConfiguration
          var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
          updatePayload[propKey] = nextValue;
        }
        continue;
      }
      if (prevProp === nextProp) {
        continue; // nothing changed
      }

      // Pattern match on: attributeConfig
      if (typeof attributeConfig !== 'object') {
        // case: !Object is the default case
        if (defaultDiffer(prevProp, nextProp)) {
          // a normal leaf has changed
          (updatePayload || (updatePayload = {}))[propKey] = nextProp;
        }
      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        // case: CustomAttributeConfiguration
        var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === 'function' ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
        if (shouldUpdate) {
          var _nextValue = typeof attributeConfig.process === 'function' ?
          // $FlowFixMe[incompatible-use] found when upgrading Flow
          attributeConfig.process(nextProp) : nextProp;
          (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
        }
      } else {
        // default: fallthrough case when nested properties are defined
        removedKeys = null;
        removedKeyCount = 0;
        // We think that attributeConfig is not CustomAttributeConfiguration at
        // this point so we assume it must be AttributeConfiguration.
        updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);
        if (removedKeyCount > 0 && updatePayload) {
          restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
          removedKeys = null;
        }
      }
    }

    // Also iterate through all the previous props to catch any that have been
    // removed and make sure native gets the signal so it can reset them to the
    // default.
    for (var _propKey in prevProps) {
      if (nextProps[_propKey] !== undefined) {
        continue; // we've already covered this key in the previous pass
      }
      attributeConfig = validAttributes[_propKey];
      if (!attributeConfig) {
        continue; // not a valid native prop
      }
      if (updatePayload && updatePayload[_propKey] !== undefined) {
        // This was already updated to a diff result earlier.
        continue;
      }
      prevProp = prevProps[_propKey];
      if (prevProp === undefined) {
        continue; // was already empty anyway
      }
      // Pattern match on: attributeConfig
      if (typeof attributeConfig !== 'object' || typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        // case: CustomAttributeConfiguration | !Object
        // Flag the leaf property for removal by sending a sentinel.
        (updatePayload || (updatePayload = {}))[_propKey] = null;
        if (!removedKeys) {
          removedKeys = {};
        }
        if (!removedKeys[_propKey]) {
          removedKeys[_propKey] = true;
          removedKeyCount++;
        }
      } else {
        // default:
        // This is a nested attribute configuration where all the properties
        // were removed so we need to go through and clear out all of them.
        updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
      }
    }
    return updatePayload;
  }

  /**
   * addProperties adds all the valid props to the payload after being processed.
   */
  function addProperties(updatePayload, props, validAttributes) {
    // TODO: Fast path
    return diffProperties(updatePayload, emptyObject, props, validAttributes);
  }

  /**
   * clearProperties clears all the previous props by adding a null sentinel
   * to the payload for each valid key.
   */
  function clearProperties(updatePayload, prevProps, validAttributes) {
    // TODO: Fast path
    return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
  }
  function create(props, validAttributes) {
    return addProperties(null,
    // updatePayload
    props, validAttributes);
  }
  function diff(prevProps, nextProps, validAttributes) {
    return diffProperties(null,
    // updatePayload
    prevProps, nextProps, validAttributes);
  }
},219,[1,157,213]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPublicInstance = createPublicInstance;
  exports.createPublicTextInstance = createPublicTextInstance;
  exports.getNativeTagFromPublicInstance = getNativeTagFromPublicInstance;
  exports.getNodeFromPublicInstance = getNodeFromPublicInstance;
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  // Lazy loaded to avoid evaluating the module when using the legacy renderer.
  var PublicInstanceClass;
  var ReadOnlyTextClass;

  // Lazy loaded to avoid evaluating the module when using the legacy renderer.
  var ReactFabric;
  function createPublicInstance(tag, viewConfig, internalInstanceHandle) {
    if (PublicInstanceClass == null) {
      // We don't use inline requires in react-native, so this forces lazy loading
      // the right module to avoid eagerly loading both.
      if (_ReactNativeFeatureFlags.default.enableAccessToHostTreeInFabric()) {
        PublicInstanceClass = _$$_REQUIRE(_dependencyMap[2]).default;
      } else {
        PublicInstanceClass = _$$_REQUIRE(_dependencyMap[3]).default;
      }
    }
    return new PublicInstanceClass(tag, viewConfig, internalInstanceHandle);
  }
  function createPublicTextInstance(internalInstanceHandle) {
    if (ReadOnlyTextClass == null) {
      ReadOnlyTextClass = _$$_REQUIRE(_dependencyMap[4]).default;
    }
    return new ReadOnlyTextClass(internalInstanceHandle);
  }
  function getNativeTagFromPublicInstance(publicInstance) {
    return publicInstance.__nativeTag;
  }
  function getNodeFromPublicInstance(publicInstance) {
    // Avoid loading ReactFabric if using an instance from the legacy renderer.
    if (publicInstance.__internalInstanceHandle == null) {
      return null;
    }
    if (ReactFabric == null) {
      ReactFabric = _$$_REQUIRE(_dependencyMap[5]);
    }
    return ReactFabric.getNodeFromInternalInstanceHandle(publicInstance.__internalInstanceHandle);
  }
},220,[1,108,221,229,230,54]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _TextInputState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _warnForStyleProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _ReadOnlyElement2 = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));
  var _ReadOnlyNode = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */ // flowlint unsafe-getters-setters:off
  var noop = function noop() {};
  var ReactNativeElement = exports.default = /*#__PURE__*/function (_ReadOnlyElement) {
    (0, _inherits2.default)(ReactNativeElement, _ReadOnlyElement);
    var _super = _createSuper(ReactNativeElement);
    // These need to be accessible from `ReactFabricPublicInstanceUtils`.

    function ReactNativeElement(tag, viewConfig, internalInstanceHandle) {
      var _this;
      (0, _classCallCheck2.default)(this, ReactNativeElement);
      _this = _super.call(this, internalInstanceHandle);
      _this.__nativeTag = tag;
      _this.__internalInstanceHandle = internalInstanceHandle;
      _this._viewConfig = viewConfig;
      return _this;
    }
    (0, _createClass2.default)(ReactNativeElement, [{
      key: "offsetHeight",
      get: function get() {
        return Math.round((0, _ReadOnlyElement2.getBoundingClientRect)(this, {
          includeTransform: false
        }).height);
      }
    }, {
      key: "offsetLeft",
      get: function get() {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          var offset = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[11]).getFabricUIManager)()).getOffset(node);
          if (offset != null) {
            return Math.round(offset[2]);
          }
        }
        return 0;
      }
    }, {
      key: "offsetParent",
      get: function get() {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          var offset = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[11]).getFabricUIManager)()).getOffset(node);
          // For children of the root node we currently return offset data
          // but a `null` parent because the root node is not accessible
          // in JavaScript yet.
          if (offset != null && offset[0] != null) {
            var offsetParentInstanceHandle = offset[0];
            var offsetParent = (0, _ReadOnlyNode.getPublicInstanceFromInternalInstanceHandle)(offsetParentInstanceHandle);
            // $FlowExpectedError[incompatible-type] The value returned by `getOffset` is always an instance handle for `ReadOnlyElement`.
            var offsetParentElement = offsetParent;
            return offsetParentElement;
          }
        }
        return null;
      }
    }, {
      key: "offsetTop",
      get: function get() {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          var offset = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[11]).getFabricUIManager)()).getOffset(node);
          if (offset != null) {
            return Math.round(offset[1]);
          }
        }
        return 0;
      }
    }, {
      key: "offsetWidth",
      get: function get() {
        return Math.round((0, _ReadOnlyElement2.getBoundingClientRect)(this, {
          includeTransform: false
        }).width);
      }

      /**
       * React Native compatibility methods
       */
    }, {
      key: "blur",
      value: function blur() {
        // $FlowFixMe[incompatible-exact] Migrate all usages of `NativeMethods` to an interface to fix this.
        _TextInputState.default.blurTextInput(this);
      }
    }, {
      key: "focus",
      value: function focus() {
        // $FlowFixMe[incompatible-exact] Migrate all usages of `NativeMethods` to an interface to fix this.
        _TextInputState.default.focusTextInput(this);
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[11]).getFabricUIManager)()).measure(node, callback);
        }
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[11]).getFabricUIManager)()).measureInWindow(node, callback);
        }
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        if (!(relativeToNativeNode instanceof _ReadOnlyNode.default)) {
          return;
        }
        var toStateNode = (0, _ReadOnlyNode.getShadowNode)(this);
        var fromStateNode = (0, _ReadOnlyNode.getShadowNode)(relativeToNativeNode);
        if (toStateNode != null && fromStateNode != null) {
          (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[11]).getFabricUIManager)()).measureLayout(toStateNode, fromStateNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        var updatePayload = (0, _$$_REQUIRE(_dependencyMap[12]).create)(nativeProps, this._viewConfig.validAttributes);
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null && updatePayload != null) {
          (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[11]).getFabricUIManager)()).setNativeProps(node, updatePayload);
        }
      }
    }]);
    return ReactNativeElement;
  }(_ReadOnlyElement2.default);
},221,[1,5,6,13,15,12,211,222,223,224,43,49,219]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = warnForStyleProps;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  function warnForStyleProps(props, validAttributes) {}
},222,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.getBoundingClientRect = _getBoundingClientRect;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _DOMRect = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _ReadOnlyNode2 = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */ // flowlint unsafe-getters-setters:off
  var ReadOnlyElement = exports.default = /*#__PURE__*/function (_ReadOnlyNode) {
    (0, _inherits2.default)(ReadOnlyElement, _ReadOnlyNode);
    var _super = _createSuper(ReadOnlyElement);
    function ReadOnlyElement() {
      (0, _classCallCheck2.default)(this, ReadOnlyElement);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(ReadOnlyElement, [{
      key: "childElementCount",
      get: function get() {
        return getChildElements(this).length;
      }
    }, {
      key: "children",
      get: function get() {
        return (0, _$$_REQUIRE(_dependencyMap[9]).createHTMLCollection)(getChildElements(this));
      }
    }, {
      key: "clientHeight",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var innerSize = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getInnerSize(node);
          if (innerSize != null) {
            return innerSize[1];
          }
        }
        return 0;
      }
    }, {
      key: "clientLeft",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var borderSize = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getBorderSize(node);
          if (borderSize != null) {
            return borderSize[3];
          }
        }
        return 0;
      }
    }, {
      key: "clientTop",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var borderSize = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getBorderSize(node);
          if (borderSize != null) {
            return borderSize[0];
          }
        }
        return 0;
      }
    }, {
      key: "clientWidth",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var innerSize = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getInnerSize(node);
          if (innerSize != null) {
            return innerSize[0];
          }
        }
        return 0;
      }
    }, {
      key: "firstElementChild",
      get: function get() {
        var childElements = getChildElements(this);
        if (childElements.length === 0) {
          return null;
        }
        return childElements[0];
      }
    }, {
      key: "id",
      get: function get() {
        var _instanceHandle$state, _instanceHandle$state2, _ref, _props$id;
        var instanceHandle = (0, _ReadOnlyNode2.getInstanceHandle)(this);
        // TODO: migrate off this private React API
        // $FlowExpectedError[incompatible-use]
        var props = instanceHandle == null ? undefined : (_instanceHandle$state = instanceHandle.stateNode) == null ? undefined : (_instanceHandle$state2 = _instanceHandle$state.canonical) == null ? undefined : _instanceHandle$state2.currentProps;
        return (_ref = (_props$id = props == null ? undefined : props.id) != null ? _props$id : props == null ? undefined : props.nativeID) != null ? _ref : '';
      }
    }, {
      key: "lastElementChild",
      get: function get() {
        var childElements = getChildElements(this);
        if (childElements.length === 0) {
          return null;
        }
        return childElements[childElements.length - 1];
      }
    }, {
      key: "nextElementSibling",
      get: function get() {
        return (0, _$$_REQUIRE(_dependencyMap[11]).getElementSibling)(this, 'next');
      }
    }, {
      key: "nodeName",
      get: function get() {
        return this.tagName;
      }
    }, {
      key: "nodeType",
      get: function get() {
        return _ReadOnlyNode2.default.ELEMENT_NODE;
      }
    }, {
      key: "nodeValue",
      get: function get() {
        return null;
      },
      set: function set(value) {}
    }, {
      key: "previousElementSibling",
      get: function get() {
        return (0, _$$_REQUIRE(_dependencyMap[11]).getElementSibling)(this, 'previous');
      }
    }, {
      key: "scrollHeight",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var scrollSize = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getScrollSize(node);
          if (scrollSize != null) {
            return scrollSize[1];
          }
        }
        return 0;
      }
    }, {
      key: "scrollLeft",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var scrollPosition = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getScrollPosition(node);
          if (scrollPosition != null) {
            return scrollPosition[0];
          }
        }
        return 0;
      }
    }, {
      key: "scrollTop",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var scrollPosition = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getScrollPosition(node);
          if (scrollPosition != null) {
            return scrollPosition[1];
          }
        }
        return 0;
      }
    }, {
      key: "scrollWidth",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var scrollSize = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getScrollSize(node);
          if (scrollSize != null) {
            return scrollSize[0];
          }
        }
        return 0;
      }
    }, {
      key: "tagName",
      get: function get() {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          return (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getTagName(node);
        }
        return '';
      }
    }, {
      key: "textContent",
      get: function get() {
        var shadowNode = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (shadowNode != null) {
          return (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getTextContent(shadowNode);
        }
        return '';
      }
    }, {
      key: "getBoundingClientRect",
      value: function getBoundingClientRect() {
        return _getBoundingClientRect(this, {
          includeTransform: true
        });
      }

      /**
       * Pointer Capture APIs
       */
    }, {
      key: "hasPointerCapture",
      value: function hasPointerCapture(pointerId) {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          return (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).hasPointerCapture(node, pointerId);
        }
        return false;
      }
    }, {
      key: "setPointerCapture",
      value: function setPointerCapture(pointerId) {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).setPointerCapture(node, pointerId);
        }
      }
    }, {
      key: "releasePointerCapture",
      value: function releasePointerCapture(pointerId) {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).releasePointerCapture(node, pointerId);
        }
      }
    }]);
    return ReadOnlyElement;
  }(_ReadOnlyNode2.default);
  function getChildElements(node) {
    // $FlowIssue[incompatible-call]
    return (0, _ReadOnlyNode2.getChildNodes)(node).filter(function (childNode) {
      return childNode instanceof ReadOnlyElement;
    });
  }

  /**
   * The public API for `getBoundingClientRect` always includes transform,
   * so we use this internal version to get the data without transform to
   * implement methods like `offsetWidth` and `offsetHeight`.
   */
  function _getBoundingClientRect(node, _ref2) {
    var includeTransform = _ref2.includeTransform;
    var shadowNode = (0, _ReadOnlyNode2.getShadowNode)(node);
    if (shadowNode != null) {
      var rect = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[10]).getFabricUIManager)()).getBoundingClientRect(shadowNode, includeTransform);
      if (rect) {
        return new _DOMRect.default(rect[0], rect[1], rect[2], rect[3]);
      }
    }

    // Empty rect if any of the above failed
    return new _DOMRect.default(0, 0, 0, 0);
  }
},223,[1,5,6,13,15,12,60,224,43,227,49,228]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.getChildNodes = getChildNodes;
  exports.getInstanceHandle = getInstanceHandle;
  exports.getPublicInstanceFromInternalInstanceHandle = getPublicInstanceFromInternalInstanceHandle;
  exports.getShadowNode = getShadowNode;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _ReactFabric = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  // flowlint unsafe-getters-setters:off

  // We initialize this lazily to avoid a require cycle
  // (`ReadOnlyElement` also depends on `ReadOnlyNode`).
  var ReadOnlyElementClass;
  var ReadOnlyNode = exports.default = /*#__PURE__*/function () {
    function ReadOnlyNode(internalInstanceHandle) {
      (0, _classCallCheck2.default)(this, ReadOnlyNode);
      setInstanceHandle(this, internalInstanceHandle);
    }
    (0, _createClass2.default)(ReadOnlyNode, [{
      key: "childNodes",
      get: function get() {
        var childNodes = getChildNodes(this);
        return (0, _$$_REQUIRE(_dependencyMap[6]).createNodeList)(childNodes);
      }
    }, {
      key: "firstChild",
      get: function get() {
        var childNodes = getChildNodes(this);
        if (childNodes.length === 0) {
          return null;
        }
        return childNodes[0];
      }
    }, {
      key: "isConnected",
      get: function get() {
        var shadowNode = getShadowNode(this);
        if (shadowNode == null) {
          return false;
        }
        return (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[7]).getFabricUIManager)()).isConnected(shadowNode);
      }
    }, {
      key: "lastChild",
      get: function get() {
        var childNodes = getChildNodes(this);
        if (childNodes.length === 0) {
          return null;
        }
        return childNodes[childNodes.length - 1];
      }
    }, {
      key: "nextSibling",
      get: function get() {
        var _getNodeSiblingsAndPo = getNodeSiblingsAndPosition(this),
          _getNodeSiblingsAndPo2 = (0, _slicedToArray2.default)(_getNodeSiblingsAndPo, 2),
          siblings = _getNodeSiblingsAndPo2[0],
          position = _getNodeSiblingsAndPo2[1];
        if (position === siblings.length - 1) {
          // this node is the last child of its parent, so there is no next sibling.
          return null;
        }
        return siblings[position + 1];
      }

      /**
       * @abstract
       */
    }, {
      key: "nodeName",
      get: function get() {
        throw new TypeError('`nodeName` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }

      /**
       * @abstract
       */
    }, {
      key: "nodeType",
      get: function get() {
        throw new TypeError('`nodeType` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }

      /**
       * @abstract
       */
    }, {
      key: "nodeValue",
      get: function get() {
        throw new TypeError('`nodeValue` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "parentElement",
      get: function get() {
        var parentNode = this.parentNode;
        if (ReadOnlyElementClass == null) {
          // We initialize this lazily to avoid a require cycle.
          ReadOnlyElementClass = _$$_REQUIRE(_dependencyMap[8]).default;
        }
        if (parentNode instanceof ReadOnlyElementClass) {
          return parentNode;
        }
        return null;
      }
    }, {
      key: "parentNode",
      get: function get() {
        var shadowNode = getShadowNode(this);
        if (shadowNode == null) {
          return null;
        }
        var parentInstanceHandle = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[7]).getFabricUIManager)()).getParentNode(shadowNode);
        if (parentInstanceHandle == null) {
          return null;
        }
        return getPublicInstanceFromInternalInstanceHandle(parentInstanceHandle);
      }
    }, {
      key: "previousSibling",
      get: function get() {
        var _getNodeSiblingsAndPo3 = getNodeSiblingsAndPosition(this),
          _getNodeSiblingsAndPo4 = (0, _slicedToArray2.default)(_getNodeSiblingsAndPo3, 2),
          siblings = _getNodeSiblingsAndPo4[0],
          position = _getNodeSiblingsAndPo4[1];
        if (position === 0) {
          // this node is the first child of its parent, so there is no previous sibling.
          return null;
        }
        return siblings[position - 1];
      }

      /**
       * @abstract
       */
    }, {
      key: "textContent",
      get: function get() {
        throw new TypeError('`textContent` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "compareDocumentPosition",
      value: function compareDocumentPosition(otherNode) {
        // Quick check to avoid having to call into Fabric if the nodes are the same.
        if (otherNode === this) {
          return 0;
        }
        var shadowNode = getShadowNode(this);
        var otherShadowNode = getShadowNode(otherNode);
        if (shadowNode == null || otherShadowNode == null) {
          return ReadOnlyNode.DOCUMENT_POSITION_DISCONNECTED;
        }
        return (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[7]).getFabricUIManager)()).compareDocumentPosition(shadowNode, otherShadowNode);
      }
    }, {
      key: "contains",
      value: function contains(otherNode) {
        if (otherNode === this) {
          return true;
        }
        var position = this.compareDocumentPosition(otherNode);
        // eslint-disable-next-line no-bitwise
        return (position & ReadOnlyNode.DOCUMENT_POSITION_CONTAINED_BY) !== 0;
      }
    }, {
      key: "getRootNode",
      value: function getRootNode() {
        // eslint-disable-next-line consistent-this
        var lastKnownParent = this;
        var nextPossibleParent = this.parentNode;
        while (nextPossibleParent != null) {
          lastKnownParent = nextPossibleParent;
          nextPossibleParent = nextPossibleParent.parentNode;
        }
        return lastKnownParent;
      }
    }, {
      key: "hasChildNodes",
      value: function hasChildNodes() {
        return getChildNodes(this).length > 0;
      }

      /*
       * Node types, as returned by the `nodeType` property.
       */

      /**
       * Type of Element, HTMLElement and ReactNativeElement instances.
       */
    }]);
    return ReadOnlyNode;
  }();
  ReadOnlyNode.ELEMENT_NODE = 1;
  /**
   * Currently Unused in React Native.
   */
  ReadOnlyNode.ATTRIBUTE_NODE = 2;
  /**
   * Text nodes.
   */
  ReadOnlyNode.TEXT_NODE = 3;
  /**
   * @deprecated Unused in React Native.
   */
  ReadOnlyNode.CDATA_SECTION_NODE = 4;
  /**
   * @deprecated
   */
  ReadOnlyNode.ENTITY_REFERENCE_NODE = 5;
  /**
   * @deprecated
   */
  ReadOnlyNode.ENTITY_NODE = 6;
  /**
   * @deprecated Unused in React Native.
   */
  ReadOnlyNode.PROCESSING_INSTRUCTION_NODE = 7;
  /**
   * @deprecated Unused in React Native.
   */
  ReadOnlyNode.COMMENT_NODE = 8;
  /**
   * @deprecated Unused in React Native.
   */
  ReadOnlyNode.DOCUMENT_NODE = 9;
  /**
   * @deprecated Unused in React Native.
   */
  ReadOnlyNode.DOCUMENT_TYPE_NODE = 10;
  /**
   * @deprecated Unused in React Native.
   */
  ReadOnlyNode.DOCUMENT_FRAGMENT_NODE = 11;
  /**
   * @deprecated
   */
  ReadOnlyNode.NOTATION_NODE = 12;
  /*
   * Document position flags. Used to check the return value of
   * `compareDocumentPosition()`.
   */
  /**
   * Both nodes are in different documents.
   */
  ReadOnlyNode.DOCUMENT_POSITION_DISCONNECTED = 1;
  /**
   * `otherNode` precedes the node in either a pre-order depth-first traversal of a tree containing both
   * (e.g., as an ancestor or previous sibling or a descendant of a previous sibling or previous sibling of an ancestor)
   * or (if they are disconnected) in an arbitrary but consistent ordering.
   */
  ReadOnlyNode.DOCUMENT_POSITION_PRECEDING = 2;
  /**
   * `otherNode` follows the node in either a pre-order depth-first traversal of a tree containing both
   * (e.g., as a descendant or following sibling or a descendant of a following sibling or following sibling of an ancestor)
   * or (if they are disconnected) in an arbitrary but consistent ordering.
   */
  ReadOnlyNode.DOCUMENT_POSITION_FOLLOWING = 4;
  /**
   * `otherNode` is an ancestor of the node.
   */
  ReadOnlyNode.DOCUMENT_POSITION_CONTAINS = 8;
  /**
   * `otherNode` is a descendant of the node.
   */
  ReadOnlyNode.DOCUMENT_POSITION_CONTAINED_BY = 16;
  /**
   * @deprecated Unused in React Native.
   */
  ReadOnlyNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
  var INSTANCE_HANDLE_KEY = Symbol('internalInstanceHandle');
  function getInstanceHandle(node) {
    // $FlowExpectedError[prop-missing]
    return node[INSTANCE_HANDLE_KEY];
  }
  function setInstanceHandle(node, instanceHandle) {
    // $FlowExpectedError[prop-missing]
    node[INSTANCE_HANDLE_KEY] = instanceHandle;
  }
  function getShadowNode(node) {
    return _ReactFabric.default.getNodeFromInternalInstanceHandle(getInstanceHandle(node));
  }
  function getChildNodes(node) {
    var shadowNode = getShadowNode(node);
    if (shadowNode == null) {
      return [];
    }
    var childNodeInstanceHandles = (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[7]).getFabricUIManager)()).getChildNodes(shadowNode);
    return childNodeInstanceHandles.map(function (instanceHandle) {
      return getPublicInstanceFromInternalInstanceHandle(instanceHandle);
    });
  }
  function getNodeSiblingsAndPosition(node) {
    var parent = node.parentNode;
    if (parent == null) {
      // This node is the root or it's disconnected.
      return [[node], 0];
    }
    var siblings = getChildNodes(parent);
    var position = siblings.indexOf(node);
    if (position === -1) {
      throw new TypeError("Missing node in parent's child node list");
    }
    return [siblings, position];
  }
  function getPublicInstanceFromInternalInstanceHandle(instanceHandle) {
    var mixedPublicInstance = _ReactFabric.default.getPublicInstanceFromInternalInstanceHandle(instanceHandle);
    // $FlowExpectedError[incompatible-return] React defines public instances as "mixed" because it can't access the definition from React Native.
    return mixedPublicInstance;
  }
},224,[1,26,5,6,54,43,225,49,223]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createNodeList = createNodeList;
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  // flowlint unsafe-getters-setters:off
  // IMPORTANT: The Flow type definition for this module is defined in `NodeList.js.flow`
  // because Flow only supports indexers in classes in declaration files.
  // $FlowIssue[prop-missing] Flow doesn't understand [Symbol.iterator]() {} and thinks this class doesn't implement the Iterable<T> interface.
  var NodeList = exports.default = /*#__PURE__*/function (_Symbol$iterator) {
    /**
     * Use `createNodeList` to create instances of this class.
     *
     * @private This is not defined in the declaration file, so users will not see
     *          the signature of the constructor.
     */
    function NodeList(elements) {
      (0, _classCallCheck2.default)(this, NodeList);
      for (var i = 0; i < elements.length; i++) {
        Object.defineProperty(this, i, {
          value: elements[i],
          writable: false
        });
      }
      this._length = elements.length;
    }
    (0, _createClass2.default)(NodeList, [{
      key: "length",
      get: function get() {
        return this._length;
      }
    }, {
      key: "item",
      value: function item(index) {
        if (index < 0 || index >= this._length) {
          return null;
        }

        // assigning to the interface allows us to access the indexer property in a
        // type-safe way.
        // eslint-disable-next-line consistent-this
        var arrayLike = this;
        return arrayLike[index];
      }
    }, {
      key: "entries",
      value: function entries() {
        return (0, _$$_REQUIRE(_dependencyMap[3]).createEntriesIterator)(this);
      }
    }, {
      key: "forEach",
      value: function forEach(callbackFn, thisArg) {
        // assigning to the interface allows us to access the indexer property in a
        // type-safe way.
        // eslint-disable-next-line consistent-this
        var arrayLike = this;
        for (var _index = 0; _index < this._length; _index++) {
          if (thisArg == null) {
            callbackFn(arrayLike[_index], _index, this);
          } else {
            callbackFn.call(thisArg, arrayLike[_index], _index, this);
          }
        }
      }
    }, {
      key: "keys",
      value: function keys() {
        return (0, _$$_REQUIRE(_dependencyMap[3]).createKeyIterator)(this);
      }
    }, {
      key: "values",
      value: function values() {
        return (0, _$$_REQUIRE(_dependencyMap[3]).createValueIterator)(this);
      }

      // $FlowIssue[unsupported-syntax] Flow does not support computed properties in classes.
    }, {
      key: _Symbol$iterator,
      value: function value() {
        return (0, _$$_REQUIRE(_dependencyMap[3]).createValueIterator)(this);
      }
    }]);
    return NodeList;
  }(Symbol.iterator);
  /**
   * This is an internal method to create instances of `NodeList`,
   * which avoids leaking its constructor to end users.
   * We can do that because the external definition of `NodeList` lives in
   * `NodeList.js.flow`, not here.
   */
  function createNodeList(elements) {
    return new NodeList(elements);
  }
},225,[1,5,6,226]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createEntriesIterator = createEntriesIterator;
  exports.createKeyIterator = createKeyIterator;
  exports.createValueIterator = createValueIterator;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * This definition is different from the current built-in type `$ArrayLike`
   * provided by Flow, in that this is an interface and that one is an object.
   *
   * The difference is important because, when using objects, Flow thinks
   * a `length` property would be copied over when using the spread operator,
   * which is incorrect.
   */

  function* createValueIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield arrayLike[i];
    }
  }
  function* createKeyIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield i;
    }
  }
  function* createEntriesIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield [i, arrayLike[i]];
    }
  }
},226,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createHTMLCollection = createHTMLCollection;
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  // flowlint unsafe-getters-setters:off
  // IMPORTANT: The type definition for this module is defined in `HTMLCollection.js.flow`
  // because Flow only supports indexers in classes in declaration files.
  // $FlowIssue[prop-missing] Flow doesn't understand [Symbol.iterator]() {} and thinks this class doesn't implement the Iterable<T> interface.
  var HTMLCollection = exports.default = /*#__PURE__*/function (_Symbol$iterator) {
    /**
     * Use `createHTMLCollection` to create instances of this class.
     *
     * @private This is not defined in the declaration file, so users will not see
     *          the signature of the constructor.
     */
    function HTMLCollection(elements) {
      (0, _classCallCheck2.default)(this, HTMLCollection);
      for (var i = 0; i < elements.length; i++) {
        Object.defineProperty(this, i, {
          value: elements[i],
          enumerable: true,
          configurable: false,
          writable: false
        });
      }
      this._length = elements.length;
    }
    (0, _createClass2.default)(HTMLCollection, [{
      key: "length",
      get: function get() {
        return this._length;
      }
    }, {
      key: "item",
      value: function item(index) {
        if (index < 0 || index >= this._length) {
          return null;
        }

        // assigning to the interface allows us to access the indexer property in a
        // type-safe way.
        // eslint-disable-next-line consistent-this
        var arrayLike = this;
        return arrayLike[index];
      }

      /**
       * @deprecated Unused in React Native.
       */
    }, {
      key: "namedItem",
      value: function namedItem(name) {
        return null;
      }

      // $FlowIssue[unsupported-syntax] Flow does not support computed properties in classes.
    }, {
      key: _Symbol$iterator,
      value: function value() {
        return (0, _$$_REQUIRE(_dependencyMap[3]).createValueIterator)(this);
      }
    }]);
    return HTMLCollection;
  }(Symbol.iterator);
  /**
   * This is an internal method to create instances of `HTMLCollection`,
   * which avoids leaking its constructor to end users.
   * We can do that because the external definition of `HTMLCollection` lives in
   * `HTMLCollection.js.flow`, not here.
   */
  function createHTMLCollection(elements) {
    return new HTMLCollection(elements);
  }
},227,[1,5,6,226]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getElementSibling = getElementSibling;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  // We initialize this lazily to avoid a require cycle
  // (`ReadOnlyElement` also depends on `Traversal`).
  var ReadOnlyElementClass;
  function getElementSibling(node, direction) {
    var _childNodes$position;
    var parent = node.parentNode;
    if (parent == null) {
      // This node is the root or it's disconnected.
      return null;
    }
    var childNodes = (0, _$$_REQUIRE(_dependencyMap[0]).getChildNodes)(parent);
    var startPosition = childNodes.indexOf(node);
    if (startPosition === -1) {
      return null;
    }
    var increment = direction === 'next' ? 1 : -1;
    var position = startPosition + increment;
    if (ReadOnlyElementClass == null) {
      // We initialize this lazily to avoid a require cycle.
      ReadOnlyElementClass = _$$_REQUIRE(_dependencyMap[1]).default;
    }
    while (childNodes[position] != null && !(childNodes[position] instanceof ReadOnlyElementClass)) {
      position = position + increment;
    }
    return (_childNodes$position = childNodes[position]) != null ? _childNodes$position : null;
  }
},228,[224,223]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _TextInputState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _warnForStyleProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _nullthrows2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var _nullthrows = (0, _nullthrows2.default)((0, _$$_REQUIRE(_dependencyMap[6]).getFabricUIManager)()),
    fabricMeasure = _nullthrows.measure,
    fabricMeasureInWindow = _nullthrows.measureInWindow,
    fabricMeasureLayout = _nullthrows.measureLayout,
    fabricGetBoundingClientRect = _nullthrows.getBoundingClientRect,
    _setNativeProps = _nullthrows.setNativeProps;
  var noop = function noop() {};

  /**
   * This is used for refs on host components.
   */
  var ReactFabricHostComponent = exports.default = /*#__PURE__*/function () {
    // These need to be accessible from `ReactFabricPublicInstanceUtils`.

    function ReactFabricHostComponent(tag, viewConfig, internalInstanceHandle) {
      (0, _classCallCheck2.default)(this, ReactFabricHostComponent);
      this.__nativeTag = tag;
      this._viewConfig = viewConfig;
      this.__internalInstanceHandle = internalInstanceHandle;
    }
    (0, _createClass2.default)(ReactFabricHostComponent, [{
      key: "blur",
      value: function blur() {
        // $FlowFixMe[incompatible-exact] Migrate all usages of `NativeMethods` to an interface to fix this.
        _TextInputState.default.blurTextInput(this);
      }
    }, {
      key: "focus",
      value: function focus() {
        // $FlowFixMe[incompatible-exact] Migrate all usages of `NativeMethods` to an interface to fix this.
        _TextInputState.default.focusTextInput(this);
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        var node = (0, _$$_REQUIRE(_dependencyMap[7]).getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          fabricMeasure(node, callback);
        }
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        var node = (0, _$$_REQUIRE(_dependencyMap[7]).getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          fabricMeasureInWindow(node, callback);
        }
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        if (typeof relativeToNativeNode === 'number' || !(relativeToNativeNode instanceof ReactFabricHostComponent)) {
          return;
        }
        var toStateNode = (0, _$$_REQUIRE(_dependencyMap[7]).getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        var fromStateNode = (0, _$$_REQUIRE(_dependencyMap[7]).getNodeFromInternalInstanceHandle)(relativeToNativeNode.__internalInstanceHandle);
        if (toStateNode != null && fromStateNode != null) {
          fabricMeasureLayout(toStateNode, fromStateNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);
        }
      }
    }, {
      key: "unstable_getBoundingClientRect",
      value: function unstable_getBoundingClientRect() {
        var node = (0, _$$_REQUIRE(_dependencyMap[7]).getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          var rect = fabricGetBoundingClientRect(node, true);
          if (rect) {
            return new DOMRect(rect[0], rect[1], rect[2], rect[3]);
          }
        }

        // Empty rect if any of the above failed
        return new DOMRect(0, 0, 0, 0);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        var updatePayload = (0, _$$_REQUIRE(_dependencyMap[8]).create)(nativeProps, this._viewConfig.validAttributes);
        var node = (0, _$$_REQUIRE(_dependencyMap[7]).getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null && updatePayload != null) {
          _setNativeProps(node, updatePayload);
        }
      }
    }]);
    return ReactFabricHostComponent;
  }();
},229,[1,5,6,211,222,43,49,54,219]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _ReadOnlyCharacterData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _ReadOnlyNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */ // flowlint unsafe-getters-setters:off
  var ReadOnlyText = exports.default = /*#__PURE__*/function (_ReadOnlyCharacterDat) {
    (0, _inherits2.default)(ReadOnlyText, _ReadOnlyCharacterDat);
    var _super = _createSuper(ReadOnlyText);
    function ReadOnlyText() {
      (0, _classCallCheck2.default)(this, ReadOnlyText);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(ReadOnlyText, [{
      key: "nodeName",
      get:
      /**
       * @override
       */
      function get() {
        return '#text';
      }

      /**
       * @override
       */
    }, {
      key: "nodeType",
      get: function get() {
        return _ReadOnlyNode.default.TEXT_NODE;
      }
    }]);
    return ReadOnlyText;
  }(_ReadOnlyCharacterData.default);
},230,[1,5,6,13,15,12,231,224]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _ReadOnlyNode2 = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */ // flowlint unsafe-getters-setters:off
  var ReadOnlyCharacterData = exports.default = /*#__PURE__*/function (_ReadOnlyNode) {
    (0, _inherits2.default)(ReadOnlyCharacterData, _ReadOnlyNode);
    var _super = _createSuper(ReadOnlyCharacterData);
    function ReadOnlyCharacterData() {
      (0, _classCallCheck2.default)(this, ReadOnlyCharacterData);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(ReadOnlyCharacterData, [{
      key: "nextElementSibling",
      get: function get() {
        return (0, _$$_REQUIRE(_dependencyMap[8]).getElementSibling)(this, 'next');
      }
    }, {
      key: "previousElementSibling",
      get: function get() {
        return (0, _$$_REQUIRE(_dependencyMap[8]).getElementSibling)(this, 'previous');
      }
    }, {
      key: "data",
      get: function get() {
        var shadowNode = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (shadowNode != null) {
          return (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[9]).getFabricUIManager)()).getTextContent(shadowNode);
        }
        return '';
      }
    }, {
      key: "length",
      get: function get() {
        return this.data.length;
      }

      /**
       * @override
       */
    }, {
      key: "textContent",
      get: function get() {
        return this.data;
      }

      /**
       * @override
       */
    }, {
      key: "nodeValue",
      get: function get() {
        return this.data;
      }
    }, {
      key: "substringData",
      value: function substringData(offset, count) {
        var data = this.data;
        if (offset < 0) {
          throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is negative.`);
        }
        if (offset > data.length) {
          throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is greater than the node's length (${data.length}).`);
        }
        var adjustedCount = count < 0 || count > data.length ? data.length : count;
        return data.slice(offset, offset + adjustedCount);
      }
    }]);
    return ReadOnlyCharacterData;
  }(_ReadOnlyNode2.default);
},231,[1,5,6,13,15,12,224,43,228,49]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RootTagContext = undefined;
  exports.createRootTag = createRootTag;
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var RootTagContext = exports.RootTagContext = React.createContext(0);
  /**
   * Intended to only be used by `AppContainer`.
   */
  function createRootTag(rootTag) {
    return rootTag;
  }
},232,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.coerceDisplayMode = coerceDisplayMode;
  exports.default = undefined;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /** DisplayMode should be in sync with the method displayModeToInt from
   * react/renderer/uimanager/primitives.h. */
  var DisplayMode = Object.freeze({
    VISIBLE: 1,
    SUSPENDED: 2,
    HIDDEN: 3
  });
  function coerceDisplayMode(value) {
    switch (value) {
      case DisplayMode.SUSPENDED:
        return DisplayMode.SUSPENDED;
      case DisplayMode.HIDDEN:
        return DisplayMode.HIDDEN;
      default:
        return DisplayMode.VISIBLE;
    }
  }
  var _default = exports.default = DisplayMode;
},233,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getCachedComponentWithDisplayName;
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var cache = new Map();
  function getCachedComponentWithDisplayName(displayName) {
    var ComponentWithDisplayName = cache.get(displayName);
    if (!ComponentWithDisplayName) {
      ComponentWithDisplayName = function ComponentWithDisplayName(_ref) {
        var children = _ref.children;
        return children;
      };
      // $FlowFixMe[prop-missing]
      ComponentWithDisplayName.displayName = displayName;
      cache.set(displayName, ComponentWithDisplayName);
    }
    return ComponentWithDisplayName;
  }
},234,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeDeviceEventManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var DEVICE_BACK_EVENT = 'hardwareBackPress';
  var _backPressSubscriptions = [];
  _RCTDeviceEventEmitter.default.addListener(DEVICE_BACK_EVENT, function () {
    for (var i = _backPressSubscriptions.length - 1; i >= 0; i--) {
      if (_backPressSubscriptions[i]()) {
        return;
      }
    }
    BackHandler.exitApp();
  });

  /**
   * Detect hardware button presses for back navigation.
   *
   * Android: Detect hardware back button presses, and programmatically invoke the default back button
   * functionality to exit the app if there are no listeners or if none of the listeners return true.
   *
   * iOS: Not applicable.
   *
   * The event subscriptions are called in reverse order (i.e. last registered subscription first),
   * and if one subscription returns true then subscriptions registered earlier will not be called.
   *
   * Example:
   *
   * ```javascript
   * BackHandler.addEventListener('hardwareBackPress', function() {
   *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here
   *  // Typically you would use the navigator here to go to the last state.
   *
   *  if (!this.onMainScreen()) {
   *    this.goBack();
   *    return true;
   *  }
   *  return false;
   * });
   * ```
   */

  var BackHandler = {
    exitApp: function exitApp() {
      if (!_NativeDeviceEventManager.default) {
        return;
      }
      _NativeDeviceEventManager.default.invokeDefaultBackPressHandler();
    },
    /**
     * Adds an event handler. Supported events:
     *
     * - `hardwareBackPress`: Fires when the Android hardware back button is pressed.
     */
    addEventListener: function addEventListener(eventName, handler) {
      if (_backPressSubscriptions.indexOf(handler) === -1) {
        _backPressSubscriptions.push(handler);
      }
      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    /**
     * Removes the event handler.
     */
    removeEventListener: function removeEventListener(eventName, handler) {
      var index = _backPressSubscriptions.indexOf(handler);
      if (index !== -1) {
        _backPressSubscriptions.splice(index, 1);
      }
    }
  };
  module.exports = BackHandler;
},235,[1,236,4]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('DeviceEventManager');
},236,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},237,[238]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * scheduler.native.production.min.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  function f(a, b) {
    var c = a.length;
    a.push(b);
    a: for (; 0 < c;) {
      var d = c - 1 >>> 1,
        e = a[d];
      if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;else break a;
    }
  }
  function h(a) {
    return 0 === a.length ? null : a[0];
  }
  function k(a) {
    if (0 === a.length) return null;
    var b = a[0],
      c = a.pop();
    if (c !== b) {
      a[0] = c;
      a: for (var d = 0, e = a.length, t = e >>> 1; d < t;) {
        var m = 2 * (d + 1) - 1,
          E = a[m],
          n = m + 1,
          A = a[n];
        if (0 > g(E, c)) n < e && 0 > g(A, E) ? (a[d] = A, a[n] = c, d = n) : (a[d] = E, a[m] = c, d = m);else if (n < e && 0 > g(A, c)) a[d] = A, a[n] = c, d = n;else break a;
      }
    }
    return b;
  }
  function g(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
  }
  var l;
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var p = performance;
    l = function l() {
      return p.now();
    };
  } else {
    var q = Date,
      r = q.now();
    l = function l() {
      return q.now() - r;
    };
  }
  var u = [],
    v = [],
    w = 1,
    x = null,
    y = 3,
    z = false,
    B = false,
    C = false,
    D = "function" === typeof setTimeout ? setTimeout : null,
    F = "function" === typeof clearTimeout ? clearTimeout : null,
    G = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && undefined !== navigator.scheduling && undefined !== navigator.scheduling.isInputPending ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
  function H(a) {
    for (var b = h(v); null !== b;) {
      if (null === b.callback) k(v);else if (b.startTime <= a) k(v), b.sortIndex = b.expirationTime, f(u, b);else break;
      b = h(v);
    }
  }
  function I(a) {
    C = false;
    H(a);
    if (!B) if (null !== h(u)) B = true, J = K, L || (L = true, M());else {
      var b = h(v);
      null !== b && N(I, b.startTime - a);
    }
  }
  function K(a, b) {
    B = false;
    C && (C = false, F(O), O = -1);
    z = true;
    var c = y;
    try {
      a: {
        H(b);
        for (x = h(u); null !== x && (!(x.expirationTime > b) || a && !P());) {
          var d = x.callback;
          if ("function" === typeof d) {
            x.callback = null;
            y = x.priorityLevel;
            var e = d(x.expirationTime <= b);
            b = l();
            if ("function" === typeof e) {
              x.callback = e;
              H(b);
              var t = true;
              break a;
            } else x === h(u) && k(u), H(b);
          } else k(u);
          x = h(u);
        }
        if (null !== x) t = true;else {
          var m = h(v);
          null !== m && N(I, m.startTime - b);
          t = false;
        }
      }
      return t;
    } finally {
      x = null, y = c, z = false;
    }
  }
  function Q(a, b, c) {
    var d = l();
    "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
    switch (a) {
      case 1:
        var e = -1;
        break;
      case 2:
        e = 250;
        break;
      case 5:
        e = 1073741823;
        break;
      case 4:
        e = 1E4;
        break;
      default:
        e = 5E3;
    }
    e = c + e;
    a = {
      id: w++,
      callback: b,
      priorityLevel: a,
      startTime: c,
      expirationTime: e,
      sortIndex: -1
    };
    c > d ? (a.sortIndex = c, f(v, a), null === h(u) && a === h(v) && (C ? (F(O), O = -1) : C = true, N(I, c - d))) : (a.sortIndex = e, f(u, a), B || z || (B = true, J = K, L || (L = true, M())));
    return a;
  }
  function R(a) {
    a.callback = null;
  }
  function S() {
    return y;
  }
  var L = false,
    J = null,
    O = -1,
    T = -1;
  function P() {
    return 5 > l() - T ? false : true;
  }
  function U() {}
  function V() {
    if (null !== J) {
      var a = l();
      T = a;
      var b = true;
      try {
        b = J(true, a);
      } finally {
        b ? M() : (L = false, J = null);
      }
    } else L = false;
  }
  var M;
  if ("function" === typeof G) M = function M() {
    G(V);
  };else if ("undefined" !== typeof MessageChannel) {
    var W = new MessageChannel(),
      X = W.port2;
    W.port1.onmessage = V;
    M = function M() {
      X.postMessage(null);
    };
  } else M = function M() {
    D(V, 0);
  };
  function N(a, b) {
    O = D(function () {
      a(l());
    }, b);
  }
  var Y = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_UserBlockingPriority : 2,
    aa = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_NormalPriority : 3,
    ba = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_LowPriority : 4,
    ca = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_ImmediatePriority : 1,
    da = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_scheduleCallback : Q,
    ea = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_cancelCallback : R,
    fa = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_getCurrentPriorityLevel : S,
    ha = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_shouldYield : P,
    ia = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_requestPaint : U,
    ja = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_now : l;
  function Z() {
    throw Error("Not implemented.");
  }
  exports.unstable_IdlePriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_IdlePriority : 5;
  exports.unstable_ImmediatePriority = ca;
  exports.unstable_LowPriority = ba;
  exports.unstable_NormalPriority = aa;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = Y;
  exports.unstable_cancelCallback = ea;
  exports.unstable_continueExecution = Z;
  exports.unstable_forceFrameRate = Z;
  exports.unstable_getCurrentPriorityLevel = fa;
  exports.unstable_getFirstCallbackNode = Z;
  exports.unstable_next = Z;
  exports.unstable_now = ja;
  exports.unstable_pauseExecution = Z;
  exports.unstable_requestPaint = ia;
  exports.unstable_runWithPriority = Z;
  exports.unstable_scheduleCallback = da;
  exports.unstable_shouldYield = ha;
  exports.unstable_wrapCallback = Z;
},238,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @noformat
   * 
   * @nolint
   * @generated SignedSource<<0debd6e5a17dc037cb4661315a886de6>>
   */

  'use strict';

  var ReactNative;
  {
    ReactNative = _$$_REQUIRE(_dependencyMap[0]);
  }
  module.exports = ReactNative;
},239,[240]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @nolint
   * @providesModule ReactNativeRenderer-prod
   * @preventMunge
   * @generated SignedSource<<07cf699c0d1c149943b7a02432aa1550>>
   */

  "use strict";

  _$$_REQUIRE(_dependencyMap[0]);
  var React = _$$_REQUIRE(_dependencyMap[1]);
  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }
  var hasError = false,
    caughtError = null,
    hasRethrowError = false,
    rethrowError = null,
    reporter = {
      onError: function onError(error) {
        hasError = true;
        caughtError = error;
      }
    };
  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }
  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);
    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }
  var isArrayImpl = Array.isArray,
    getFiberCurrentPropsFromNode = null,
    getInstanceFromNode = null,
    getNodeFromInstance = null;
  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }
  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
      dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }
  var assign = Object.assign;
  function functionThatReturnsTrue() {
    return true;
  }
  function functionThatReturnsFalse() {
    return false;
  }
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for (var propName in dispatchConfig) dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  assign(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
        propName;
      for (propName in Interface) this[propName] = null;
      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });
  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  SyntheticEvent.extend = function (Interface) {
    function E() {}
    function Class() {
      return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };
  addEventPoolingTo(SyntheticEvent);
  function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }
  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }
  function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
  }
  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });
  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }
  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }
  var startDependencies = ["topTouchStart"],
    moveDependencies = ["topTouchMove"],
    endDependencies = ["topTouchCancel", "topTouchEnd"],
    touchBank = [],
    touchHistory = {
      touchBank: touchBank,
      numberActiveTouches: 0,
      indexOfSingleActiveTouch: -1,
      mostRecentTimeStamp: 0
    };
  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }
  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
  }
  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
      touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }
  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  var instrumentationCallback,
    ResponderTouchHistoryStore = {
      instrument: function instrument(callback) {
        instrumentationCallback = callback;
      },
      recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      },
      touchHistory: touchHistory
    };
  function accumulate(current, next) {
    if (null == next) throw Error("accumulate(...): Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function accumulateInto(current, next) {
    if (null == next) throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
      if (isArrayImpl(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }
    return isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }
  var responderInst = null,
    trackedTouchCount = 0;
  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }
  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  };
  function getParent(inst) {
    do inst = inst.return; while (inst && 5 !== inst.tag);
    return inst ? inst : null;
  }
  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) path.push(inst), inst = getParent(inst);
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
  }
  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }
  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
  var ResponderEventPlugin = {
      _getResponder: function _getResponder() {
        return responderInst;
      },
      eventTypes: eventTypes,
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
          var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
          if (responderInst) b: {
            var JSCompiler_temp = responderInst;
            for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent(tempA)) depthA++;
            tempA = 0;
            for (var tempB = targetInst; tempB; tempB = getParent(tempB)) tempA++;
            for (; 0 < depthA - tempA;) JSCompiler_temp = getParent(JSCompiler_temp), depthA--;
            for (; 0 < tempA - depthA;) targetInst = getParent(targetInst), tempA--;
            for (; depthA--;) {
              if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
              JSCompiler_temp = getParent(JSCompiler_temp);
              targetInst = getParent(targetInst);
            }
            JSCompiler_temp = null;
          } else JSCompiler_temp = targetInst;
          targetInst = JSCompiler_temp;
          JSCompiler_temp = targetInst === responderInst;
          shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
          shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
          JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle);
          b: {
            JSCompiler_temp = shouldSetEventType._dispatchListeners;
            targetInst = shouldSetEventType._dispatchInstances;
            if (isArrayImpl(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++) {
              if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                JSCompiler_temp = targetInst[depthA];
                break b;
              }
            } else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
              JSCompiler_temp = targetInst;
              break b;
            }
            JSCompiler_temp = null;
          }
          shouldSetEventType._dispatchInstances = null;
          shouldSetEventType._dispatchListeners = null;
          shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
          if (JSCompiler_temp && JSCompiler_temp !== responderInst) {
            if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), targetInst = true === executeDirectDispatch(shouldSetEventType), responderInst) {
              if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [shouldSetEventType, depthA]);
                changeResponder(JSCompiler_temp, targetInst);
              } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
          } else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
          if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && undefined !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);
            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = true;
                  break b;
                }
                depthA = getParent(depthA);
              }
              targetInst = false;
            }
            if (targetInst) {
              topLevelType = false;
              break a;
            }
          }
          topLevelType = true;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
      },
      GlobalResponderHandler: null,
      injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
      }
    },
    eventPluginOrder = null,
    namesToPlugins = {};
  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
        pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;
        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
            eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule, eventName$jscomp$0);
            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;
          if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }
  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }
  var plugins = [],
    eventNameDispatchConfigs = {},
    registrationNameModules = {};
  function getListeners(inst, registrationName, phase, dispatchToImperativeListeners) {
    var stateNode = inst.stateNode;
    if (null === stateNode) return null;
    inst = getFiberCurrentPropsFromNode(stateNode);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    if (!(dispatchToImperativeListeners && stateNode.canonical && stateNode.canonical._eventListeners)) return inst;
    var listeners = [];
    inst && listeners.push(inst);
    var requestedPhaseIsCapture = "captured" === phase,
      mangledImperativeRegistrationName = requestedPhaseIsCapture ? "rn:" + registrationName.replace(/Capture$/, "") : "rn:" + registrationName;
    stateNode.canonical._eventListeners[mangledImperativeRegistrationName] && 0 < stateNode.canonical._eventListeners[mangledImperativeRegistrationName].length && stateNode.canonical._eventListeners[mangledImperativeRegistrationName].forEach(function (listenerObj) {
      if ((null != listenerObj.options.capture && listenerObj.options.capture) === requestedPhaseIsCapture) {
        var listenerFnWrapper = function listenerFnWrapper(syntheticEvent) {
          var eventInst = new (_$$_REQUIRE(_dependencyMap[2]).CustomEvent)(mangledImperativeRegistrationName, {
            detail: syntheticEvent.nativeEvent
          });
          eventInst.isTrusted = true;
          eventInst.setSyntheticEvent(syntheticEvent);
          for (var _len = arguments.length, args = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++) args[_key - 1] = arguments[_key];
          listenerObj.listener.apply(listenerObj, [eventInst].concat(args));
        };
        listenerObj.options.once ? listeners.push(function () {
          stateNode.canonical.removeEventListener_unstable(mangledImperativeRegistrationName, listenerObj.listener, listenerObj.capture);
          listenerObj.invalidated || (listenerObj.invalidated = true, listenerObj.listener.apply(listenerObj, arguments));
        }) : listeners.push(listenerFnWrapper);
      }
    });
    return 0 === listeners.length ? null : 1 === listeners.length ? listeners[0] : listeners;
  }
  var customBubblingEventTypes = _$$_REQUIRE(_dependencyMap[2]).ReactNativeViewConfigRegistry.customBubblingEventTypes,
    customDirectEventTypes = _$$_REQUIRE(_dependencyMap[2]).ReactNativeViewConfigRegistry.customDirectEventTypes;
  function accumulateListenersAndInstances(inst, event, listeners) {
    var listenersLength = listeners ? isArrayImpl(listeners) ? listeners.length : 1 : 0;
    if (0 < listenersLength) if (event._dispatchListeners = accumulateInto(event._dispatchListeners, listeners), null == event._dispatchInstances && 1 === listenersLength) event._dispatchInstances = inst;else for (event._dispatchInstances = event._dispatchInstances || [], isArrayImpl(event._dispatchInstances) || (event._dispatchInstances = [event._dispatchInstances]), listeners = 0; listeners < listenersLength; listeners++) event._dispatchInstances.push(inst);
  }
  function accumulateDirectionalDispatches$1(inst, phase, event) {
    phase = getListeners(inst, event.dispatchConfig.phasedRegistrationNames[phase], phase, true);
    accumulateListenersAndInstances(inst, event, phase);
  }
  function traverseTwoPhase$1(inst, fn, arg, skipBubbling) {
    for (var path = []; inst;) {
      path.push(inst);
      do inst = inst.return; while (inst && 5 !== inst.tag);
      inst = inst ? inst : null;
    }
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);else for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event, false);
  }
  function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listeners = getListeners(inst, event.dispatchConfig.registrationName, "bubbled", false);
        accumulateListenersAndInstances(inst, event, listeners);
      }
    }
  }
  if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
  eventPluginOrder = Array.prototype.slice.call(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  recomputePluginOrdering();
  var injectedNamesToPlugins$jscomp$inline_229 = {
      ResponderEventPlugin: ResponderEventPlugin,
      ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (null == targetInst) return null;
          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
          if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
          if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(topLevelType._targetInst, accumulateDirectionalDispatches$1, topLevelType, true) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle$1);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle$1);else return null;
          return topLevelType;
        }
      }
    },
    isOrderingDirty$jscomp$inline_230 = false,
    pluginName$jscomp$inline_231;
  for (pluginName$jscomp$inline_231 in injectedNamesToPlugins$jscomp$inline_229) if (injectedNamesToPlugins$jscomp$inline_229.hasOwnProperty(pluginName$jscomp$inline_231)) {
    var pluginModule$jscomp$inline_232 = injectedNamesToPlugins$jscomp$inline_229[pluginName$jscomp$inline_231];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_231) || namesToPlugins[pluginName$jscomp$inline_231] !== pluginModule$jscomp$inline_232) {
      if (namesToPlugins[pluginName$jscomp$inline_231]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_231 + "`."));
      namesToPlugins[pluginName$jscomp$inline_231] = pluginModule$jscomp$inline_232;
      isOrderingDirty$jscomp$inline_230 = true;
    }
  }
  isOrderingDirty$jscomp$inline_230 && recomputePluginOrdering();
  var instanceCache = new Map(),
    instanceProps = new Map();
  function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
  }
  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }
  var isInsideEventHandler = false;
  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;
    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = false;
    }
  }
  var eventQueue = null;
  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
        dispatchInstances = e._dispatchInstances;
      if (isArrayImpl(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }
  var EMPTY_NATIVE_EVENT = {};
  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
      inst = getInstanceFromTag(rootNodeID),
      target = null;
    null != inst && (target = inst.stateNode);
    batchedUpdates(function () {
      var JSCompiler_inline_result = target;
      for (var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++) {
        var possiblePlugin = legacyPlugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, JSCompiler_inline_result)) && (events = accumulateInto(events, possiblePlugin));
      }
      JSCompiler_inline_result = events;
      null !== JSCompiler_inline_result && (eventQueue = accumulateInto(eventQueue, JSCompiler_inline_result));
      JSCompiler_inline_result = eventQueue;
      eventQueue = null;
      if (JSCompiler_inline_result) {
        forEachAccumulated(JSCompiler_inline_result, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        if (hasRethrowError) throw JSCompiler_inline_result = rethrowError, hasRethrowError = false, rethrowError = null, JSCompiler_inline_result;
      }
    });
  }
  _$$_REQUIRE(_dependencyMap[2]).RCTEventEmitter.register({
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];
        for (var i = 0; i < changedIndices.length; i++) {
          var index$0 = changedIndices[i];
          JSCompiler_temp.push(touches[index$0]);
          touches[index$0] = null;
        }
        for (i = changedIndices = 0; i < touches.length; i++) index$0 = touches[i], null !== index$0 && (touches[changedIndices++] = index$0);
        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) JSCompiler_temp.push(touches[changedIndices[i]]);
      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index$0 = null;
        var target = i.target;
        null === target || undefined === target || 1 > target || (index$0 = target);
        _receiveRootNodeIDEvent(index$0, eventTopLevelType, i);
      }
    }
  });
  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
  };
  getInstanceFromNode = getInstanceFromTag;
  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode;
    var tag = inst._nativeTag;
    undefined === tag && (inst = inst.canonical, tag = inst._nativeTag);
    if (!tag) throw Error("All native instances should have a tag.");
    return inst;
  };
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? _$$_REQUIRE(_dependencyMap[2]).UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : _$$_REQUIRE(_dependencyMap[2]).UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    REACT_ELEMENT_TYPE = Symbol.for("react.element"),
    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
    REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
    REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
    REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
    REACT_MEMO_TYPE = Symbol.for("react.memo"),
    REACT_LAZY_TYPE = Symbol.for("react.lazy");
  Symbol.for("react.scope");
  Symbol.for("react.debug_trace_mode");
  var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
  Symbol.for("react.legacy_hidden");
  Symbol.for("react.cache");
  Symbol.for("react.tracing_marker");
  var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";
      case REACT_PORTAL_TYPE:
        return "Portal";
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";
      case REACT_SUSPENSE_TYPE:
        return "Suspense";
      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }
    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Consumer";
      case REACT_PROVIDER_TYPE:
        return (type._context.displayName || "Context") + ".Provider";
      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        type = type.displayName;
        type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
        return type;
      case REACT_MEMO_TYPE:
        return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
      case REACT_LAZY_TYPE:
        innerType = type._payload;
        type = type._init;
        try {
          return getComponentNameFromType(type(innerType));
        } catch (x) {}
    }
    return null;
  }
  function getComponentNameFromFiber(fiber) {
    var type = fiber.type;
    switch (fiber.tag) {
      case 24:
        return "Cache";
      case 9:
        return (type.displayName || "Context") + ".Consumer";
      case 10:
        return (type._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return type;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return getComponentNameFromType(type);
      case 8:
        return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" === typeof type) return type.displayName || type.name || null;
        if ("string" === typeof type) return type;
    }
    return null;
  }
  function getNearestMountedFiber(fiber) {
    var node = fiber,
      nearestMounted = fiber;
    if (fiber.alternate) for (; node.return;) node = node.return;else {
      fiber = node;
      do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return; while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }
  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
  }
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error("Unable to find node on an unmounted component.");
      return alternate !== fiber ? null : fiber;
    }
    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;
      if (null === parentB) {
        b = parentA.return;
        if (null !== b) {
          a = b;
          continue;
        }
        break;
      }
      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }
        throw Error("Unable to find node on an unmounted component.");
      }
      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, child$1 = parentA.child; child$1;) {
          if (child$1 === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (child$1 === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          child$1 = child$1.sibling;
        }
        if (!didFindChild) {
          for (child$1 = parentB.child; child$1;) {
            if (child$1 === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (child$1 === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            child$1 = child$1.sibling;
          }
          if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }
  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    return null !== parent ? findCurrentHostFiberImpl(parent) : null;
  }
  function findCurrentHostFiberImpl(node) {
    if (5 === node.tag || 6 === node.tag) return node;
    for (node = node.child; null !== node;) {
      var match = findCurrentHostFiberImpl(node);
      if (null !== match) return match;
      node = node.sibling;
    }
    return null;
  }
  var emptyObject = {},
    removedKeys = null,
    removedKeyCount = 0,
    deepDifferOptions = {
      unsafelyIgnoreFunctions: true
    };
  function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? true : _$$_REQUIRE(_dependencyMap[2]).deepDiffer(prevProp, nextProp, deepDifferOptions);
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);else if (node && 0 < removedKeyCount) for (i in removedKeys) if (removedKeys[i]) {
      var nextProp = node[i];
      if (undefined !== nextProp) {
        var attributeConfig = validAttributes[i];
        if (attributeConfig) {
          "function" === typeof nextProp && (nextProp = true);
          "undefined" === typeof nextProp && (nextProp = null);
          if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
          removedKeys[i] = false;
          removedKeyCount--;
        }
      }
    }
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
        i;
      for (i = 0; i < minLength; i++) updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      for (; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      for (; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, _$$_REQUIRE(_dependencyMap[2]).flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, _$$_REQUIRE(_dependencyMap[2]).flattenStyle(nextProp), validAttributes);
  }
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for (var i = 0; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
  }
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for (var i = 0; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
  }
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for (propKey in nextProps) if (attributeConfig = validAttributes[propKey]) {
      var prevProp = prevProps[propKey];
      var nextProp = nextProps[propKey];
      "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
      "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
      removedKeys && (removedKeys[propKey] = false);
      if (updatePayload && undefined !== updatePayload[propKey]) {
        if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
          if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
      } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
        if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
      } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for (var propKey$3 in prevProps) undefined === nextProps[propKey$3] && (!(attributeConfig = validAttributes[propKey$3]) || updatePayload && undefined !== updatePayload[propKey$3] || (prevProp = prevProps[propKey$3], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$3] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$3] || (removedKeys[propKey$3] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
  }
  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }
  var ReactNativeFiberHostComponent = function () {
      function ReactNativeFiberHostComponent(tag, viewConfig) {
        this._nativeTag = tag;
        this._children = [];
        this.viewConfig = viewConfig;
      }
      var _proto = ReactNativeFiberHostComponent.prototype;
      _proto.blur = function () {
        _$$_REQUIRE(_dependencyMap[2]).TextInputState.blurTextInput(this);
      };
      _proto.focus = function () {
        _$$_REQUIRE(_dependencyMap[2]).TextInputState.focusTextInput(this);
      };
      _proto.measure = function (callback) {
        _$$_REQUIRE(_dependencyMap[2]).UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
      };
      _proto.measureInWindow = function (callback) {
        _$$_REQUIRE(_dependencyMap[2]).UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
      };
      _proto.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        if ("number" === typeof relativeToNativeNode) var relativeNode = relativeToNativeNode;else relativeToNativeNode._nativeTag && (relativeNode = relativeToNativeNode._nativeTag);
        null != relativeNode && _$$_REQUIRE(_dependencyMap[2]).UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
      };
      _proto.setNativeProps = function (nativeProps) {
        nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
        null != nativeProps && _$$_REQUIRE(_dependencyMap[2]).UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
      };
      return ReactNativeFiberHostComponent;
    }(),
    rendererID = null,
    injectedHook = null;
  function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
      injectedHook.onCommitFiberRoot(rendererID, root, undefined, 128 === (root.current.flags & 128));
    } catch (err) {}
  }
  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
    log = Math.log,
    LN2 = Math.LN2;
  function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
  }
  var nextTransitionLane = 64,
    nextRetryLane = 4194304;
  function getHighestPriorityLanes(lanes) {
    switch (lanes & -lanes) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return lanes & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return lanes & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return lanes;
    }
  }
  function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0,
      suspendedLanes = root.suspendedLanes,
      pingedLanes = root.pingedLanes,
      nonIdlePendingLanes = pendingLanes & 268435455;
    if (0 !== nonIdlePendingLanes) {
      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
      0 !== nonIdleUnblockedLanes ? nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes)));
    } else nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
    if (0 === nextLanes) return 0;
    if (0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, pingedLanes = wipLanes & -wipLanes, suspendedLanes >= pingedLanes || 16 === suspendedLanes && 0 !== (pingedLanes & 4194240))) return wipLanes;
    0 !== (nextLanes & 4) && (nextLanes |= pendingLanes & 16);
    wipLanes = root.entangledLanes;
    if (0 !== wipLanes) for (root = root.entanglements, wipLanes &= nextLanes; 0 < wipLanes;) pendingLanes = 31 - clz32(wipLanes), suspendedLanes = 1 << pendingLanes, nextLanes |= root[pendingLanes], wipLanes &= ~suspendedLanes;
    return nextLanes;
  }
  function computeExpirationTime(lane, currentTime) {
    switch (lane) {
      case 1:
      case 2:
      case 4:
        return currentTime + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return currentTime + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function getLanesToRetrySynchronouslyOnError(root) {
    root = root.pendingLanes & -1073741825;
    return 0 !== root ? root : root & 1073741824 ? 1073741824 : 0;
  }
  function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194240) && (nextTransitionLane = 64);
    return lane;
  }
  function createLaneMap(initial) {
    for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
    return laneMap;
  }
  function markRootUpdated(root, updateLane, eventTime) {
    root.pendingLanes |= updateLane;
    536870912 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0);
    root = root.eventTimes;
    updateLane = 31 - clz32(updateLane);
    root[updateLane] = eventTime;
  }
  function markRootFinished(root, remainingLanes) {
    var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.mutableReadLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    remainingLanes = root.entanglements;
    var eventTimes = root.eventTimes;
    for (root = root.expirationTimes; 0 < noLongerPendingLanes;) {
      var index$8 = 31 - clz32(noLongerPendingLanes),
        lane = 1 << index$8;
      remainingLanes[index$8] = 0;
      eventTimes[index$8] = -1;
      root[index$8] = -1;
      noLongerPendingLanes &= ~lane;
    }
  }
  function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for (root = root.entanglements; rootEntangledLanes;) {
      var index$9 = 31 - clz32(rootEntangledLanes),
        lane = 1 << index$9;
      lane & entangledLanes | root[index$9] & entangledLanes && (root[index$9] |= entangledLanes);
      rootEntangledLanes &= ~lane;
    }
  }
  var currentUpdatePriority = 0;
  function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 1 < lanes ? 4 < lanes ? 0 !== (lanes & 268435455) ? 16 : 536870912 : 4 : 1;
  }
  function shim() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
  }
  var getViewConfigForType = _$$_REQUIRE(_dependencyMap[2]).ReactNativeViewConfigRegistry.get,
    UPDATE_SIGNAL = {},
    nextReactTag = 3;
  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }
  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);else {
      var tag = node._nativeTag;
      instanceCache.delete(tag);
      instanceProps.delete(tag);
      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }
  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return false;
    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });
    _$$_REQUIRE(_dependencyMap[2]).UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return false;
  }
  var scheduleTimeout = setTimeout,
    cancelTimeout = clearTimeout;
  function describeComponentFrame(name, source, ownerName) {
    source = "";
    ownerName && (source = " (created by " + ownerName + ")");
    return "\n    in " + (name || "Unknown") + source;
  }
  function describeFunctionComponentFrame(fn, source) {
    return fn ? describeComponentFrame(fn.displayName || fn.name || null, source, null) : "";
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty,
    valueStack = [],
    index = -1;
  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }
  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }
  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }
  var emptyContextObject = {},
    contextStackCursor = createCursor(emptyContextObject),
    didPerformWorkStackCursor = createCursor(false),
    previousContext = emptyContextObject;
  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
      key;
    for (key in contextTypes) context[key] = unmaskedContext[key];
    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }
  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }
  function popContext() {
    pop(didPerformWorkStackCursor);
    pop(contextStackCursor);
  }
  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context);
    push(didPerformWorkStackCursor, didChange);
  }
  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    type = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();
    for (var contextKey in instance) if (!(contextKey in type)) throw Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
    return assign({}, parentContext, instance);
  }
  function pushContextProvider(workInProgress) {
    workInProgress = (workInProgress = workInProgress.stateNode) && workInProgress.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);
    return true;
  }
  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (workInProgress = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = workInProgress, pop(didPerformWorkStackCursor), pop(contextStackCursor), push(contextStackCursor, workInProgress)) : pop(didPerformWorkStackCursor);
    push(didPerformWorkStackCursor, didChange);
  }
  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = "function" === typeof Object.is ? Object.is : is,
    syncQueue = null,
    includesLegacySyncCallbacks = false,
    isFlushingSyncQueue = false;
  function flushSyncCallbacks() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0,
        previousUpdatePriority = currentUpdatePriority;
      try {
        var queue = syncQueue;
        for (currentUpdatePriority = 1; i < queue.length; i++) {
          var callback = queue[i];
          do callback = callback(true); while (null !== callback);
        }
        syncQueue = null;
        includesLegacySyncCallbacks = false;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), _$$_REQUIRE(_dependencyMap[3]).unstable_scheduleCallback(_$$_REQUIRE(_dependencyMap[3]).unstable_ImmediatePriority, flushSyncCallbacks), error;
      } finally {
        currentUpdatePriority = previousUpdatePriority, isFlushingSyncQueue = false;
      }
    }
    return null;
  }
  var forkStack = [],
    forkStackIndex = 0,
    treeForkProvider = null,
    idStack = [],
    idStackIndex = 0,
    treeContextProvider = null;
  function popTreeContext(workInProgress) {
    for (; workInProgress === treeForkProvider;) treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, --forkStackIndex, forkStack[forkStackIndex] = null;
    for (; workInProgress === treeContextProvider;) treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, --idStackIndex, idStack[idStackIndex] = null, --idStackIndex, idStack[idStackIndex] = null;
  }
  var hydrationErrors = null,
    ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
      keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for (keysB = 0; keysB < keysA.length; keysB++) {
      var currentKey = keysA[keysB];
      if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
    }
    return true;
  }
  function describeFiber(fiber) {
    switch (fiber.tag) {
      case 5:
        return describeComponentFrame(fiber.type, null, null);
      case 16:
        return describeComponentFrame("Lazy", null, null);
      case 13:
        return describeComponentFrame("Suspense", null, null);
      case 19:
        return describeComponentFrame("SuspenseList", null, null);
      case 0:
      case 2:
      case 15:
        return describeFunctionComponentFrame(fiber.type, null);
      case 11:
        return describeFunctionComponentFrame(fiber.type.render, null);
      case 1:
        return fiber = describeFunctionComponentFrame(fiber.type, null), fiber;
      default:
        return "";
    }
  }
  function getStackByFiberInDevAndProd(workInProgress) {
    try {
      var info = "";
      do info += describeFiber(workInProgress), workInProgress = workInProgress.return; while (workInProgress);
      return info;
    } catch (x) {
      return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
  }
  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = assign({}, baseProps);
      Component = Component.defaultProps;
      for (var propName in Component) undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      return baseProps;
    }
    return baseProps;
  }
  var valueCursor = createCursor(null),
    currentlyRenderingFiber = null,
    lastContextDependency = null,
    lastFullyObservedContext = null;
  function resetContextDependencies() {
    lastFullyObservedContext = lastContextDependency = currentlyRenderingFiber = null;
  }
  function popProvider(context) {
    var currentValue = valueCursor.current;
    pop(valueCursor);
    context._currentValue = currentValue;
  }
  function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
      if (parent === propagationRoot) break;
      parent = parent.return;
    }
  }
  function prepareToReadContext(workInProgress, renderLanes) {
    currentlyRenderingFiber = workInProgress;
    lastFullyObservedContext = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (0 !== (workInProgress.lanes & renderLanes) && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }
  function readContext(context) {
    var value = context._currentValue;
    if (lastFullyObservedContext !== context) if (context = {
      context: context,
      memoizedValue: value,
      next: null
    }, null === lastContextDependency) {
      if (null === currentlyRenderingFiber) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      lastContextDependency = context;
      currentlyRenderingFiber.dependencies = {
        lanes: 0,
        firstContext: context
      };
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
  }
  var concurrentQueues = null;
  function pushConcurrentUpdateQueue(queue) {
    null === concurrentQueues ? concurrentQueues = [queue] : concurrentQueues.push(queue);
  }
  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    var interleaved = queue.interleaved;
    null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
    queue.interleaved = update;
    return markUpdateLaneFromFiberToRoot(fiber, lane);
  }
  function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    alternate = sourceFiber;
    for (sourceFiber = sourceFiber.return; null !== sourceFiber;) sourceFiber.childLanes |= lane, alternate = sourceFiber.alternate, null !== alternate && (alternate.childLanes |= lane), alternate = sourceFiber, sourceFiber = sourceFiber.return;
    return 3 === alternate.tag ? alternate.stateNode : null;
  }
  var hasForceUpdate = false;
  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null,
        interleaved: null,
        lanes: 0
      },
      effects: null
    };
  }
  function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
      baseState: current.baseState,
      firstBaseUpdate: current.firstBaseUpdate,
      lastBaseUpdate: current.lastBaseUpdate,
      shared: current.shared,
      effects: current.effects
    });
  }
  function createUpdate(eventTime, lane) {
    return {
      eventTime: eventTime,
      lane: lane,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
  }
  function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
      var pending = updateQueue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      updateQueue.pending = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    pending = updateQueue.interleaved;
    null === pending ? (update.next = update, pushConcurrentUpdateQueue(updateQueue)) : (update.next = pending.next, pending.next = update);
    updateQueue.interleaved = update;
    return markUpdateLaneFromFiberToRoot(fiber, lane);
  }
  function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194240))) {
      var queueLanes = fiber.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      fiber.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue,
      current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
      var newFirst = null,
        newLast = null;
      queue = queue.firstBaseUpdate;
      if (null !== queue) {
        do {
          var clone = {
            eventTime: queue.eventTime,
            lane: queue.lane,
            tag: queue.tag,
            payload: queue.payload,
            callback: queue.callback,
            next: null
          };
          null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
          queue = queue.next;
        } while (null !== queue);
        null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
      } else newFirst = newLast = capturedUpdate;
      queue = {
        baseState: current.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: current.shared,
        effects: current.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
  }
  function processUpdateQueue(workInProgress$jscomp$0, props, instance, renderLanes) {
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = false;
    var firstBaseUpdate = queue.firstBaseUpdate,
      lastBaseUpdate = queue.lastBaseUpdate,
      pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
      queue.shared.pending = null;
      var lastPendingUpdate = pendingQueue,
        firstPendingUpdate = lastPendingUpdate.next;
      lastPendingUpdate.next = null;
      null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
      lastBaseUpdate = lastPendingUpdate;
      var current = workInProgress$jscomp$0.alternate;
      null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
      var newState = queue.baseState;
      lastBaseUpdate = 0;
      current = firstPendingUpdate = lastPendingUpdate = null;
      pendingQueue = firstBaseUpdate;
      do {
        var updateLane = pendingQueue.lane,
          updateEventTime = pendingQueue.eventTime;
        if ((renderLanes & updateLane) === updateLane) {
          null !== current && (current = current.next = {
            eventTime: updateEventTime,
            lane: 0,
            tag: pendingQueue.tag,
            payload: pendingQueue.payload,
            callback: pendingQueue.callback,
            next: null
          });
          a: {
            var workInProgress = workInProgress$jscomp$0,
              update = pendingQueue;
            updateLane = props;
            updateEventTime = instance;
            switch (update.tag) {
              case 1:
                workInProgress = update.payload;
                if ("function" === typeof workInProgress) {
                  newState = workInProgress.call(updateEventTime, newState, updateLane);
                  break a;
                }
                newState = workInProgress;
                break a;
              case 3:
                workInProgress.flags = workInProgress.flags & -65537 | 128;
              case 0:
                workInProgress = update.payload;
                updateLane = "function" === typeof workInProgress ? workInProgress.call(updateEventTime, newState, updateLane) : workInProgress;
                if (null === updateLane || undefined === updateLane) break a;
                newState = assign({}, newState, updateLane);
                break a;
              case 2:
                hasForceUpdate = true;
            }
          }
          null !== pendingQueue.callback && 0 !== pendingQueue.lane && (workInProgress$jscomp$0.flags |= 64, updateLane = queue.effects, null === updateLane ? queue.effects = [pendingQueue] : updateLane.push(pendingQueue));
        } else updateEventTime = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: pendingQueue.callback,
          next: null
        }, null === current ? (firstPendingUpdate = current = updateEventTime, lastPendingUpdate = newState) : current = current.next = updateEventTime, lastBaseUpdate |= updateLane;
        pendingQueue = pendingQueue.next;
        if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;else updateLane = pendingQueue, pendingQueue = updateLane.next, updateLane.next = null, queue.lastBaseUpdate = updateLane, queue.shared.pending = null;
      } while (1);
      null === current && (lastPendingUpdate = newState);
      queue.baseState = lastPendingUpdate;
      queue.firstBaseUpdate = firstPendingUpdate;
      queue.lastBaseUpdate = current;
      props = queue.shared.interleaved;
      if (null !== props) {
        queue = props;
        do lastBaseUpdate |= queue.lane, queue = queue.next; while (queue !== props);
      } else null === firstBaseUpdate && (queue.shared.lanes = 0);
      workInProgressRootSkippedLanes |= lastBaseUpdate;
      workInProgress$jscomp$0.lanes = lastBaseUpdate;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }
  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    finishedWork = finishedQueue.effects;
    finishedQueue.effects = null;
    if (null !== finishedWork) for (finishedQueue = 0; finishedQueue < finishedWork.length; finishedQueue++) {
      var effect = finishedWork[finishedQueue],
        callback = effect.callback;
      if (null !== callback) {
        effect.callback = null;
        if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(instance);
      }
    }
  }
  var emptyRefsObject = new React.Component().refs;
  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
  }
  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      null !== callback && (scheduleUpdateOnFiber(callback, inst, lane, eventTime), entangleTransitions(callback, inst, lane));
    }
  };
  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }
  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
      unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }
  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
  function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4);
  }
  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;
    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        if (element) {
          if (1 !== element.tag) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://react.dev/link/strict-mode-string-ref");
          var inst = element.stateNode;
        }
        if (!inst) throw Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue.");
        var resolvedInst = inst,
          stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && "function" === typeof current.ref && current.ref._stringRef === stringRef) return current.ref;
        current = function current(value) {
          var refs = resolvedInst.refs;
          refs === emptyRefsObject && (refs = resolvedInst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };
        current._stringRef = stringRef;
        return current;
      }
      if ("string" !== typeof returnFiber) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      if (!element._owner) throw Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://react.dev/link/refs-must-have-owner for more information.");
    }
    return returnFiber;
  }
  function throwOnInvalidObjectType(returnFiber, newChild) {
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
  }
  function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
  }
  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var deletions = returnFiber.deletions;
        null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
      }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;
      for (; null !== currentFirstChild;) deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return returnFiber;
    }
    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 2, lastPlacedIndex) : newIndex;
      newFiber.flags |= 2;
      return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 2);
      return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
      var elementType = element.type;
      if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
      if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return lanes = useFiber(current, element.props), lanes.ref = coerceRef(returnFiber, current, element), lanes.return = returnFiber, lanes;
      lanes = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
      lanes.ref = coerceRef(returnFiber, current, element);
      lanes.return = returnFiber;
      return lanes;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
      if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }
    function createChild(returnFiber, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, null, newChild), lanes.return = returnFiber, lanes;
          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            return createChild(returnFiber, init(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_LAZY_TYPE:
            return key = newChild._init, updateSlot(returnFiber, oldFiber, key(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            return updateFromMap(existingChildren, returnFiber, newIdx, init(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw Error("An iterable object provided no iterator.");
      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;
      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        return iteratorFn;
      }
      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            a: {
              for (var key = newChild.key, child = currentFirstChild; null !== child;) {
                if (child.key === key) {
                  key = newChild.type;
                  if (key === REACT_FRAGMENT_TYPE) {
                    if (7 === child.tag) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      currentFirstChild = useFiber(child, newChild.props.children);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }
                  } else if (child.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    currentFirstChild = useFiber(child, newChild.props);
                    currentFirstChild.ref = coerceRef(returnFiber, child, newChild);
                    currentFirstChild.return = returnFiber;
                    returnFiber = currentFirstChild;
                    break a;
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
              }
              newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes);
            }
            return placeSingleChild(returnFiber);
          case REACT_PORTAL_TYPE:
            a: {
              for (child = newChild.key; null !== currentFirstChild;) {
                if (currentFirstChild.key === child) {
                  if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    currentFirstChild = useFiber(currentFirstChild, newChild.children || []);
                    currentFirstChild.return = returnFiber;
                    returnFiber = currentFirstChild;
                    break a;
                  } else {
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  }
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              currentFirstChild.return = returnFiber;
              returnFiber = currentFirstChild;
            }
            return placeSingleChild(returnFiber);
          case REACT_LAZY_TYPE:
            return child = newChild._init, reconcileChildFibers(returnFiber, currentFirstChild, child(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
        if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, lanes), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
  }
  var reconcileChildFibers = ChildReconciler(true),
    mountChildFibers = ChildReconciler(false),
    NO_CONTEXT = {},
    contextStackCursor$1 = createCursor(NO_CONTEXT),
    contextFiberStackCursor = createCursor(NO_CONTEXT),
    rootInstanceStackCursor = createCursor(NO_CONTEXT);
  function requiredContext(c) {
    if (c === NO_CONTEXT) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }
  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor$1, NO_CONTEXT);
    pop(contextStackCursor$1);
    push(contextStackCursor$1, {
      isInAParentText: false
    });
  }
  function popHostContainer() {
    pop(contextStackCursor$1);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }
  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var JSCompiler_inline_result = fiber.type;
    JSCompiler_inline_result = "AndroidTextInput" === JSCompiler_inline_result || "RCTMultilineTextInputView" === JSCompiler_inline_result || "RCTSinglelineTextInputView" === JSCompiler_inline_result || "RCTText" === JSCompiler_inline_result || "RCTVirtualText" === JSCompiler_inline_result;
    JSCompiler_inline_result = context.isInAParentText !== JSCompiler_inline_result ? {
      isInAParentText: JSCompiler_inline_result
    } : context;
    context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor$1, JSCompiler_inline_result));
  }
  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1), pop(contextFiberStackCursor));
  }
  var suspenseStackCursor = createCursor(0);
  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (null === state.dehydrated || shim() || shim())) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.flags & 128)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === row) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  var workInProgressSources = [];
  function resetWorkInProgressVersions() {
    for (var i = 0; i < workInProgressSources.length; i++) workInProgressSources[i]._workInProgressVersionPrimary = null;
    workInProgressSources.length = 0;
  }
  var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,
    renderLanes = 0,
    currentlyRenderingFiber$1 = null,
    currentHook = null,
    workInProgressHook = null,
    didScheduleRenderPhaseUpdate = false,
    didScheduleRenderPhaseUpdateDuringThisPass = false,
    globalClientIdCounter = 0;
  function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
  }
  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;
    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) if (!objectIs(nextDeps[i], prevDeps[i])) return false;
    return true;
  }
  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactCurrentDispatcher$1.current = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    current = Component(props, secondArg);
    if (didScheduleRenderPhaseUpdateDuringThisPass) {
      nextRenderLanes = 0;
      do {
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        if (25 <= nextRenderLanes) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        nextRenderLanes += 1;
        workInProgressHook = currentHook = null;
        workInProgress.updateQueue = null;
        ReactCurrentDispatcher$1.current = HooksDispatcherOnRerender;
        current = Component(props, secondArg);
      } while (didScheduleRenderPhaseUpdateDuringThisPass);
    }
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    workInProgress = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = false;
    if (workInProgress) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    return current;
  }
  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }
  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;else {
      if (null === nextCurrentHook) throw Error("Rendered more hooks than during the previous render.");
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }
  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }
  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var current = currentHook,
      baseQueue = current.baseQueue,
      pendingQueue = queue.pending;
    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }
      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }
    if (null !== baseQueue) {
      pendingQueue = baseQueue.next;
      current = current.baseState;
      var newBaseQueueFirst = baseFirst = null,
        newBaseQueueLast = null,
        update = pendingQueue;
      do {
        var updateLane = update.lane;
        if ((renderLanes & updateLane) === updateLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
          lane: 0,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        }), current = update.hasEagerState ? update.eagerState : reducer(current, update.action);else {
          var clone = {
            lane: updateLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          };
          null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = clone, baseFirst = current) : newBaseQueueLast = newBaseQueueLast.next = clone;
          currentlyRenderingFiber$1.lanes |= updateLane;
          workInProgressRootSkippedLanes |= updateLane;
        }
        update = update.next;
      } while (null !== update && update !== pendingQueue);
      null === newBaseQueueLast ? baseFirst = current : newBaseQueueLast.next = newBaseQueueFirst;
      objectIs(current, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = current;
      hook.baseState = baseFirst;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = current;
    }
    reducer = queue.interleaved;
    if (null !== reducer) {
      baseQueue = reducer;
      do pendingQueue = baseQueue.lane, currentlyRenderingFiber$1.lanes |= pendingQueue, workInProgressRootSkippedLanes |= pendingQueue, baseQueue = baseQueue.next; while (baseQueue !== reducer);
    } else null === baseQueue && (queue.lanes = 0);
    return [hook.memoizedState, queue.dispatch];
  }
  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch,
      lastRenderPhaseUpdate = queue.pending,
      newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      do newState = reducer(newState, update.action), update = update.next; while (update !== lastRenderPhaseUpdate);
      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }
    return [newState, dispatch];
  }
  function updateMutableSource() {}
  function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1,
      hook = updateWorkInProgressHook(),
      nextSnapshot = getSnapshot(),
      snapshotChanged = !objectIs(hook.memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = true);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [subscribe]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
      fiber.flags |= 2048;
      pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), undefined, null);
      if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      0 !== (renderLanes & 30) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
  }
  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
      getSnapshot: getSnapshot,
      value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = {
      lastEffect: null,
      stores: null
    }, currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
  }
  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  }
  function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function () {
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
  }
  function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
      var nextValue = latestGetSnapshot();
      return !objectIs(inst, nextValue);
    } catch (error) {
      return true;
    }
  }
  function forceStoreRerender(fiber) {
    var root = markUpdateLaneFromFiberToRoot(fiber, 1);
    null !== root && scheduleUpdateOnFiber(root, fiber, 1, -1);
  }
  function mountState(initialState) {
    var hook = mountWorkInProgressHook();
    "function" === typeof initialState && (initialState = initialState());
    hook.memoizedState = hook.baseState = initialState;
    initialState = {
      pending: null,
      interleaved: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    hook.queue = initialState;
    initialState = initialState.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, initialState);
    return [hook.memoizedState, initialState];
  }
  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create ? (create = {
      lastEffect: null,
      stores: null
    }, currentlyRenderingFiber$1.updateQueue = create, create.lastEffect = tag.next = tag) : (destroy = create.lastEffect, null === destroy ? create.lastEffect = tag.next = tag : (deps = destroy.next, destroy.next = tag, tag.next = deps, create.lastEffect = tag));
    return tag;
  }
  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }
  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, undefined, undefined === deps ? null : deps);
  }
  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;
    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;
      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        hook.memoizedState = pushEffect(hookFlags, create, destroy, deps);
        return;
      }
    }
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, destroy, deps);
  }
  function mountEffect(create, deps) {
    return mountEffectImpl(8390656, 8, create, deps);
  }
  function updateEffect(create, deps) {
    return updateEffectImpl(2048, 8, create, deps);
  }
  function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }
  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
  }
  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }
  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
    return updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
  }
  function mountDebugValue() {}
  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }
  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    nextCreate = nextCreate();
    hook.memoizedState = [nextCreate, deps];
    return nextCreate;
  }
  function updateDeferredValueImpl(hook, prevValue, value) {
    if (0 === (renderLanes & 21)) return hook.baseState && (hook.baseState = false, didReceiveUpdate = true), hook.memoizedState = value;
    objectIs(value, prevValue) || (value = claimNextTransitionLane(), currentlyRenderingFiber$1.lanes |= value, workInProgressRootSkippedLanes |= value, hook.baseState = true);
    return prevValue;
  }
  function startTransition(setPending, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 4 > previousPriority ? previousPriority : 4;
    setPending(true);
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = {};
    try {
      setPending(false), callback();
    } finally {
      currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }
  function updateId() {
    return updateWorkInProgressHook().memoizedState;
  }
  function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
      lane: lane,
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, action);else if (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(action, fiber, lane, eventTime);
      entangleTransitionUpdate(action, queue, lane);
    }
  }
  function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber),
      update = {
        lane: lane,
        action: action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);else {
      var alternate = fiber.alternate;
      if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
          eagerState = alternate(currentState, action);
        update.hasEagerState = true;
        update.eagerState = eagerState;
        if (objectIs(eagerState, currentState)) {
          var interleaved = queue.interleaved;
          null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
          queue.interleaved = update;
          return;
        }
      } catch (error) {} finally {}
      action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
      null !== action && (update = requestEventTime(), scheduleUpdateOnFiber(action, fiber, lane, update), entangleTransitionUpdate(action, queue, lane));
    }
  }
  function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
  }
  function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
  }
  function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194240)) {
      var queueLanes = queue.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      queue.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnMount = {
      readContext: readContext,
      useCallback: function useCallback(callback, deps) {
        mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
        return callback;
      },
      useContext: readContext,
      useEffect: mountEffect,
      useImperativeHandle: function useImperativeHandle(ref, create, deps) {
        deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
        return mountEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
      },
      useLayoutEffect: function useLayoutEffect(create, deps) {
        return mountEffectImpl(4, 4, create, deps);
      },
      useInsertionEffect: function useInsertionEffect(create, deps) {
        return mountEffectImpl(4, 2, create, deps);
      },
      useMemo: function useMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = undefined === deps ? null : deps;
        nextCreate = nextCreate();
        hook.memoizedState = [nextCreate, deps];
        return nextCreate;
      },
      useReducer: function useReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        initialArg = undefined !== init ? init(initialArg) : initialArg;
        hook.memoizedState = hook.baseState = initialArg;
        reducer = {
          pending: null,
          interleaved: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialArg
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [hook.memoizedState, reducer];
      },
      useRef: function useRef(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
          current: initialValue
        };
        return hook.memoizedState = initialValue;
      },
      useState: mountState,
      useDebugValue: mountDebugValue,
      useDeferredValue: function useDeferredValue(value) {
        return mountWorkInProgressHook().memoizedState = value;
      },
      useTransition: function useTransition() {
        var _mountState = mountState(false),
          isPending = _mountState[0];
        _mountState = startTransition.bind(null, _mountState[1]);
        mountWorkInProgressHook().memoizedState = _mountState;
        return [isPending, _mountState];
      },
      useMutableSource: function useMutableSource() {},
      useSyncExternalStore: function useSyncExternalStore(subscribe, getSnapshot) {
        var fiber = currentlyRenderingFiber$1,
          hook = mountWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (renderLanes & 30) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
      },
      useId: function useId() {
        var hook = mountWorkInProgressHook(),
          identifierPrefix = workInProgressRoot.identifierPrefix,
          globalClientId = globalClientIdCounter++;
        identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
      },
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnUpdate = {
      readContext: readContext,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: updateReducer,
      useRef: updateRef,
      useState: function useState() {
        return updateReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function useDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value);
      },
      useTransition: function useTransition() {
        var isPending = updateReducer(basicStateReducer)[0],
          start = updateWorkInProgressHook().memoizedState;
        return [isPending, start];
      },
      useMutableSource: updateMutableSource,
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnRerender = {
      readContext: readContext,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: rerenderReducer,
      useRef: updateRef,
      useState: function useState() {
        return rerenderReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function useDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? hook.memoizedState = value : updateDeferredValueImpl(hook, currentHook.memoizedState, value);
      },
      useTransition: function useTransition() {
        var isPending = rerenderReducer(basicStateReducer)[0],
          start = updateWorkInProgressHook().memoizedState;
        return [isPending, start];
      },
      useMutableSource: updateMutableSource,
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      unstable_isNewReconciler: false
    };
  function createCapturedValueAtFiber(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source),
      digest: null
    };
  }
  function createCapturedValue(value, digest, stack) {
    return {
      value: value,
      source: null,
      stack: null != stack ? stack : null,
      digest: null != digest ? digest : null
    };
  }
  if ("function" !== typeof _$$_REQUIRE(_dependencyMap[2]).ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
  function logCapturedError(boundary, errorInfo) {
    try {
      false !== _$$_REQUIRE(_dependencyMap[2]).ReactFiberErrorDialog.showErrorDialog({
        componentStack: null !== errorInfo.stack ? errorInfo.stack : "",
        error: errorInfo.value,
        errorBoundary: null !== boundary && 1 === boundary.tag ? boundary.stateNode : null
      }) && console.error(errorInfo.value);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;
  function createRootErrorUpdate(fiber, errorInfo, lane) {
    lane = createUpdate(-1, lane);
    lane.tag = 3;
    lane.payload = {
      element: null
    };
    var error = errorInfo.value;
    lane.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logCapturedError(fiber, errorInfo);
    };
    return lane;
  }
  function createClassErrorUpdate(fiber, errorInfo, lane) {
    lane = createUpdate(-1, lane);
    lane.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;
      lane.payload = function () {
        return getDerivedStateFromError(error);
      };
      lane.callback = function () {
        logCapturedError(fiber, errorInfo);
      };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (lane.callback = function () {
      logCapturedError(fiber, errorInfo);
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return lane;
  }
  function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
      pingCache = root.pingCache = new PossiblyWeakMap();
      var threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), undefined === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
  }
  var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,
    didReceiveUpdate = false;
  function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
  function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderLanes);
    nextProps = renderWithHooks(current, workInProgress, Component, nextProps, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.flags &= -2053, current.lanes &= ~renderLanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
  }
  function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
      current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return workInProgress.child = current;
    }
    type = current.child;
    if (0 === (current.lanes & renderLanes)) {
      var prevProps = type.memoizedProps;
      Component = Component.compare;
      Component = null !== Component ? Component : shallowEqual;
      if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }
  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
      var prevProps = current.memoizedProps;
      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = false, workInProgress.pendingProps = nextProps = prevProps, 0 !== (current.lanes & renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = true);else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
  }
  function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      nextChildren = nextProps.children,
      prevState = null !== current ? current.memoizedState : null;
    if ("hidden" === nextProps.mode) {
      if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
        baseLanes: 0,
        cachePool: null,
        transitions: null
      }, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= renderLanes;else {
        if (0 === (renderLanes & 1073741824)) return current = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, workInProgress.lanes = workInProgress.childLanes = 1073741824, workInProgress.memoizedState = {
          baseLanes: current,
          cachePool: null,
          transitions: null
        }, workInProgress.updateQueue = null, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= current, null;
        workInProgress.memoizedState = {
          baseLanes: 0,
          cachePool: null,
          transitions: null
        };
        nextProps = null !== prevState ? prevState.baseLanes : renderLanes;
        push(subtreeRenderLanesCursor, subtreeRenderLanes);
        subtreeRenderLanes |= nextProps;
      }
    } else null !== prevState ? (nextProps = prevState.baseLanes | renderLanes, workInProgress.memoizedState = null) : nextProps = renderLanes, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= nextProps;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }
  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.flags |= 512;
  }
  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderLanes);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.flags &= -2053, current.lanes &= ~renderLanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
  }
  function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;
    prepareToReadContext(workInProgress, renderLanes);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = true;else if (null === current) {
      var instance = workInProgress.stateNode,
        oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
        contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
        hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      oldContext = workInProgress.memoizedState;
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4), nextProps = false);
    } else {
      instance = workInProgress.stateNode;
      cloneUpdateQueue(current, workInProgress);
      oldProps = workInProgress.memoizedProps;
      contextType = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
      instance.props = contextType;
      hasNewLifecycles = workInProgress.pendingProps;
      oldState = instance.context;
      oldContext = Component.contextType;
      "object" === typeof oldContext && null !== oldContext ? oldContext = readContext(oldContext) : (oldContext = isContextProvider(Component) ? previousContext : contextStackCursor.current, oldContext = getMaskedContext(workInProgress, oldContext));
      var getDerivedStateFromProps$jscomp$0 = Component.getDerivedStateFromProps;
      (getDerivedStateFromProps = "function" === typeof getDerivedStateFromProps$jscomp$0 || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== hasNewLifecycles || oldState !== oldContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldContext);
      hasForceUpdate = false;
      oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      var newState = workInProgress.memoizedState;
      oldProps !== hasNewLifecycles || oldState !== newState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps$jscomp$0 && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps$jscomp$0, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldContext) || false) ? (getDerivedStateFromProps || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldContext, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = false);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, hasContext, renderLanes);
  }
  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    var didCaptureError = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$1.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes)) : reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }
  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }
  var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
  };
  function mountSuspenseOffscreenState(renderLanes) {
    return {
      baseLanes: renderLanes,
      cachePool: null,
      transitions: null
    };
  }
  function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      suspenseContext = suspenseStackCursor.current,
      showFallback = false,
      didSuspend = 0 !== (workInProgress.flags & 128),
      JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseContext & 2));
    if (JSCompiler_temp) showFallback = true, workInProgress.flags &= -129;else if (null === current || null !== current.memoizedState) suspenseContext |= 1;
    push(suspenseStackCursor, suspenseContext & 1);
    if (null === current) {
      current = workInProgress.memoizedState;
      if (null !== current && null !== current.dehydrated) return 0 === (workInProgress.mode & 1) ? workInProgress.lanes = 1 : shim() ? workInProgress.lanes = 8 : workInProgress.lanes = 1073741824, null;
      didSuspend = nextProps.children;
      current = nextProps.fallback;
      return showFallback ? (nextProps = workInProgress.mode, showFallback = workInProgress.child, didSuspend = {
        mode: "hidden",
        children: didSuspend
      }, 0 === (nextProps & 1) && null !== showFallback ? (showFallback.childLanes = 0, showFallback.pendingProps = didSuspend) : showFallback = createFiberFromOffscreen(didSuspend, nextProps, 0, null), current = createFiberFromFragment(current, nextProps, renderLanes, null), showFallback.return = workInProgress, current.return = workInProgress, showFallback.sibling = current, workInProgress.child = showFallback, workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, current) : mountSuspensePrimaryChildren(workInProgress, didSuspend);
    }
    suspenseContext = current.memoizedState;
    if (null !== suspenseContext && (JSCompiler_temp = suspenseContext.dehydrated, null !== JSCompiler_temp)) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, JSCompiler_temp, suspenseContext, renderLanes);
    if (showFallback) {
      showFallback = nextProps.fallback;
      didSuspend = workInProgress.mode;
      suspenseContext = current.child;
      JSCompiler_temp = suspenseContext.sibling;
      var primaryChildProps = {
        mode: "hidden",
        children: nextProps.children
      };
      0 === (didSuspend & 1) && workInProgress.child !== suspenseContext ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(suspenseContext, primaryChildProps), nextProps.subtreeFlags = suspenseContext.subtreeFlags & 14680064);
      null !== JSCompiler_temp ? showFallback = createWorkInProgress(JSCompiler_temp, showFallback) : (showFallback = createFiberFromFragment(showFallback, didSuspend, renderLanes, null), showFallback.flags |= 2);
      showFallback.return = workInProgress;
      nextProps.return = workInProgress;
      nextProps.sibling = showFallback;
      workInProgress.child = nextProps;
      nextProps = showFallback;
      showFallback = workInProgress.child;
      didSuspend = current.child.memoizedState;
      didSuspend = null === didSuspend ? mountSuspenseOffscreenState(renderLanes) : {
        baseLanes: didSuspend.baseLanes | renderLanes,
        cachePool: null,
        transitions: didSuspend.transitions
      };
      showFallback.memoizedState = didSuspend;
      showFallback.childLanes = current.childLanes & ~renderLanes;
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return nextProps;
    }
    showFallback = current.child;
    current = showFallback.sibling;
    nextProps = createWorkInProgress(showFallback, {
      mode: "visible",
      children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (nextProps.lanes = renderLanes);
    nextProps.return = workInProgress;
    nextProps.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [current], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = nextProps;
    workInProgress.memoizedState = null;
    return nextProps;
  }
  function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
      mode: "visible",
      children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
  }
  function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
    null !== recoverableError && (null === hydrationErrors ? hydrationErrors = [recoverableError] : hydrationErrors.push(recoverableError));
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
  }
  function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
    if (didSuspend) {
      if (workInProgress.flags & 256) return workInProgress.flags &= -257, suspenseState = createCapturedValue(Error("There was an error while hydrating this Suspense boundary. Switched to client rendering.")), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
      if (null !== workInProgress.memoizedState) return workInProgress.child = current.child, workInProgress.flags |= 128, null;
      suspenseState = nextProps.fallback;
      didSuspend = workInProgress.mode;
      nextProps = createFiberFromOffscreen({
        mode: "visible",
        children: nextProps.children
      }, didSuspend, 0, null);
      suspenseState = createFiberFromFragment(suspenseState, didSuspend, renderLanes, null);
      suspenseState.flags |= 2;
      nextProps.return = workInProgress;
      suspenseState.return = workInProgress;
      nextProps.sibling = suspenseState;
      workInProgress.child = nextProps;
      0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return suspenseState;
    }
    if (0 === (workInProgress.mode & 1)) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);
    if (shim()) return suspenseState = shim().digest, suspenseState = createCapturedValue(Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), suspenseState, undefined), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
    didSuspend = 0 !== (renderLanes & current.childLanes);
    if (didReceiveUpdate || didSuspend) {
      nextProps = workInProgressRoot;
      if (null !== nextProps) {
        switch (renderLanes & -renderLanes) {
          case 4:
            didSuspend = 2;
            break;
          case 16:
            didSuspend = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            didSuspend = 32;
            break;
          case 536870912:
            didSuspend = 268435456;
            break;
          default:
            didSuspend = 0;
        }
        didSuspend = 0 !== (didSuspend & (nextProps.suspendedLanes | renderLanes)) ? 0 : didSuspend;
        0 !== didSuspend && didSuspend !== suspenseState.retryLane && (suspenseState.retryLane = didSuspend, markUpdateLaneFromFiberToRoot(current, didSuspend), scheduleUpdateOnFiber(nextProps, current, didSuspend, -1));
      }
      renderDidSuspendDelayIfPossible();
      suspenseState = createCapturedValue(Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
    }
    if (shim()) return workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim(), null;
    current = mountSuspensePrimaryChildren(workInProgress, nextProps.children);
    current.flags |= 4096;
    return current;
  }
  function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
  }
  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
  }
  function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      revealOrder = nextProps.revealOrder,
      tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;else {
      if (null !== current && 0 !== (current.flags & 128)) a: for (current = workInProgress.child; null !== current;) {
        if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;
        for (; null === current.sibling;) {
          if (null === current.return || current.return === workInProgress) break a;
          current = current.return;
        }
        current.sibling.return = current.return;
        current = current.sibling;
      }
      nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderLanes = workInProgress.child;
        for (revealOrder = null; null !== renderLanes;) current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
        renderLanes = revealOrder;
        null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderLanes, tailMode);
        break;
      case "backwards":
        renderLanes = null;
        revealOrder = workInProgress.child;
        for (workInProgress.child = null; null !== revealOrder;) {
          current = revealOrder.alternate;
          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress.child = revealOrder;
            break;
          }
          current = revealOrder.sibling;
          revealOrder.sibling = renderLanes;
          renderLanes = revealOrder;
          revealOrder = current;
        }
        initSuspenseListRenderState(workInProgress, true, renderLanes, null, tailMode);
        break;
      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;
      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }
  function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
  }
  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
      current = workInProgress.child;
      renderLanes = createWorkInProgress(current, current.pendingProps);
      workInProgress.child = renderLanes;
      for (renderLanes.return = workInProgress; null !== current.sibling;) current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
      renderLanes.sibling = null;
    }
    return workInProgress.child;
  }
  function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch (workInProgress.tag) {
      case 3:
        pushHostRootContext(workInProgress);
        break;
      case 5:
        pushHostContext(workInProgress);
        break;
      case 1:
        isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
        break;
      case 4:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case 10:
        var context = workInProgress.type._context,
          nextValue = workInProgress.memoizedProps.value;
        push(valueCursor, context._currentValue);
        context._currentValue = nextValue;
        break;
      case 13:
        context = workInProgress.memoizedState;
        if (null !== context) {
          if (null !== context.dehydrated) return push(suspenseStackCursor, suspenseStackCursor.current & 1), workInProgress.flags |= 128, null;
          if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
          push(suspenseStackCursor, suspenseStackCursor.current & 1);
          current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          return null !== current ? current.sibling : null;
        }
        push(suspenseStackCursor, suspenseStackCursor.current & 1);
        break;
      case 19:
        context = 0 !== (renderLanes & workInProgress.childLanes);
        if (0 !== (current.flags & 128)) {
          if (context) return updateSuspenseListComponent(current, workInProgress, renderLanes);
          workInProgress.flags |= 128;
        }
        nextValue = workInProgress.memoizedState;
        null !== nextValue && (nextValue.rendering = null, nextValue.tail = null, nextValue.lastEffect = null);
        push(suspenseStackCursor, suspenseStackCursor.current);
        if (context) break;else return null;
      case 22:
      case 23:
        return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }
  var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
  appendAllChildren = function appendAllChildren(parent, workInProgress) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag || 6 === node.tag) parent._children.push(node.stateNode);else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };
  updateHostContainer = function updateHostContainer() {};
  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    current.memoizedProps !== newProps && (requiredContext(contextStackCursor$1.current), workInProgress.updateQueue = UPDATE_SIGNAL) && (workInProgress.flags |= 4);
  };
  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (workInProgress.flags |= 4);
  };
  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;
        for (var lastTailNode = null; null !== hasRenderedATailFallback;) null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;
      case "collapsed":
        lastTailNode = renderState.tail;
        for (var lastTailNode$62 = null; null !== lastTailNode;) null !== lastTailNode.alternate && (lastTailNode$62 = lastTailNode), lastTailNode = lastTailNode.sibling;
        null === lastTailNode$62 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$62.sibling = null;
    }
  }
  function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child,
      newChildLanes = 0,
      subtreeFlags = 0;
    if (didBailout) for (var child$63 = completedWork.child; null !== child$63;) newChildLanes |= child$63.lanes | child$63.childLanes, subtreeFlags |= child$63.subtreeFlags & 14680064, subtreeFlags |= child$63.flags & 14680064, child$63.return = completedWork, child$63 = child$63.sibling;else for (child$63 = completedWork.child; null !== child$63;) newChildLanes |= child$63.lanes | child$63.childLanes, subtreeFlags |= child$63.subtreeFlags, subtreeFlags |= child$63.flags, child$63.return = completedWork, child$63 = child$63.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
  }
  function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    popTreeContext(workInProgress);
    switch (workInProgress.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return bubbleProperties(workInProgress), null;
      case 1:
        return isContextProvider(workInProgress.type) && popContext(), bubbleProperties(workInProgress), null;
      case 3:
        return renderLanes = workInProgress.stateNode, popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), resetWorkInProgressVersions(), renderLanes.pendingContext && (renderLanes.context = renderLanes.pendingContext, renderLanes.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 5:
        popHostContext(workInProgress);
        renderLanes = requiredContext(rootInstanceStackCursor.current);
        var type = workInProgress.type;
        if (null !== current && null != workInProgress.stateNode) updateHostComponent$1(current, workInProgress, type, newProps, renderLanes), current.ref !== workInProgress.ref && (workInProgress.flags |= 512);else {
          if (!newProps) {
            if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            bubbleProperties(workInProgress);
            return null;
          }
          requiredContext(contextStackCursor$1.current);
          current = allocateTag();
          type = getViewConfigForType(type);
          var updatePayload = diffProperties(null, emptyObject, newProps, type.validAttributes);
          _$$_REQUIRE(_dependencyMap[2]).UIManager.createView(current, type.uiViewClassName, renderLanes, updatePayload);
          renderLanes = new ReactNativeFiberHostComponent(current, type, workInProgress);
          instanceCache.set(current, workInProgress);
          instanceProps.set(current, newProps);
          appendAllChildren(renderLanes, workInProgress, false, false);
          workInProgress.stateNode = renderLanes;
          finalizeInitialChildren(renderLanes) && (workInProgress.flags |= 4);
          null !== workInProgress.ref && (workInProgress.flags |= 512);
        }
        bubbleProperties(workInProgress);
        return null;
      case 6:
        if (current && null != workInProgress.stateNode) updateHostText$1(current, workInProgress, current.memoizedProps, newProps);else {
          if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          current = requiredContext(rootInstanceStackCursor.current);
          if (!requiredContext(contextStackCursor$1.current).isInAParentText) throw Error("Text strings must be rendered within a <Text> component.");
          renderLanes = allocateTag();
          _$$_REQUIRE(_dependencyMap[2]).UIManager.createView(renderLanes, "RCTRawText", current, {
            text: newProps
          });
          instanceCache.set(renderLanes, workInProgress);
          workInProgress.stateNode = renderLanes;
        }
        bubbleProperties(workInProgress);
        return null;
      case 13:
        pop(suspenseStackCursor);
        newProps = workInProgress.memoizedState;
        if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
          if (null !== newProps && null !== newProps.dehydrated) {
            if (null === current) {
              throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
            0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
            workInProgress.flags |= 4;
            bubbleProperties(workInProgress);
            type = false;
          } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), type = true;
          if (!type) return workInProgress.flags & 65536 ? workInProgress : null;
        }
        if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
        renderLanes = null !== newProps;
        renderLanes !== (null !== current && null !== current.memoizedState) && renderLanes && (workInProgress.child.flags |= 8192, 0 !== (workInProgress.mode & 1) && (null === current || 0 !== (suspenseStackCursor.current & 1) ? 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3) : renderDidSuspendDelayIfPossible()));
        null !== workInProgress.updateQueue && (workInProgress.flags |= 4);
        bubbleProperties(workInProgress);
        return null;
      case 4:
        return popHostContainer(), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 10:
        return popProvider(workInProgress.type._context), bubbleProperties(workInProgress), null;
      case 17:
        return isContextProvider(workInProgress.type) && popContext(), bubbleProperties(workInProgress), null;
      case 19:
        pop(suspenseStackCursor);
        type = workInProgress.memoizedState;
        if (null === type) return bubbleProperties(workInProgress), null;
        newProps = 0 !== (workInProgress.flags & 128);
        updatePayload = type.rendering;
        if (null === updatePayload) {
          if (newProps) cutOffTailIfNeeded(type, false);else {
            if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for (current = workInProgress.child; null !== current;) {
              updatePayload = findFirstSuspended(current);
              if (null !== updatePayload) {
                workInProgress.flags |= 128;
                cutOffTailIfNeeded(type, false);
                current = updatePayload.updateQueue;
                null !== current && (workInProgress.updateQueue = current, workInProgress.flags |= 4);
                workInProgress.subtreeFlags = 0;
                current = renderLanes;
                for (renderLanes = workInProgress.child; null !== renderLanes;) newProps = renderLanes, type = current, newProps.flags &= 14680066, updatePayload = newProps.alternate, null === updatePayload ? (newProps.childLanes = 0, newProps.lanes = type, newProps.child = null, newProps.subtreeFlags = 0, newProps.memoizedProps = null, newProps.memoizedState = null, newProps.updateQueue = null, newProps.dependencies = null, newProps.stateNode = null) : (newProps.childLanes = updatePayload.childLanes, newProps.lanes = updatePayload.lanes, newProps.child = updatePayload.child, newProps.subtreeFlags = 0, newProps.deletions = null, newProps.memoizedProps = updatePayload.memoizedProps, newProps.memoizedState = updatePayload.memoizedState, newProps.updateQueue = updatePayload.updateQueue, newProps.type = updatePayload.type, type = updatePayload.dependencies, newProps.dependencies = null === type ? null : {
                  lanes: type.lanes,
                  firstContext: type.firstContext
                }), renderLanes = renderLanes.sibling;
                push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }
              current = current.sibling;
            }
            null !== type.tail && _$$_REQUIRE(_dependencyMap[3]).unstable_now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          }
        } else {
          if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
            if (workInProgress.flags |= 128, newProps = true, current = current.updateQueue, null !== current && (workInProgress.updateQueue = current, workInProgress.flags |= 4), cutOffTailIfNeeded(type, true), null === type.tail && "hidden" === type.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
          } else 2 * _$$_REQUIRE(_dependencyMap[3]).unstable_now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 1073741824 !== renderLanes && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          type.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = type.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, type.last = updatePayload);
        }
        if (null !== type.tail) return workInProgress = type.tail, type.rendering = workInProgress, type.tail = workInProgress.sibling, type.renderingStartTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
        bubbleProperties(workInProgress);
        return null;
      case 22:
      case 23:
        return popRenderLanes(), renderLanes = null !== workInProgress.memoizedState, null !== current && null !== current.memoizedState !== renderLanes && (workInProgress.flags |= 8192), renderLanes && 0 !== (workInProgress.mode & 1) ? 0 !== (subtreeRenderLanes & 1073741824) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }
  function unwindWork(current, workInProgress) {
    popTreeContext(workInProgress);
    switch (workInProgress.tag) {
      case 1:
        return isContextProvider(workInProgress.type) && popContext(), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 3:
        return popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), resetWorkInProgressVersions(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 5:
        return popHostContext(workInProgress), null;
      case 13:
        pop(suspenseStackCursor);
        current = workInProgress.memoizedState;
        if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
        current = workInProgress.flags;
        return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 19:
        return pop(suspenseStackCursor), null;
      case 4:
        return popHostContainer(), null;
      case 10:
        return popProvider(workInProgress.type._context), null;
      case 22:
      case 23:
        return popRenderLanes(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
    nextEffect = null;
  function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    } else ref.current = null;
  }
  function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
    try {
      destroy();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  var shouldFireAfterActiveInstanceBlur = false;
  function commitBeforeMutationEffects(root, firstChild) {
    for (nextEffect = firstChild; null !== nextEffect;) if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;else for (; null !== nextEffect;) {
      root = nextEffect;
      try {
        var current = root.alternate;
        if (0 !== (root.flags & 1024)) switch (root.tag) {
          case 0:
          case 11:
          case 15:
            break;
          case 1:
            if (null !== current) {
              var prevProps = current.memoizedProps,
                prevState = current.memoizedState,
                instance = root.stateNode,
                snapshot = instance.getSnapshotBeforeUpdate(root.elementType === root.type ? prevProps : resolveDefaultProps(root.type, prevProps), prevState);
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          case 3:
            break;
          case 5:
          case 6:
          case 4:
          case 17:
            break;
          default:
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      } catch (error) {
        captureCommitPhaseError(root, root.return, error);
      }
      firstChild = root.sibling;
      if (null !== firstChild) {
        firstChild.return = root.return;
        nextEffect = firstChild;
        break;
      }
      nextEffect = root.return;
    }
    current = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = false;
    return current;
  }
  function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
    var updateQueue = finishedWork.updateQueue;
    updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;
    if (null !== updateQueue) {
      var effect = updateQueue = updateQueue.next;
      do {
        if ((effect.tag & flags) === flags) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
        }
        effect = effect.next;
      } while (effect !== updateQueue);
    }
  }
  function commitHookEffectListMount(flags, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;
    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;
      do {
        if ((effect.tag & flags) === flags) {
          var create$75 = effect.create;
          effect.destroy = create$75();
        }
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }
  function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
  }
  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
  }
  function getHostSibling(fiber) {
    a: for (;;) {
      for (; null === fiber.sibling;) {
        if (null === fiber.return || isHostParent(fiber.return)) return null;
        fiber = fiber.return;
      }
      fiber.sibling.return = fiber.return;
      for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;) {
        if (fiber.flags & 2) continue a;
        if (null === fiber.child || 4 === fiber.tag) continue a;else fiber.child.return = fiber, fiber = fiber.child;
      }
      if (!(fiber.flags & 2)) return fiber.stateNode;
    }
  }
  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) {
      if (node = node.stateNode, before) {
        if ("number" === typeof parent) throw Error("Container does not support insertBefore operation");
      } else _$$_REQUIRE(_dependencyMap[2]).UIManager.setChildren(parent, ["number" === typeof node ? node : node._nativeTag]);
    } else if (4 !== tag && (node = node.child, null !== node)) for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node;) insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
  }
  function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) {
      if (node = node.stateNode, before) {
        tag = parent._children;
        var index = tag.indexOf(node);
        0 <= index ? (tag.splice(index, 1), before = tag.indexOf(before), tag.splice(before, 0, node), _$$_REQUIRE(_dependencyMap[2]).UIManager.manageChildren(parent._nativeTag, [index], [before], [], [], [])) : (before = tag.indexOf(before), tag.splice(before, 0, node), _$$_REQUIRE(_dependencyMap[2]).UIManager.manageChildren(parent._nativeTag, [], [], ["number" === typeof node ? node : node._nativeTag], [before], []));
      } else before = "number" === typeof node ? node : node._nativeTag, tag = parent._children, index = tag.indexOf(node), 0 <= index ? (tag.splice(index, 1), tag.push(node), _$$_REQUIRE(_dependencyMap[2]).UIManager.manageChildren(parent._nativeTag, [index], [tag.length - 1], [], [], [])) : (tag.push(node), _$$_REQUIRE(_dependencyMap[2]).UIManager.manageChildren(parent._nativeTag, [], [], [before], [tag.length - 1], []));
    } else if (4 !== tag && (node = node.child, null !== node)) for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node;) insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
  }
  var hostParent = null,
    hostParentIsContainer = false;
  function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for (parent = parent.child; null !== parent;) commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
  }
  function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch (deletedFiber.tag) {
      case 5:
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
      case 6:
        var prevHostParent = hostParent,
          prevHostParentIsContainer = hostParentIsContainer;
        hostParent = null;
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        hostParent = prevHostParent;
        hostParentIsContainer = prevHostParentIsContainer;
        null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, recursivelyUncacheFiberNode(deletedFiber.stateNode), _$$_REQUIRE(_dependencyMap[2]).UIManager.manageChildren(finishedRoot, [], [], [], [], [0])) : (finishedRoot = hostParent, nearestMountedAncestor = deletedFiber.stateNode, recursivelyUncacheFiberNode(nearestMountedAncestor), deletedFiber = finishedRoot._children, nearestMountedAncestor = deletedFiber.indexOf(nearestMountedAncestor), deletedFiber.splice(nearestMountedAncestor, 1), _$$_REQUIRE(_dependencyMap[2]).UIManager.manageChildren(finishedRoot._nativeTag, [], [], [], [], [nearestMountedAncestor])));
        break;
      case 18:
        null !== hostParent && shim(hostParent, deletedFiber.stateNode);
        break;
      case 4:
        prevHostParent = hostParent;
        prevHostParentIsContainer = hostParentIsContainer;
        hostParent = deletedFiber.stateNode.containerInfo;
        hostParentIsContainer = true;
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        hostParent = prevHostParent;
        hostParentIsContainer = prevHostParentIsContainer;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        prevHostParent = deletedFiber.updateQueue;
        if (null !== prevHostParent && (prevHostParent = prevHostParent.lastEffect, null !== prevHostParent)) {
          prevHostParentIsContainer = prevHostParent = prevHostParent.next;
          do {
            var _effect = prevHostParentIsContainer,
              destroy = _effect.destroy;
            _effect = _effect.tag;
            undefined !== destroy && (0 !== (_effect & 2) ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : 0 !== (_effect & 4) && safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy));
            prevHostParentIsContainer = prevHostParentIsContainer.next;
          } while (prevHostParentIsContainer !== prevHostParent);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 1:
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
        prevHostParent = deletedFiber.stateNode;
        if ("function" === typeof prevHostParent.componentWillUnmount) try {
          prevHostParent.props = deletedFiber.memoizedProps, prevHostParent.state = deletedFiber.memoizedState, prevHostParent.componentWillUnmount();
        } catch (error) {
          captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 21:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 22:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      default:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
  }
  function attachSuspenseRetryListeners(finishedWork) {
    var wakeables = finishedWork.updateQueue;
    if (null !== wakeables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
      wakeables.forEach(function (wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
      });
    }
  }
  function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i];
      try {
        var root = root$jscomp$0,
          returnFiber = parentFiber,
          parent = returnFiber;
        a: for (; null !== parent;) {
          switch (parent.tag) {
            case 5:
              hostParent = parent.stateNode;
              hostParentIsContainer = false;
              break a;
            case 3:
              hostParent = parent.stateNode.containerInfo;
              hostParentIsContainer = true;
              break a;
            case 4:
              hostParent = parent.stateNode.containerInfo;
              hostParentIsContainer = true;
              break a;
          }
          parent = parent.return;
        }
        if (null === hostParent) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
        hostParent = null;
        hostParentIsContainer = false;
        var alternate = childToDelete.alternate;
        null !== alternate && (alternate.return = null);
        childToDelete.return = null;
      } catch (error) {
        captureCommitPhaseError(childToDelete, parentFiber, error);
      }
    }
    if (parentFiber.subtreeFlags & 12854) for (parentFiber = parentFiber.child; null !== parentFiber;) commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
  }
  function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate,
      flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 4) {
          try {
            commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
          try {
            commitHookEffectListUnmount(5, finishedWork, finishedWork.return);
          } catch (error$85) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$85);
          }
        }
        break;
      case 1:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && null !== current && safelyDetachRef(current, current.return);
        break;
      case 5:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && null !== current && safelyDetachRef(current, current.return);
        if (flags & 4) {
          var instance$87 = finishedWork.stateNode;
          if (null != instance$87) {
            var newProps = finishedWork.memoizedProps,
              oldProps = null !== current ? current.memoizedProps : newProps,
              updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;
            if (null !== updatePayload) try {
              var viewConfig = instance$87.viewConfig;
              instanceProps.set(instance$87._nativeTag, newProps);
              var updatePayload$jscomp$0 = diffProperties(null, oldProps, newProps, viewConfig.validAttributes);
              null != updatePayload$jscomp$0 && _$$_REQUIRE(_dependencyMap[2]).UIManager.updateView(instance$87._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            } catch (error$88) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error$88);
            }
          }
        }
        break;
      case 6:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 4) {
          if (null === finishedWork.stateNode) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          viewConfig = finishedWork.stateNode;
          updatePayload$jscomp$0 = finishedWork.memoizedProps;
          try {
            _$$_REQUIRE(_dependencyMap[2]).UIManager.updateView(viewConfig, "RCTRawText", {
              text: updatePayload$jscomp$0
            });
          } catch (error$89) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$89);
          }
        }
        break;
      case 3:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 4:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 13:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        viewConfig = finishedWork.child;
        viewConfig.flags & 8192 && (updatePayload$jscomp$0 = null !== viewConfig.memoizedState, viewConfig.stateNode.isHidden = updatePayload$jscomp$0, !updatePayload$jscomp$0 || null !== viewConfig.alternate && null !== viewConfig.alternate.memoizedState || (globalMostRecentFallbackTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now()));
        flags & 4 && attachSuspenseRetryListeners(finishedWork);
        break;
      case 22:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 8192) a: for (viewConfig = null !== finishedWork.memoizedState, finishedWork.stateNode.isHidden = viewConfig, updatePayload$jscomp$0 = null, current = finishedWork;;) {
          if (5 === current.tag) {
            if (null === updatePayload$jscomp$0) {
              updatePayload$jscomp$0 = current;
              try {
                if (instance$87 = current.stateNode, viewConfig) newProps = instance$87.viewConfig, oldProps = diffProperties(null, emptyObject, {
                  style: {
                    display: "none"
                  }
                }, newProps.validAttributes), _$$_REQUIRE(_dependencyMap[2]).UIManager.updateView(instance$87._nativeTag, newProps.uiViewClassName, oldProps);else {
                  updatePayload = current.stateNode;
                  var props = current.memoizedProps,
                    viewConfig$jscomp$0 = updatePayload.viewConfig,
                    prevProps = assign({}, props, {
                      style: [props.style, {
                        display: "none"
                      }]
                    });
                  var updatePayload$jscomp$1 = diffProperties(null, prevProps, props, viewConfig$jscomp$0.validAttributes);
                  _$$_REQUIRE(_dependencyMap[2]).UIManager.updateView(updatePayload._nativeTag, viewConfig$jscomp$0.uiViewClassName, updatePayload$jscomp$1);
                }
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
          } else if (6 === current.tag) {
            if (null === updatePayload$jscomp$0) try {
              throw Error("Not yet implemented.");
            } catch (error$80) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error$80);
            }
          } else if ((22 !== current.tag && 23 !== current.tag || null === current.memoizedState || current === finishedWork) && null !== current.child) {
            current.child.return = current;
            current = current.child;
            continue;
          }
          if (current === finishedWork) break a;
          for (; null === current.sibling;) {
            if (null === current.return || current.return === finishedWork) break a;
            updatePayload$jscomp$0 === current && (updatePayload$jscomp$0 = null);
            current = current.return;
          }
          updatePayload$jscomp$0 === current && (updatePayload$jscomp$0 = null);
          current.sibling.return = current.return;
          current = current.sibling;
        }
        break;
      case 19:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && attachSuspenseRetryListeners(finishedWork);
        break;
      case 21:
        break;
      default:
        recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
  }
  function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    if (flags & 2) {
      try {
        a: {
          for (var parent = finishedWork.return; null !== parent;) {
            if (isHostParent(parent)) {
              var JSCompiler_inline_result = parent;
              break a;
            }
            parent = parent.return;
          }
          throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        switch (JSCompiler_inline_result.tag) {
          case 5:
            var parent$jscomp$0 = JSCompiler_inline_result.stateNode;
            JSCompiler_inline_result.flags & 32 && (JSCompiler_inline_result.flags &= -33);
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);
            break;
          case 3:
          case 4:
            var parent$81 = JSCompiler_inline_result.stateNode.containerInfo,
              before$82 = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before$82, parent$81);
            break;
          default:
            throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
      finishedWork.flags &= -3;
    }
    flags & 4096 && (finishedWork.flags &= -4097);
  }
  function commitLayoutEffects(finishedWork) {
    for (nextEffect = finishedWork; null !== nextEffect;) {
      var fiber = nextEffect,
        firstChild = fiber.child;
      if (0 !== (fiber.subtreeFlags & 8772) && null !== firstChild) firstChild.return = fiber, nextEffect = firstChild;else for (fiber = finishedWork; null !== nextEffect;) {
        firstChild = nextEffect;
        if (0 !== (firstChild.flags & 8772)) {
          var current = firstChild.alternate;
          try {
            if (0 !== (firstChild.flags & 8772)) switch (firstChild.tag) {
              case 0:
              case 11:
              case 15:
                commitHookEffectListMount(5, firstChild);
                break;
              case 1:
                var instance = firstChild.stateNode;
                if (firstChild.flags & 4) if (null === current) instance.componentDidMount();else {
                  var prevProps = firstChild.elementType === firstChild.type ? current.memoizedProps : resolveDefaultProps(firstChild.type, current.memoizedProps);
                  instance.componentDidUpdate(prevProps, current.memoizedState, instance.__reactInternalSnapshotBeforeUpdate);
                }
                var updateQueue = firstChild.updateQueue;
                null !== updateQueue && commitUpdateQueue(firstChild, updateQueue, instance);
                break;
              case 3:
                var updateQueue$76 = firstChild.updateQueue;
                if (null !== updateQueue$76) {
                  current = null;
                  if (null !== firstChild.child) switch (firstChild.child.tag) {
                    case 5:
                      current = firstChild.child.stateNode;
                      break;
                    case 1:
                      current = firstChild.child.stateNode;
                  }
                  commitUpdateQueue(firstChild, updateQueue$76, current);
                }
                break;
              case 5:
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (firstChild.flags & 512) {
              current = undefined;
              var ref = firstChild.ref;
              if (null !== ref) {
                var instance$jscomp$0 = firstChild.stateNode;
                switch (firstChild.tag) {
                  case 5:
                    current = instance$jscomp$0;
                    break;
                  default:
                    current = instance$jscomp$0;
                }
                "function" === typeof ref ? ref(current) : ref.current = current;
              }
            }
          } catch (error) {
            captureCommitPhaseError(firstChild, firstChild.return, error);
          }
        }
        if (firstChild === fiber) {
          nextEffect = null;
          break;
        }
        current = firstChild.sibling;
        if (null !== current) {
          current.return = firstChild.return;
          nextEffect = current;
          break;
        }
        nextEffect = firstChild.return;
      }
    }
  }
  var ceil = Math.ceil,
    ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,
    executionContext = 0,
    workInProgressRoot = null,
    workInProgress = null,
    workInProgressRootRenderLanes = 0,
    subtreeRenderLanes = 0,
    subtreeRenderLanesCursor = createCursor(0),
    workInProgressRootExitStatus = 0,
    workInProgressRootFatalError = null,
    workInProgressRootSkippedLanes = 0,
    workInProgressRootInterleavedUpdatedLanes = 0,
    workInProgressRootPingedLanes = 0,
    workInProgressRootConcurrentErrors = null,
    workInProgressRootRecoverableErrors = null,
    globalMostRecentFallbackTime = 0,
    workInProgressRootRenderTargetTime = Infinity,
    workInProgressTransitions = null,
    hasUncaughtError = false,
    firstUncaughtError = null,
    legacyErrorBoundariesThatAlreadyFailed = null,
    rootDoesHavePassiveEffects = false,
    rootWithPendingPassiveEffects = null,
    pendingPassiveEffectsLanes = 0,
    nestedUpdateCount = 0,
    rootWithNestedUpdates = null,
    currentEventTime = -1,
    currentEventTransitionLane = 0;
  function requestEventTime() {
    return 0 !== (executionContext & 6) ? _$$_REQUIRE(_dependencyMap[3]).unstable_now() : -1 !== currentEventTime ? currentEventTime : currentEventTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now();
  }
  function requestUpdateLane(fiber) {
    if (0 === (fiber.mode & 1)) return 1;
    if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes) return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
    if (null !== ReactCurrentBatchConfig.transition) return 0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane()), currentEventTransitionLane;
    fiber = currentUpdatePriority;
    return 0 !== fiber ? fiber : 16;
  }
  function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    markRootUpdated(root, lane, eventTime);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended$1(root, workInProgressRootRenderLanes)), ensureRootIsScheduled(root, eventTime), 1 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now() + 500, includesLegacySyncCallbacks && flushSyncCallbacks());
  }
  function ensureRootIsScheduled(root, currentTime) {
    for (var existingCallbackNode = root.callbackNode, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes; 0 < lanes;) {
      var index$6 = 31 - clz32(lanes),
        lane = 1 << index$6,
        expirationTime = expirationTimes[index$6];
      if (-1 === expirationTime) {
        if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$6] = computeExpirationTime(lane, currentTime);
      } else expirationTime <= currentTime && (root.expiredLanes |= lane);
      lanes &= ~lane;
    }
    suspendedLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
    if (0 === suspendedLanes) null !== existingCallbackNode && _$$_REQUIRE(_dependencyMap[3]).unstable_cancelCallback(existingCallbackNode), root.callbackNode = null, root.callbackPriority = 0;else if (currentTime = suspendedLanes & -suspendedLanes, root.callbackPriority !== currentTime) {
      null != existingCallbackNode && _$$_REQUIRE(_dependencyMap[3]).unstable_cancelCallback(existingCallbackNode);
      if (1 === currentTime) 0 === root.tag ? (existingCallbackNode = performSyncWorkOnRoot.bind(null, root), includesLegacySyncCallbacks = true, null === syncQueue ? syncQueue = [existingCallbackNode] : syncQueue.push(existingCallbackNode)) : (existingCallbackNode = performSyncWorkOnRoot.bind(null, root), null === syncQueue ? syncQueue = [existingCallbackNode] : syncQueue.push(existingCallbackNode)), _$$_REQUIRE(_dependencyMap[3]).unstable_scheduleCallback(_$$_REQUIRE(_dependencyMap[3]).unstable_ImmediatePriority, flushSyncCallbacks), existingCallbackNode = null;else {
        switch (lanesToEventPriority(suspendedLanes)) {
          case 1:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_ImmediatePriority;
            break;
          case 4:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_UserBlockingPriority;
            break;
          case 16:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_NormalPriority;
            break;
          case 536870912:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_IdlePriority;
            break;
          default:
            existingCallbackNode = _$$_REQUIRE(_dependencyMap[3]).unstable_NormalPriority;
        }
        existingCallbackNode = scheduleCallback$1(existingCallbackNode, performConcurrentWorkOnRoot.bind(null, root));
      }
      root.callbackPriority = currentTime;
      root.callbackNode = existingCallbackNode;
    }
  }
  function performConcurrentWorkOnRoot(root, didTimeout) {
    currentEventTime = -1;
    currentEventTransitionLane = 0;
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
    if (0 === lanes) return null;
    if (0 !== (lanes & 30) || 0 !== (lanes & root.expiredLanes) || didTimeout) didTimeout = renderRootSync(root, lanes);else {
      didTimeout = lanes;
      var prevExecutionContext = executionContext;
      executionContext |= 2;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== didTimeout) workInProgressTransitions = null, workInProgressRootRenderTargetTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now() + 500, prepareFreshStack(root, didTimeout);
      do try {
        workLoopConcurrent();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      } while (1);
      resetContextDependencies();
      ReactCurrentDispatcher$2.current = prevDispatcher;
      executionContext = prevExecutionContext;
      null !== workInProgress ? didTimeout = 0 : (workInProgressRoot = null, workInProgressRootRenderLanes = 0, didTimeout = workInProgressRootExitStatus);
    }
    if (0 !== didTimeout) {
      2 === didTimeout && (prevExecutionContext = getLanesToRetrySynchronouslyOnError(root), 0 !== prevExecutionContext && (lanes = prevExecutionContext, didTimeout = recoverFromConcurrentError(root, prevExecutionContext)));
      if (1 === didTimeout) throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now()), originalCallbackNode;
      if (6 === didTimeout) markRootSuspended$1(root, lanes);else {
        prevExecutionContext = root.current.alternate;
        if (0 === (lanes & 30) && !isRenderConsistentWithExternalStores(prevExecutionContext) && (didTimeout = renderRootSync(root, lanes), 2 === didTimeout && (prevDispatcher = getLanesToRetrySynchronouslyOnError(root), 0 !== prevDispatcher && (lanes = prevDispatcher, didTimeout = recoverFromConcurrentError(root, prevDispatcher))), 1 === didTimeout)) throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now()), originalCallbackNode;
        root.finishedWork = prevExecutionContext;
        root.finishedLanes = lanes;
        switch (didTimeout) {
          case 0:
          case 1:
            throw Error("Root did not complete. This is a bug in React.");
          case 2:
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 3:
            markRootSuspended$1(root, lanes);
            if ((lanes & 130023424) === lanes && (didTimeout = globalMostRecentFallbackTime + 500 - _$$_REQUIRE(_dependencyMap[3]).unstable_now(), 10 < didTimeout)) {
              if (0 !== getNextLanes(root, 0)) break;
              prevExecutionContext = root.suspendedLanes;
              if ((prevExecutionContext & lanes) !== lanes) {
                requestEventTime();
                root.pingedLanes |= root.suspendedLanes & prevExecutionContext;
                break;
              }
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), didTimeout);
              break;
            }
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 4:
            markRootSuspended$1(root, lanes);
            if ((lanes & 4194240) === lanes) break;
            didTimeout = root.eventTimes;
            for (prevExecutionContext = -1; 0 < lanes;) {
              var index$5 = 31 - clz32(lanes);
              prevDispatcher = 1 << index$5;
              index$5 = didTimeout[index$5];
              index$5 > prevExecutionContext && (prevExecutionContext = index$5);
              lanes &= ~prevDispatcher;
            }
            lanes = prevExecutionContext;
            lanes = _$$_REQUIRE(_dependencyMap[3]).unstable_now() - lanes;
            lanes = (120 > lanes ? 120 : 480 > lanes ? 480 : 1080 > lanes ? 1080 : 1920 > lanes ? 1920 : 3e3 > lanes ? 3e3 : 4320 > lanes ? 4320 : 1960 * ceil(lanes / 1960)) - lanes;
            if (10 < lanes) {
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), lanes);
              break;
            }
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 5:
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          default:
            throw Error("Unknown root exit status.");
        }
      }
    }
    ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now());
    return root.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root) : null;
  }
  function recoverFromConcurrentError(root, errorRetryLanes) {
    var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
    root.current.memoizedState.isDehydrated && (prepareFreshStack(root, errorRetryLanes).flags |= 256);
    root = renderRootSync(root, errorRetryLanes);
    2 !== root && (errorRetryLanes = workInProgressRootRecoverableErrors, workInProgressRootRecoverableErrors = errorsFromFirstAttempt, null !== errorRetryLanes && queueRecoverableErrors(errorRetryLanes));
    return root;
  }
  function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
  function isRenderConsistentWithExternalStores(finishedWork) {
    for (var node = finishedWork;;) {
      if (node.flags & 16384) {
        var updateQueue = node.updateQueue;
        if (null !== updateQueue && (updateQueue = updateQueue.stores, null !== updateQueue)) for (var i = 0; i < updateQueue.length; i++) {
          var check = updateQueue[i],
            getSnapshot = check.getSnapshot;
          check = check.value;
          try {
            if (!objectIs(getSnapshot(), check)) return false;
          } catch (error) {
            return false;
          }
        }
      }
      updateQueue = node.child;
      if (node.subtreeFlags & 16384 && null !== updateQueue) updateQueue.return = node, node = updateQueue;else {
        if (node === finishedWork) break;
        for (; null === node.sibling;) {
          if (null === node.return || node.return === finishedWork) return true;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    return true;
  }
  function markRootSuspended$1(root, suspendedLanes) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    for (root = root.expirationTimes; 0 < suspendedLanes;) {
      var index$7 = 31 - clz32(suspendedLanes),
        lane = 1 << index$7;
      root[index$7] = -1;
      suspendedLanes &= ~lane;
    }
  }
  function performSyncWorkOnRoot(root) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    flushPassiveEffects();
    var lanes = getNextLanes(root, 0);
    if (0 === (lanes & 1)) return ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now()), null;
    var exitStatus = renderRootSync(root, lanes);
    if (0 !== root.tag && 2 === exitStatus) {
      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
      0 !== errorRetryLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root, errorRetryLanes));
    }
    if (1 === exitStatus) throw exitStatus = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now()), exitStatus;
    if (6 === exitStatus) throw Error("Root did not complete. This is a bug in React.");
    root.finishedWork = root.current.alternate;
    root.finishedLanes = lanes;
    commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
    ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now());
    return null;
  }
  function popRenderLanes() {
    subtreeRenderLanes = subtreeRenderLanesCursor.current;
    pop(subtreeRenderLanesCursor);
  }
  function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case 1:
          interruptedWork = interruptedWork.type.childContextTypes;
          null !== interruptedWork && undefined !== interruptedWork && popContext();
          break;
        case 3:
          popHostContainer();
          pop(didPerformWorkStackCursor);
          pop(contextStackCursor);
          resetWorkInProgressVersions();
          break;
        case 5:
          popHostContext(interruptedWork);
          break;
        case 4:
          popHostContainer();
          break;
        case 13:
          pop(suspenseStackCursor);
          break;
        case 19:
          pop(suspenseStackCursor);
          break;
        case 10:
          popProvider(interruptedWork.type._context);
          break;
        case 22:
        case 23:
          popRenderLanes();
      }
      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = root = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
    workInProgressRootExitStatus = 0;
    workInProgressRootFatalError = null;
    workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    if (null !== concurrentQueues) {
      for (lanes = 0; lanes < concurrentQueues.length; lanes++) if (timeoutHandle = concurrentQueues[lanes], interruptedWork = timeoutHandle.interleaved, null !== interruptedWork) {
        timeoutHandle.interleaved = null;
        var firstInterleavedUpdate = interruptedWork.next,
          lastPendingUpdate = timeoutHandle.pending;
        if (null !== lastPendingUpdate) {
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = firstInterleavedUpdate;
          interruptedWork.next = firstPendingUpdate;
        }
        timeoutHandle.pending = interruptedWork;
      }
      concurrentQueues = null;
    }
    return root;
  }
  function handleError(root$jscomp$0, thrownValue) {
    do {
      var erroredWork = workInProgress;
      try {
        resetContextDependencies();
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          for (var hook = currentlyRenderingFiber$1.memoizedState; null !== hook;) {
            var queue = hook.queue;
            null !== queue && (queue.pending = null);
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        ReactCurrentOwner$2.current = null;
        if (null === erroredWork || null === erroredWork.return) {
          workInProgressRootExitStatus = 1;
          workInProgressRootFatalError = thrownValue;
          workInProgress = null;
          break;
        }
        a: {
          var root = root$jscomp$0,
            returnFiber = erroredWork.return,
            sourceFiber = erroredWork,
            value = thrownValue;
          thrownValue = workInProgressRootRenderLanes;
          sourceFiber.flags |= 32768;
          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            var wakeable = value,
              sourceFiber$jscomp$0 = sourceFiber,
              tag = sourceFiber$jscomp$0.tag;
            if (0 === (sourceFiber$jscomp$0.mode & 1) && (0 === tag || 11 === tag || 15 === tag)) {
              var currentSource = sourceFiber$jscomp$0.alternate;
              currentSource ? (sourceFiber$jscomp$0.updateQueue = currentSource.updateQueue, sourceFiber$jscomp$0.memoizedState = currentSource.memoizedState, sourceFiber$jscomp$0.lanes = currentSource.lanes) : (sourceFiber$jscomp$0.updateQueue = null, sourceFiber$jscomp$0.memoizedState = null);
            }
            b: {
              sourceFiber$jscomp$0 = returnFiber;
              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === sourceFiber$jscomp$0.tag) {
                  var nextState = sourceFiber$jscomp$0.memoizedState;
                  JSCompiler_temp = null !== nextState ? null !== nextState.dehydrated ? true : false : true;
                }
                if (JSCompiler_temp) {
                  var suspenseBoundary = sourceFiber$jscomp$0;
                  break b;
                }
                sourceFiber$jscomp$0 = sourceFiber$jscomp$0.return;
              } while (null !== sourceFiber$jscomp$0);
              suspenseBoundary = null;
            }
            if (null !== suspenseBoundary) {
              suspenseBoundary.flags &= -257;
              value = suspenseBoundary;
              sourceFiber$jscomp$0 = thrownValue;
              if (0 === (value.mode & 1)) {
                if (value === returnFiber) value.flags |= 65536;else {
                  value.flags |= 128;
                  sourceFiber.flags |= 131072;
                  sourceFiber.flags &= -52805;
                  if (1 === sourceFiber.tag) if (null === sourceFiber.alternate) sourceFiber.tag = 17;else {
                    var update = createUpdate(-1, 1);
                    update.tag = 2;
                    enqueueUpdate(sourceFiber, update, 1);
                  }
                  sourceFiber.lanes |= 1;
                }
              } else value.flags |= 65536, value.lanes = sourceFiber$jscomp$0;
              suspenseBoundary.mode & 1 && attachPingListener(root, wakeable, thrownValue);
              thrownValue = suspenseBoundary;
              root = wakeable;
              var wakeables = thrownValue.updateQueue;
              if (null === wakeables) {
                var updateQueue = new Set();
                updateQueue.add(root);
                thrownValue.updateQueue = updateQueue;
              } else wakeables.add(root);
              break a;
            } else {
              if (0 === (thrownValue & 1)) {
                attachPingListener(root, wakeable, thrownValue);
                renderDidSuspendDelayIfPossible();
                break a;
              }
              value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            }
          }
          root = value = createCapturedValueAtFiber(value, sourceFiber);
          4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
          null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [root] : workInProgressRootConcurrentErrors.push(root);
          root = returnFiber;
          do {
            switch (root.tag) {
              case 3:
                wakeable = value;
                root.flags |= 65536;
                thrownValue &= -thrownValue;
                root.lanes |= thrownValue;
                var update$jscomp$0 = createRootErrorUpdate(root, wakeable, thrownValue);
                enqueueCapturedUpdate(root, update$jscomp$0);
                break a;
              case 1:
                wakeable = value;
                var ctor = root.type,
                  instance = root.stateNode;
                if (0 === (root.flags & 128) && ("function" === typeof ctor.getDerivedStateFromError || null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance)))) {
                  root.flags |= 65536;
                  thrownValue &= -thrownValue;
                  root.lanes |= thrownValue;
                  var update$34 = createClassErrorUpdate(root, wakeable, thrownValue);
                  enqueueCapturedUpdate(root, update$34);
                  break a;
                }
            }
            root = root.return;
          } while (null !== root);
        }
        completeUnitOfWork(erroredWork);
      } catch (yetAnotherThrownValue) {
        thrownValue = yetAnotherThrownValue;
        workInProgress === erroredWork && null !== erroredWork && (workInProgress = erroredWork = erroredWork.return);
        continue;
      }
      break;
    } while (1);
  }
  function pushDispatcher() {
    var prevDispatcher = ReactCurrentDispatcher$2.current;
    ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }
  function renderDidSuspendDelayIfPossible() {
    if (0 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus || 2 === workInProgressRootExitStatus) workInProgressRootExitStatus = 4;
    null === workInProgressRoot || 0 === (workInProgressRootSkippedLanes & 268435455) && 0 === (workInProgressRootInterleavedUpdatedLanes & 268435455) || markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
  function renderRootSync(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    do try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    } while (1);
    resetContextDependencies();
    executionContext = prevExecutionContext;
    ReactCurrentDispatcher$2.current = prevDispatcher;
    if (null !== workInProgress) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    return workInProgressRootExitStatus;
  }
  function workLoopSync() {
    for (; null !== workInProgress;) performUnitOfWork(workInProgress);
  }
  function workLoopConcurrent() {
    for (; null !== workInProgress && !_$$_REQUIRE(_dependencyMap[3]).unstable_shouldYield();) performUnitOfWork(workInProgress);
  }
  function performUnitOfWork(unitOfWork) {
    var next = beginWork$1(unitOfWork.alternate, unitOfWork, subtreeRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
    ReactCurrentOwner$2.current = null;
  }
  function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
      var current = completedWork.alternate;
      unitOfWork = completedWork.return;
      if (0 === (completedWork.flags & 32768)) {
        if (current = completeWork(current, completedWork, subtreeRenderLanes), null !== current) {
          workInProgress = current;
          return;
        }
      } else {
        current = unwindWork(current, completedWork);
        if (null !== current) {
          current.flags &= 32767;
          workInProgress = current;
          return;
        }
        if (null !== unitOfWork) unitOfWork.flags |= 32768, unitOfWork.subtreeFlags = 0, unitOfWork.deletions = null;else {
          workInProgressRootExitStatus = 6;
          workInProgress = null;
          return;
        }
      }
      completedWork = completedWork.sibling;
      if (null !== completedWork) {
        workInProgress = completedWork;
        return;
      }
      workInProgress = completedWork = unitOfWork;
    } while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
  }
  function commitRoot(root, recoverableErrors, transitions) {
    var previousUpdateLanePriority = currentUpdatePriority,
      prevTransition = ReactCurrentBatchConfig$2.transition;
    try {
      ReactCurrentBatchConfig$2.transition = null, currentUpdatePriority = 1, commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
    } finally {
      ReactCurrentBatchConfig$2.transition = prevTransition, currentUpdatePriority = previousUpdateLanePriority;
    }
    return null;
  }
  function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
    do flushPassiveEffects(); while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    transitions = root.finishedWork;
    var lanes = root.finishedLanes;
    if (null === transitions) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (transitions === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    var remainingLanes = transitions.lanes | transitions.childLanes;
    markRootFinished(root, remainingLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (transitions.subtreeFlags & 2064) && 0 === (transitions.flags & 2064) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, scheduleCallback$1(_$$_REQUIRE(_dependencyMap[3]).unstable_NormalPriority, function () {
      flushPassiveEffects();
      return null;
    }));
    remainingLanes = 0 !== (transitions.flags & 15990);
    if (0 !== (transitions.subtreeFlags & 15990) || remainingLanes) {
      remainingLanes = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = null;
      var previousPriority = currentUpdatePriority;
      currentUpdatePriority = 1;
      var prevExecutionContext = executionContext;
      executionContext |= 4;
      ReactCurrentOwner$2.current = null;
      commitBeforeMutationEffects(root, transitions);
      commitMutationEffectsOnFiber(transitions, root);
      root.current = transitions;
      commitLayoutEffects(transitions, root, lanes);
      _$$_REQUIRE(_dependencyMap[3]).unstable_requestPaint();
      executionContext = prevExecutionContext;
      currentUpdatePriority = previousPriority;
      ReactCurrentBatchConfig$2.transition = remainingLanes;
    } else root.current = transitions;
    rootDoesHavePassiveEffects && (rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = lanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(transitions.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root, _$$_REQUIRE(_dependencyMap[3]).unstable_now());
    if (null !== recoverableErrors) for (renderPriorityLevel = root.onRecoverableError, transitions = 0; transitions < recoverableErrors.length; transitions++) lanes = recoverableErrors[transitions], renderPriorityLevel(lanes.value, {
      componentStack: lanes.stack,
      digest: lanes.digest
    });
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    0 !== (pendingPassiveEffectsLanes & 1) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (remainingLanes & 1) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncCallbacks();
    return null;
  }
  function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
      var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
        prevTransition = ReactCurrentBatchConfig$2.transition,
        previousPriority = currentUpdatePriority;
      try {
        ReactCurrentBatchConfig$2.transition = null;
        currentUpdatePriority = 16 > renderPriority ? 16 : renderPriority;
        if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = false;else {
          renderPriority = rootWithPendingPassiveEffects;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = 0;
          if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          for (nextEffect = renderPriority.current; null !== nextEffect;) {
            var fiber = nextEffect,
              child = fiber.child;
            if (0 !== (nextEffect.flags & 16)) {
              var deletions = fiber.deletions;
              if (null !== deletions) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  for (nextEffect = fiberToDelete; null !== nextEffect;) {
                    var fiber$jscomp$0 = nextEffect;
                    switch (fiber$jscomp$0.tag) {
                      case 0:
                      case 11:
                      case 15:
                        commitHookEffectListUnmount(8, fiber$jscomp$0, fiber);
                    }
                    var child$jscomp$0 = fiber$jscomp$0.child;
                    if (null !== child$jscomp$0) child$jscomp$0.return = fiber$jscomp$0, nextEffect = child$jscomp$0;else for (; null !== nextEffect;) {
                      fiber$jscomp$0 = nextEffect;
                      var sibling = fiber$jscomp$0.sibling,
                        returnFiber = fiber$jscomp$0.return;
                      detachFiberAfterEffects(fiber$jscomp$0);
                      if (fiber$jscomp$0 === fiberToDelete) {
                        nextEffect = null;
                        break;
                      }
                      if (null !== sibling) {
                        sibling.return = returnFiber;
                        nextEffect = sibling;
                        break;
                      }
                      nextEffect = returnFiber;
                    }
                  }
                }
                var previousFiber = fiber.alternate;
                if (null !== previousFiber) {
                  var detachedChild = previousFiber.child;
                  if (null !== detachedChild) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (null !== detachedChild);
                  }
                }
                nextEffect = fiber;
              }
            }
            if (0 !== (fiber.subtreeFlags & 2064) && null !== child) child.return = fiber, nextEffect = child;else b: for (; null !== nextEffect;) {
              fiber = nextEffect;
              if (0 !== (fiber.flags & 2048)) switch (fiber.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectListUnmount(9, fiber, fiber.return);
              }
              var sibling$jscomp$0 = fiber.sibling;
              if (null !== sibling$jscomp$0) {
                sibling$jscomp$0.return = fiber.return;
                nextEffect = sibling$jscomp$0;
                break b;
              }
              nextEffect = fiber.return;
            }
          }
          var finishedWork = renderPriority.current;
          for (nextEffect = finishedWork; null !== nextEffect;) {
            child = nextEffect;
            var firstChild = child.child;
            if (0 !== (child.subtreeFlags & 2064) && null !== firstChild) firstChild.return = child, nextEffect = firstChild;else b: for (child = finishedWork; null !== nextEffect;) {
              deletions = nextEffect;
              if (0 !== (deletions.flags & 2048)) try {
                switch (deletions.tag) {
                  case 0:
                  case 11:
                  case 15:
                    commitHookEffectListMount(9, deletions);
                }
              } catch (error) {
                captureCommitPhaseError(deletions, deletions.return, error);
              }
              if (deletions === child) {
                nextEffect = null;
                break b;
              }
              var sibling$jscomp$1 = deletions.sibling;
              if (null !== sibling$jscomp$1) {
                sibling$jscomp$1.return = deletions.return;
                nextEffect = sibling$jscomp$1;
                break b;
              }
              nextEffect = deletions.return;
            }
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
            injectedHook.onPostCommitFiberRoot(rendererID, renderPriority);
          } catch (err) {}
          JSCompiler_inline_result = true;
        }
        return JSCompiler_inline_result;
      } finally {
        currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$2.transition = prevTransition;
      }
    }
    return false;
  }
  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 1);
    sourceFiber = requestEventTime();
    null !== rootFiber && (markRootUpdated(rootFiber, 1, sourceFiber), ensureRootIsScheduled(rootFiber, sourceFiber));
  }
  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (nearestMountedAncestor = sourceFiber.return; null !== nearestMountedAncestor;) {
      if (3 === nearestMountedAncestor.tag) {
        captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
        break;
      } else if (1 === nearestMountedAncestor.tag) {
        var instance = nearestMountedAncestor.stateNode;
        if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(nearestMountedAncestor, sourceFiber, 1);
          nearestMountedAncestor = enqueueUpdate(nearestMountedAncestor, sourceFiber, 1);
          sourceFiber = requestEventTime();
          null !== nearestMountedAncestor && (markRootUpdated(nearestMountedAncestor, 1, sourceFiber), ensureRootIsScheduled(nearestMountedAncestor, sourceFiber));
          break;
        }
      }
      nearestMountedAncestor = nearestMountedAncestor.return;
    }
  }
  function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    wakeable = requestEventTime();
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 130023424) === workInProgressRootRenderLanes && 500 > _$$_REQUIRE(_dependencyMap[3]).unstable_now() - globalMostRecentFallbackTime ? prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes);
    ensureRootIsScheduled(root, wakeable);
  }
  function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (0 === (boundaryFiber.mode & 1) ? retryLane = 1 : (retryLane = nextRetryLane, nextRetryLane <<= 1, 0 === (nextRetryLane & 130023424) && (nextRetryLane = 4194304)));
    var eventTime = requestEventTime();
    boundaryFiber = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated(boundaryFiber, retryLane, eventTime), ensureRootIsScheduled(boundaryFiber, eventTime));
  }
  function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState,
      retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch (boundaryFiber.tag) {
      case 13:
        var retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        break;
      case 19:
        retryCache = boundaryFiber.stateNode;
        break;
      default:
        throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  var beginWork$1;
  beginWork$1 = function beginWork$1(current, workInProgress, renderLanes) {
    if (null !== current) {
      if (current.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (0 === (current.lanes & renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
      }
    } else didReceiveUpdate = false;
    workInProgress.lanes = 0;
    switch (workInProgress.tag) {
      case 2:
        var Component = workInProgress.type;
        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
        current = workInProgress.pendingProps;
        var context = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderLanes);
        context = renderWithHooks(null, workInProgress, Component, current, context, renderLanes);
        workInProgress.flags |= 1;
        if ("object" === typeof context && null !== context && "function" === typeof context.render && undefined === context.$$typeof) {
          workInProgress.tag = 1;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          if (isContextProvider(Component)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;
          workInProgress.memoizedState = null !== context.state && undefined !== context.state ? context.state : null;
          initializeUpdateQueue(workInProgress);
          context.updater = classComponentUpdater;
          workInProgress.stateNode = context;
          context._reactInternals = workInProgress;
          mountClassInstance(workInProgress, Component, current, renderLanes);
          workInProgress = finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, context, renderLanes), workInProgress = workInProgress.child;
        return workInProgress;
      case 16:
        Component = workInProgress.elementType;
        a: {
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          context = Component._init;
          Component = context(Component._payload);
          workInProgress.type = Component;
          context = workInProgress.tag = resolveLazyComponentTag(Component);
          current = resolveDefaultProps(Component, current);
          switch (context) {
            case 0:
              workInProgress = updateFunctionComponent(null, workInProgress, Component, current, renderLanes);
              break a;
            case 1:
              workInProgress = updateClassComponent(null, workInProgress, Component, current, renderLanes);
              break a;
            case 11:
              workInProgress = updateForwardRef(null, workInProgress, Component, current, renderLanes);
              break a;
            case 14:
              workInProgress = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, current), renderLanes);
              break a;
          }
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function.");
        }
        return workInProgress;
      case 0:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateFunctionComponent(current, workInProgress, Component, context, renderLanes);
      case 1:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateClassComponent(current, workInProgress, Component, context, renderLanes);
      case 3:
        pushHostRootContext(workInProgress);
        if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
        context = workInProgress.pendingProps;
        Component = workInProgress.memoizedState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, context, null, renderLanes);
        context = workInProgress.memoizedState.element;
        context === Component ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, context, renderLanes), workInProgress = workInProgress.child);
        return workInProgress;
      case 5:
        return pushHostContext(workInProgress), Component = workInProgress.pendingProps.children, markRef(current, workInProgress), reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 6:
        return null;
      case 13:
        return updateSuspenseComponent(current, workInProgress, renderLanes);
      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), Component = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes) : reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 11:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateForwardRef(current, workInProgress, Component, context, renderLanes);
      case 7:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
      case 8:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 12:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 10:
        a: {
          Component = workInProgress.type._context;
          context = workInProgress.pendingProps;
          hasContext = workInProgress.memoizedProps;
          var newValue = context.value;
          push(valueCursor, Component._currentValue);
          Component._currentValue = newValue;
          if (null !== hasContext) if (objectIs(hasContext.value, newValue)) {
            if (hasContext.children === context.children && !didPerformWorkStackCursor.current) {
              workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              break a;
            }
          } else for (hasContext = workInProgress.child, null !== hasContext && (hasContext.return = workInProgress); null !== hasContext;) {
            var list = hasContext.dependencies;
            if (null !== list) {
              newValue = hasContext.child;
              for (var dependency = list.firstContext; null !== dependency;) {
                if (dependency.context === Component) {
                  if (1 === hasContext.tag) {
                    dependency = createUpdate(-1, renderLanes & -renderLanes);
                    dependency.tag = 2;
                    var updateQueue = hasContext.updateQueue;
                    if (null !== updateQueue) {
                      updateQueue = updateQueue.shared;
                      var pending = updateQueue.pending;
                      null === pending ? dependency.next = dependency : (dependency.next = pending.next, pending.next = dependency);
                      updateQueue.pending = dependency;
                    }
                  }
                  hasContext.lanes |= renderLanes;
                  dependency = hasContext.alternate;
                  null !== dependency && (dependency.lanes |= renderLanes);
                  scheduleContextWorkOnParentPath(hasContext.return, renderLanes, workInProgress);
                  list.lanes |= renderLanes;
                  break;
                }
                dependency = dependency.next;
              }
            } else if (10 === hasContext.tag) newValue = hasContext.type === workInProgress.type ? null : hasContext.child;else if (18 === hasContext.tag) {
              newValue = hasContext.return;
              if (null === newValue) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              newValue.lanes |= renderLanes;
              list = newValue.alternate;
              null !== list && (list.lanes |= renderLanes);
              scheduleContextWorkOnParentPath(newValue, renderLanes, workInProgress);
              newValue = hasContext.sibling;
            } else newValue = hasContext.child;
            if (null !== newValue) newValue.return = hasContext;else for (newValue = hasContext; null !== newValue;) {
              if (newValue === workInProgress) {
                newValue = null;
                break;
              }
              hasContext = newValue.sibling;
              if (null !== hasContext) {
                hasContext.return = newValue.return;
                newValue = hasContext;
                break;
              }
              newValue = newValue.return;
            }
            hasContext = newValue;
          }
          reconcileChildren(current, workInProgress, context.children, renderLanes);
          workInProgress = workInProgress.child;
        }
        return workInProgress;
      case 9:
        return context = workInProgress.type, Component = workInProgress.pendingProps.children, prepareToReadContext(workInProgress, renderLanes), context = readContext(context), Component = Component(context), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 14:
        return Component = workInProgress.type, context = resolveDefaultProps(Component, workInProgress.pendingProps), context = resolveDefaultProps(Component.type, context), updateMemoComponent(current, workInProgress, Component, context, renderLanes);
      case 15:
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 17:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, isContextProvider(Component) ? (current = true, pushContextProvider(workInProgress)) : current = false, prepareToReadContext(workInProgress, renderLanes), constructClassInstance(workInProgress, Component, context), mountClassInstance(workInProgress, Component, context, renderLanes), finishClassComponent(null, workInProgress, Component, true, current, renderLanes);
      case 19:
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      case 22:
        return updateOffscreenComponent(current, workInProgress, renderLanes);
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  };
  function scheduleCallback$1(priorityLevel, callback) {
    return _$$_REQUIRE(_dependencyMap[3]).unstable_scheduleCallback(priorityLevel, callback);
  }
  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }
  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }
  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;
    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }
    return 2;
  }
  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 14680064;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      lanes: pendingProps.lanes,
      firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }
  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 8;
        break;
      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;
          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;
          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;
          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;
          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
  }
  function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiber(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
  }
  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiber(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    pendingProps.stateNode = {
      isHidden: false
    };
    return pendingProps;
  }
  function createFiberFromText(content, mode, lanes) {
    content = createFiber(6, content, null, mode);
    content.lanes = lanes;
    return content;
  }
  function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }
  function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = createLaneMap(0);
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.identifierPrefix = identifierPrefix;
    this.onRecoverableError = onRecoverableError;
  }
  function createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }
  function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (undefined === fiber) {
      if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
      component = Object.keys(component).join(",");
      throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }
  function updateContainer(element, container, parentComponent, callback) {
    var current = container.current,
      eventTime = requestEventTime(),
      lane = requestUpdateLane(current);
    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternals;
      b: {
        if (getNearestMountedFiber(parentComponent) !== parentComponent || 1 !== parentComponent.tag) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var JSCompiler_inline_result = parentComponent;
        do {
          switch (JSCompiler_inline_result.tag) {
            case 3:
              JSCompiler_inline_result = JSCompiler_inline_result.stateNode.context;
              break b;
            case 1:
              if (isContextProvider(JSCompiler_inline_result.type)) {
                JSCompiler_inline_result = JSCompiler_inline_result.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }
          }
          JSCompiler_inline_result = JSCompiler_inline_result.return;
        } while (null !== JSCompiler_inline_result);
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;
        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, JSCompiler_inline_result);
          break a;
        }
      }
      parentComponent = JSCompiler_inline_result;
    } else parentComponent = emptyContextObject;
    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = createUpdate(eventTime, lane);
    container.payload = {
      element: element
    };
    callback = undefined === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(current, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, current, lane, eventTime), entangleTransitions(element, current, lane));
    return lane;
  }
  function emptyFindFiberByHostInstance() {
    return null;
  }
  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }
  function onRecoverableError(error) {
    console.error(error);
  }
  function unmountComponentAtNode(containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function () {
      roots.delete(containerTag);
    });
  }
  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = _$$_REQUIRE(_dependencyMap[3]).unstable_now() + 500, includesLegacySyncCallbacks && flushSyncCallbacks());
    }
  };
  var roots = new Map(),
    devToolsConfig$jscomp$inline_979 = {
      findFiberByHostInstance: getInstanceFromTag,
      bundleType: 0,
      version: "18.2.0-next-9e3b772b8-20220608",
      rendererPackageName: "react-native-renderer",
      rendererConfig: {
        getInspectorDataForViewTag: function getInspectorDataForViewTag() {
          throw Error("getInspectorDataForViewTag() is not available in production");
        },
        getInspectorDataForViewAtPoint: function () {
          throw Error("getInspectorDataForViewAtPoint() is not available in production.");
        }.bind(null, findNodeHandle)
      }
    };
  var internals$jscomp$inline_1247 = {
    bundleType: devToolsConfig$jscomp$inline_979.bundleType,
    version: devToolsConfig$jscomp$inline_979.version,
    rendererPackageName: devToolsConfig$jscomp$inline_979.rendererPackageName,
    rendererConfig: devToolsConfig$jscomp$inline_979.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setErrorHandler: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
    findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    },
    findFiberByHostInstance: devToolsConfig$jscomp$inline_979.findFiberByHostInstance || emptyFindFiberByHostInstance,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
    reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
  };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1248 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1248.isDisabled && hook$jscomp$inline_1248.supportsFiber) try {
      rendererID = hook$jscomp$inline_1248.inject(internals$jscomp$inline_1247), injectedHook = hook$jscomp$inline_1248;
    } catch (err) {}
  }
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
    computeComponentStackForErrorReporting: function computeComponentStackForErrorReporting(reactTag) {
      return (reactTag = getInstanceFromTag(reactTag)) ? getStackByFiberInDevAndProd(reactTag) : "";
    }
  };
  exports.createPortal = function (children, containerTag) {
    return createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
  };
  exports.dispatchCommand = function (handle, command, args) {
    null != handle._nativeTag && (null != handle._internalInstanceHandle ? (handle = handle._internalInstanceHandle.stateNode, null != handle && nativeFabricUIManager.dispatchCommand(handle.node, command, args)) : _$$_REQUIRE(_dependencyMap[2]).UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args));
  };
  exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
    if (null == componentOrHandle) return null;
    if (componentOrHandle._nativeTag) return componentOrHandle;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical : componentOrHandle;
  };
  exports.findNodeHandle = findNodeHandle;
  exports.getInspectorDataForInstance = undefined;
  exports.render = function (element, containerTag, callback) {
    var root = roots.get(containerTag);
    if (!root) {
      root = new FiberRootNode(containerTag, 0, false, "", onRecoverableError);
      var JSCompiler_inline_result = createFiber(3, null, null, 0);
      root.current = JSCompiler_inline_result;
      JSCompiler_inline_result.stateNode = root;
      JSCompiler_inline_result.memoizedState = {
        element: null,
        isDehydrated: false,
        cache: null,
        transitions: null,
        pendingSuspenseBoundaries: null
      };
      initializeUpdateQueue(JSCompiler_inline_result);
      roots.set(containerTag, root);
    }
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch (element.child.tag) {
      case 5:
        element = element.child.stateNode;
        break a;
      default:
        element = element.child.stateNode;
    } else element = null;
    return element;
  };
  exports.sendAccessibilityEvent = function (handle, eventType) {
    null != handle._nativeTag && (null != handle._internalInstanceHandle ? (handle = handle._internalInstanceHandle.stateNode, null != handle && nativeFabricUIManager.sendAccessibilityEvent(handle.node, eventType)) : _$$_REQUIRE(_dependencyMap[2]).legacySendAccessibilityEvent(handle._nativeTag, eventType));
  };
  exports.unmountComponentAtNode = unmountComponentAtNode;
  exports.unmountComponentAtNodeAndRemoveContainer = function (containerTag) {
    unmountComponentAtNode(containerTag);
    _$$_REQUIRE(_dependencyMap[2]).UIManager.removeRootView(containerTag);
  };
  exports.unstable_batchedUpdates = batchedUpdates;
},240,[56,153,209,237]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   * @generate-docs
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[6]);
  var _excluded = ["animating", "color", "hidesWhenStopped", "onLayout", "size", "style"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var PlatformActivityIndicator = _Platform.default.OS === 'android' ? _$$_REQUIRE(_dependencyMap[7]) : _$$_REQUIRE(_dependencyMap[8]).default;
  var GRAY = '#999999';
  var ActivityIndicator = function ActivityIndicator(_ref, forwardedRef) {
    var _ref$animating = _ref.animating,
      animating = _ref$animating === undefined ? true : _ref$animating,
      _ref$color = _ref.color,
      color = _ref$color === undefined ? _Platform.default.OS === 'ios' ? GRAY : null : _ref$color,
      _ref$hidesWhenStopped = _ref.hidesWhenStopped,
      hidesWhenStopped = _ref$hidesWhenStopped === undefined ? true : _ref$hidesWhenStopped,
      onLayout = _ref.onLayout,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'small' : _ref$size,
      style = _ref.style,
      restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var sizeStyle;
    var sizeProp;
    switch (size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        sizeProp = 'small';
        break;
      case 'large':
        sizeStyle = styles.sizeLarge;
        sizeProp = 'large';
        break;
      default:
        sizeStyle = {
          height: size,
          width: size
        };
        break;
    }
    var nativeProps = Object.assign({
      animating: animating,
      color: color,
      hidesWhenStopped: hidesWhenStopped
    }, restProps, {
      ref: forwardedRef,
      style: sizeStyle,
      size: sizeProp
    });
    var androidProps = {
      styleAttr: 'Normal',
      indeterminate: true
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
      onLayout: onLayout,
      style: _StyleSheet.default.compose(styles.container, style),
      children: _Platform.default.OS === 'android' ?
      /*#__PURE__*/
      // $FlowFixMe[prop-missing] Flow doesn't know when this is the android component
      (0, _jsxRuntime.jsx)(PlatformActivityIndicator, Object.assign({}, nativeProps, androidProps)) :
      /*#__PURE__*/
      /* $FlowFixMe[prop-missing] (>=0.106.0 site=react_native_android_fb) This comment
       * suppresses an error found when Flow v0.106 was deployed. To see the
       * error, delete this comment and run Flow. */
      (0, _jsxRuntime.jsx)(PlatformActivityIndicator, Object.assign({}, nativeProps))
    });
  };

  /**
    Displays a circular loading indicator.
  
    ```SnackPlayer name=ActivityIndicator%20Function%20Component%20Example
    import React from "react";
    import { ActivityIndicator, StyleSheet, Text, View } from "react-native";
  
    const App = () => (
      <View style={[styles.container, styles.horizontal]}>
        <ActivityIndicator />
        <ActivityIndicator size="large" />
        <ActivityIndicator size="small" color="#0000ff" />
        <ActivityIndicator size="large" color="#00ff00" />
      </View>
    );
  
    const styles = StyleSheet.create({
      container: {
        flex: 1,
        justifyContent: "center"
      },
      horizontal: {
        flexDirection: "row",
        justifyContent: "space-around",
        padding: 10
      }
    });
    export default App;
    ```
  
    ```SnackPlayer name=ActivityIndicator%20Class%20Component%20Example
    import React, { Component } from "react";
    import { ActivityIndicator, StyleSheet, Text, View } from "react-native";
  
    class App extends Component {
      render() {
        return (
          <View style={[styles.container, styles.horizontal]}>
            <ActivityIndicator />
            <ActivityIndicator size="large" />
            <ActivityIndicator size="small" color="#0000ff" />
            <ActivityIndicator size="large" color="#00ff00" />
          </View>
        );
      }
    }
  
    const styles = StyleSheet.create({
      container: {
        flex: 1,
        justifyContent: "center"
      },
      horizontal: {
        flexDirection: "row",
        justifyContent: "space-around",
        padding: 10
      }
    });
    export default App;
    ```
  */

  var ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
  ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
  var styles = _StyleSheet.default.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });
  var _default = exports.default = ActivityIndicatorWithRef;
},241,[1,119,196,21,156,153,194,242,244]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _ProgressBarAndroidNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[3]);
  var _excluded = ["styleAttr", "indeterminate", "animating"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var React = _$$_REQUIRE(_dependencyMap[4]);
  /**
   * React component that wraps the Android-only `ProgressBar`. This component is
   * used to indicate that the app is loading or there is activity in the app.
   *
   * Example:
   *
   * ```
   * render: function() {
   *   var progressBar =
   *     <View style={styles.container}>
   *       <ProgressBar styleAttr="Inverse" />
   *     </View>;
  
   *   return (
   *     <MyLoadingComponent
   *       componentView={componentView}
   *       loadingView={progressBar}
   *       style={styles.loadingComponent}
   *     />
   *   );
   * },
   * ```
   */
  var ProgressBarAndroid = function ProgressBarAndroid(_ref, forwardedRef) {
    var _ref$styleAttr = _ref.styleAttr,
      styleAttr = _ref$styleAttr === undefined ? 'Normal' : _ref$styleAttr,
      _ref$indeterminate = _ref.indeterminate,
      indeterminate = _ref$indeterminate === undefined ? true : _ref$indeterminate,
      _ref$animating = _ref.animating,
      animating = _ref$animating === undefined ? true : _ref$animating,
      restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ProgressBarAndroidNativeComponent.default, Object.assign({
      styleAttr: styleAttr,
      indeterminate: indeterminate,
      animating: animating
    }, restProps, {
      ref: forwardedRef
    }));
  };
  var ProgressBarAndroidToExport = React.forwardRef(ProgressBarAndroid);
  module.exports =
  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */
  ProgressBarAndroidToExport;
},242,[1,119,243,194,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                         * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                         *
                                                                                         * This source code is licensed under the MIT license found in the
                                                                                         * LICENSE file in the root directory of this source tree.
                                                                                         *
                                                                                         * 
                                                                                         * @format
                                                                                         */

  var nativeComponentName = 'AndroidProgressBar';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidProgressBar',
    validAttributes: {
      styleAttr: true,
      typeAttr: true,
      indeterminate: true,
      progress: true,
      animating: true,
      color: {
        process: _$$_REQUIRE(_dependencyMap[2])
      },
      testID: true
    }
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[3]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
},243,[1,206,164,160]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                         * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                         *
                                                                                         * This source code is licensed under the MIT license found in the
                                                                                         * LICENSE file in the root directory of this source tree.
                                                                                         *
                                                                                         * @format
                                                                                         * 
                                                                                         */

  var nativeComponentName = 'RCTActivityIndicatorView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTActivityIndicatorView',
    validAttributes: {
      hidesWhenStopped: true,
      animating: true,
      color: {
        process: _$$_REQUIRE(_dependencyMap[2])
      },
      size: true
    }
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[3]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
},244,[1,206,164,160]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   * @generate-docs
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _TouchableNativeFeedback = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _TouchableOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[14]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
    A basic button component that should render nicely on any platform. Supports a
    minimal level of customization.
  
    If this button doesn't look right for your app, you can build your own button
    using [TouchableOpacity](touchableopacity) or
    [TouchableWithoutFeedback](touchablewithoutfeedback). For inspiration, look at
    the [source code for this button component][button:source]. Or, take a look at
    the [wide variety of button components built by the community]
    [button:examples].
  
    [button:source]:
    https://github.com/facebook/react-native/blob/HEAD/Libraries/Components/Button.js
  
    [button:examples]:
    https://js.coach/?menu%5Bcollections%5D=React%20Native&page=1&query=button
  
    ```jsx
    <Button
      onPress={onPressLearnMore}
      title="Learn More"
      color="#841584"
      accessibilityLabel="Learn more about this purple button"
    />
    ```
  
    ```SnackPlayer name=Button%20Example
    import React from 'react';
    import { StyleSheet, Button, View, SafeAreaView, Text, Alert } from 'react-native';
  
    const Separator = () => (
      <View style={styles.separator} />
    );
  
    const App = () => (
      <SafeAreaView style={styles.container}>
        <View>
          <Text style={styles.title}>
            The title and onPress handler are required. It is recommended to set accessibilityLabel to help make your app usable by everyone.
          </Text>
          <Button
            title="Press me"
            onPress={() => Alert.alert('Simple Button pressed')}
          />
        </View>
        <Separator />
        <View>
          <Text style={styles.title}>
            Adjust the color in a way that looks standard on each platform. On  iOS, the color prop controls the color of the text. On Android, the color adjusts the background color of the button.
          </Text>
          <Button
            title="Press me"
            color="#f194ff"
            onPress={() => Alert.alert('Button with adjusted color pressed')}
          />
        </View>
        <Separator />
        <View>
          <Text style={styles.title}>
            All interaction for the component are disabled.
          </Text>
          <Button
            title="Press me"
            disabled
            onPress={() => Alert.alert('Cannot press this one')}
          />
        </View>
        <Separator />
        <View>
          <Text style={styles.title}>
            This layout strategy lets the title define the width of the button.
          </Text>
          <View style={styles.fixToText}>
            <Button
              title="Left button"
              onPress={() => Alert.alert('Left button pressed')}
            />
            <Button
              title="Right button"
              onPress={() => Alert.alert('Right button pressed')}
            />
          </View>
        </View>
      </SafeAreaView>
    );
  
    const styles = StyleSheet.create({
      container: {
        flex: 1,
        justifyContent: 'center',
        marginHorizontal: 16,
      },
      title: {
        textAlign: 'center',
        marginVertical: 8,
      },
      fixToText: {
        flexDirection: 'row',
        justifyContent: 'space-between',
      },
      separator: {
        marginVertical: 8,
        borderBottomColor: '#737373',
        borderBottomWidth: StyleSheet.hairlineWidth,
      },
    });
  
    export default App;
    ```
   */
  var Button = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(Button, _React$Component);
    var _super = _createSuper(Button);
    function Button() {
      (0, _classCallCheck2.default)(this, Button);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(Button, [{
      key: "render",
      value: function render() {
        var _accessibilityState2, _accessibilityState3;
        var _this$props = this.props,
          accessibilityLabel = _this$props.accessibilityLabel,
          accessibilityState = _this$props.accessibilityState,
          ariaBusy = _this$props['aria-busy'],
          ariaChecked = _this$props['aria-checked'],
          ariaDisabled = _this$props['aria-disabled'],
          ariaExpanded = _this$props['aria-expanded'],
          ariaLabel = _this$props['aria-label'],
          ariaSelected = _this$props['aria-selected'],
          importantForAccessibility = _this$props.importantForAccessibility,
          color = _this$props.color,
          onPress = _this$props.onPress,
          touchSoundDisabled = _this$props.touchSoundDisabled,
          title = _this$props.title,
          hasTVPreferredFocus = _this$props.hasTVPreferredFocus,
          nextFocusDown = _this$props.nextFocusDown,
          nextFocusForward = _this$props.nextFocusForward,
          nextFocusLeft = _this$props.nextFocusLeft,
          nextFocusRight = _this$props.nextFocusRight,
          nextFocusUp = _this$props.nextFocusUp,
          testID = _this$props.testID,
          accessible = _this$props.accessible,
          accessibilityActions = _this$props.accessibilityActions,
          accessibilityHint = _this$props.accessibilityHint,
          accessibilityLanguage = _this$props.accessibilityLanguage,
          onAccessibilityAction = _this$props.onAccessibilityAction;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];
        if (color) {
          if (_Platform.default.OS === 'ios') {
            textStyles.push({
              color: color
            });
          } else {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }
        var _accessibilityState = {
          busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? undefined : accessibilityState.busy,
          checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? undefined : accessibilityState.checked,
          disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? undefined : accessibilityState.disabled,
          expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? undefined : accessibilityState.expanded,
          selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? undefined : accessibilityState.selected
        };
        var disabled = this.props.disabled != null ? this.props.disabled : (_accessibilityState2 = _accessibilityState) == null ? undefined : _accessibilityState2.disabled;
        _accessibilityState = disabled !== ((_accessibilityState3 = _accessibilityState) == null ? undefined : _accessibilityState3.disabled) ? Object.assign({}, _accessibilityState, {
          disabled: disabled
        }) : _accessibilityState;
        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
        }
        (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = _Platform.default.OS === 'android' ? title.toUpperCase() : title;
        var Touchable = _Platform.default.OS === 'android' ? _TouchableNativeFeedback.default : _TouchableOpacity.default;

        // If `no` is specified for `importantForAccessibility`, it will be changed to `no-hide-descendants` because the text inside should not be focused.
        var _importantForAccessibility = importantForAccessibility === 'no' ? 'no-hide-descendants' : importantForAccessibility;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Touchable, {
          accessible: accessible,
          accessibilityActions: accessibilityActions,
          onAccessibilityAction: onAccessibilityAction,
          accessibilityLabel: ariaLabel || accessibilityLabel,
          accessibilityHint: accessibilityHint,
          accessibilityLanguage: accessibilityLanguage,
          accessibilityRole: "button",
          accessibilityState: _accessibilityState,
          importantForAccessibility: _importantForAccessibility,
          hasTVPreferredFocus: hasTVPreferredFocus,
          nextFocusDown: nextFocusDown,
          nextFocusForward: nextFocusForward,
          nextFocusLeft: nextFocusLeft,
          nextFocusRight: nextFocusRight,
          nextFocusUp: nextFocusUp,
          testID: testID,
          disabled: disabled,
          onPress: onPress,
          touchSoundDisabled: touchSoundDisabled,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
            style: buttonStyles,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
              style: textStyles,
              disabled: disabled,
              children: formattedTitle
            })
          })
        });
      }
    }]);
    return Button;
  }(React.Component);
  var styles = _StyleSheet.default.create({
    button: _Platform.default.select({
      ios: {},
      android: {
        elevation: 4,
        // Material design blue from https://material.google.com/style/color.html#color-color-palette
        backgroundColor: '#2196F3',
        borderRadius: 2
      }
    }),
    text: Object.assign({
      textAlign: 'center',
      margin: 8
    }, _Platform.default.select({
      ios: {
        // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/
        color: '#007AFF',
        fontSize: 18
      },
      android: {
        color: 'white',
        fontWeight: '500'
      }
    })),
    buttonDisabled: _Platform.default.select({
      ios: {},
      android: {
        elevation: 0,
        backgroundColor: '#dfdfdf'
      }
    }),
    textDisabled: _Platform.default.select({
      ios: {
        color: '#cdcdcd'
      },
      android: {
        color: '#a1a1a1'
      }
    })
  });
  module.exports = Button;
},245,[1,5,6,13,15,12,196,246,21,277,278,156,24,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var PressabilityDebug = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  var _usePressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _TextAncestor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  var React = _react;
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);
  var _excluded = ["accessible", "accessibilityLabel", "accessibilityState", "allowFontScaling", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-label", "aria-selected", "ellipsizeMode", "id", "nativeID", "onLongPress", "onPress", "onPressIn", "onPressOut", "onResponderGrant", "onResponderMove", "onResponderRelease", "onResponderTerminate", "onResponderTerminationRequest", "onStartShouldSetResponder", "pressRetentionOffset", "suppressHighlighting"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  /**
   * Text is the fundamental component for displaying text.
   *
   * @see https://reactnative.dev/docs/text
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Text = React.forwardRef(function (props, forwardedRef) {
    var _accessibilityState2, _accessibilityState3, _style, _style3, _style4;
    var accessible = props.accessible,
      accessibilityLabel = props.accessibilityLabel,
      accessibilityState = props.accessibilityState,
      allowFontScaling = props.allowFontScaling,
      ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaLabel = props['aria-label'],
      ariaSelected = props['aria-selected'],
      ellipsizeMode = props.ellipsizeMode,
      id = props.id,
      nativeID = props.nativeID,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      _onPressIn = props.onPressIn,
      _onPressOut = props.onPressOut,
      _onResponderGrant = props.onResponderGrant,
      _onResponderMove = props.onResponderMove,
      _onResponderRelease = props.onResponderRelease,
      _onResponderTerminate = props.onResponderTerminate,
      onResponderTerminationRequest = props.onResponderTerminationRequest,
      onStartShouldSetResponder = props.onStartShouldSetResponder,
      pressRetentionOffset = props.pressRetentionOffset,
      suppressHighlighting = props.suppressHighlighting,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isHighlighted = _useState2[0],
      setHighlighted = _useState2[1];
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      _accessibilityState = {
        busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? undefined : accessibilityState.busy,
        checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? undefined : accessibilityState.checked,
        disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? undefined : accessibilityState.disabled,
        expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? undefined : accessibilityState.expanded,
        selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? undefined : accessibilityState.selected
      };
    }
    var _disabled = restProps.disabled != null ? restProps.disabled : (_accessibilityState2 = _accessibilityState) == null ? undefined : _accessibilityState2.disabled;
    var nativeTextAccessibilityState = _disabled !== ((_accessibilityState3 = _accessibilityState) == null ? undefined : _accessibilityState3.disabled) ? Object.assign({}, _accessibilityState, {
      disabled: _disabled
    }) : _accessibilityState;
    var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
    var initialized = useLazyInitialization(isPressable);
    var config = (0, _react.useMemo)(function () {
      return initialized ? {
        disabled: !isPressable,
        pressRectOffset: pressRetentionOffset,
        onLongPress: onLongPress,
        onPress: onPress,
        onPressIn: function onPressIn(event) {
          // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it
          // in the best case, and cause issues with text selection in the worst case. Forcing
          // the isHighlighted prop to false on all platforms except iOS.
          setHighlighted((suppressHighlighting == null || !suppressHighlighting) && _Platform.default.OS === 'ios');
          _onPressIn == null ? undefined : _onPressIn(event);
        },
        onPressOut: function onPressOut(event) {
          setHighlighted(false);
          _onPressOut == null ? undefined : _onPressOut(event);
        },
        onResponderTerminationRequest_DEPRECATED: onResponderTerminationRequest,
        onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder
      } : null;
    }, [initialized, isPressable, pressRetentionOffset, onLongPress, onPress, _onPressIn, _onPressOut, onResponderTerminationRequest, onStartShouldSetResponder, suppressHighlighting]);
    var eventHandlers = (0, _usePressability.default)(config);
    var eventHandlersForText = (0, _react.useMemo)(function () {
      return eventHandlers == null ? null : {
        onResponderGrant: function onResponderGrant(event) {
          eventHandlers.onResponderGrant(event);
          if (_onResponderGrant != null) {
            _onResponderGrant(event);
          }
        },
        onResponderMove: function onResponderMove(event) {
          eventHandlers.onResponderMove(event);
          if (_onResponderMove != null) {
            _onResponderMove(event);
          }
        },
        onResponderRelease: function onResponderRelease(event) {
          eventHandlers.onResponderRelease(event);
          if (_onResponderRelease != null) {
            _onResponderRelease(event);
          }
        },
        onResponderTerminate: function onResponderTerminate(event) {
          eventHandlers.onResponderTerminate(event);
          if (_onResponderTerminate != null) {
            _onResponderTerminate(event);
          }
        },
        onClick: eventHandlers.onClick,
        onResponderTerminationRequest: eventHandlers.onResponderTerminationRequest,
        onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder
      };
    }, [eventHandlers, _onResponderGrant, _onResponderMove, _onResponderRelease, _onResponderTerminate]);

    // TODO: Move this processing to the view configuration.
    var selectionColor = restProps.selectionColor == null ? null : (0, _processColor.default)(restProps.selectionColor);
    var style = restProps.style;
    var numberOfLines = restProps.numberOfLines;
    if (numberOfLines != null && !(numberOfLines >= 0)) {
      console.error(`'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`);
      numberOfLines = 0;
    }
    var hasTextAncestor = (0, _react.useContext)(_TextAncestor.default);
    var _accessible = _Platform.default.select({
      ios: accessible !== false,
      default: accessible
    });

    // $FlowFixMe[underconstrained-implicit-instantiation]
    style = (0, _flattenStyle.default)(style);
    if (typeof ((_style = style) == null ? undefined : _style.fontWeight) === 'number') {
      var _style2;
      // $FlowFixMe[prop-missing]
      // $FlowFixMe[cannot-write]
      style.fontWeight = (_style2 = style) == null ? undefined : _style2.fontWeight.toString();
    }
    var _selectable = restProps.selectable;
    if (((_style3 = style) == null ? undefined : _style3.userSelect) != null) {
      // $FlowFixMe[invalid-computed-prop]
      _selectable = userSelectToSelectableMap[style.userSelect];
      // $FlowFixMe[prop-missing]
      // $FlowFixMe[cannot-write]
      delete style.userSelect;
    }
    if (((_style4 = style) == null ? undefined : _style4.verticalAlign) != null) {
      // $FlowFixMe[prop-missing]
      // $FlowFixMe[cannot-write]
      style.textAlignVertical =
      // $FlowFixMe[invalid-computed-prop]
      verticalAlignToTextAlignVerticalMap[style.verticalAlign];
      // $FlowFixMe[prop-missing]
      // $FlowFixMe[cannot-write]
      delete style.verticalAlign;
    }
    var _hasOnPressOrOnLongPress = props.onPress != null || props.onLongPress != null;
    return hasTextAncestor ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[11]).NativeVirtualText, Object.assign({}, restProps, eventHandlersForText, {
      accessibilityLabel: ariaLabel != null ? ariaLabel : accessibilityLabel,
      accessibilityState: _accessibilityState,
      isHighlighted: isHighlighted,
      isPressable: isPressable,
      nativeID: id != null ? id : nativeID,
      numberOfLines: numberOfLines,
      ref: forwardedRef,
      selectable: _selectable,
      selectionColor: selectionColor,
      style: style
    })) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
      value: true,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[11]).NativeText, Object.assign({}, restProps, eventHandlersForText, {
        accessibilityLabel: ariaLabel != null ? ariaLabel : accessibilityLabel,
        accessibilityState: nativeTextAccessibilityState,
        accessible: accessible == null && _Platform.default.OS === 'android' ? _hasOnPressOrOnLongPress : _accessible,
        allowFontScaling: allowFontScaling !== false,
        disabled: _disabled,
        ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
        isHighlighted: isHighlighted,
        nativeID: id != null ? id : nativeID,
        numberOfLines: numberOfLines,
        ref: forwardedRef,
        selectable: _selectable,
        selectionColor: selectionColor,
        style: style
      }))
    });
  });
  Text.displayName = 'Text';

  /**
   * Switch to `deprecated-react-native-prop-types` for compatibility with future
   * releases. This is deprecated and will be removed in the future.
   */
  Text.propTypes = _$$_REQUIRE(_dependencyMap[12]).TextPropTypes;

  /**
   * Returns false until the first time `newValue` is true, after which this will
   * always return true. This is necessary to lazily initialize `Pressability` so
   * we do not eagerly create one for every pressable `Text` component.
   */
  function useLazyInitialization(newValue) {
    var _useState3 = (0, _react.useState)(newValue),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      oldValue = _useState4[0],
      setValue = _useState4[1];
    if (!oldValue && newValue) {
      setValue(newValue);
    }
    return oldValue;
  }
  var userSelectToSelectableMap = {
    auto: true,
    text: true,
    none: false,
    contain: true,
    all: true
  };
  var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
  };
  module.exports = Text;
},246,[1,26,119,247,248,157,164,21,158,153,194,255,256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PressabilityDebugView = PressabilityDebugView;
  exports.isEnabled = isEnabled;
  exports.setEnabled = setEnabled;
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _normalizeColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * Displays a debug overlay to visualize press targets when enabled via the
   * React Native Inspector. Calls to this module should be guarded by `__DEV__`,
   * for example:
   *
   *   return (
   *     <View>
   *       {children}
   *       {__DEV__ ? (
   *         <PressabilityDebugView color="..." hitSlop={props.hitSlop} />
   *       ) : null}
   *     </View>
   *   );
   *
   */
  function PressabilityDebugView(props) {
    return null;
  }
  var isDebugEnabled = false;
  function isEnabled() {
    return false;
  }
  function setEnabled(value) {}
},247,[1,156,165,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = usePressability;
  var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _react = _$$_REQUIRE(_dependencyMap[2]);
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * Creates a persistent instance of `Pressability` that automatically configures
   * itself and resets. Accepts null `config` to support lazy initialization. Once
   * initialized, will not un-initialize until the component has been unmounted.
   */
  function usePressability(config) {
    var pressabilityRef = (0, _react.useRef)(null);
    if (config != null && pressabilityRef.current == null) {
      pressabilityRef.current = new _Pressability.default(config);
    }
    var pressability = pressabilityRef.current;

    // On the initial mount, this is a no-op. On updates, `pressability` will be
    // re-configured to use the new configuration.
    (0, _react.useEffect)(function () {
      if (config != null && pressability != null) {
        pressability.configure(config);
      }
    }, [config, pressability]);

    // On unmount, reset pending state and timers inside `pressability`. This is
    // a separate effect because we do not want to reset when `config` changes.
    (0, _react.useEffect)(function () {
      if (pressability != null) {
        return function () {
          pressability.reset();
        };
      }
    }, [pressability]);
    return pressability == null ? null : pressability.getEventHandlers();
  }
},248,[1,249,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _SoundManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _PressabilityPerformanceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var Transitions = Object.freeze({
    NOT_RESPONDER: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
      RESPONDER_RELEASE: 'ERROR',
      RESPONDER_TERMINATED: 'ERROR',
      ENTER_PRESS_RECT: 'ERROR',
      LEAVE_PRESS_RECT: 'ERROR',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: 'RESPONDER_ACTIVE_PRESS_IN',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
      LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    ERROR: {
      DELAY: 'NOT_RESPONDER',
      RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'NOT_RESPONDER',
      LEAVE_PRESS_RECT: 'NOT_RESPONDER',
      LONG_PRESS_DETECTED: 'NOT_RESPONDER'
    }
  });
  var isActiveSignal = function isActiveSignal(signal) {
    return signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
  };
  var isActivationSignal = function isActivationSignal(signal) {
    return signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';
  };
  var isPressInSignal = function isPressInSignal(signal) {
    return signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
  };
  var isTerminalSignal = function isTerminalSignal(signal) {
    return signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';
  };
  var DEFAULT_LONG_PRESS_DELAY_MS = 500;
  var DEFAULT_PRESS_RECT_OFFSETS = {
    bottom: 30,
    left: 20,
    right: 20,
    top: 20
  };
  var DEFAULT_MIN_PRESS_DURATION = 130;
  var DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;
  var longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;
  /**
   * Pressability implements press handling capabilities.
   *
   * =========================== Pressability Tutorial ===========================
   *
   * The `Pressability` class helps you create press interactions by analyzing the
   * geometry of elements and observing when another responder (e.g. ScrollView)
   * has stolen the touch lock. It offers hooks for your component to provide
   * interaction feedback to the user:
   *
   * - When a press has activated (e.g. highlight an element)
   * - When a press has deactivated (e.g. un-highlight an element)
   * - When a press should trigger an action, meaning it activated and deactivated
   *   while within the geometry of the element without the lock being stolen.
   *
   * A high quality interaction isn't as simple as you might think. There should
   * be a slight delay before activation. Moving your finger beyond an element's
   * bounds should trigger deactivation, but moving the same finger back within an
   * element's bounds should trigger reactivation.
   *
   * In order to use `Pressability`, do the following:
   *
   * 1. Instantiate `Pressability` and store it on your component's state.
   *
   *    state = {
   *      pressability: new Pressability({
   *        // ...
   *      }),
   *    };
   *
   * 2. Choose the rendered component who should collect the press events. On that
   *    element, spread `pressability.getEventHandlers()` into its props.
   *
   *    return (
   *      <View {...this.state.pressability.getEventHandlers()} />
   *    );
   *
   * 3. Reset `Pressability` when your component unmounts.
   *
   *    componentWillUnmount() {
   *      this.state.pressability.reset();
   *    }
   *
   * ==================== Pressability Implementation Details ====================
   *
   * `Pressability` only assumes that there exists a `HitRect` node. The `PressRect`
   * is an abstract box that is extended beyond the `HitRect`.
   *
   * # Geometry
   *
   *  ┌────────────────────────┐
   *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`, which
   *  │  │  ┌────────────┐  │  │   is expanded via the prop `hitSlop`.
   *  │  │  │ VisualRect │  │  │
   *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time
   *  │  │    HitRect       │  │   before letting up, `VisualRect` activates for
   *  │  └──────────────────┘  │   as long as the press stays within `PressRect`.
   *  │       PressRect    o   │
   *  └────────────────────│───┘
   *          Out Region   └────── `PressRect`, which is expanded via the prop
   *                               `pressRectOffset`, allows presses to move
   *                               beyond `HitRect` while maintaining activation
   *                               and being eligible for a "press".
   *
   * # State Machine
   *
   * ┌───────────────┐ ◀──── RESPONDER_RELEASE
   * │ NOT_RESPONDER │
   * └───┬───────────┘ ◀──── RESPONDER_TERMINATED
   *     │
   *     │ RESPONDER_GRANT (HitRect)
   *     │
   *     ▼
   * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐
   * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │
   * │ PRESS_IN            ├────────▶ │ PRESS_IN          ├────────────▶ │ LONG_PRESS_IN     │
   * └─┬───────────────────┘          └─┬─────────────────┘              └─┬─────────────────┘
   *   │           ▲                    │           ▲                      │           ▲
   *   │LEAVE_     │                    │LEAVE_     │                      │LEAVE_     │
   *   │PRESS_RECT │ENTER_              │PRESS_RECT │ENTER_                │PRESS_RECT │ENTER_
   *   │           │PRESS_RECT          │           │PRESS_RECT            │           │PRESS_RECT
   *   ▼           │                    ▼           │                      ▼           │
   * ┌─────────────┴───────┐          ┌─────────────┴─────┐              ┌─────────────┴─────┐
   * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │              │ RESPONDER_ACTIVE_ │
   * │ PRESS_OUT           ├────────▶ │ PRESS_OUT         │              │ LONG_PRESS_OUT    │
   * └─────────────────────┘          └───────────────────┘              └───────────────────┘
   *
   * T + DELAY => LONG_PRESS_DELAY + DELAY
   *
   * Not drawn are the side effects of each transition. The most important side
   * effect is the invocation of `onPress` and `onLongPress` that occur when a
   * responder is release while in the "press in" states.
   */
  var Pressability = exports.default = /*#__PURE__*/function () {
    function Pressability(config) {
      var _this = this;
      (0, _classCallCheck2.default)(this, Pressability);
      this._eventHandlers = null;
      this._hoverInDelayTimeout = null;
      this._hoverOutDelayTimeout = null;
      this._isHovered = false;
      this._longPressDelayTimeout = null;
      this._pressDelayTimeout = null;
      this._pressOutDelayTimeout = null;
      this._responderID = null;
      this._responderRegion = null;
      this._touchState = 'NOT_RESPONDER';
      this._measureCallback = function (left, top, width, height, pageX, pageY) {
        if (!left && !top && !width && !height && !pageX && !pageY) {
          return;
        }
        _this._responderRegion = {
          bottom: pageY + height,
          left: pageX,
          right: pageX + width,
          top: pageY
        };
      };
      this.configure(config);
    }
    (0, _createClass2.default)(Pressability, [{
      key: "configure",
      value: function configure(config) {
        this._config = config;
      }

      /**
       * Resets any pending timers. This should be called on unmount.
       */
    }, {
      key: "reset",
      value: function reset() {
        this._cancelHoverInDelayTimeout();
        this._cancelHoverOutDelayTimeout();
        this._cancelLongPressDelayTimeout();
        this._cancelPressDelayTimeout();
        this._cancelPressOutDelayTimeout();

        // Ensure that, if any async event handlers are fired after unmount
        // due to a race, we don't call any configured callbacks.
        this._config = Object.freeze({});
      }

      /**
       * Returns a set of props to spread into the interactive element.
       */
    }, {
      key: "getEventHandlers",
      value: function getEventHandlers() {
        if (this._eventHandlers == null) {
          this._eventHandlers = this._createEventHandlers();
        }
        return this._eventHandlers;
      }
    }, {
      key: "_createEventHandlers",
      value: function _createEventHandlers() {
        var _this2 = this;
        var focusEventHandlers = {
          onBlur: function onBlur(event) {
            var onBlur = _this2._config.onBlur;
            if (onBlur != null) {
              onBlur(event);
            }
          },
          onFocus: function onFocus(event) {
            var onFocus = _this2._config.onFocus;
            if (onFocus != null) {
              onFocus(event);
            }
          }
        };
        var responderEventHandlers = {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var disabled = _this2._config.disabled;
            if (disabled == null) {
              var onStartShouldSetResponder_DEPRECATED = _this2._config.onStartShouldSetResponder_DEPRECATED;
              return onStartShouldSetResponder_DEPRECATED == null ? true : onStartShouldSetResponder_DEPRECATED();
            }
            return !disabled;
          },
          onResponderGrant: function onResponderGrant(event) {
            event.persist();
            _this2._cancelPressOutDelayTimeout();
            _this2._responderID = event.currentTarget;
            _this2._touchState = 'NOT_RESPONDER';
            _this2._receiveSignal('RESPONDER_GRANT', event);
            var delayPressIn = normalizeDelay(_this2._config.delayPressIn);
            if (delayPressIn > 0) {
              _this2._pressDelayTimeout = setTimeout(function () {
                _this2._receiveSignal('DELAY', event);
              }, delayPressIn);
            } else {
              _this2._receiveSignal('DELAY', event);
            }
            var delayLongPress = normalizeDelay(_this2._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn);
            _this2._longPressDelayTimeout = setTimeout(function () {
              _this2._handleLongPress(event);
            }, delayLongPress + delayPressIn);
            return _this2._config.blockNativeResponder === true;
          },
          onResponderMove: function onResponderMove(event) {
            var onPressMove = _this2._config.onPressMove;
            if (onPressMove != null) {
              onPressMove(event);
            }

            // Region may not have finished being measured, yet.
            var responderRegion = _this2._responderRegion;
            if (responderRegion == null) {
              return;
            }
            var touch = getTouchFromPressEvent(event);
            if (touch == null) {
              _this2._cancelLongPressDelayTimeout();
              _this2._receiveSignal('LEAVE_PRESS_RECT', event);
              return;
            }
            if (_this2._touchActivatePosition != null) {
              var deltaX = _this2._touchActivatePosition.pageX - touch.pageX;
              var deltaY = _this2._touchActivatePosition.pageY - touch.pageY;
              if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {
                _this2._cancelLongPressDelayTimeout();
              }
            }
            if (_this2._isTouchWithinResponderRegion(touch, responderRegion)) {
              _this2._receiveSignal('ENTER_PRESS_RECT', event);
            } else {
              _this2._cancelLongPressDelayTimeout();
              _this2._receiveSignal('LEAVE_PRESS_RECT', event);
            }
          },
          onResponderRelease: function onResponderRelease(event) {
            _this2._receiveSignal('RESPONDER_RELEASE', event);
          },
          onResponderTerminate: function onResponderTerminate(event) {
            _this2._receiveSignal('RESPONDER_TERMINATED', event);
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            var cancelable = _this2._config.cancelable;
            if (cancelable == null) {
              var onResponderTerminationRequest_DEPRECATED = _this2._config.onResponderTerminationRequest_DEPRECATED;
              return onResponderTerminationRequest_DEPRECATED == null ? true : onResponderTerminationRequest_DEPRECATED();
            }
            return cancelable;
          },
          onClick: function onClick(event) {
            var _event$nativeEvent;
            // If event has `pointerType`, it was emitted from a PointerEvent and
            // we should ignore it to avoid triggering `onPress` twice.
            if (event != null && (_event$nativeEvent = event.nativeEvent) != null && _event$nativeEvent.hasOwnProperty != null && _event$nativeEvent.hasOwnProperty('pointerType')) {
              return;
            }

            // for non-pointer click events (e.g. accessibility clicks), we should only dispatch when we're the "real" target
            // in particular, we shouldn't respond to clicks from nested pressables
            if ((event == null ? undefined : event.currentTarget) !== (event == null ? undefined : event.target)) {
              event == null ? undefined : event.stopPropagation();
              return;
            }
            var _this2$_config = _this2._config,
              onPress = _this2$_config.onPress,
              disabled = _this2$_config.disabled;
            if (onPress != null && disabled !== true) {
              onPress(event);
            }
          }
        };
        if (_ReactNativeFeatureFlags.default.shouldPressibilityUseW3CPointerEventsForHover()) {
          var hoverPointerEvents = {
            onPointerEnter: undefined,
            onPointerLeave: undefined
          };
          var _this$_config = this._config,
            onHoverIn = _this$_config.onHoverIn,
            onHoverOut = _this$_config.onHoverOut;
          if (onHoverIn != null) {
            hoverPointerEvents.onPointerEnter = function (event) {
              _this2._isHovered = true;
              _this2._cancelHoverOutDelayTimeout();
              if (onHoverIn != null) {
                var delayHoverIn = normalizeDelay(_this2._config.delayHoverIn);
                if (delayHoverIn > 0) {
                  event.persist();
                  _this2._hoverInDelayTimeout = setTimeout(function () {
                    onHoverIn(convertPointerEventToMouseEvent(event));
                  }, delayHoverIn);
                } else {
                  onHoverIn(convertPointerEventToMouseEvent(event));
                }
              }
            };
          }
          if (onHoverOut != null) {
            hoverPointerEvents.onPointerLeave = function (event) {
              if (_this2._isHovered) {
                _this2._isHovered = false;
                _this2._cancelHoverInDelayTimeout();
                if (onHoverOut != null) {
                  var delayHoverOut = normalizeDelay(_this2._config.delayHoverOut);
                  if (delayHoverOut > 0) {
                    event.persist();
                    _this2._hoverOutDelayTimeout = setTimeout(function () {
                      onHoverOut(convertPointerEventToMouseEvent(event));
                    }, delayHoverOut);
                  } else {
                    onHoverOut(convertPointerEventToMouseEvent(event));
                  }
                }
              }
            };
          }
          return Object.assign({}, focusEventHandlers, responderEventHandlers, hoverPointerEvents);
        } else {
          var mouseEventHandlers = _Platform.default.OS === 'ios' || _Platform.default.OS === 'android' ? null : {
            onMouseEnter: function onMouseEnter(event) {
              if ((0, _$$_REQUIRE(_dependencyMap[10]).isHoverEnabled)()) {
                _this2._isHovered = true;
                _this2._cancelHoverOutDelayTimeout();
                var _onHoverIn = _this2._config.onHoverIn;
                if (_onHoverIn != null) {
                  var delayHoverIn = normalizeDelay(_this2._config.delayHoverIn);
                  if (delayHoverIn > 0) {
                    event.persist();
                    _this2._hoverInDelayTimeout = setTimeout(function () {
                      _onHoverIn(event);
                    }, delayHoverIn);
                  } else {
                    _onHoverIn(event);
                  }
                }
              }
            },
            onMouseLeave: function onMouseLeave(event) {
              if (_this2._isHovered) {
                _this2._isHovered = false;
                _this2._cancelHoverInDelayTimeout();
                var _onHoverOut = _this2._config.onHoverOut;
                if (_onHoverOut != null) {
                  var delayHoverOut = normalizeDelay(_this2._config.delayHoverOut);
                  if (delayHoverOut > 0) {
                    event.persist();
                    _this2._hoverInDelayTimeout = setTimeout(function () {
                      _onHoverOut(event);
                    }, delayHoverOut);
                  } else {
                    _onHoverOut(event);
                  }
                }
              }
            }
          };
          return Object.assign({}, focusEventHandlers, responderEventHandlers, mouseEventHandlers);
        }
      }

      /**
       * Receives a state machine signal, performs side effects of the transition
       * and stores the new state. Validates the transition as well.
       */
    }, {
      key: "_receiveSignal",
      value: function _receiveSignal(signal, event) {
        var _Transitions$prevStat;
        // Especially on iOS, not all events have timestamps associated.
        // For telemetry purposes, this doesn't matter too much, as long as *some* do.
        // Since the native timestamp is integral for logging telemetry, just skip
        // events if they don't have a timestamp attached.
        if (event.nativeEvent.timestamp != null) {
          _PressabilityPerformanceEventEmitter.default.emitEvent(function () {
            return {
              signal: signal,
              nativeTimestamp: event.nativeEvent.timestamp
            };
          });
        }
        var prevState = this._touchState;
        var nextState = (_Transitions$prevStat = Transitions[prevState]) == null ? undefined : _Transitions$prevStat[signal];
        if (this._responderID == null && signal === 'RESPONDER_RELEASE') {
          return;
        }
        (0, _invariant.default)(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');
        if (prevState !== nextState) {
          this._performTransitionSideEffects(prevState, nextState, signal, event);
          this._touchState = nextState;
        }
      }

      /**
       * Performs a transition between touchable states and identify any activations
       * or deactivations (and callback invocations).
       */
    }, {
      key: "_performTransitionSideEffects",
      value: function _performTransitionSideEffects(prevState, nextState, signal, event) {
        if (isTerminalSignal(signal)) {
          this._touchActivatePosition = null;
          this._cancelLongPressDelayTimeout();
        }
        var isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';
        var isActivationTransition = !isActivationSignal(prevState) && isActivationSignal(nextState);
        if (isInitialTransition || isActivationTransition) {
          this._measureResponderRegion();
        }
        if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {
          var onLongPress = this._config.onLongPress;
          if (onLongPress != null) {
            onLongPress(event);
          }
        }
        var isPrevActive = isActiveSignal(prevState);
        var isNextActive = isActiveSignal(nextState);
        if (!isPrevActive && isNextActive) {
          this._activate(event);
        } else if (isPrevActive && !isNextActive) {
          this._deactivate(event);
        }
        if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {
          // If we never activated (due to delays), activate and deactivate now.
          if (!isNextActive && !isPrevActive) {
            this._activate(event);
            this._deactivate(event);
          }
          var _this$_config2 = this._config,
            _onLongPress = _this$_config2.onLongPress,
            onPress = _this$_config2.onPress,
            android_disableSound = _this$_config2.android_disableSound;
          if (onPress != null) {
            var isPressCanceledByLongPress = _onLongPress != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN' && this._shouldLongPressCancelPress();
            if (!isPressCanceledByLongPress) {
              if (_Platform.default.OS === 'android' && android_disableSound !== true) {
                _SoundManager.default.playTouchSound();
              }
              onPress(event);
            }
          }
        }
        this._cancelPressDelayTimeout();
      }
    }, {
      key: "_activate",
      value: function _activate(event) {
        var onPressIn = this._config.onPressIn;
        var _getTouchFromPressEve = getTouchFromPressEvent(event),
          pageX = _getTouchFromPressEve.pageX,
          pageY = _getTouchFromPressEve.pageY;
        this._touchActivatePosition = {
          pageX: pageX,
          pageY: pageY
        };
        this._touchActivateTime = Date.now();
        if (onPressIn != null) {
          onPressIn(event);
        }
      }
    }, {
      key: "_deactivate",
      value: function _deactivate(event) {
        var onPressOut = this._config.onPressOut;
        if (onPressOut != null) {
          var _this$_touchActivateT;
          var minPressDuration = normalizeDelay(this._config.minPressDuration, 0, DEFAULT_MIN_PRESS_DURATION);
          var pressDuration = Date.now() - ((_this$_touchActivateT = this._touchActivateTime) != null ? _this$_touchActivateT : 0);
          var delayPressOut = Math.max(minPressDuration - pressDuration, normalizeDelay(this._config.delayPressOut));
          if (delayPressOut > 0) {
            event.persist();
            this._pressOutDelayTimeout = setTimeout(function () {
              onPressOut(event);
            }, delayPressOut);
          } else {
            onPressOut(event);
          }
        }
        this._touchActivateTime = null;
      }
    }, {
      key: "_measureResponderRegion",
      value: function _measureResponderRegion() {
        if (this._responderID == null) {
          return;
        }
        if (typeof this._responderID === 'number') {
          _UIManager.default.measure(this._responderID, this._measureCallback);
        } else {
          this._responderID.measure(this._measureCallback);
        }
      }
    }, {
      key: "_isTouchWithinResponderRegion",
      value: function _isTouchWithinResponderRegion(touch, responderRegion) {
        var _pressRectOffset$bott, _pressRectOffset$left, _pressRectOffset$righ, _pressRectOffset$top;
        var hitSlop = (0, _$$_REQUIRE(_dependencyMap[11]).normalizeRect)(this._config.hitSlop);
        var pressRectOffset = (0, _$$_REQUIRE(_dependencyMap[11]).normalizeRect)(this._config.pressRectOffset);
        var regionBottom = responderRegion.bottom;
        var regionLeft = responderRegion.left;
        var regionRight = responderRegion.right;
        var regionTop = responderRegion.top;
        if (hitSlop != null) {
          if (hitSlop.bottom != null) {
            regionBottom += hitSlop.bottom;
          }
          if (hitSlop.left != null) {
            regionLeft -= hitSlop.left;
          }
          if (hitSlop.right != null) {
            regionRight += hitSlop.right;
          }
          if (hitSlop.top != null) {
            regionTop -= hitSlop.top;
          }
        }
        regionBottom += (_pressRectOffset$bott = pressRectOffset == null ? undefined : pressRectOffset.bottom) != null ? _pressRectOffset$bott : DEFAULT_PRESS_RECT_OFFSETS.bottom;
        regionLeft -= (_pressRectOffset$left = pressRectOffset == null ? undefined : pressRectOffset.left) != null ? _pressRectOffset$left : DEFAULT_PRESS_RECT_OFFSETS.left;
        regionRight += (_pressRectOffset$righ = pressRectOffset == null ? undefined : pressRectOffset.right) != null ? _pressRectOffset$righ : DEFAULT_PRESS_RECT_OFFSETS.right;
        regionTop -= (_pressRectOffset$top = pressRectOffset == null ? undefined : pressRectOffset.top) != null ? _pressRectOffset$top : DEFAULT_PRESS_RECT_OFFSETS.top;
        return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;
      }
    }, {
      key: "_handleLongPress",
      value: function _handleLongPress(event) {
        if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {
          this._receiveSignal('LONG_PRESS_DETECTED', event);
        }
      }
    }, {
      key: "_shouldLongPressCancelPress",
      value: function _shouldLongPressCancelPress() {
        return this._config.onLongPressShouldCancelPress_DEPRECATED == null || this._config.onLongPressShouldCancelPress_DEPRECATED();
      }
    }, {
      key: "_cancelHoverInDelayTimeout",
      value: function _cancelHoverInDelayTimeout() {
        if (this._hoverInDelayTimeout != null) {
          clearTimeout(this._hoverInDelayTimeout);
          this._hoverInDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelHoverOutDelayTimeout",
      value: function _cancelHoverOutDelayTimeout() {
        if (this._hoverOutDelayTimeout != null) {
          clearTimeout(this._hoverOutDelayTimeout);
          this._hoverOutDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelLongPressDelayTimeout",
      value: function _cancelLongPressDelayTimeout() {
        if (this._longPressDelayTimeout != null) {
          clearTimeout(this._longPressDelayTimeout);
          this._longPressDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelPressDelayTimeout",
      value: function _cancelPressDelayTimeout() {
        if (this._pressDelayTimeout != null) {
          clearTimeout(this._pressDelayTimeout);
          this._pressDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelPressOutDelayTimeout",
      value: function _cancelPressOutDelayTimeout() {
        if (this._pressOutDelayTimeout != null) {
          clearTimeout(this._pressOutDelayTimeout);
          this._pressOutDelayTimeout = null;
        }
      }
    }], [{
      key: "setLongPressDeactivationDistance",
      value: function setLongPressDeactivationDistance(distance) {
        longPressDeactivationDistance = distance;
      }
    }]);
    return Pressability;
  }();
  function normalizeDelay(delay) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return Math.max(min, delay != null ? delay : fallback);
  }
  var getTouchFromPressEvent = function getTouchFromPressEvent(event) {
    var _event$nativeEvent2 = event.nativeEvent,
      changedTouches = _event$nativeEvent2.changedTouches,
      touches = _event$nativeEvent2.touches;
    if (touches != null && touches.length > 0) {
      return touches[0];
    }
    if (changedTouches != null && changedTouches.length > 0) {
      return changedTouches[0];
    }
    return event.nativeEvent;
  };
  function convertPointerEventToMouseEvent(input) {
    var _input$nativeEvent = input.nativeEvent,
      clientX = _input$nativeEvent.clientX,
      clientY = _input$nativeEvent.clientY;
    return Object.assign({}, input, {
      nativeEvent: {
        clientX: clientX,
        clientY: clientY,
        pageX: clientX,
        pageY: clientY,
        timestamp: input.timeStamp
      }
    });
  }
},249,[1,5,6,250,108,42,21,252,24,153,253,254]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeSoundManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var SoundManager = {
    playTouchSound: function playTouchSound() {
      if (_NativeSoundManager.default) {
        _NativeSoundManager.default.playTouchSound();
      }
    }
  };
  module.exports = SoundManager;
},250,[1,251]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  /**
   * Native Module used for playing sounds in native platform.
   */
  var _default = exports.default = TurboModuleRegistry.get('SoundManager');
},251,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var PressabilityPerformanceEventEmitter = /*#__PURE__*/function () {
    function PressabilityPerformanceEventEmitter() {
      (0, _classCallCheck2.default)(this, PressabilityPerformanceEventEmitter);
      this._listeners = [];
    }
    (0, _createClass2.default)(PressabilityPerformanceEventEmitter, [{
      key: "addListener",
      value: function addListener(listener) {
        this._listeners.push(listener);
      }
    }, {
      key: "removeListener",
      value: function removeListener(listener) {
        var index = this._listeners.indexOf(listener);
        if (index > -1) {
          this._listeners.splice(index, 1);
        }
      }
    }, {
      key: "emitEvent",
      value: function emitEvent(constructEvent) {
        if (this._listeners.length === 0) {
          return;
        }
        var event = constructEvent();
        this._listeners.forEach(function (listener) {
          return listener(event);
        });
      }
    }]);
    return PressabilityPerformanceEventEmitter;
  }();
  var PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();
  var _default = exports.default = PressabilityPerformanceEventEmitterSingleton;
},252,[1,5,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isHoverEnabled = isHoverEnabled;
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var isEnabled = false;
  if (_Platform.default.OS === 'web') {
    var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
    if (canUseDOM) {
      /**
       * Web browsers emulate mouse events (and hover states) after touch events.
       * This code infers when the currently-in-use modality supports hover
       * (including for multi-modality devices) and considers "hover" to be enabled
       * if a mouse movement occurs more than 1 second after the last touch event.
       * This threshold is long enough to account for longer delays between the
       * browser firing touch and mouse events on low-powered devices.
       */
      var HOVER_THRESHOLD_MS = 1000;
      var lastTouchTimestamp = 0;
      var enableHover = function enableHover() {
        if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {
          return;
        }
        isEnabled = true;
      };
      var disableHover = function disableHover() {
        lastTouchTimestamp = Date.now();
        if (isEnabled) {
          isEnabled = false;
        }
      };
      document.addEventListener('touchstart', disableHover, true);
      document.addEventListener('touchmove', disableHover, true);
      document.addEventListener('mousemove', enableHover, true);
    }
  }
  function isHoverEnabled() {
    return isEnabled;
  }
},253,[1,21]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSquare = createSquare;
  exports.normalizeRect = normalizeRect;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  function createSquare(size) {
    return {
      bottom: size,
      left: size,
      right: size,
      top: size
    };
  }
  function normalizeRect(rectOrSize) {
    return typeof rectOrSize === 'number' ? createSquare(rectOrSize) : rectOrSize;
  }
},254,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NativeVirtualText = exports.NativeText = undefined;
  var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createReactNativeComponentClass = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var textViewConfig = {
    validAttributes: {
      isHighlighted: true,
      isPressable: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      dynamicTypeRamp: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true,
      android_hyphenationFrequency: true,
      lineBreakStrategyIOS: true
    },
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
  var virtualTextViewConfig = {
    validAttributes: {
      isHighlighted: true,
      isPressable: true,
      maxFontSizeMultiplier: true
    },
    uiViewClassName: 'RCTVirtualText'
  };
  var NativeText = exports.NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
    return (0, _$$_REQUIRE(_dependencyMap[3]).createViewConfig)(textViewConfig);
  });
  var NativeVirtualText = exports.NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
    return (0, _$$_REQUIRE(_dependencyMap[3]).createViewConfig)(virtualTextViewConfig);
  });
},255,[1,42,208,192]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  module.exports = {
    get ColorPropType() {
      return _$$_REQUIRE(_dependencyMap[0]);
    },
    get EdgeInsetsPropType() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },
    get ImagePropTypes() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },
    get PointPropType() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },
    get TextInputPropTypes() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },
    get TextPropTypes() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },
    get ViewPropTypes() {
      return _$$_REQUIRE(_dependencyMap[6]);
    }
  };
},256,[257,258,262,273,274,275,263]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];
    if (color == null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }
      return;
    }
    if (typeof color === 'number') {
      // Developers should not use a number, but we are using the prop type
      // both for user provided colors and for transformed ones. This isn't ideal
      // and should be fixed but will do for now...
      return;
    }
    if (typeof color === 'string' && _$$_REQUIRE(_dependencyMap[0])(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + `Valid color formats are
  - '#f0f' (#rgb)
  - '#f0fc' (#rgba)
  - '#ff00ff' (#rrggbb)
  - '#ff00ff00' (#rrggbbaa)
  - 'rgb(255, 255, 255)'
  - 'rgba(255, 255, 255, 1.0)'
  - 'hsl(360, 100%, 100%)'
  - 'hsla(360, 100%, 100%, 1.0)'
  - 'transparent'
  - 'red'
  - 0xff00ff00 (0xrrggbbaa)
`);
    }
  };
  var ColorPropType = colorPropType.bind(null, false /* isRequired */);
  ColorPropType.isRequired = colorPropType.bind(null, true /* isRequired */);
  module.exports = ColorPropType;
},257,[166]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/Rect.js
   */
  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[0]).shape({
    bottom: _$$_REQUIRE(_dependencyMap[0]).number,
    left: _$$_REQUIRE(_dependencyMap[0]).number,
    right: _$$_REQUIRE(_dependencyMap[0]).number,
    top: _$$_REQUIRE(_dependencyMap[0]).number
  });
  module.exports = DeprecatedEdgeInsetsPropType;
},258,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    module.exports = _$$_REQUIRE(_dependencyMap[0])();
  }
},259,[260]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  function emptyFunction() {}
  function emptyFunctionWithReset() {}
  emptyFunctionWithReset.resetWarningCache = emptyFunction;
  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === _$$_REQUIRE(_dependencyMap[0])) {
        // It is still safe when called from React.
        return;
      }
      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }
    ;
    shim.isRequired = shim;
    function getShim() {
      return shim;
    }
    ;
    // Important!
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
    var ReactPropTypes = {
      array: shim,
      bigint: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},260,[261]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},261,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/Image/ImageProps.js
   */
  var DeprecatedImagePropType = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), {
    alt: _$$_REQUIRE(_dependencyMap[1]).string,
    blurRadius: _$$_REQUIRE(_dependencyMap[1]).number,
    capInsets: _$$_REQUIRE(_dependencyMap[2]),
    crossOrigin: _$$_REQUIRE(_dependencyMap[1]).oneOf(['anonymous', 'use-credentials']),
    defaultSource: _$$_REQUIRE(_dependencyMap[3]),
    fadeDuration: _$$_REQUIRE(_dependencyMap[1]).number,
    height: _$$_REQUIRE(_dependencyMap[1]).number,
    internal_analyticTag: _$$_REQUIRE(_dependencyMap[1]).string,
    loadingIndicatorSource: _$$_REQUIRE(_dependencyMap[1]).oneOfType([_$$_REQUIRE(_dependencyMap[1]).shape({
      uri: _$$_REQUIRE(_dependencyMap[1]).string
    }), _$$_REQUIRE(_dependencyMap[1]).number]),
    onError: _$$_REQUIRE(_dependencyMap[1]).func,
    onLoad: _$$_REQUIRE(_dependencyMap[1]).func,
    onLoadEnd: _$$_REQUIRE(_dependencyMap[1]).func,
    onLoadStart: _$$_REQUIRE(_dependencyMap[1]).func,
    onPartialLoad: _$$_REQUIRE(_dependencyMap[1]).func,
    onProgress: _$$_REQUIRE(_dependencyMap[1]).func,
    progressiveRenderingEnabled: _$$_REQUIRE(_dependencyMap[1]).bool,
    referrerPolicy: _$$_REQUIRE(_dependencyMap[1]).oneOf(['no-referrer', 'no-referrer-when-downgrade', 'origin', 'origin-when-cross-origin', 'same-origin', 'strict-origin', 'strict-origin-when-cross-origin', 'unsafe-url']),
    resizeMethod: _$$_REQUIRE(_dependencyMap[1]).oneOf(['auto', 'resize', 'scale']),
    resizeMode: _$$_REQUIRE(_dependencyMap[1]).oneOf(['cover', 'contain', 'stretch', 'repeat', 'center']),
    source: _$$_REQUIRE(_dependencyMap[3]),
    src: _$$_REQUIRE(_dependencyMap[1]).string,
    srcSet: _$$_REQUIRE(_dependencyMap[1]).string,
    style: _$$_REQUIRE(_dependencyMap[4])(_$$_REQUIRE(_dependencyMap[5])),
    testID: _$$_REQUIRE(_dependencyMap[1]).string,
    tintColor: _$$_REQUIRE(_dependencyMap[6]),
    width: _$$_REQUIRE(_dependencyMap[1]).number
  });
  module.exports = DeprecatedImagePropType;
},262,[263,259,258,271,265,272,257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var MouseEventPropTypes = {
    onMouseEnter: _$$_REQUIRE(_dependencyMap[0]).func,
    onMouseLeave: _$$_REQUIRE(_dependencyMap[0]).func
  };

  // Experimental/Work in Progress Pointer Event Callbacks (not yet ready for use)
  var PointerEventPropTypes = {
    onPointerEnter: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerEnterCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerLeave: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerLeaveCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerMove: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerMoveCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerCancel: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerCancelCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerDown: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerDownCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerUp: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerUpCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerOver: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerOverCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerOut: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerOutCapture: _$$_REQUIRE(_dependencyMap[0]).func
  };
  var FocusEventPropTypes = {
    onBlur: _$$_REQUIRE(_dependencyMap[0]).func,
    onBlurCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onFocus: _$$_REQUIRE(_dependencyMap[0]).func,
    onFocusCapture: _$$_REQUIRE(_dependencyMap[0]).func
  };
  var TouchEventPropTypes = {
    onTouchCancel: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchCancelCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchEnd: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchEndCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchMove: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchMoveCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchStart: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchStartCapture: _$$_REQUIRE(_dependencyMap[0]).func
  };
  var GestureResponderEventPropTypes = {
    onMoveShouldSetResponder: _$$_REQUIRE(_dependencyMap[0]).func,
    onMoveShouldSetResponderCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderEnd: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderGrant: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderMove: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderReject: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderRelease: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderStart: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderTerminate: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderTerminationRequest: _$$_REQUIRE(_dependencyMap[0]).func,
    onStartShouldSetResponder: _$$_REQUIRE(_dependencyMap[0]).func,
    onStartShouldSetResponderCapture: _$$_REQUIRE(_dependencyMap[0]).func
  };

  /**
   * @see facebook/react-native/Libraries/Components/View/ViewPropTypes.js
   */
  var DeprecatedViewPropTypes = Object.assign({}, MouseEventPropTypes, PointerEventPropTypes, FocusEventPropTypes, TouchEventPropTypes, GestureResponderEventPropTypes, {
    'aria-busy': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-checked': _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).bool, _$$_REQUIRE(_dependencyMap[0]).oneOf(['mixed'])]),
    'aria-disabled': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-expanded': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-hidden': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-label': _$$_REQUIRE(_dependencyMap[0]).string,
    'aria-labelledby': _$$_REQUIRE(_dependencyMap[0]).string,
    'aria-live': _$$_REQUIRE(_dependencyMap[0]).oneOf(['polite', 'assertive', 'off']),
    'aria-modal': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-selected': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-valuemax': _$$_REQUIRE(_dependencyMap[0]).number,
    'aria-valuemin': _$$_REQUIRE(_dependencyMap[0]).number,
    'aria-valuenow': _$$_REQUIRE(_dependencyMap[0]).number,
    'aria-valuetext': _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityActions: _$$_REQUIRE(_dependencyMap[0]).arrayOf(_$$_REQUIRE(_dependencyMap[1]).AccessibilityActionInfoPropType),
    accessibilityElementsHidden: _$$_REQUIRE(_dependencyMap[0]).bool,
    accessibilityHint: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityIgnoresInvertColors: _$$_REQUIRE(_dependencyMap[0]).bool,
    accessibilityLabel: _$$_REQUIRE(_dependencyMap[0]).node,
    accessibilityLabelledBy: _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).string, _$$_REQUIRE(_dependencyMap[0]).arrayOf(_$$_REQUIRE(_dependencyMap[0]).string)]),
    accessibilityLanguage: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityLiveRegion: _$$_REQUIRE(_dependencyMap[0]).oneOf(['assertive', 'none', 'polite']),
    accessibilityRole: _$$_REQUIRE(_dependencyMap[1]).AccessibilityRolePropType,
    accessibilityState: _$$_REQUIRE(_dependencyMap[1]).AccessibilityStatePropType,
    accessibilityValue: _$$_REQUIRE(_dependencyMap[1]).AccessibilityValuePropType,
    accessibilityViewIsModal: _$$_REQUIRE(_dependencyMap[0]).bool,
    accessible: _$$_REQUIRE(_dependencyMap[0]).bool,
    collapsable: _$$_REQUIRE(_dependencyMap[0]).bool,
    focusable: _$$_REQUIRE(_dependencyMap[0]).bool,
    hitSlop: _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[2]), _$$_REQUIRE(_dependencyMap[0]).number]),
    importantForAccessibility: _$$_REQUIRE(_dependencyMap[0]).oneOf(['auto', 'no', 'no-hide-descendants', 'yes']),
    nativeBackgroundAndroid: _$$_REQUIRE(_dependencyMap[0]).object,
    nativeForegroundAndroid: _$$_REQUIRE(_dependencyMap[0]).object,
    nativeID: _$$_REQUIRE(_dependencyMap[0]).string,
    needsOffscreenAlphaCompositing: _$$_REQUIRE(_dependencyMap[0]).bool,
    onAccessibilityAction: _$$_REQUIRE(_dependencyMap[0]).func,
    onAccessibilityEscape: _$$_REQUIRE(_dependencyMap[0]).func,
    onAccessibilityTap: _$$_REQUIRE(_dependencyMap[0]).func,
    onClick: _$$_REQUIRE(_dependencyMap[0]).func,
    onLayout: _$$_REQUIRE(_dependencyMap[0]).func,
    onMagicTap: _$$_REQUIRE(_dependencyMap[0]).func,
    pointerEvents: _$$_REQUIRE(_dependencyMap[0]).oneOf(['auto', 'box-none', 'box-only', 'none']),
    removeClippedSubviews: _$$_REQUIRE(_dependencyMap[0]).bool,
    renderToHardwareTextureAndroid: _$$_REQUIRE(_dependencyMap[0]).bool,
    role: _$$_REQUIRE(_dependencyMap[1]).RolePropType,
    shouldRasterizeIOS: _$$_REQUIRE(_dependencyMap[0]).bool,
    style: _$$_REQUIRE(_dependencyMap[3])(_$$_REQUIRE(_dependencyMap[4])),
    tabIndex: _$$_REQUIRE(_dependencyMap[0]).oneOf([0, -1]),
    testID: _$$_REQUIRE(_dependencyMap[0]).string
  });
  module.exports = DeprecatedViewPropTypes;
},263,[259,264,258,265,267]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/Components/View/ViewAccessibility.js
   */
  var DeprecatedViewAccessibility = {
    AccessibilityRolePropType: _$$_REQUIRE(_dependencyMap[0]).oneOf(['adjustable', 'alert', 'button', 'checkbox', 'combobox', 'drawerlayout', 'dropdownlist', 'grid', 'header', 'horizontalscrollview', 'iconmenu', 'image', 'imagebutton', 'keyboardkey', 'link', 'list', 'menu', 'menubar', 'menuitem', 'none', 'pager', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'scrollview', 'search', 'slidingdrawer', 'spinbutton', 'summary', 'switch', 'tab', 'tabbar', 'tablist', 'text', 'timer', 'togglebutton', 'toolbar', 'viewgroup', 'webview']),
    AccessibilityStatePropType: _$$_REQUIRE(_dependencyMap[0]).object,
    AccessibilityActionInfoPropType: _$$_REQUIRE(_dependencyMap[0]).object,
    AccessibilityValuePropType: _$$_REQUIRE(_dependencyMap[0]).object,
    RolePropType: _$$_REQUIRE(_dependencyMap[0]).oneOf(['alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed', 'figure', 'form', 'grid', 'group', 'heading', 'img', 'link', 'list', 'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'meter', 'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'searchbox', 'separator', 'slider', 'spinbutton', 'status', 'summary', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem'])
  };
  module.exports = DeprecatedViewAccessibility;
},264,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function DeprecatedStyleSheetPropType(shape) {
    var shapePropType = _$$_REQUIRE(_dependencyMap[0])(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;
      if (props[propName]) {
        // Just make a dummy prop object with only the flattened style
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }
      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }
      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }
  function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }
    if (!Array.isArray(style)) {
      return style;
    }
    var result = {};
    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);
      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }
    return result;
  }
  module.exports = DeprecatedStyleSheetPropType;
},265,[266]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          _$$_REQUIRE(_dependencyMap[0])(false, `Required object \`${propName}\` was not specified in ` + `\`${componentName}\`.`);
        }
        return;
      }
      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';
      if (propType !== 'object') {
        _$$_REQUIRE(_dependencyMap[0])(false, `Invalid ${locationName} \`${propName}\` of type \`${propType}\` ` + `supplied to \`${componentName}\`, expected \`object\`.`);
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = Object.assign({}, props[propName], shapeTypes);
      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          _$$_REQUIRE(_dependencyMap[0])(false, `Invalid props.${propName} key \`${key}\` supplied to \`${componentName}\`.` + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));
        if (error) {
          _$$_REQUIRE(_dependencyMap[0])(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }
    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }
      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  module.exports = deprecatedCreateStrictShapeTypeChecker;
},266,[24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedViewStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), _$$_REQUIRE(_dependencyMap[1]), _$$_REQUIRE(_dependencyMap[2]), {
    backfaceVisibility: _$$_REQUIRE(_dependencyMap[3]).oneOf(['hidden', 'visible']),
    backgroundColor: _$$_REQUIRE(_dependencyMap[4]),
    borderBottomColor: _$$_REQUIRE(_dependencyMap[4]),
    borderBottomEndRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomLeftRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomRightRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomStartRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    borderColor: _$$_REQUIRE(_dependencyMap[4]),
    borderCurve: _$$_REQUIRE(_dependencyMap[3]).oneOf(['circular', 'continuous']),
    borderEndColor: _$$_REQUIRE(_dependencyMap[4]),
    borderEndEndRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderEndStartRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderLeftColor: _$$_REQUIRE(_dependencyMap[4]),
    borderLeftWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    borderRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderRightColor: _$$_REQUIRE(_dependencyMap[4]),
    borderRightWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    borderStartColor: _$$_REQUIRE(_dependencyMap[4]),
    borderStartEndRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderStartStartRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderStyle: _$$_REQUIRE(_dependencyMap[3]).oneOf(['dashed', 'dotted', 'solid']),
    borderTopColor: _$$_REQUIRE(_dependencyMap[4]),
    borderTopEndRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopLeftRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopRightRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopStartRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    borderWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    elevation: _$$_REQUIRE(_dependencyMap[3]).number,
    opacity: _$$_REQUIRE(_dependencyMap[3]).number,
    pointerEvents: _$$_REQUIRE(_dependencyMap[3]).oneOf(['auto', 'box-none', 'box-only', 'none'])
  });
  module.exports = DeprecatedViewStylePropTypes;
},267,[268,269,270,259,257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var DimensionValuePropType = _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).number, _$$_REQUIRE(_dependencyMap[0]).string]);

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedLayoutPropTypes = {
    alignContent: _$$_REQUIRE(_dependencyMap[0]).oneOf(['center', 'flex-end', 'flex-start', 'space-around', 'space-between', 'stretch']),
    alignItems: _$$_REQUIRE(_dependencyMap[0]).oneOf(['baseline', 'center', 'flex-end', 'flex-start', 'stretch']),
    alignSelf: _$$_REQUIRE(_dependencyMap[0]).oneOf(['auto', 'baseline', 'center', 'flex-end', 'flex-start', 'stretch']),
    aspectRatio: _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).number, _$$_REQUIRE(_dependencyMap[0]).string]),
    borderBottomWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderEndWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderLeftWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderRightWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderStartWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderTopWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    bottom: DimensionValuePropType,
    columnGap: _$$_REQUIRE(_dependencyMap[0]).number,
    direction: _$$_REQUIRE(_dependencyMap[0]).oneOf(['inherit', 'ltr', 'rtl']),
    display: _$$_REQUIRE(_dependencyMap[0]).oneOf(['flex', 'none']),
    end: DimensionValuePropType,
    flex: _$$_REQUIRE(_dependencyMap[0]).number,
    flexBasis: DimensionValuePropType,
    flexDirection: _$$_REQUIRE(_dependencyMap[0]).oneOf(['column', 'column-reverse', 'row', 'row-reverse']),
    flexGrow: _$$_REQUIRE(_dependencyMap[0]).number,
    flexShrink: _$$_REQUIRE(_dependencyMap[0]).number,
    flexWrap: _$$_REQUIRE(_dependencyMap[0]).oneOf(['nowrap', 'wrap', 'wrap-reverse']),
    gap: _$$_REQUIRE(_dependencyMap[0]).number,
    height: DimensionValuePropType,
    inset: DimensionValuePropType,
    insetBlock: DimensionValuePropType,
    insetBlockEnd: DimensionValuePropType,
    insetBlockStart: DimensionValuePropType,
    insetInline: DimensionValuePropType,
    insetInlineEnd: DimensionValuePropType,
    insetInlineStart: DimensionValuePropType,
    justifyContent: _$$_REQUIRE(_dependencyMap[0]).oneOf(['center', 'flex-end', 'flex-start', 'space-around', 'space-between', 'space-evenly']),
    left: DimensionValuePropType,
    margin: DimensionValuePropType,
    marginBlock: DimensionValuePropType,
    marginBlockEnd: DimensionValuePropType,
    marginBlockStart: DimensionValuePropType,
    marginBottom: DimensionValuePropType,
    marginEnd: DimensionValuePropType,
    marginHorizontal: DimensionValuePropType,
    marginInline: DimensionValuePropType,
    marginInlineEnd: DimensionValuePropType,
    marginInlineStart: DimensionValuePropType,
    marginLeft: DimensionValuePropType,
    marginRight: DimensionValuePropType,
    marginStart: DimensionValuePropType,
    marginTop: DimensionValuePropType,
    marginVertical: DimensionValuePropType,
    maxHeight: DimensionValuePropType,
    maxWidth: DimensionValuePropType,
    minHeight: DimensionValuePropType,
    minWidth: DimensionValuePropType,
    overflow: _$$_REQUIRE(_dependencyMap[0]).oneOf(['hidden', 'scroll', 'visible']),
    padding: DimensionValuePropType,
    paddingBlock: DimensionValuePropType,
    paddingBlockEnd: DimensionValuePropType,
    paddingBlockStart: DimensionValuePropType,
    paddingBottom: DimensionValuePropType,
    paddingEnd: DimensionValuePropType,
    paddingHorizontal: DimensionValuePropType,
    paddingInline: DimensionValuePropType,
    paddingInlineEnd: DimensionValuePropType,
    paddingInlineStart: DimensionValuePropType,
    paddingLeft: DimensionValuePropType,
    paddingRight: DimensionValuePropType,
    paddingStart: DimensionValuePropType,
    paddingTop: DimensionValuePropType,
    paddingVertical: DimensionValuePropType,
    position: _$$_REQUIRE(_dependencyMap[0]).oneOf(['absolute', 'relative']),
    right: DimensionValuePropType,
    rowGap: _$$_REQUIRE(_dependencyMap[0]).number,
    start: DimensionValuePropType,
    top: DimensionValuePropType,
    width: DimensionValuePropType,
    zIndex: _$$_REQUIRE(_dependencyMap[0]).number
  };
  module.exports = DeprecatedLayoutPropTypes;
},268,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedShadowPropTypesIOS = {
    shadowColor: _$$_REQUIRE(_dependencyMap[0]),
    shadowOffset: _$$_REQUIRE(_dependencyMap[1]).shape({
      height: _$$_REQUIRE(_dependencyMap[1]).number,
      width: _$$_REQUIRE(_dependencyMap[1]).number
    }),
    shadowOpacity: _$$_REQUIRE(_dependencyMap[1]).number,
    shadowRadius: _$$_REQUIRE(_dependencyMap[1]).number
  };
  module.exports = DeprecatedShadowPropTypesIOS;
},269,[257,259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/private/_TransformStyle.js
   */
  var DeprecatedTransformPropTypes = {
    transform: _$$_REQUIRE(_dependencyMap[0]).arrayOf(_$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).shape({
      perspective: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      rotate: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      rotateX: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      rotateY: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      rotateZ: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      scale: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      scaleX: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      scaleY: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      skewX: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      skewY: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      translateX: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      translateY: _$$_REQUIRE(_dependencyMap[0]).number
    })]))
  };
  module.exports = DeprecatedTransformPropTypes;
},270,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/Image/ImageSource.js
   */
  var ImageURISourcePropType = _$$_REQUIRE(_dependencyMap[0]).shape({
    body: _$$_REQUIRE(_dependencyMap[0]).string,
    bundle: _$$_REQUIRE(_dependencyMap[0]).string,
    cache: _$$_REQUIRE(_dependencyMap[0]).oneOf(['default', 'force-cache', 'only-if-cached', 'reload']),
    headers: _$$_REQUIRE(_dependencyMap[0]).objectOf(_$$_REQUIRE(_dependencyMap[0]).string),
    height: _$$_REQUIRE(_dependencyMap[0]).number,
    method: _$$_REQUIRE(_dependencyMap[0]).string,
    scale: _$$_REQUIRE(_dependencyMap[0]).number,
    uri: _$$_REQUIRE(_dependencyMap[0]).string,
    width: _$$_REQUIRE(_dependencyMap[0]).number
  });
  var ImageSourcePropType = _$$_REQUIRE(_dependencyMap[0]).oneOfType([ImageURISourcePropType, _$$_REQUIRE(_dependencyMap[0]).number, _$$_REQUIRE(_dependencyMap[0]).arrayOf(ImageURISourcePropType)]);
  module.exports = ImageSourcePropType;
},271,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedImageStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), _$$_REQUIRE(_dependencyMap[1]), _$$_REQUIRE(_dependencyMap[2]), {
    backfaceVisibility: _$$_REQUIRE(_dependencyMap[3]).oneOf(['hidden', 'visible']),
    backgroundColor: _$$_REQUIRE(_dependencyMap[4]),
    borderBottomLeftRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomRightRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderColor: _$$_REQUIRE(_dependencyMap[4]),
    borderRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopLeftRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopRightRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    objectFit: _$$_REQUIRE(_dependencyMap[3]).oneOf(['contain', 'cover', 'fill', 'scale-down']),
    opacity: _$$_REQUIRE(_dependencyMap[3]).number,
    overflow: _$$_REQUIRE(_dependencyMap[3]).oneOf(['hidden', 'visible']),
    overlayColor: _$$_REQUIRE(_dependencyMap[3]).string,
    tintColor: _$$_REQUIRE(_dependencyMap[4]),
    resizeMode: _$$_REQUIRE(_dependencyMap[3]).oneOf(['center', 'contain', 'cover', 'repeat', 'stretch'])
  });
  module.exports = DeprecatedImageStylePropTypes;
},272,[268,269,270,259,257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var PointPropType = _$$_REQUIRE(_dependencyMap[0]).shape({
    x: _$$_REQUIRE(_dependencyMap[0]).number,
    y: _$$_REQUIRE(_dependencyMap[0]).number
  });
  module.exports = PointPropType;
},273,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var DataDetectorTypes = ['address', 'all', 'calendarEvent', 'link', 'none', 'phoneNumber'];

  /**
   * @see facebook/react-native/Libraries/TextInput/TextInput.js
   */
  var DeprecatedTextInputPropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), {
    allowFontScaling: _$$_REQUIRE(_dependencyMap[1]).bool,
    autoCapitalize: _$$_REQUIRE(_dependencyMap[1]).oneOf(['none', 'sentences', 'words', 'characters']),
    autoComplete: _$$_REQUIRE(_dependencyMap[1]).oneOf(['additional-name', 'address-line1', 'address-line2', 'bday', 'bday-day', 'bday-month', 'bday-year', 'birthdate-day', 'birthdate-full', 'birthdate-month', 'birthdate-year', 'cc-csc', 'cc-exp', 'cc-exp-day', 'cc-exp-month', 'cc-exp-year', 'cc-family-name', 'cc-given-name', 'cc-middle-name', 'cc-name', 'cc-number', 'cc-type', 'country', 'current-password', 'email', 'family-name', 'gender', 'given-name', 'honorific-prefix', 'honorific-suffix', 'name', 'name-family', 'name-given', 'name-middle', 'name-middle-initial', 'name-prefix', 'name-suffix', 'new-password', 'nickname', 'off', 'one-time-code', 'organization', 'organization-title', 'password', 'password-new', 'postal-address', 'postal-address-country', 'postal-address-extended', 'postal-address-extended-postal-code', 'postal-address-locality', 'postal-address-region', 'postal-code', 'sex', 'sms-otp', 'street-address', 'tel', 'tel-country-code', 'tel-device', 'tel-national', 'url', 'username', 'username-new']),
    autoCorrect: _$$_REQUIRE(_dependencyMap[1]).bool,
    autoFocus: _$$_REQUIRE(_dependencyMap[1]).bool,
    blurOnSubmit: _$$_REQUIRE(_dependencyMap[1]).bool,
    caretHidden: _$$_REQUIRE(_dependencyMap[1]).bool,
    clearButtonMode: _$$_REQUIRE(_dependencyMap[1]).oneOf(['always', 'never', 'unless-editing', 'while-editing']),
    clearTextOnFocus: _$$_REQUIRE(_dependencyMap[1]).bool,
    cursorColor: _$$_REQUIRE(_dependencyMap[2]),
    contextMenuHidden: _$$_REQUIRE(_dependencyMap[1]).bool,
    dataDetectorTypes: _$$_REQUIRE(_dependencyMap[1]).oneOfType([_$$_REQUIRE(_dependencyMap[1]).oneOf(DataDetectorTypes), _$$_REQUIRE(_dependencyMap[1]).arrayOf(_$$_REQUIRE(_dependencyMap[1]).oneOf(DataDetectorTypes))]),
    defaultValue: _$$_REQUIRE(_dependencyMap[1]).string,
    disableFullscreenUI: _$$_REQUIRE(_dependencyMap[1]).bool,
    editable: _$$_REQUIRE(_dependencyMap[1]).bool,
    enablesReturnKeyAutomatically: _$$_REQUIRE(_dependencyMap[1]).bool,
    enterKeyHint: _$$_REQUIRE(_dependencyMap[1]).oneOf(['done', 'enter', 'go', 'next', 'previous', 'search', 'send']),
    inlineImageLeft: _$$_REQUIRE(_dependencyMap[1]).string,
    inlineImagePadding: _$$_REQUIRE(_dependencyMap[1]).number,
    inputAccessoryViewID: _$$_REQUIRE(_dependencyMap[1]).string,
    inputMode: _$$_REQUIRE(_dependencyMap[1]).oneOf(['decimal', 'email', 'none', 'numeric', 'search', 'tel', 'text', 'url']),
    keyboardAppearance: _$$_REQUIRE(_dependencyMap[1]).oneOf(['default', 'dark', 'light']),
    keyboardType: _$$_REQUIRE(_dependencyMap[1]).oneOf(['ascii-capable', 'ascii-capable-number-pad', 'decimal-pad', 'default', 'email-address', 'name-phone-pad', 'number-pad', 'numbers-and-punctuation', 'numeric', 'phone-pad', 'twitter', 'url', 'visible-password', 'web-search']),
    lineBreakStrategyIOS: _$$_REQUIRE(_dependencyMap[1]).oneOf(['hangul-word', 'none', 'push-out', 'standard']),
    maxFontSizeMultiplier: _$$_REQUIRE(_dependencyMap[1]).number,
    maxLength: _$$_REQUIRE(_dependencyMap[1]).number,
    multiline: _$$_REQUIRE(_dependencyMap[1]).bool,
    numberOfLines: _$$_REQUIRE(_dependencyMap[1]).number,
    onBlur: _$$_REQUIRE(_dependencyMap[1]).func,
    onChange: _$$_REQUIRE(_dependencyMap[1]).func,
    onChangeText: _$$_REQUIRE(_dependencyMap[1]).func,
    onContentSizeChange: _$$_REQUIRE(_dependencyMap[1]).func,
    onEndEditing: _$$_REQUIRE(_dependencyMap[1]).func,
    onFocus: _$$_REQUIRE(_dependencyMap[1]).func,
    onKeyPress: _$$_REQUIRE(_dependencyMap[1]).func,
    onLayout: _$$_REQUIRE(_dependencyMap[1]).func,
    onScroll: _$$_REQUIRE(_dependencyMap[1]).func,
    onSelectionChange: _$$_REQUIRE(_dependencyMap[1]).func,
    onSubmitEditing: _$$_REQUIRE(_dependencyMap[1]).func,
    onTextInput: _$$_REQUIRE(_dependencyMap[1]).func,
    placeholder: _$$_REQUIRE(_dependencyMap[1]).string,
    placeholderTextColor: _$$_REQUIRE(_dependencyMap[2]),
    readOnly: _$$_REQUIRE(_dependencyMap[1]).bool,
    rejectResponderTermination: _$$_REQUIRE(_dependencyMap[1]).bool,
    returnKeyLabel: _$$_REQUIRE(_dependencyMap[1]).string,
    returnKeyType: _$$_REQUIRE(_dependencyMap[1]).oneOf(['default', 'done', 'emergency-call', 'go', 'google', 'join', 'next', 'none', 'previous', 'route', 'search', 'send', 'yahoo']),
    rows: _$$_REQUIRE(_dependencyMap[1]).number,
    scrollEnabled: _$$_REQUIRE(_dependencyMap[1]).bool,
    secureTextEntry: _$$_REQUIRE(_dependencyMap[1]).bool,
    selection: _$$_REQUIRE(_dependencyMap[1]).shape({
      end: _$$_REQUIRE(_dependencyMap[1]).number,
      start: _$$_REQUIRE(_dependencyMap[1]).number.isRequired
    }),
    selectionColor: _$$_REQUIRE(_dependencyMap[2]),
    selectTextOnFocus: _$$_REQUIRE(_dependencyMap[1]).bool,
    showSoftInputOnFocus: _$$_REQUIRE(_dependencyMap[1]).bool,
    spellCheck: _$$_REQUIRE(_dependencyMap[1]).bool,
    style: _$$_REQUIRE(_dependencyMap[3]).style,
    submitBehavior: _$$_REQUIRE(_dependencyMap[1]).oneOf(['blurAndSubmit', 'newline', 'submit']),
    textBreakStrategy: _$$_REQUIRE(_dependencyMap[1]).oneOf(['balanced', 'highQuality', 'simple']),
    textContentType: _$$_REQUIRE(_dependencyMap[1]).oneOf(['addressCity', 'addressCityAndState', 'addressState', 'birthdate', 'birthdateDay', 'birthdateMonth', 'birthdateYear', 'countryName', 'creditCardExpiration', 'creditCardExpirationMonth', 'creditCardExpirationYear', 'creditCardFamilyName', 'creditCardGivenName', 'creditCardMiddleName', 'creditCardName', 'creditCardNumber', 'creditCardSecurityCode', 'creditCardType', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'newPassword', 'nickname', 'none', 'oneTimeCode', 'organizationName', 'password', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'URL', 'username']),
    underlineColorAndroid: _$$_REQUIRE(_dependencyMap[2]),
    value: _$$_REQUIRE(_dependencyMap[1]).string
  });
  module.exports = DeprecatedTextInputPropTypes;
},274,[263,259,257,275]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/Text/TextProps.js
   */
  var DeprecatedTextPropTypes = {
    'aria-busy': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-checked': _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).bool, _$$_REQUIRE(_dependencyMap[0]).oneOf(['mixed'])]),
    'aria-disabled': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-expanded': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-label': _$$_REQUIRE(_dependencyMap[0]).string,
    'aria-labelledby': _$$_REQUIRE(_dependencyMap[0]).string,
    'aria-selected': _$$_REQUIRE(_dependencyMap[0]).bool,
    accessibilityActions: _$$_REQUIRE(_dependencyMap[0]).arrayOf(_$$_REQUIRE(_dependencyMap[1]).AccessibilityActionInfoPropType),
    accessibilityHint: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityLabel: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityLanguage: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityRole: _$$_REQUIRE(_dependencyMap[1]).AccessibilityRolePropType,
    accessibilityState: _$$_REQUIRE(_dependencyMap[1]).AccessibilityStatePropType,
    accessible: _$$_REQUIRE(_dependencyMap[0]).bool,
    adjustsFontSizeToFit: _$$_REQUIRE(_dependencyMap[0]).bool,
    allowFontScaling: _$$_REQUIRE(_dependencyMap[0]).bool,
    dataDetectorType: _$$_REQUIRE(_dependencyMap[0]).oneOf(['all', 'email', 'link', 'none', 'phoneNumber']),
    disabled: _$$_REQUIRE(_dependencyMap[0]).bool,
    dynamicTypeRamp: _$$_REQUIRE(_dependencyMap[0]).oneOf(['body', 'callout', 'caption1', 'caption2', 'footnote', 'headline', 'largeTitle', 'subheadline', 'title1', 'title2', 'title3']),
    ellipsizeMode: _$$_REQUIRE(_dependencyMap[0]).oneOf(['clip', 'head', 'middle', 'tail']),
    id: _$$_REQUIRE(_dependencyMap[0]).string,
    lineBreakStrategyIOS: _$$_REQUIRE(_dependencyMap[0]).oneOf(['hangul-word', 'none', 'push-out', 'standard']),
    maxFontSizeMultiplier: _$$_REQUIRE(_dependencyMap[0]).number,
    minimumFontScale: _$$_REQUIRE(_dependencyMap[0]).number,
    nativeID: _$$_REQUIRE(_dependencyMap[0]).string,
    numberOfLines: _$$_REQUIRE(_dependencyMap[0]).number,
    onAccessibilityAction: _$$_REQUIRE(_dependencyMap[0]).func,
    onLayout: _$$_REQUIRE(_dependencyMap[0]).func,
    onLongPress: _$$_REQUIRE(_dependencyMap[0]).func,
    onMoveShouldSetResponder: _$$_REQUIRE(_dependencyMap[0]).func,
    onPress: _$$_REQUIRE(_dependencyMap[0]).func,
    onPressIn: _$$_REQUIRE(_dependencyMap[0]).func,
    onPressOut: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderGrant: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderMove: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderRelease: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderTerminate: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderTerminationRequest: _$$_REQUIRE(_dependencyMap[0]).func,
    onStartShouldSetResponder: _$$_REQUIRE(_dependencyMap[0]).func,
    onTextLayout: _$$_REQUIRE(_dependencyMap[0]).func,
    pressRetentionOffset: _$$_REQUIRE(_dependencyMap[2]),
    role: _$$_REQUIRE(_dependencyMap[1]).RolePropType,
    selectable: _$$_REQUIRE(_dependencyMap[0]).bool,
    selectionColor: _$$_REQUIRE(_dependencyMap[3]),
    style: _$$_REQUIRE(_dependencyMap[4])(_$$_REQUIRE(_dependencyMap[5])),
    suppressHighlighting: _$$_REQUIRE(_dependencyMap[0]).bool,
    testID: _$$_REQUIRE(_dependencyMap[0]).string,
    textBreakStrategy: _$$_REQUIRE(_dependencyMap[0]).oneOf(['balanced', 'highQuality', 'simple'])
  };
  module.exports = DeprecatedTextPropTypes;
},275,[259,264,258,257,265,276]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedTextStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), {
    color: _$$_REQUIRE(_dependencyMap[1]),
    fontFamily: _$$_REQUIRE(_dependencyMap[2]).string,
    fontSize: _$$_REQUIRE(_dependencyMap[2]).number,
    fontStyle: _$$_REQUIRE(_dependencyMap[2]).oneOf(['italic', 'normal']),
    fontVariant: _$$_REQUIRE(_dependencyMap[2]).oneOfType([_$$_REQUIRE(_dependencyMap[2]).arrayOf(_$$_REQUIRE(_dependencyMap[2]).oneOf(['lining-nums', 'oldstyle-nums', 'proportional-nums', 'small-caps', 'stylistic-eight', 'stylistic-eighteen', 'stylistic-eleven', 'stylistic-fifteen', 'stylistic-five', 'stylistic-four', 'stylistic-fourteen', 'stylistic-nine', 'stylistic-nineteen', 'stylistic-one', 'stylistic-seven', 'stylistic-seventeen', 'stylistic-six', 'stylistic-sixteen', 'stylistic-ten', 'stylistic-thirteen', 'stylistic-three', 'stylistic-twelve', 'stylistic-twenty', 'stylistic-two', 'tabular-nums'])), _$$_REQUIRE(_dependencyMap[2]).string]),
    fontWeight: _$$_REQUIRE(_dependencyMap[2]).oneOf(['100', '200', '300', '400', '500', '600', '700', '800', '900', 'black', 'bold', 'condensed', 'condensedBold', 'heavy', 'light', 'medium', 'normal', 'regular', 'semibold', 'thin', 'ultralight', 100, 200, 300, 400, 500, 600, 700, 800, 900]),
    includeFontPadding: _$$_REQUIRE(_dependencyMap[2]).bool,
    letterSpacing: _$$_REQUIRE(_dependencyMap[2]).number,
    lineHeight: _$$_REQUIRE(_dependencyMap[2]).number,
    textAlign: _$$_REQUIRE(_dependencyMap[2]).oneOf(['auto', 'center', 'justify', 'left', 'right']),
    textAlignVertical: _$$_REQUIRE(_dependencyMap[2]).oneOf(['auto', 'bottom', 'center', 'top']),
    textDecorationColor: _$$_REQUIRE(_dependencyMap[1]),
    textDecorationLine: _$$_REQUIRE(_dependencyMap[2]).oneOf(['line-through', 'none', 'underline line-through', 'underline']),
    textDecorationStyle: _$$_REQUIRE(_dependencyMap[2]).oneOf(['dashed', 'dotted', 'double', 'solid']),
    textShadowColor: _$$_REQUIRE(_dependencyMap[1]),
    textShadowOffset: _$$_REQUIRE(_dependencyMap[2]).shape({
      height: _$$_REQUIRE(_dependencyMap[2]).number,
      width: _$$_REQUIRE(_dependencyMap[2]).number
    }),
    textShadowRadius: _$$_REQUIRE(_dependencyMap[2]).number,
    textTransform: _$$_REQUIRE(_dependencyMap[2]).oneOf(['capitalize', 'lowercase', 'none', 'uppercase']),
    userSelect: _$$_REQUIRE(_dependencyMap[2]).oneOf(['all', 'auto', 'contain', 'none', 'text']),
    verticalAlign: _$$_REQUIRE(_dependencyMap[2]).oneOf(['auto', 'bottom', 'middle', 'top']),
    writingDirection: _$$_REQUIRE(_dependencyMap[2]).oneOf(['auto', 'ltr', 'rtl'])
  });
  module.exports = DeprecatedTextStylePropTypes;
},276,[267,257,259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[13]);
  var _excluded = ["onBlur", "onFocus"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var TouchableNativeFeedback = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(TouchableNativeFeedback, _React$Component);
    var _super = _createSuper(TouchableNativeFeedback);
    function TouchableNativeFeedback() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableNativeFeedback);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        pressability: new _Pressability.default(_this._createPressabilityConfig())
      };
      return _this;
    }
    (0, _createClass2.default)(TouchableNativeFeedback, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        var _this$props$ariaDisa,
          _this$props$accessibi,
          _this2 = this;
        var accessibilityStateDisabled = (_this$props$ariaDisa = this.props['aria-disabled']) != null ? _this$props$ariaDisa : (_this$props$accessibi = this.props.accessibilityState) == null ? undefined : _this$props$accessibi.disabled;
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled != null ? this.props.disabled : accessibilityStateDisabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          android_disableSound: this.props.touchSoundDisabled,
          onLongPress: this.props.onLongPress,
          onPress: this.props.onPress,
          onPressIn: function onPressIn(event) {
            if (_Platform.default.OS === 'android') {
              _this2._dispatchHotspotUpdate(event);
              _this2._dispatchPressedStateChange(true);
            }
            if (_this2.props.onPressIn != null) {
              _this2.props.onPressIn(event);
            }
          },
          onPressMove: function onPressMove(event) {
            if (_Platform.default.OS === 'android') {
              _this2._dispatchHotspotUpdate(event);
            }
          },
          onPressOut: function onPressOut(event) {
            if (_Platform.default.OS === 'android') {
              _this2._dispatchPressedStateChange(false);
            }
            if (_this2.props.onPressOut != null) {
              _this2.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_dispatchPressedStateChange",
      value: function _dispatchPressedStateChange(pressed) {
        if (_Platform.default.OS === 'android') {
          var hostComponentRef = (0, _$$_REQUIRE(_dependencyMap[14]).findHostInstance_DEPRECATED)(this);
          if (hostComponentRef == null) {
            console.warn("Touchable: Unable to find HostComponent instance. Has your Touchable component been unmounted?");
          } else {
            _$$_REQUIRE(_dependencyMap[15]).Commands.setPressed(hostComponentRef, pressed);
          }
        }
      }
    }, {
      key: "_dispatchHotspotUpdate",
      value: function _dispatchHotspotUpdate(event) {
        if (_Platform.default.OS === 'android') {
          var _event$nativeEvent = event.nativeEvent,
            locationX = _event$nativeEvent.locationX,
            locationY = _event$nativeEvent.locationY;
          var hostComponentRef = (0, _$$_REQUIRE(_dependencyMap[14]).findHostInstance_DEPRECATED)(this);
          if (hostComponentRef == null) {
            console.warn("Touchable: Unable to find HostComponent instance. Has your Touchable component been unmounted?");
          } else {
            _$$_REQUIRE(_dependencyMap[15]).Commands.hotspotUpdate(hostComponentRef, locationX != null ? locationX : 0, locationY != null ? locationY : 0);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props$ariaBusy, _this$props$accessibi2, _this$props$ariaChec, _this$props$accessibi3, _this$props$ariaDisa2, _this$props$accessibi4, _this$props$ariaExpa, _this$props$accessibi5, _this$props$ariaSele, _this$props$accessibi6, _this$props$ariaValu, _this$props$accessibi7, _this$props$ariaValu2, _this$props$accessibi8, _this$props$ariaValu3, _this$props$accessibi9, _this$props$ariaValu4, _this$props$accessibi10, _this$props$ariaLive, _this$props$ariaLabe, _this$props$ariaModa, _this$props$ariaHidd, _this$props$id;
        var element = React.Children.only(this.props.children);
        var children = [element.props.children];
        // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
        // adopting `Pressability`, so preserve that behavior.
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var _accessibilityState = {
          busy: (_this$props$ariaBusy = this.props['aria-busy']) != null ? _this$props$ariaBusy : (_this$props$accessibi2 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi2.busy,
          checked: (_this$props$ariaChec = this.props['aria-checked']) != null ? _this$props$ariaChec : (_this$props$accessibi3 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi3.checked,
          disabled: (_this$props$ariaDisa2 = this.props['aria-disabled']) != null ? _this$props$ariaDisa2 : (_this$props$accessibi4 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi4.disabled,
          expanded: (_this$props$ariaExpa = this.props['aria-expanded']) != null ? _this$props$ariaExpa : (_this$props$accessibi5 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi5.expanded,
          selected: (_this$props$ariaSele = this.props['aria-selected']) != null ? _this$props$ariaSele : (_this$props$accessibi6 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi6.selected
        };
        _accessibilityState = this.props.disabled != null ? Object.assign({}, _accessibilityState, {
          disabled: this.props.disabled
        }) : _accessibilityState;
        var accessibilityValue = {
          max: (_this$props$ariaValu = this.props['aria-valuemax']) != null ? _this$props$ariaValu : (_this$props$accessibi7 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi7.max,
          min: (_this$props$ariaValu2 = this.props['aria-valuemin']) != null ? _this$props$ariaValu2 : (_this$props$accessibi8 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi8.min,
          now: (_this$props$ariaValu3 = this.props['aria-valuenow']) != null ? _this$props$ariaValu3 : (_this$props$accessibi9 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi9.now,
          text: (_this$props$ariaValu4 = this.props['aria-valuetext']) != null ? _this$props$ariaValu4 : (_this$props$accessibi10 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi10.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : (_this$props$ariaLive = this.props['aria-live']) != null ? _this$props$ariaLive : this.props.accessibilityLiveRegion;
        var accessibilityLabel = (_this$props$ariaLabe = this.props['aria-label']) != null ? _this$props$ariaLabe : this.props.accessibilityLabel;
        return React.cloneElement.apply(React, [element, Object.assign({}, eventHandlersWithoutBlurAndFocus, getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true), {
          accessible: this.props.accessible !== false,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: _accessibilityState,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          accessibilityValue: accessibilityValue,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: (_this$props$ariaModa = this.props['aria-modal']) != null ? _this$props$ariaModa : this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: (_this$props$ariaHidd = this.props['aria-hidden']) != null ? _this$props$ariaHidd : this.props.accessibilityElementsHidden,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          hitSlop: this.props.hitSlop,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
          nativeID: (_this$props$id = this.props.id) != null ? _this$props$id : this.props.nativeID,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          onLayout: this.props.onLayout,
          testID: this.props.testID
        })].concat(children));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.pressability.reset();
      }
    }]);
    return TouchableNativeFeedback;
  }(React.Component);
  /**
   * Creates a value for the `background` prop that uses the Android theme's
   * default background for selectable elements.
   */
  TouchableNativeFeedback.SelectableBackground = function (rippleRadius) {
    return {
      type: 'ThemeAttrAndroid',
      attribute: 'selectableItemBackground',
      rippleRadius: rippleRadius
    };
  };
  /**
   * Creates a value for the `background` prop that uses the Android theme's
   * default background for borderless selectable elements. Requires API 21+.
   */
  TouchableNativeFeedback.SelectableBackgroundBorderless = function (rippleRadius) {
    return {
      type: 'ThemeAttrAndroid',
      attribute: 'selectableItemBackgroundBorderless',
      rippleRadius: rippleRadius
    };
  };
  /**
   * Creates a value for the `background` prop that uses the Android ripple with
   * the supplied color. If `borderless` is true, the ripple will render outside
   * of the view bounds. Requires API 21+.
   */
  TouchableNativeFeedback.Ripple = function (color, borderless, rippleRadius) {
    var processedColor = (0, _processColor.default)(color);
    (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
    return {
      type: 'RippleAndroid',
      color: processedColor,
      borderless: borderless,
      rippleRadius: rippleRadius
    };
  };
  /**
   * Whether `useForeground` is supported.
   */
  TouchableNativeFeedback.canUseNativeForeground = function () {
    return _Platform.default.OS === 'android' && _Platform.default.Version >= 23;
  };
  var getBackgroundProp = _Platform.default.OS === 'android' ?
  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
   * Flow's LTI update could not be added via codemod */
  function (background, useForeground) {
    return useForeground && TouchableNativeFeedback.canUseNativeForeground() ? {
      nativeForegroundAndroid: background
    } : {
      nativeBackgroundAndroid: background
    };
  } :
  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
   * Flow's LTI update could not be added via codemod */
  function (background, useForeground) {
    return null;
  };
  TouchableNativeFeedback.displayName = 'TouchableNativeFeedback';
  module.exports = TouchableNativeFeedback;
},277,[1,119,5,6,13,15,12,156,249,164,21,24,153,194,52,159]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Animated = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _Easing = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _flattenStyle4 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[13]);
  var _excluded = ["onBlur", "onFocus"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  /**
   * A wrapper for making views respond properly to touches.
   * On press down, the opacity of the wrapped view is decreased, dimming it.
   *
   * Opacity is controlled by wrapping the children in an Animated.View, which is
   * added to the view hierarchy.  Be aware that this can affect layout.
   *
   * Example:
   *
   * ```
   * renderButton: function() {
   *   return (
   *     <TouchableOpacity onPress={this._onPressButton}>
   *       <Image
   *         style={styles.button}
   *         source={require('./myButton.png')}
   *       />
   *     </TouchableOpacity>
   *   );
   * },
   * ```
   * ### Example
   *
   * ```ReactNativeWebPlayer
   * import React, { Component } from 'react'
   * import {
   *   AppRegistry,
   *   StyleSheet,
   *   TouchableOpacity,
   *   Text,
   *   View,
   * } from 'react-native'
   *
   * class App extends Component {
   *   state = { count: 0 }
   *
   *   onPress = () => {
   *     this.setState(state => ({
   *       count: state.count + 1
   *     }));
   *   };
   *
   *  render() {
   *    return (
   *      <View style={styles.container}>
   *        <TouchableOpacity
   *          style={styles.button}
   *          onPress={this.onPress}>
   *          <Text> Touch Here </Text>
   *        </TouchableOpacity>
   *        <View style={[styles.countContainer]}>
   *          <Text style={[styles.countText]}>
   *             { this.state.count !== 0 ? this.state.count: null}
   *           </Text>
   *         </View>
   *       </View>
   *     )
   *   }
   * }
   *
   * const styles = StyleSheet.create({
   *   container: {
   *     flex: 1,
   *     justifyContent: 'center',
   *     paddingHorizontal: 10
   *   },
   *   button: {
   *     alignItems: 'center',
   *     backgroundColor: '#DDDDDD',
   *     padding: 10
   *   },
   *   countContainer: {
   *     alignItems: 'center',
   *     padding: 10
   *   },
   *   countText: {
   *     color: '#FF00FF'
   *   }
   * })
   *
   * AppRegistry.registerComponent('App', () => App)
   * ```
   *
   */
  var TouchableOpacity = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(TouchableOpacity, _React$Component);
    var _super = _createSuper(TouchableOpacity);
    function TouchableOpacity() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableOpacity);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        anim: new _Animated.default.Value(_this._getChildStyleOpacityWithDefault()),
        pressability: new _Pressability.default(_this._createPressabilityConfig())
      };
      return _this;
    }
    (0, _createClass2.default)(TouchableOpacity, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        var _ref,
          _this$props$disabled,
          _this$props$accessibi,
          _this2 = this;
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: (_ref = (_this$props$disabled = this.props.disabled) != null ? _this$props$disabled : this.props['aria-disabled']) != null ? _ref : (_this$props$accessibi = this.props.accessibilityState) == null ? undefined : _this$props$accessibi.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          onBlur: function onBlur(event) {
            if (_Platform.default.isTV) {
              _this2._opacityInactive(250);
            }
            if (_this2.props.onBlur != null) {
              _this2.props.onBlur(event);
            }
          },
          onFocus: function onFocus(event) {
            if (_Platform.default.isTV) {
              _this2._opacityActive(150);
            }
            if (_this2.props.onFocus != null) {
              _this2.props.onFocus(event);
            }
          },
          onLongPress: this.props.onLongPress,
          onPress: this.props.onPress,
          onPressIn: function onPressIn(event) {
            _this2._opacityActive(event.dispatchConfig.registrationName === 'onResponderGrant' ? 0 : 150);
            if (_this2.props.onPressIn != null) {
              _this2.props.onPressIn(event);
            }
          },
          onPressOut: function onPressOut(event) {
            _this2._opacityInactive(250);
            if (_this2.props.onPressOut != null) {
              _this2.props.onPressOut(event);
            }
          }
        };
      }

      /**
       * Animate the touchable to a new opacity.
       */
    }, {
      key: "_setOpacityTo",
      value: function _setOpacityTo(toValue, duration) {
        _Animated.default.timing(this.state.anim, {
          toValue: toValue,
          duration: duration,
          easing: _Easing.default.inOut(_Easing.default.quad),
          useNativeDriver: true
        }).start();
      }
    }, {
      key: "_opacityActive",
      value: function _opacityActive(duration) {
        var _this$props$activeOpa;
        this._setOpacityTo((_this$props$activeOpa = this.props.activeOpacity) != null ? _this$props$activeOpa : 0.2, duration);
      }
    }, {
      key: "_opacityInactive",
      value: function _opacityInactive(duration) {
        this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
      }
    }, {
      key: "_getChildStyleOpacityWithDefault",
      value: function _getChildStyleOpacityWithDefault() {
        var _flattenStyle;
        // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[prop-missing]
        var opacity = (_flattenStyle = (0, _flattenStyle4.default)(this.props.style)) == null ? undefined : _flattenStyle.opacity;
        return typeof opacity === 'number' ? opacity : 1;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props$ariaBusy, _this$props$accessibi2, _this$props$ariaChec, _this$props$accessibi3, _this$props$ariaDisa, _this$props$accessibi4, _this$props$ariaExpa, _this$props$accessibi5, _this$props$ariaSele, _this$props$accessibi6, _this$props$ariaValu, _this$props$accessibi7, _this$props$ariaValu2, _this$props$accessibi8, _this$props$ariaValu3, _this$props$accessibi9, _this$props$ariaValu4, _this$props$accessibi10, _this$props$ariaLive, _this$props$ariaLabe, _this$props$ariaModa, _this$props$ariaHidd, _this$props$id;
        // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
        // adopting `Pressability`, so preserve that behavior.
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var _accessibilityState = {
          busy: (_this$props$ariaBusy = this.props['aria-busy']) != null ? _this$props$ariaBusy : (_this$props$accessibi2 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi2.busy,
          checked: (_this$props$ariaChec = this.props['aria-checked']) != null ? _this$props$ariaChec : (_this$props$accessibi3 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi3.checked,
          disabled: (_this$props$ariaDisa = this.props['aria-disabled']) != null ? _this$props$ariaDisa : (_this$props$accessibi4 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi4.disabled,
          expanded: (_this$props$ariaExpa = this.props['aria-expanded']) != null ? _this$props$ariaExpa : (_this$props$accessibi5 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi5.expanded,
          selected: (_this$props$ariaSele = this.props['aria-selected']) != null ? _this$props$ariaSele : (_this$props$accessibi6 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi6.selected
        };
        _accessibilityState = this.props.disabled != null ? Object.assign({}, _accessibilityState, {
          disabled: this.props.disabled
        }) : _accessibilityState;
        var accessibilityValue = {
          max: (_this$props$ariaValu = this.props['aria-valuemax']) != null ? _this$props$ariaValu : (_this$props$accessibi7 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi7.max,
          min: (_this$props$ariaValu2 = this.props['aria-valuemin']) != null ? _this$props$ariaValu2 : (_this$props$accessibi8 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi8.min,
          now: (_this$props$ariaValu3 = this.props['aria-valuenow']) != null ? _this$props$ariaValu3 : (_this$props$accessibi9 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi9.now,
          text: (_this$props$ariaValu4 = this.props['aria-valuetext']) != null ? _this$props$ariaValu4 : (_this$props$accessibi10 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi10.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : (_this$props$ariaLive = this.props['aria-live']) != null ? _this$props$ariaLive : this.props.accessibilityLiveRegion;
        var accessibilityLabel = (_this$props$ariaLabe = this.props['aria-label']) != null ? _this$props$ariaLabe : this.props.accessibilityLabel;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Animated.default.View, Object.assign({
          accessible: this.props.accessible !== false,
          accessibilityLabel: accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: _accessibilityState,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          accessibilityValue: accessibilityValue,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: (_this$props$ariaModa = this.props['aria-modal']) != null ? _this$props$ariaModa : this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: (_this$props$ariaHidd = this.props['aria-hidden']) != null ? _this$props$ariaHidd : this.props.accessibilityElementsHidden,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: (_this$props$id = this.props.id) != null ? _this$props$id : this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          hitSlop: this.props.hitSlop,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined,
          ref: this.props.hostRef
        }, eventHandlersWithoutBlurAndFocus, {
          children: [this.props.children, null]
        }));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        var _flattenStyle2, _flattenStyle3;
        this.state.pressability.configure(this._createPressabilityConfig());
        if (this.props.disabled !== prevProps.disabled ||
        // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[prop-missing]
        ((_flattenStyle2 = (0, _flattenStyle4.default)(prevProps.style)) == null ? undefined : _flattenStyle2.opacity) !== ( // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[prop-missing]
        (_flattenStyle3 = (0, _flattenStyle4.default)(this.props.style)) == null ? undefined : _flattenStyle3.opacity)) {
          this._opacityInactive(250);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.pressability.reset();
      }
    }]);
    return TouchableOpacity;
  }(React.Component);
  var Touchable = React.forwardRef(function (props, ref) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableOpacity, Object.assign({}, props, {
      hostRef: ref
    }));
  });
  Touchable.displayName = 'TouchableOpacity';
  module.exports = Touchable;
},278,[1,119,5,6,13,15,12,279,292,249,157,21,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _AnimatedImplementation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _AnimatedMock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var Animated = _Platform.default.isDisableAnimations ? _AnimatedMock.default : _AnimatedImplementation.default;
  var _default = exports.default = Object.assign({
    get FlatList() {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    },
    get Image() {
      return _$$_REQUIRE(_dependencyMap[5]).default;
    },
    get ScrollView() {
      return _$$_REQUIRE(_dependencyMap[6]).default;
    },
    get SectionList() {
      return _$$_REQUIRE(_dependencyMap[7]).default;
    },
    get Text() {
      return _$$_REQUIRE(_dependencyMap[8]).default;
    },
    get View() {
      return _$$_REQUIRE(_dependencyMap[9]).default;
    }
  }, Animated);
},279,[1,21,280,317,318,337,347,367,369,370]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _DecayAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _SpringAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _TimingAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _AnimatedAddition = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedDiffClamp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedDivision = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _AnimatedModulo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _AnimatedMultiplication = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  var _AnimatedSubtraction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));
  var _AnimatedTracking = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));
  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));
  var _AnimatedValueXY = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));
  var add = function add(a, b) {
    return new _AnimatedAddition.default(a, b);
  };
  var subtract = function subtract(a, b) {
    return new _AnimatedSubtraction.default(a, b);
  };
  var divide = function divide(a, b) {
    return new _AnimatedDivision.default(a, b);
  };
  var multiply = function multiply(a, b) {
    return new _AnimatedMultiplication.default(a, b);
  };
  var modulo = function modulo(a, modulus) {
    return new _AnimatedModulo.default(a, modulus);
  };
  var diffClamp = function diffClamp(a, min, max) {
    return new _AnimatedDiffClamp.default(a, min, max);
  };
  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };
  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof _AnimatedValueXY.default) {
      var configX = Object.assign({}, config);
      var configY = Object.assign({}, config);
      for (var key in config) {
        var _config$key = config[key],
          x = _config$key.x,
          y = _config$key.y;
        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }
      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      // We use `stopTogether: false` here because otherwise tracking will break
      // because the second animation will get stopped before it can update.
      return parallel([aX, aY], {
        stopTogether: false
      });
    } else if (value instanceof _AnimatedColor.default) {
      var configR = Object.assign({}, config);
      var configG = Object.assign({}, config);
      var configB = Object.assign({}, config);
      var configA = Object.assign({}, config);
      for (var _key in config) {
        var _config$_key = config[_key],
          r = _config$_key.r,
          g = _config$_key.g,
          b = _config$_key.b,
          a = _config$_key.a;
        if (r !== undefined && g !== undefined && b !== undefined && a !== undefined) {
          configR[_key] = r;
          configG[_key] = g;
          configB[_key] = b;
          configA[_key] = a;
        }
      }
      var aR = anim(value.r, configR);
      var aG = anim(value.g, configG);
      var aB = anim(value.b, configB);
      var aA = anim(value.a, configA);
      // We use `stopTogether: false` here because otherwise tracking will break
      // because the second animation will get stopped before it can update.
      return parallel([aR, aG, aB, aA], {
        stopTogether: false
      });
    }
    return null;
  };
  var spring = function spring(value, config) {
    var _start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      if (configuration.toValue instanceof _AnimatedNode.default) {
        singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _SpringAnimation.default, singleConfig, callback));
      } else {
        singleValue.animate(new _SpringAnimation.default(singleConfig), callback);
      }
    };
    return maybeVectorAnim(value, config, spring) || {
      start: function start(callback) {
        _start(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = Object.assign({}, config, {
          iterations: iterations
        });
        _start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };
  var timing = function timing(value, config) {
    var _start2 = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      if (configuration.toValue instanceof _AnimatedNode.default) {
        singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _TimingAnimation.default, singleConfig, callback));
      } else {
        singleValue.animate(new _TimingAnimation.default(singleConfig), callback);
      }
    };
    return maybeVectorAnim(value, config, timing) || {
      start: function start(callback) {
        _start2(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = Object.assign({}, config, {
          iterations: iterations
        });
        _start2(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };
  var decay = function decay(value, config) {
    var _start3 = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new _DecayAnimation.default(singleConfig), callback);
    };
    return maybeVectorAnim(value, config, decay) || {
      start: function start(callback) {
        _start3(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = Object.assign({}, config, {
          iterations: iterations
        });
        _start3(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };
  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }
          current++;
          if (current === animations.length) {
            callback && callback(result);
            return;
          }
          animations[current].start(onComplete);
        };
        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };
  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    // Make sure we only call stop() at most once for each animation
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }
        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;
            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }
            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };
          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };
  var delay = function delay(time) {
    // Would be nice to make a specialized implementation
    return timing(new _AnimatedValue.default(0), {
      toValue: 0,
      delay: time,
      duration: 0,
      useNativeDriver: false
    });
  };
  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };
  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$iterations = _ref.iterations,
      iterations = _ref$iterations === undefined ? -1 : _ref$iterations,
      _ref$resetBeforeItera = _ref.resetBeforeIteration,
      resetBeforeIteration = _ref$resetBeforeItera === undefined ? true : _ref$resetBeforeItera;
    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };
          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            resetBeforeIteration && animation.reset();
            animation.start(restart);
          }
        };
        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart(); // Start looping recursively on the js thread
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };
  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof _$$_REQUIRE(_dependencyMap[17]).AnimatedEvent) {
      event.__addListener(listener);
      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }
  function unforkEvent(event, listener) {
    if (event && event instanceof _$$_REQUIRE(_dependencyMap[17]).AnimatedEvent) {
      event.__removeListener(listener);
    }
  }
  var event = function event(argMapping, config) {
    var animatedEvent = new (_$$_REQUIRE(_dependencyMap[17]).AnimatedEvent)(argMapping, config);
    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  // All types of animated nodes that represent scalar numbers and can be interpolated (etc)
  /**
   * The `Animated` library is designed to make animations fluid, powerful, and
   * easy to build and maintain. `Animated` focuses on declarative relationships
   * between inputs and outputs, with configurable transforms in between, and
   * simple `start`/`stop` methods to control time-based animation execution.
   * If additional transforms are added, be sure to include them in
   * AnimatedMock.js as well.
   *
   * See https://reactnative.dev/docs/animated
   */
  var _default = exports.default = {
    /**
     * Standard value class for driving animations.  Typically initialized with
     * `new Animated.Value(0);`
     *
     * See https://reactnative.dev/docs/animated#value
     */
    Value: _AnimatedValue.default,
    /**
     * 2D value class for driving 2D animations, such as pan gestures.
     *
     * See https://reactnative.dev/docs/animatedvaluexy
     */
    ValueXY: _AnimatedValueXY.default,
    /**
     * Value class for driving color animations.
     */
    Color: _AnimatedColor.default,
    /**
     * Exported to use the Interpolation type in flow.
     *
     * See https://reactnative.dev/docs/animated#interpolation
     */
    Interpolation: _AnimatedInterpolation.default,
    /**
     * Exported for ease of type checking. All animated values derive from this
     * class.
     *
     * See https://reactnative.dev/docs/animated#node
     */
    Node: _AnimatedNode.default,
    /**
     * Animates a value from an initial velocity to zero based on a decay
     * coefficient.
     *
     * See https://reactnative.dev/docs/animated#decay
     */
    decay: decay,
    /**
     * Animates a value along a timed easing curve. The Easing module has tons of
     * predefined curves, or you can use your own function.
     *
     * See https://reactnative.dev/docs/animated#timing
     */
    timing: timing,
    /**
     * Animates a value according to an analytical spring model based on
     * damped harmonic oscillation.
     *
     * See https://reactnative.dev/docs/animated#spring
     */
    spring: spring,
    /**
     * Creates a new Animated value composed from two Animated values added
     * together.
     *
     * See https://reactnative.dev/docs/animated#add
     */
    add: add,
    /**
     * Creates a new Animated value composed by subtracting the second Animated
     * value from the first Animated value.
     *
     * See https://reactnative.dev/docs/animated#subtract
     */
    subtract: subtract,
    /**
     * Creates a new Animated value composed by dividing the first Animated value
     * by the second Animated value.
     *
     * See https://reactnative.dev/docs/animated#divide
     */
    divide: divide,
    /**
     * Creates a new Animated value composed from two Animated values multiplied
     * together.
     *
     * See https://reactnative.dev/docs/animated#multiply
     */
    multiply: multiply,
    /**
     * Creates a new Animated value that is the (non-negative) modulo of the
     * provided Animated value.
     *
     * See https://reactnative.dev/docs/animated#modulo
     */
    modulo: modulo,
    /**
     * Create a new Animated value that is limited between 2 values. It uses the
     * difference between the last value so even if the value is far from the
     * bounds it will start changing when the value starts getting closer again.
     *
     * See https://reactnative.dev/docs/animated#diffclamp
     */
    diffClamp: diffClamp,
    /**
     * Starts an animation after the given delay.
     *
     * See https://reactnative.dev/docs/animated#delay
     */
    delay: delay,
    /**
     * Starts an array of animations in order, waiting for each to complete
     * before starting the next. If the current running animation is stopped, no
     * following animations will be started.
     *
     * See https://reactnative.dev/docs/animated#sequence
     */
    sequence: sequence,
    /**
     * Starts an array of animations all at the same time. By default, if one
     * of the animations is stopped, they will all be stopped. You can override
     * this with the `stopTogether` flag.
     *
     * See https://reactnative.dev/docs/animated#parallel
     */
    parallel: parallel,
    /**
     * Array of animations may run in parallel (overlap), but are started in
     * sequence with successive delays.  Nice for doing trailing effects.
     *
     * See https://reactnative.dev/docs/animated#stagger
     */
    stagger: stagger,
    /**
     * Loops a given animation continuously, so that each time it reaches the
     * end, it resets and begins again from the start.
     *
     * See https://reactnative.dev/docs/animated#loop
     */
    loop: loop,
    /**
     * Takes an array of mappings and extracts values from each arg accordingly,
     * then calls `setValue` on the mapped outputs.
     *
     * See https://reactnative.dev/docs/animated#event
     */
    event: event,
    /**
     * Make any React component Animatable.  Used to create `Animated.View`, etc.
     *
     * See https://reactnative.dev/docs/animated#createanimatedcomponent
     */
    createAnimatedComponent: _createAnimatedComponent.default,
    /**
     * Imperative API to attach an animated value to an event on a view. Prefer
     * using `Animated.event` with `useNativeDrive: true` if possible.
     *
     * See https://reactnative.dev/docs/animated#attachnativeevent
     */
    attachNativeEvent: _$$_REQUIRE(_dependencyMap[17]).attachNativeEvent,
    /**
     * Advanced imperative API for snooping on animated events that are passed in
     * through props. Use values directly where possible.
     *
     * See https://reactnative.dev/docs/animated#forkevent
     */
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    /**
     * Expose Event class, so it can be used as a type for type checkers.
     */
    Event: _$$_REQUIRE(_dependencyMap[17]).AnimatedEvent
  };
},280,[1,281,302,304,305,310,287,311,312,291,313,314,295,315,316,288,301,300]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _Animation2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var DecayAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    (0, _inherits2.default)(DecayAnimation, _Animation);
    var _super = _createSuper(DecayAnimation);
    function DecayAnimation(config) {
      var _config$deceleration, _config$isInteraction, _config$iterations;
      var _this;
      (0, _classCallCheck2.default)(this, DecayAnimation);
      _this = _super.call(this);
      _this._deceleration = (_config$deceleration = config.deceleration) != null ? _config$deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      _this._platformConfig = config.platformConfig;
      _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
      _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
      return _this;
    }
    (0, _createClass2.default)(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations,
          platformConfig: this._platformConfig
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();
        if (!this._useNativeDriver && animatedValue.__isNative === true) {
          throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
        }
        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));
        this._onUpdate(value);
        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });
          return;
        }
        this._lastValue = value;
        if (this.__active) {
          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        (0, _get2.default)((0, _getPrototypeOf2.default)(DecayAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return DecayAnimation;
  }(_Animation2.default);
},281,[1,5,6,10,13,15,12,282,286]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _NativeAnimatedModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _NativeAnimatedTurboModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  // TODO T69437152 @petetheheat - Delete this fork when Fabric ships to 100%.
  var NativeAnimatedModule = _NativeAnimatedModule.default != null ? _NativeAnimatedModule.default : _NativeAnimatedTurboModule.default;
  var __nativeAnimatedNodeTagCount = 1; /* used for animated nodes */
  var __nativeAnimationIdCount = 1; /* used for started animations */

  var nativeEventEmitter;
  var waitingForQueuedOperations = new Set();
  var queueOperations = false;
  var queue = [];
  // $FlowFixMe
  var singleOpQueue = [];
  var useSingleOpBatching = _Platform.default.OS === 'android' && !!(NativeAnimatedModule != null && NativeAnimatedModule.queueAndExecuteBatchedOperations) && _ReactNativeFeatureFlags.default.animatedShouldUseSingleOp();
  var flushQueueTimeout = null;
  var eventListenerGetValueCallbacks = {};
  var eventListenerAnimationFinishedCallbacks = {};
  var globalEventEmitterGetValueListener = null;
  var globalEventEmitterAnimationFinishedListener = null;
  var nativeOps = useSingleOpBatching ? function () {
    var apis = ['createAnimatedNode',
    // 1
    'updateAnimatedNodeConfig',
    // 2
    'getValue',
    // 3
    'startListeningToAnimatedNodeValue',
    // 4
    'stopListeningToAnimatedNodeValue',
    // 5
    'connectAnimatedNodes',
    // 6
    'disconnectAnimatedNodes',
    // 7
    'startAnimatingNode',
    // 8
    'stopAnimation',
    // 9
    'setAnimatedNodeValue',
    // 10
    'setAnimatedNodeOffset',
    // 11
    'flattenAnimatedNodeOffset',
    // 12
    'extractAnimatedNodeOffset',
    // 13
    'connectAnimatedNodeToView',
    // 14
    'disconnectAnimatedNodeFromView',
    // 15
    'restoreDefaultValues',
    // 16
    'dropAnimatedNode',
    // 17
    'addAnimatedEventToView',
    // 18
    'removeAnimatedEventFromView',
    // 19
    'addListener',
    // 20
    'removeListener' // 21
    ];
    return apis.reduce(function (acc, functionName, i) {
      // These indices need to be kept in sync with the indices in native (see NativeAnimatedModule in Java, or the equivalent for any other native platform).
      // $FlowFixMe[prop-missing]
      acc[functionName] = i + 1;
      return acc;
    }, {});
  }() : NativeAnimatedModule;

  /**
   * Wrappers around NativeAnimatedModule to provide flow and autocomplete support for
   * the native module methods, and automatic queue management on Android
   */
  var API = {
    getValue: function getValue(tag, saveValueCallback) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      if (useSingleOpBatching) {
        if (saveValueCallback) {
          eventListenerGetValueCallbacks[tag] = saveValueCallback;
        }
        // $FlowFixMe
        API.queueOperation(nativeOps.getValue, tag);
      } else {
        API.queueOperation(nativeOps.getValue, tag, saveValueCallback);
      }
    },
    setWaitingForIdentifier: function setWaitingForIdentifier(id) {
      waitingForQueuedOperations.add(id);
      queueOperations = true;
      if (_ReactNativeFeatureFlags.default.animatedShouldDebounceQueueFlush() && flushQueueTimeout) {
        clearTimeout(flushQueueTimeout);
      }
    },
    unsetWaitingForIdentifier: function unsetWaitingForIdentifier(id) {
      waitingForQueuedOperations.delete(id);
      if (waitingForQueuedOperations.size === 0) {
        queueOperations = false;
        API.disableQueue();
      }
    },
    disableQueue: function disableQueue() {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      if (_ReactNativeFeatureFlags.default.animatedShouldDebounceQueueFlush()) {
        var prevTimeout = flushQueueTimeout;
        clearImmediate(prevTimeout);
        flushQueueTimeout = setImmediate(API.flushQueue);
      } else {
        API.flushQueue();
      }
    },
    flushQueue: function flushQueue() {
      // TODO: (T136971132)
      (0, _invariant.default)(NativeAnimatedModule || false, 'Native animated module is not available');
      flushQueueTimeout = null;

      // Early returns before calling any APIs
      if (useSingleOpBatching && singleOpQueue.length === 0) {
        return;
      }
      if (!useSingleOpBatching && queue.length === 0) {
        return;
      }
      if (useSingleOpBatching) {
        // Set up event listener for callbacks if it's not set up
        if (!globalEventEmitterGetValueListener || !globalEventEmitterAnimationFinishedListener) {
          setupGlobalEventEmitterListeners();
        }
        // Single op batching doesn't use callback functions, instead we
        // use RCTDeviceEventEmitter. This reduces overhead of sending lots of
        // JSI functions across to native code; but also, TM infrastructure currently
        // does not support packing a function into native arrays.
        NativeAnimatedModule == null ? undefined : NativeAnimatedModule.queueAndExecuteBatchedOperations == null ? undefined : NativeAnimatedModule.queueAndExecuteBatchedOperations(singleOpQueue);
        singleOpQueue.length = 0;
      } else {
        _Platform.default.OS === 'android' && (NativeAnimatedModule == null ? undefined : NativeAnimatedModule.startOperationBatch == null ? undefined : NativeAnimatedModule.startOperationBatch());
        for (var q = 0, l = queue.length; q < l; q++) {
          queue[q]();
        }
        queue.length = 0;
        _Platform.default.OS === 'android' && (NativeAnimatedModule == null ? undefined : NativeAnimatedModule.finishOperationBatch == null ? undefined : NativeAnimatedModule.finishOperationBatch());
      }
    },
    queueOperation: function queueOperation(fn) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (useSingleOpBatching) {
        // Get the command ID from the queued function, and push that ID and any arguments needed to execute the operation
        // $FlowFixMe: surprise, fn is actually a number
        singleOpQueue.push.apply(singleOpQueue, [fn].concat(args));
        return;
      }

      // If queueing is explicitly on, *or* the queue has not yet
      // been flushed, use the queue. This is to prevent operations
      // from being executed out of order.
      if (queueOperations || queue.length !== 0) {
        queue.push(function () {
          return fn.apply(undefined, args);
        });
      } else {
        fn.apply(undefined, args);
      }
    },
    createAnimatedNode: function createAnimatedNode(tag, config) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.createAnimatedNode, tag, config);
    },
    updateAnimatedNodeConfig: function updateAnimatedNodeConfig(tag, config) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      if (nativeOps.updateAnimatedNodeConfig) {
        API.queueOperation(nativeOps.updateAnimatedNodeConfig, tag, config);
      }
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.startListeningToAnimatedNodeValue, tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.stopListeningToAnimatedNodeValue, tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.connectAnimatedNodes, parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.disconnectAnimatedNodes, parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      if (useSingleOpBatching) {
        if (endCallback) {
          eventListenerAnimationFinishedCallbacks[animationId] = endCallback;
        }
        // $FlowFixMe
        API.queueOperation(
        // $FlowFixMe[incompatible-call]
        nativeOps.startAnimatingNode, animationId, nodeTag, config);
      } else {
        API.queueOperation(nativeOps.startAnimatingNode, animationId, nodeTag, config, endCallback);
      }
    },
    stopAnimation: function stopAnimation(animationId) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.stopAnimation, animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.setAnimatedNodeValue, nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.setAnimatedNodeOffset, nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.flattenAnimatedNodeOffset, nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.extractAnimatedNodeOffset, nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.connectAnimatedNodeToView, nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.disconnectAnimatedNodeFromView, nodeTag, viewTag);
    },
    restoreDefaultValues: function restoreDefaultValues(nodeTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      // Backwards compat with older native runtimes, can be removed later.
      if (nativeOps.restoreDefaultValues != null) {
        API.queueOperation(nativeOps.restoreDefaultValues, nodeTag);
      }
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.dropAnimatedNode, tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.addAnimatedEventToView, viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.removeAnimatedEventFromView, viewTag, eventName, animatedNodeTag);
    }
  };
  function setupGlobalEventEmitterListeners() {
    globalEventEmitterGetValueListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleGetValue', function (params) {
      var tag = params.tag;
      var callback = eventListenerGetValueCallbacks[tag];
      if (!callback) {
        return;
      }
      callback(params.value);
      delete eventListenerGetValueCallbacks[tag];
    });
    globalEventEmitterAnimationFinishedListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleAnimationFinished', function (params) {
      var animationId = params.animationId;
      var callback = eventListenerAnimationFinishedCallbacks[animationId];
      if (!callback) {
        return;
      }
      callback(params);
      delete eventListenerAnimationFinishedCallbacks[animationId];
    });
  }

  /**
   * Styles allowed by the native animated implementation.
   *
   * In general native animated implementation should support any numeric or color property that
   * doesn't need to be updated through the shadow view hierarchy (all non-layout properties).
   */
  var SUPPORTED_COLOR_STYLES = {
    backgroundColor: true,
    borderBottomColor: true,
    borderColor: true,
    borderEndColor: true,
    borderLeftColor: true,
    borderRightColor: true,
    borderStartColor: true,
    borderTopColor: true,
    color: true,
    tintColor: true
  };
  var SUPPORTED_STYLES = Object.assign({}, SUPPORTED_COLOR_STYLES, {
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    elevation: true,
    opacity: true,
    transform: true,
    zIndex: true,
    /* ios styles */
    shadowOpacity: true,
    shadowRadius: true,
    /* legacy android transform properties */
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  });
  var SUPPORTED_TRANSFORMS = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    rotateZ: true,
    perspective: true,
    skewX: true,
    skewY: true,
    matrix: _ReactNativeFeatureFlags.default.shouldUseAnimatedObjectForTransform()
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };
  function addWhitelistedStyleProp(prop) {
    // $FlowFixMe[prop-missing]
    SUPPORTED_STYLES[prop] = true;
  }
  function addWhitelistedTransformProp(prop) {
    // $FlowFixMe[prop-missing]
    SUPPORTED_TRANSFORMS[prop] = true;
  }
  function addWhitelistedInterpolationParam(param) {
    // $FlowFixMe[prop-missing]
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }
  function isSupportedColorStyleProp(prop) {
    return SUPPORTED_COLOR_STYLES[prop] === true;
  }
  function isSupportedStyleProp(prop) {
    return SUPPORTED_STYLES[prop] === true;
  }
  function isSupportedTransformProp(prop) {
    return SUPPORTED_TRANSFORMS[prop] === true;
  }
  function isSupportedInterpolationParam(param) {
    return SUPPORTED_INTERPOLATION_PARAMS[param] === true;
  }
  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!isSupportedTransformProp(config.property)) {
        throw new Error(`Property '${config.property}' is not supported by native animated module`);
      }
    });
  }
  function validateStyles(styles) {
    for (var _key2 in styles) {
      if (!isSupportedStyleProp(_key2)) {
        throw new Error(`Style property '${_key2}' is not supported by native animated module`);
      }
    }
  }
  function validateInterpolation(config) {
    for (var _key3 in config) {
      if (!isSupportedInterpolationParam(_key3)) {
        throw new Error(`Interpolation property '${_key3}' is not supported by native animated module`);
      }
    }
  }
  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }
  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }
  function assertNativeAnimatedModule() {
    (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
  }
  var _warnedMissingNativeAnimated = false;
  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver == null) {
      console.warn("Animated: `useNativeDriver` was not specified. This is a required option and must be explicitly set to `true` or `false`");
    }
    if (config.useNativeDriver === true && !NativeAnimatedModule) {
      {
        if (!_warnedMissingNativeAnimated) {
          console.warn("Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md");
          _warnedMissingNativeAnimated = true;
        }
      }
      return false;
    }
    return config.useNativeDriver || false;
  }
  function transformDataType(value) {
    // Change the string type to number type so we can reuse the same logic in
    // iOS and Android platform
    if (typeof value !== 'string') {
      return value;
    }

    // Normalize degrees and radians to a number expressed in radians
    if (value.endsWith('deg')) {
      var degrees = parseFloat(value) || 0;
      return degrees * Math.PI / 180.0;
    } else if (value.endsWith('rad')) {
      return parseFloat(value) || 0;
    } else {
      return value;
    }
  }
  var _default = exports.default = {
    API: API,
    isSupportedColorStyleProp: isSupportedColorStyleProp,
    isSupportedStyleProp: isSupportedStyleProp,
    isSupportedTransformProp: isSupportedTransformProp,
    isSupportedInterpolationParam: isSupportedInterpolationParam,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,
    transformDataType: transformDataType,
    // $FlowExpectedError[unsafe-getters-setters] - unsafe getter lint suppression
    // $FlowExpectedError[missing-type-arg] - unsafe getter lint suppression
    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        // $FlowFixMe[underconstrained-implicit-instantiation]
        nativeEventEmitter = new _NativeEventEmitter.default(
        // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : NativeAnimatedModule);
      }
      return nativeEventEmitter;
    }
  };
},282,[1,111,4,108,21,283,285,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
  var _shouldUseTurboAnimatedModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  // The config has different keys depending on the type of the Node
  // TODO(T54896888): Make these types strict

  var NativeModule = !(0, _shouldUseTurboAnimatedModule.default)() ? TurboModuleRegistry.get('NativeAnimatedModule') : null;
  var _default = exports.default = NativeModule;
},283,[1,23,284]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  function shouldUseTurboAnimatedModule() {
    return _Platform.default.OS === 'ios' && global.RN$Bridgeless === true;
  }
  var _default = exports.default = shouldUseTurboAnimatedModule;
},284,[1,21]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
  var _shouldUseTurboAnimatedModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  // The config has different keys depending on the type of the Node
  // TODO(T54896888): Make these types strict

  var NativeModule = (0, _shouldUseTurboAnimatedModule.default)() ? TurboModuleRegistry.get('NativeAnimatedTurboModule') : null;
  var _default = exports.default = NativeModule;
},285,[1,23,284]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedValueXY = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var startNativeAnimationNextId = 1;

  // Important note: start() and stop() will only be called at most once.
  // Once an animation has been stopped or finished its course, it will
  // not be reused.
  var Animation = exports.default = /*#__PURE__*/function () {
    function Animation() {
      (0, _classCallCheck2.default)(this, Animation);
    }
    (0, _createClass2.default)(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          _NativeAnimatedHelper.default.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        // Subclasses that have corresponding animation implementation done in native
        // should override this method
        throw new Error('This animation type cannot be offloaded to native');
      }

      // Helper function for subclasses to make sure onEnd is only called once.
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__findAnimatedPropsNodes",
      value: function __findAnimatedPropsNodes(node) {
        var result = [];
        if (node instanceof _AnimatedProps.default) {
          result.push(node);
          return result;
        }

        // Vectorized animations (animations on AnimatedValueXY, AnimatedColor nodes)
        // are split into multiple animations for each component that execute in parallel.
        // Calling update() on AnimatedProps when each animation completes results in
        // potential flickering as all animations that are part of the vectorized animation
        // may not have completed yet. For example, only the animation for the red channel of
        // an animating color may have been completed, resulting in a temporary red color
        // being rendered. So, for now, ignore AnimatedProps that use a vectorized animation.
        if (_Platform.default.OS === 'ios' && (node instanceof _AnimatedValueXY.default || node instanceof _AnimatedColor.default)) {
          return result;
        }
        for (var child of node.__getChildren()) {
          result.push.apply(result, (0, _toConsumableArray2.default)(this.__findAnimatedPropsNodes(child)));
        }
        return result;
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        var _this = this;
        var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
        startNativeAnimationNextId += 1;
        _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
        try {
          var config = this.__getNativeAnimationConfig();
          animatedValue.__makeNative(config.platformConfig);
          this.__nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();
          _NativeAnimatedHelper.default.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), config, function (result) {
            _this.__debouncedOnEnd(result);

            // When using natively driven animations, once the animation completes,
            // we need to ensure that the JS side nodes are synced with the updated
            // values.
            var value = result.value;
            if (value != null) {
              animatedValue.__onAnimatedValueUpdateReceived(value);

              // Once the JS side node is synced with the updated values, trigger an
              // update on the AnimatedProps nodes to call any registered callbacks.
              _this.__findAnimatedPropsNodes(animatedValue).forEach(function (node) {
                return node.update();
              });
            }
          });
        } catch (e) {
          throw e;
        } finally {
          _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
        }
      }
    }]);
    return Animation;
  }();
},286,[1,34,5,6,21,282,287,296,301]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _normalizeColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedValue = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
  var defaultColor = {
    r: 0,
    g: 0,
    b: 0,
    a: 1.0
  };

  /* eslint no-bitwise: 0 */
  function processColor(color) {
    if (color === undefined || color === null) {
      return null;
    }
    if (isRgbaValue(color)) {
      // $FlowIgnore[incompatible-cast] - Type is verified above
      return color;
    }
    var normalizedColor = (0, _normalizeColor.default)(
    // $FlowIgnore[incompatible-cast] - Type is verified above
    color);
    if (normalizedColor === undefined || normalizedColor === null) {
      return null;
    }
    if (typeof normalizedColor === 'object') {
      var processedColorObj = (0, _$$_REQUIRE(_dependencyMap[11]).processColorObject)(normalizedColor);
      if (processedColorObj != null) {
        return processedColorObj;
      }
    } else if (typeof normalizedColor === 'number') {
      var r = (normalizedColor & 0xff000000) >>> 24;
      var g = (normalizedColor & 0x00ff0000) >>> 16;
      var b = (normalizedColor & 0x0000ff00) >>> 8;
      var a = (normalizedColor & 0x000000ff) / 255;
      return {
        r: r,
        g: g,
        b: b,
        a: a
      };
    }
    return null;
  }
  function isRgbaValue(value) {
    return value && typeof value.r === 'number' && typeof value.g === 'number' && typeof value.b === 'number' && typeof value.a === 'number';
  }
  function isRgbaAnimatedValue(value) {
    return value && value.r instanceof _AnimatedValue.default && value.g instanceof _AnimatedValue.default && value.b instanceof _AnimatedValue.default && value.a instanceof _AnimatedValue.default;
  }
  var AnimatedColor = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedColor, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedColor);
    function AnimatedColor(valueIn, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedColor);
      _this = _super.call(this);
      _this._suspendCallbacks = 0;
      var value = valueIn != null ? valueIn : defaultColor;
      if (isRgbaAnimatedValue(value)) {
        // $FlowIgnore[incompatible-cast] - Type is verified above
        var rgbaAnimatedValue = value;
        _this.r = rgbaAnimatedValue.r;
        _this.g = rgbaAnimatedValue.g;
        _this.b = rgbaAnimatedValue.b;
        _this.a = rgbaAnimatedValue.a;
      } else {
        var _processColor;
        var processedColor = // $FlowIgnore[incompatible-cast] - Type is verified above
        (_processColor = processColor(value)) != null ? _processColor : defaultColor;
        var initColor = defaultColor;
        if (isRgbaValue(processedColor)) {
          // $FlowIgnore[incompatible-cast] - Type is verified above
          initColor = processedColor;
        } else {
          // $FlowIgnore[incompatible-cast] - Type is verified above
          _this.nativeColor = processedColor;
        }
        _this.r = new _AnimatedValue.default(initColor.r);
        _this.g = new _AnimatedValue.default(initColor.g);
        _this.b = new _AnimatedValue.default(initColor.b);
        _this.a = new _AnimatedValue.default(initColor.a);
      }
      if (config != null && config.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }

    /**
     * Directly set the value. This will stop any animations running on the value
     * and update all the bound properties.
     */
    (0, _createClass2.default)(AnimatedColor, [{
      key: "setValue",
      value: function setValue(value) {
        var _processColor2,
          _this2 = this;
        var shouldUpdateNodeConfig = false;
        if (this.__isNative) {
          var nativeTag = this.__getNativeTag();
          NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
        }
        var processedColor = (_processColor2 = processColor(value)) != null ? _processColor2 : defaultColor;
        this._withSuspendedCallbacks(function () {
          if (isRgbaValue(processedColor)) {
            // $FlowIgnore[incompatible-type] - Type is verified above
            var rgbaValue = processedColor;
            _this2.r.setValue(rgbaValue.r);
            _this2.g.setValue(rgbaValue.g);
            _this2.b.setValue(rgbaValue.b);
            _this2.a.setValue(rgbaValue.a);
            if (_this2.nativeColor != null) {
              _this2.nativeColor = null;
              shouldUpdateNodeConfig = true;
            }
          } else {
            // $FlowIgnore[incompatible-type] - Type is verified above
            var nativeColor = processedColor;
            if (_this2.nativeColor !== nativeColor) {
              _this2.nativeColor = nativeColor;
              shouldUpdateNodeConfig = true;
            }
          }
        });
        if (this.__isNative) {
          var _nativeTag = this.__getNativeTag();
          if (shouldUpdateNodeConfig) {
            NativeAnimatedAPI.updateAnimatedNodeConfig(_nativeTag, this.__getNativeConfig());
          }
          NativeAnimatedAPI.unsetWaitingForIdentifier(_nativeTag.toString());
        } else {
          (0, _AnimatedValue.flushValue)(this);
        }

        // $FlowFixMe[incompatible-call]
        this.__callListeners(this.__getValue());
      }

      /**
       * Sets an offset that is applied on top of whatever value is set, whether
       * via `setValue`, an animation, or `Animated.event`. Useful for compensating
       * things like the start of a pan gesture.
       */
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.r.setOffset(offset.r);
        this.g.setOffset(offset.g);
        this.b.setOffset(offset.b);
        this.a.setOffset(offset.a);
      }

      /**
       * Merges the offset value into the base value and resets the offset to zero.
       * The final output of the value is unchanged.
       */
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.r.flattenOffset();
        this.g.flattenOffset();
        this.b.flattenOffset();
        this.a.flattenOffset();
      }

      /**
       * Sets the offset value to the base value, and resets the base value to
       * zero. The final output of the value is unchanged.
       */
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.r.extractOffset();
        this.g.extractOffset();
        this.b.extractOffset();
        this.a.extractOffset();
      }

      /**
       * Stops any running animation or tracking. `callback` is invoked with the
       * final value after stopping the animation, which is useful for updating
       * state to match the animation position with layout.
       */
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.r.stopAnimation();
        this.g.stopAnimation();
        this.b.stopAnimation();
        this.a.stopAnimation();
        callback && callback(this.__getValue());
      }

      /**
       * Stops any animation and resets the value to its original.
       */
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.r.resetAnimation();
        this.g.resetAnimation();
        this.b.resetAnimation();
        this.a.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        if (this.nativeColor != null) {
          return this.nativeColor;
        } else {
          return `rgba(${this.r.__getValue()}, ${this.g.__getValue()}, ${this.b.__getValue()}, ${this.a.__getValue()})`;
        }
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.r.__addChild(this);
        this.g.__addChild(this);
        this.b.__addChild(this);
        this.a.__addChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedColor.prototype), "__attach", this).call(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.r.__removeChild(this);
        this.g.__removeChild(this);
        this.b.__removeChild(this);
        this.a.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedColor.prototype), "__detach", this).call(this);
      }
    }, {
      key: "_withSuspendedCallbacks",
      value: function _withSuspendedCallbacks(callback) {
        this._suspendCallbacks++;
        callback();
        this._suspendCallbacks--;
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        if (this._suspendCallbacks === 0) {
          (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedColor.prototype), "__callListeners", this).call(this, value);
        }
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.r.__makeNative(platformConfig);
        this.g.__makeNative(platformConfig);
        this.b.__makeNative(platformConfig);
        this.a.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedColor.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'color',
          r: this.r.__getNativeTag(),
          g: this.g.__getNativeTag(),
          b: this.b.__getNativeTag(),
          a: this.a.__getNativeTag(),
          nativeColor: this.nativeColor
        };
      }
    }]);
    return AnimatedColor;
  }(_AnimatedWithChildren2.default);
},287,[1,5,6,10,13,15,12,165,282,288,294,167]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.flushValue = flushValue;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _InteractionManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;

  /**
   * Animated works by building a directed acyclic graph of dependencies
   * transparently when you render your Animated components.
   *
   *               new Animated.Value(0)
   *     .interpolate()        .interpolate()    new Animated.Value(1)
   *         opacity               translateY      scale
   *          style                         transform
   *         View#234                         style
   *                                         View#123
   *
   * A) Top Down phase
   * When an Animated.Value is updated, we recursively go down through this
   * graph in order to find leaf nodes: the views that we flag as needing
   * an update.
   *
   * B) Bottom Up phase
   * When a view is flagged as needing an update, we recursively go back up
   * in order to build the new value that it needs. The reason why we need
   * this two-phases process is to deal with composite props such as
   * transform which can receive values from multiple parents.
   */
  function flushValue(rootNode) {
    var leaves = new Set();
    function findAnimatedStyles(node) {
      // $FlowFixMe[prop-missing]
      if (typeof node.update === 'function') {
        leaves.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }
    findAnimatedStyles(rootNode);
    leaves.forEach(function (leaf) {
      return leaf.update();
    });
  }

  /**
   * Some operations are executed only on batch end, which is _mostly_ scheduled when
   * Animated component props change. For some of the changes which require immediate execution
   * (e.g. setValue), we create a separate batch in case none is scheduled.
   */
  function _executeAsAnimatedBatch(id, operation) {
    NativeAnimatedAPI.setWaitingForIdentifier(id);
    operation();
    NativeAnimatedAPI.unsetWaitingForIdentifier(id);
  }

  /**
   * Standard value for driving animations.  One `Animated.Value` can drive
   * multiple properties in a synchronized fashion, but can only be driven by one
   * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,
   * or calling `setValue`) will stop any previous ones.
   *
   * See https://reactnative.dev/docs/animatedvalue
   */
  var AnimatedValue = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedValue, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedValue);
    function AnimatedValue(value, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedValue);
      _this = _super.call(this);
      if (typeof value !== 'number') {
        throw new Error('AnimatedValue: Attempting to set value to undefined');
      }
      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      if (config && config.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }
    (0, _createClass2.default)(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        var _this2 = this;
        if (this.__isNative) {
          NativeAnimatedAPI.getValue(this.__getNativeTag(), function (value) {
            _this2._value = value - _this2._offset;
          });
        }
        this.stopAnimation();
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }

      /**
       * Directly set the value.  This will stop any animations running on the value
       * and update all the bound properties.
       *
       * See https://reactnative.dev/docs/animatedvalue#setvalue
       */
    }, {
      key: "setValue",
      value: function setValue(value) {
        var _this3 = this;
        if (this._animation) {
          this._animation.stop();
          this._animation = null;
        }
        this._updateValue(value, !this.__isNative /* don't perform a flush for natively driven values */);
        if (this.__isNative) {
          _executeAsAnimatedBatch(this.__getNativeTag().toString(), function () {
            return NativeAnimatedAPI.setAnimatedNodeValue(_this3.__getNativeTag(), value);
          });
        }
      }

      /**
       * Sets an offset that is applied on top of whatever value is set, whether via
       * `setValue`, an animation, or `Animated.event`.  Useful for compensating
       * things like the start of a pan gesture.
       *
       * See https://reactnative.dev/docs/animatedvalue#setoffset
       */
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;
        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }

      /**
       * Merges the offset value into the base value and resets the offset to zero.
       * The final output of the value is unchanged.
       *
       * See https://reactnative.dev/docs/animatedvalue#flattenoffset
       */
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;
        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }

      /**
       * Sets the offset value to the base value, and resets the base value to zero.
       * The final output of the value is unchanged.
       *
       * See https://reactnative.dev/docs/animatedvalue#extractoffset
       */
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;
        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }

      /**
       * Stops any running animation or tracking. `callback` is invoked with the
       * final value after stopping the animation, which is useful for updating
       * state to match the animation position with layout.
       *
       * See https://reactnative.dev/docs/animatedvalue#stopanimation
       */
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        if (callback) {
          if (this.__isNative) {
            NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);
          } else {
            callback(this.__getValue());
          }
        }
      }

      /**
       * Stops any animation and resets the value to its original.
       *
       * See https://reactnative.dev/docs/animatedvalue#resetanimation
       */
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);
        }
      }
    }, {
      key: "__onAnimatedValueUpdateReceived",
      value: function __onAnimatedValueUpdateReceived(value) {
        this._updateValue(value, false /*flush*/);
      }

      /**
       * Interpolates the value before updating the property, e.g. mapping 0-1 to
       * 0-10.
       */
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }

      /**
       * Typically only used internally, but could be used by a custom Animation
       * class.
       *
       * See https://reactnative.dev/docs/animatedvalue#animate
       */
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this4 = this;
        var handle = null;
        if (animation.__isInteraction) {
          handle = _InteractionManager.default.createInteractionHandle();
        }
        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          // Natively driven animations will never call into that callback, therefore we can always
          // pass flush = true to allow the updated value to propagate to native with setNativeProps
          _this4._updateValue(value, true /* flush */);
        }, function (result) {
          _this4._animation = null;
          if (handle !== null) {
            _InteractionManager.default.clearInteractionHandle(handle);
          }
          callback && callback(result);
        }, previousAnimation, this);
      }

      /**
       * Typically only used internally.
       */
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }

      /**
       * Typically only used internally.
       */
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
        // Make sure that the tracking animation starts executing
        this._tracking && this._tracking.update();
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        if (value === undefined) {
          throw new Error('AnimatedValue: Attempting to set value to undefined');
        }
        this._value = value;
        if (flush) {
          flushValue(this);
        }
        this.__callListeners(this.__getValue());
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);
    return AnimatedValue;
  }(_AnimatedWithChildren2.default);
},288,[1,5,6,10,13,15,12,289,282,291,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                               * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                               *
                                                                               * This source code is licensed under the MIT license found in the
                                                                               * LICENSE file in the root directory of this source tree.
                                                                               *
                                                                               * @format
                                                                               * 
                                                                               */

  var _emitter = new _EventEmitter.default();
  var DEBUG_DELAY = 0;
  var DEBUG = false;

  /**
   * InteractionManager allows long-running work to be scheduled after any
   * interactions/animations have completed. In particular, this allows JavaScript
   * animations to run smoothly.
   *
   * Applications can schedule tasks to run after interactions with the following:
   *
   * ```
   * InteractionManager.runAfterInteractions(() => {
   *   // ...long-running synchronous task...
   * });
   * ```
   *
   * Compare this to other scheduling alternatives:
   *
   * - requestAnimationFrame(): for code that animates a view over time.
   * - setImmediate/setTimeout(): run code later, note this may delay animations.
   * - runAfterInteractions(): run code later, without delaying active animations.
   *
   * The touch handling system considers one or more active touches to be an
   * 'interaction' and will delay `runAfterInteractions()` callbacks until all
   * touches have ended or been cancelled.
   *
   * InteractionManager also allows applications to register animations by
   * creating an interaction 'handle' on animation start, and clearing it upon
   * completion:
   *
   * ```
   * var handle = InteractionManager.createInteractionHandle();
   * // run animation... (`runAfterInteractions` tasks are queued)
   * // later, on animation completion:
   * InteractionManager.clearInteractionHandle(handle);
   * // queued tasks run if all handles were cleared
   * ```
   *
   * `runAfterInteractions` takes either a plain callback function, or a
   * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a
   * `PromiseTask` is supplied, then it is fully resolved (including asynchronous
   * dependencies that also schedule more tasks via `runAfterInteractions`) before
   * starting on the next task that might have been queued up synchronously
   * earlier.
   *
   * By default, queued tasks are executed together in a loop in one
   * `setImmediate` batch. If `setDeadline` is called with a positive number, then
   * tasks will only be executed until the deadline (in terms of js event loop run
   * time) approaches, at which point execution will yield via setTimeout,
   * allowing events such as touches to start interactions and block queued tasks
   * from executing, making apps more responsive.
   */
  var InteractionManager = {
    Events: {
      interactionStart: 'interactionStart',
      interactionComplete: 'interactionComplete'
    },
    /**
     * Schedule a function to run after all interactions have completed. Returns a cancellable
     * "promise".
     */
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();
        if (task) {
          tasks.push(task);
        }
        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });
        _taskQueue.enqueueTasks(tasks);
      });
      return {
        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        then: promise.then.bind(promise),
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    /**
     * Notify manager that an interaction has started.
     */
    createInteractionHandle: function createInteractionHandle() {
      DEBUG;
      _scheduleUpdate();
      var handle = ++_inc;
      _addInteractionSet.add(handle);
      return handle;
    },
    /**
     * Notify manager that an interaction has completed.
     */
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG;
      _$$_REQUIRE(_dependencyMap[2])(!!handle, 'InteractionManager: Must provide a handle to clear.');
      _scheduleUpdate();
      _addInteractionSet.delete(handle);
      _deleteInteractionSet.add(handle);
    },
    // $FlowFixMe[method-unbinding] added when improving typing for this parameters
    addListener: _emitter.addListener.bind(_emitter),
    /**
     * A positive number will use setTimeout to schedule any tasks after the
     * eventLoopRunningTime hits the deadline value, otherwise all tasks will be
     * executed in one setImmediate batch (default).
     */
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };
  var _interactionSet = new Set();
  var _addInteractionSet = new Set();
  var _deleteInteractionSet = new Set();
  var _taskQueue = new (_$$_REQUIRE(_dependencyMap[3]))({
    onMoreTasks: _scheduleUpdate
  });
  var _nextUpdateHandle = 0;
  var _inc = 0;
  var _deadline = -1;

  /**
   * Schedule an asynchronous update to the interaction state.
   */
  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  /**
   * Notify listeners, process queue, etc
   */
  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;
    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });
    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });
    var nextInteractionCount = _interactionSet.size;
    if (interactionCount !== 0 && nextInteractionCount === 0) {
      // transition from 1+ --> 0 interactions
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      // transition from 0 --> 1+ interactions
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    // process the queue regardless of a transition
    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();
        if (_deadline > 0 && _$$_REQUIRE(_dependencyMap[4]).getEventLoopRunningTime() >= _deadline) {
          // Hit deadline before processing all tasks, so process more later.
          _scheduleUpdate();
          break;
        }
      }
    }
    _addInteractionSet.clear();
    _deleteInteractionSet.clear();
  }
  module.exports = InteractionManager;
},289,[1,17,24,290,32]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);
  var _createClass = _$$_REQUIRE(_dependencyMap[1]);
  var DEBUG = false;

  /**
   * TaskQueue - A system for queueing and executing a mix of simple callbacks and
   * trees of dependent tasks based on Promises. No tasks are executed unless
   * `processNext` is called.
   *
   * `enqueue` takes a Task object with either a simple `run` callback, or a
   * `gen` function that returns a `Promise` and puts it in the queue.  If a gen
   * function is supplied, then the promise it returns will block execution of
   * tasks already in the queue until it resolves. This can be used to make sure
   * the first task is fully resolved (including asynchronous dependencies that
   * also schedule more tasks via `enqueue`) before starting on the next task.
   * The `onMoreTasks` constructor argument is used to inform the owner that an
   * async task has resolved and that the queue should be processed again.
   *
   * Note: Tasks are only actually executed with explicit calls to `processNext`.
   */
  var TaskQueue = /*#__PURE__*/function () {
    /**
     * TaskQueue instances are self contained and independent, so multiple tasks
     * of varying semantics and priority can operate together.
     *
     * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more
     * tasks to process.
     */
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;
      _classCallCheck(this, TaskQueue);
      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    /**
     * Add a task to the queue.  It is recommended to name your tasks for easier
     * async debugging. Tasks will not be executed until `processNext` is called
     * explicitly.
     */
    _createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;
        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        // search through all tasks and remove them.
        this._queueStack = this._queueStack.map(function (queue) {
          return Object.assign({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }

      /**
       * Check to see if `processNext` should be called.
       *
       * @returns {boolean} Returns true if there are tasks that are ready to be
       * processed with `processNext`, or returns false if there are no more tasks
       * to be processed right now, although there may be tasks in the queue that
       * are blocked by earlier `PromiseTask`s that haven't resolved yet.
       * `onMoreTasks` will be called after each `PromiseTask` resolves if there are
       * tasks ready to run at that point.
       */
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }

      /**
       * Executes the next task in the queue.
       */
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();
        if (queue.length) {
          var task = queue.shift();
          try {
            if (typeof task === 'object' && task.gen) {
              DEBUG;
              this._genPromise(task);
            } else if (typeof task === 'object' && task.run) {
              DEBUG;
              task.run();
            } else {
              _$$_REQUIRE(_dependencyMap[2])(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG;
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];
        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();
          DEBUG;
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;
        // Each async task pushes it's own queue onto the queue stack. This
        // effectively defers execution of previously queued tasks until the promise
        // resolves, at which point we allow the new queue to be popped, which
        // happens once it is fully processed.
        this._queueStack.push({
          tasks: [],
          popable: false
        });
        var stackIdx = this._queueStack.length - 1;
        var stackItem = this._queueStack[stackIdx];
        DEBUG;
        DEBUG;
        task.gen().then(function () {
          DEBUG;
          stackItem.popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          setTimeout(function () {
            ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;
            throw ex;
          }, 0);
        });
      }
    }]);
    return TaskQueue;
  }();
  module.exports = TaskQueue;
},290,[5,6,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /* eslint no-bitwise: 0 */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _normalizeColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _Easing = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * Very handy helper to map input ranges to output ranges with an easing
   * function and custom behavior outside of the ranges.
   */
  function createNumericInterpolation(config) {
    var outputRange = config.outputRange;
    var inputRange = config.inputRange;
    var easing = config.easing || _Easing.default.linear;
    var extrapolateLeft = 'extend';
    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }
    var extrapolateRight = 'extend';
    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }
    return function (input) {
      (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }
  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    // Extrapolate
    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {
        // noop
      }
    }
    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {
        // noop
      }
    }
    if (outputMin === outputMax) {
      return outputMin;
    }
    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }
      return outputMax;
    }

    // Input Range
    if (inputMin === -(1 / 0)) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    // Easing
    result = easing(result);

    // Output Range
    if (outputMin === -(1 / 0)) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }
    return result;
  }
  var numericComponentRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;

  // Maps string inputs an RGBA color or an array of numeric components
  function mapStringToNumericComponents(input) {
    var normalizedColor = (0, _normalizeColor.default)(input);
    (0, _invariant.default)(normalizedColor == null || typeof normalizedColor !== 'object', 'PlatformColors are not supported');
    if (typeof normalizedColor === 'number') {
      normalizedColor = normalizedColor || 0;
      var r = (normalizedColor & 0xff000000) >>> 24;
      var g = (normalizedColor & 0x00ff0000) >>> 16;
      var b = (normalizedColor & 0x0000ff00) >>> 8;
      var a = (normalizedColor & 0x000000ff) / 255;
      return {
        isColor: true,
        components: [r, g, b, a]
      };
    } else {
      var components = [];
      var lastMatchEnd = 0;
      var match;
      while ((match = numericComponentRegex.exec(input)) != null) {
        if (match.index > lastMatchEnd) {
          components.push(input.substring(lastMatchEnd, match.index));
        }
        components.push(parseFloat(match[0]));
        lastMatchEnd = match.index + match[0].length;
      }
      (0, _invariant.default)(components.length > 0, 'outputRange must contain color or value with numeric component');
      if (lastMatchEnd < input.length) {
        components.push(input.substring(lastMatchEnd, input.length));
      }
      return {
        isColor: false,
        components: components
      };
    }
  }

  /**
   * Supports string shapes by extracting numbers so new values can be computed,
   * and recombines those values into new strings of the same shape.  Supports
   * things like:
   *
   *   rgba(123, 42, 99, 0.36) // colors
   *   -45deg                  // values with units
   */
  function createStringInterpolation(config) {
    (0, _invariant.default)(config.outputRange.length >= 2, 'Bad output range');
    var outputRange = config.outputRange.map(mapStringToNumericComponents);
    var isColor = outputRange[0].isColor;
    var numericComponents = outputRange.map(function (output) {
      return isColor ?
      // $FlowIgnoreMe[incompatible-call]
      output.components :
      // $FlowIgnoreMe[incompatible-call]
      output.components.filter(function (c) {
        return typeof c === 'number';
      });
    });
    var interpolations = numericComponents[0].map(function (_, i) {
      return createNumericInterpolation(Object.assign({}, config, {
        outputRange: numericComponents.map(function (components) {
          return components[i];
        })
      }));
    });
    if (!isColor) {
      return function (input) {
        var values = interpolations.map(function (interpolation) {
          return interpolation(input);
        });
        var i = 0;
        return outputRange[0].components.map(function (c) {
          return typeof c === 'number' ? values[i++] : c;
        }).join('');
      };
    } else {
      return function (input) {
        var result = interpolations.map(function (interpolation, i) {
          var value = interpolation(input);
          // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to
          // round the opacity (4th column).
          return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;
        });
        return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;
      };
    }
  }
  function findRange(input, inputRange) {
    var i;
    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }
    return i - 1;
  }
  var AnimatedInterpolation = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedInterpolation, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedInterpolation);
    function AnimatedInterpolation(parent, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedInterpolation);
      _this = _super.call(this);
      _this._parent = parent;
      _this._config = config;
      return _this;
    }
    (0, _createClass2.default)(AnimatedInterpolation, [{
      key: "_getInterpolation",
      value: function _getInterpolation() {
        if (!this._interpolation) {
          var config = this._config;
          if (config.outputRange && typeof config.outputRange[0] === 'string') {
            this._interpolation = createStringInterpolation(config);
          } else {
            this._interpolation = createNumericInterpolation(config);
          }
        }
        return this._interpolation;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._parent.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedInterpolation.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();
        (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._getInterpolation()(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here
        var outputRange = this._config.outputRange;
        var outputType = null;
        if (typeof outputRange[0] === 'string') {
          // $FlowIgnoreMe[incompatible-cast]
          outputRange = outputRange.map(function (value) {
            var processedColor = (0, _processColor.default)(value);
            if (typeof processedColor === 'number') {
              outputType = 'color';
              return processedColor;
            } else {
              return _NativeAnimatedHelper.default.transformDataType(value);
            }
          });
        }
        return {
          inputRange: this._config.inputRange,
          outputRange: outputRange,
          outputType: outputType,
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);
    return AnimatedInterpolation;
  }(_AnimatedWithChildren2.default);
},291,[1,5,6,10,13,15,12,165,164,292,282,294,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ease;

  /**
   * The `Easing` module implements common easing functions. This module is used
   * by [Animate.timing()](docs/animate.html#timing) to convey physically
   * believable motion in animations.
   *
   * You can find a visualization of some common easing functions at
   * http://easings.net/
   *
   * ### Predefined animations
   *
   * The `Easing` module provides several predefined animations through the
   * following methods:
   *
   * - [`back`](docs/easing.html#back) provides a simple animation where the
   *   object goes slightly back before moving forward
   * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation
   * - [`ease`](docs/easing.html#ease) provides a simple inertial animation
   * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction
   *
   * ### Standard functions
   *
   * Three standard easing functions are provided:
   *
   * - [`linear`](docs/easing.html#linear)
   * - [`quad`](docs/easing.html#quad)
   * - [`cubic`](docs/easing.html#cubic)
   *
   * The [`poly`](docs/easing.html#poly) function can be used to implement
   * quartic, quintic, and other higher power functions.
   *
   * ### Additional functions
   *
   * Additional mathematical functions are provided by the following methods:
   *
   * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve
   * - [`circle`](docs/easing.html#circle) provides a circular function
   * - [`sin`](docs/easing.html#sin) provides a sinusoidal function
   * - [`exp`](docs/easing.html#exp) provides an exponential function
   *
   * The following helpers are used to modify other easing functions.
   *
   * - [`in`](docs/easing.html#in) runs an easing function forwards
   * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical
   * - [`out`](docs/easing.html#out) runs an easing function backwards
   */
  var Easing = {
    /**
     * A stepping function, returns 1 for any positive value of `n`.
     */
    step0: function step0(n) {
      return n > 0 ? 1 : 0;
    },
    /**
     * A stepping function, returns 1 if `n` is greater than or equal to 1.
     */
    step1: function step1(n) {
      return n >= 1 ? 1 : 0;
    },
    /**
     * A linear function, `f(t) = t`. Position correlates to elapsed time one to
     * one.
     *
     * http://cubic-bezier.com/#0,0,1,1
     */
    linear: function linear(t) {
      return t;
    },
    /**
     * A simple inertial interaction, similar to an object slowly accelerating to
     * speed.
     *
     * http://cubic-bezier.com/#.42,0,1,1
     */
    ease: function ease(t) {
      if (!_ease) {
        _ease = Easing.bezier(0.42, 0, 1, 1);
      }
      return _ease(t);
    },
    /**
     * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed
     * time.
     *
     * http://easings.net/#easeInQuad
     */
    quad: function quad(t) {
      return t * t;
    },
    /**
     * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed
     * time.
     *
     * http://easings.net/#easeInCubic
     */
    cubic: function cubic(t) {
      return t * t * t;
    },
    /**
     * A power function. Position is equal to the Nth power of elapsed time.
     *
     * n = 4: http://easings.net/#easeInQuart
     * n = 5: http://easings.net/#easeInQuint
     */
    poly: function poly(n) {
      return function (t) {
        return Math.pow(t, n);
      };
    },
    /**
     * A sinusoidal function.
     *
     * http://easings.net/#easeInSine
     */
    sin: function sin(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    },
    /**
     * A circular function.
     *
     * http://easings.net/#easeInCirc
     */
    circle: function circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    },
    /**
     * An exponential function.
     *
     * http://easings.net/#easeInExpo
     */
    exp: function exp(t) {
      return Math.pow(2, 10 * (t - 1));
    },
    /**
     * A simple elastic interaction, similar to a spring oscillating back and
     * forth.
     *
     * Default bounciness is 1, which overshoots a little bit once. 0 bounciness
     * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N
     * times.
     *
     * http://easings.net/#easeInElastic
     */
    elastic: function elastic() {
      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var p = bounciness * Math.PI;
      return function (t) {
        return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
      };
    },
    /**
     * Use with `Animated.parallel()` to create a simple effect where the object
     * animates back slightly as the animation starts.
     *
     * https://easings.net/#easeInBack
     */
    back: function back() {
      var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;
      return function (t) {
        return t * t * ((s + 1) * t - s);
      };
    },
    /**
     * Provides a simple bouncing effect.
     *
     * http://easings.net/#easeInBounce
     */
    bounce: function bounce(t) {
      if (t < 0.36363636363636365) {
        return 7.5625 * t * t;
      }
      if (t < 0.7272727272727273) {
        var _t = t - 0.5454545454545454;
        return 7.5625 * _t * _t + 0.75;
      }
      if (t < 0.9090909090909091) {
        var _t2 = t - 0.8181818181818182;
        return 7.5625 * _t2 * _t2 + 0.9375;
      }
      var t2 = t - 0.9545454545454546;
      return 7.5625 * t2 * t2 + 0.984375;
    },
    /**
     * Provides a cubic bezier curve, equivalent to CSS Transitions'
     * `transition-timing-function`.
     *
     * A useful tool to visualize cubic bezier curves can be found at
     * http://cubic-bezier.com/
     */
    bezier: function bezier(x1, y1, x2, y2) {
      var _bezier = _$$_REQUIRE(_dependencyMap[0]).default;
      return _bezier(x1, y1, x2, y2);
    },
    /**
     * Runs an easing function forwards.
     */
    in: function _in(easing) {
      return easing;
    },
    /**
     * Runs an easing function backwards.
     */
    out: function out(easing) {
      return function (t) {
        return 1 - easing(1 - t);
      };
    },
    /**
     * Makes any easing function symmetrical. The easing function will run
     * forwards for half of the duration, then backwards for the rest of the
     * duration.
     */
    inOut: function inOut(easing) {
      return function (t) {
        if (t < 0.5) {
          return easing(t * 2) / 2;
        }
        return 1 - easing((1 - t) * 2) / 2;
      };
    }
  };
  var _default = exports.default = Easing;
},292,[293]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Portions Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * BezierEasing - use bezier curve for transition easing function
   * https://github.com/gre/bezier-easing
   * @copyright 2014-2015 Gaëtan Renaudeau. MIT License.
   */

  'use strict';

  // These values are established by empiricism with tests (tradeoff: performance VS precision)
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = bezier;
  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 0.1;
  var float32ArraySupported = typeof Float32Array === 'function';
  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }
  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }
  function C(aA1) {
    return 3.0 * aA1;
  }

  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }
  function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
    var currentX,
      currentT,
      i = 0,
      aA = _aA,
      aB = _aB;
    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
  }
  function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
    var aGuessT = _aGuessT;
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0.0) {
        return aGuessT;
      }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  function bezier(mX1, mY1, mX2, mY2) {
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    // Precompute samples table
    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }
    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = 10;
      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }
      --currentSample;

      // Interpolate to provide an initial guess for t
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);
      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }
    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x; // linear
      }
      // Because JavaScript number are imprecise, we should guarantee the extremes are right.
      if (x === 0) {
        return 0;
      }
      if (x === 1) {
        return 1;
      }
      return calcBezier(getTForX(x), mY1, mY2);
    };
  }
},293,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedWithChildren = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedWithChildren, _AnimatedNode);
    var _super = _createSuper(AnimatedWithChildren);
    function AnimatedWithChildren() {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedWithChildren);
      _this = _super.call(this);
      _this._children = [];
      return _this;
    }
    (0, _createClass2.default)(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        if (!this.__isNative) {
          this.__isNative = true;
          for (var child of this._children) {
            child.__makeNative(platformConfig);
            _NativeAnimatedHelper.default.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedWithChildren.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }
        this._children.push(child);
        if (this.__isNative) {
          // Only accept "native" animated nodes as children
          child.__makeNative(this.__getPlatformConfig());
          _NativeAnimatedHelper.default.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);
        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }
        if (this.__isNative && child.__isNative) {
          _NativeAnimatedHelper.default.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
        this._children.splice(index, 1);
        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedWithChildren.prototype), "__callListeners", this).call(this, value);
        if (!this.__isNative) {
          for (var child of this._children) {
            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
            if (child.__getValue) {
              child.__callListeners(child.__getValue());
            }
          }
        }
      }
    }]);
    return AnimatedWithChildren;
  }(_AnimatedNode2.default);
},294,[1,5,6,10,13,15,12,282,295]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
  var _uniqueId = 1;

  // Note(vjeux): this would be better as an interface but flow doesn't
  // support them yet
  var AnimatedNode = exports.default = /*#__PURE__*/function () {
    function AnimatedNode() {
      (0, _classCallCheck2.default)(this, AnimatedNode);
      this._listeners = {};
    }
    (0, _createClass2.default)(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        this.removeAllListeners();
        if (this.__isNative && this.__nativeTag != null) {
          _NativeAnimatedHelper.default.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }

      /* Methods and props used by native Animated impl */
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
        this._platformConfig = platformConfig;
        if (this.hasListeners()) {
          this._startListeningToNativeValueUpdates();
        }
      }

      /**
       * Adds an asynchronous listener to the value so you can observe updates from
       * animations.  This is useful because there is no way to
       * synchronously read the value because it might be driven natively.
       *
       * See https://reactnative.dev/docs/animatedvalue#addlistener
       */
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;
        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }
        return id;
      }

      /**
       * Unregister a listener. The `id` param shall match the identifier
       * previously returned by `addListener()`.
       *
       * See https://reactnative.dev/docs/animatedvalue#removelistener
       */
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];
        if (this.__isNative && !this.hasListeners()) {
          this._stopListeningForNativeValueUpdates();
        }
      }

      /**
       * Remove all registered listeners.
       *
       * See https://reactnative.dev/docs/animatedvalue#removealllisteners
       */
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};
        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "hasListeners",
      value: function hasListeners() {
        return !!Object.keys(this._listeners).length;
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this = this;
        if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {
          return;
        }
        if (this.__shouldUpdateListenersForNewNativeTag) {
          this.__shouldUpdateListenersForNewNativeTag = false;
          this._stopListeningForNativeValueUpdates();
        }
        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this.__getNativeTag()) {
            return;
          }
          _this.__onAnimatedValueUpdateReceived(data.value);
        });
      }
    }, {
      key: "__onAnimatedValueUpdateReceived",
      value: function __onAnimatedValueUpdateReceived(value) {
        this.__callListeners(value);
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: value
          });
        }
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }
        this.__nativeAnimatedValueListener.remove();
        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        var _this$__nativeTag;
        _NativeAnimatedHelper.default.assertNativeAnimatedModule();
        (0, _invariant.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
        var nativeTag = (_this$__nativeTag = this.__nativeTag) != null ? _this$__nativeTag : _NativeAnimatedHelper.default.generateNewNodeTag();
        if (this.__nativeTag == null) {
          this.__nativeTag = nativeTag;
          var config = this.__getNativeConfig();
          if (this._platformConfig) {
            config.platformConfig = this._platformConfig;
          }
          _NativeAnimatedHelper.default.API.createAnimatedNode(nativeTag, config);
          this.__shouldUpdateListenersForNewNativeTag = true;
        }
        return nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }, {
      key: "__getPlatformConfig",
      value: function __getPlatformConfig() {
        return this._platformConfig;
      }
    }, {
      key: "__setPlatformConfig",
      value: function __setPlatformConfig(platformConfig) {
        this._platformConfig = platformConfig;
      }
    }]);
    return AnimatedNode;
  }();
},295,[1,5,6,282,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedObject = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  var _AnimatedStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  function createAnimatedProps(inputProps) {
    var props = {};
    for (var key in inputProps) {
      var value = inputProps[key];
      if (key === 'style') {
        props[key] = new _AnimatedStyle.default(value);
      } else if (value instanceof _AnimatedNode2.default) {
        props[key] = value;
      } else if ((0, _AnimatedObject.hasAnimatedNode)(value)) {
        props[key] = new _AnimatedObject.default(value);
      } else {
        props[key] = value;
      }
    }
    return props;
  }
  var AnimatedProps = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedProps, _AnimatedNode);
    var _super = _createSuper(AnimatedProps);
    function AnimatedProps(props, callback) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedProps);
      _this = _super.call(this);
      _this._props = createAnimatedProps(props);
      _this._callback = callback;
      return _this;
    }
    (0, _createClass2.default)(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            props[key] = value.__getValue();
          } else if (value instanceof _$$_REQUIRE(_dependencyMap[12]).AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }
        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            props[key] = value.__getAnimatedValue();
          }
        }
        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            value.__removeChild(this);
          }
        }
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            value.__makeNative(platformConfig);
          }
        }
        if (!this.__isNative) {
          this.__isNative = true;

          // Since this does not call the super.__makeNative, we need to store the
          // supplied platformConfig here, before calling __connectAnimatedView
          // where it will be needed to traverse the graph of attached values.
          (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedProps.prototype), "__setPlatformConfig", this).call(this, platformConfig);
          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }
        this._animatedView = animatedView;
        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = (0, _$$_REQUIRE(_dependencyMap[13]).findNodeHandle)(this._animatedView);
        (0, _invariant.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        _NativeAnimatedHelper.default.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = (0, _$$_REQUIRE(_dependencyMap[13]).findNodeHandle)(this._animatedView);
        (0, _invariant.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        _NativeAnimatedHelper.default.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__restoreDefaultValues",
      value: function __restoreDefaultValues() {
        // When using the native driver, view properties need to be restored to
        // their default values manually since react no longer tracks them. This
        // is needed to handle cases where a prop driven by native animated is removed
        // after having been changed natively by an animation.
        if (this.__isNative) {
          _NativeAnimatedHelper.default.API.restoreDefaultValues(this.__getNativeTag());
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};
        for (var propKey in this._props) {
          var value = this._props[propKey];
          if (value instanceof _AnimatedNode2.default) {
            value.__makeNative(this.__getPlatformConfig());
            propsConfig[propKey] = value.__getNativeTag();
          }
        }
        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);
    return AnimatedProps;
  }(_AnimatedNode2.default);
},296,[1,5,6,10,13,15,12,282,295,297,298,24,300,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   * @oncall react_native
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.hasAnimatedNode = hasAnimatedNode;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var MAX_DEPTH = 5;
  function isPlainObject(value) {
    return value !== null && typeof value === 'object' && Object.getPrototypeOf(value).isPrototypeOf(Object);
  }

  // Recurse through values, executing fn for any AnimatedNodes
  function visit(value, fn) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    if (depth >= MAX_DEPTH) {
      return;
    }
    if (value instanceof _AnimatedNode.default) {
      fn(value);
    } else if (Array.isArray(value)) {
      value.forEach(function (element) {
        visit(element, fn, depth + 1);
      });
    } else if (isPlainObject(value)) {
      Object.values(value).forEach(function (element) {
        visit(element, fn, depth + 1);
      });
    }
  }

  // Returns a copy of value with a transformation fn applied to any AnimatedNodes
  function mapAnimatedNodes(value, fn) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    if (depth >= MAX_DEPTH) {
      return value;
    }
    if (value instanceof _AnimatedNode.default) {
      return fn(value);
    } else if (Array.isArray(value)) {
      return value.map(function (element) {
        return mapAnimatedNodes(element, fn, depth + 1);
      });
    } else if (isPlainObject(value)) {
      var result = {};
      for (var key in value) {
        result[key] = mapAnimatedNodes(value[key], fn, depth + 1);
      }
      return result;
    } else {
      return value;
    }
  }
  function hasAnimatedNode(value) {
    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (depth >= MAX_DEPTH) {
      return false;
    }
    if (value instanceof _AnimatedNode.default) {
      return true;
    } else if (Array.isArray(value)) {
      for (var element of value) {
        if (hasAnimatedNode(element, depth + 1)) {
          return true;
        }
      }
    } else if (isPlainObject(value)) {
      // Don't consider React elements
      if (React.isValidElement(value)) {
        return false;
      }
      for (var key in value) {
        if (hasAnimatedNode(value[key], depth + 1)) {
          return true;
        }
      }
    }
    return false;
  }
  var AnimatedObject = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedObject, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedObject);
    function AnimatedObject(value) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedObject);
      _this = _super.call(this);
      _this._value = value;
      return _this;
    }
    (0, _createClass2.default)(AnimatedObject, [{
      key: "__getValue",
      value: function __getValue() {
        return mapAnimatedNodes(this._value, function (node) {
          return node.__getValue();
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return mapAnimatedNodes(this._value, function (node) {
          return node.__getAnimatedValue();
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedObject.prototype), "__attach", this).call(this);
        visit(this._value, function (node) {
          node.__addChild(_this2);
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;
        visit(this._value, function (node) {
          node.__removeChild(_this3);
        });
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedObject.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        visit(this._value, function (value) {
          value.__makeNative(platformConfig);
        });
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedObject.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'object',
          value: mapAnimatedNodes(this._value, function (node) {
            return {
              nodeTag: node.__getNativeTag()
            };
          })
        };
      }
    }]);
    return AnimatedObject;
  }(_AnimatedWithChildren2.default);
},297,[1,5,6,10,13,15,12,295,294,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _AnimatedObject = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));
  var _AnimatedTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  function createAnimatedStyle(inputStyle, keepUnanimatedValues) {
    // $FlowFixMe[underconstrained-implicit-instantiation]
    var style = (0, _flattenStyle.default)(inputStyle);
    var animatedStyles = {};
    for (var key in style) {
      var value = style[key];
      if (value != null && key === 'transform') {
        animatedStyles[key] = _ReactNativeFeatureFlags.default.shouldUseAnimatedObjectForTransform() ? new _AnimatedObject.default(value) : new _AnimatedTransform.default(value);
      } else if (value instanceof _AnimatedNode.default) {
        animatedStyles[key] = value;
      } else if ((0, _AnimatedObject.hasAnimatedNode)(value)) {
        animatedStyles[key] = new _AnimatedObject.default(value);
      } else if (keepUnanimatedValues) {
        animatedStyles[key] = value;
      }
    }
    return animatedStyles;
  }
  var AnimatedStyle = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedStyle, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedStyle);
    function AnimatedStyle(style) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedStyle);
      _this = _super.call(this);
      _this._inputStyle = style;
      _this._style = createAnimatedStyle(style, _Platform.default.OS !== 'web');
      return _this;
    }
    (0, _createClass2.default)(AnimatedStyle, [{
      key: "__getValue",
      value: function __getValue() {
        var result = {};
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return _Platform.default.OS === 'web' ? [this._inputStyle, result] : result;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var result = {};
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            result[key] = value.__getAnimatedValue();
          }
        }
        return result;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            value.__removeChild(this);
          }
        }
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            value.__makeNative(platformConfig);
          }
        }
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedStyle.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};
        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof _AnimatedNode.default) {
            var style = this._style[styleKey];
            style.__makeNative(this.__getPlatformConfig());
            styleConfig[styleKey] = style.__getNativeTag();
          }
          // Non-animated styles are set using `setNativeProps`, no need
          // to pass those as a part of the node config
        }
        _NativeAnimatedHelper.default.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);
    return AnimatedStyle;
  }(_AnimatedWithChildren2.default);
},298,[1,5,6,10,13,15,12,108,157,21,282,295,297,299,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedTransform = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedTransform, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedTransform);
    function AnimatedTransform(transforms) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedTransform);
      _this = _super.call(this);
      _this._transforms = transforms;
      return _this;
    }
    (0, _createClass2.default)(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              value.__makeNative(platformConfig);
            }
          }
        });
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTransform.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._get(function (animatedNode) {
          return animatedNode.__getValue();
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._get(function (animatedNode) {
          return animatedNode.__getAnimatedValue();
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;
        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;
        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              value.__removeChild(_this3);
            }
          }
        });
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];
        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: _NativeAnimatedHelper.default.transformDataType(value)
              });
            }
          }
        });
        _NativeAnimatedHelper.default.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }, {
      key: "_get",
      value: function _get(getter) {
        return this._transforms.map(function (transform) {
          var result = {};
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              result[key] = getter(value);
            } else if (Array.isArray(value)) {
              result[key] = value.map(function (element) {
                if (element instanceof _AnimatedNode.default) {
                  return getter(element);
                } else {
                  return element;
                }
              });
            } else if (typeof value === 'object') {
              result[key] = {};
              for (var _ref of Object.entries(value)) {
                var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
                var nestedKey = _ref2[0];
                var nestedValue = _ref2[1];
                if (nestedValue instanceof _AnimatedNode.default) {
                  result[key][nestedKey] = getter(nestedValue);
                } else {
                  result[key][nestedKey] = nestedValue;
                }
              }
            } else {
              result[key] = value;
            }
          }
          return result;
        });
      }
    }]);
    return AnimatedTransform;
  }(_AnimatedWithChildren2.default);
},299,[1,26,5,6,10,13,15,12,282,295,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AnimatedEvent = undefined;
  exports.attachNativeEvent = attachNativeEvent;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _AnimatedValueXY = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  function attachNativeEvent(viewRef, eventName, argMapping, platformConfig) {
    // Find animated values in `argMapping` and create an array representing their
    // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].
    var eventMappings = [];
    var traverse = function traverse(value, path) {
      if (value instanceof _AnimatedValue.default) {
        value.__makeNative(platformConfig);
        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (value instanceof _AnimatedValueXY.default) {
        traverse(value.x, path.concat('x'));
        traverse(value.y, path.concat('y'));
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };
    (0, _invariant.default)(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');

    // Assume that the event containing `nativeEvent` is always the first argument.
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = (0, _$$_REQUIRE(_dependencyMap[7]).findNodeHandle)(viewRef);
    if (viewTag != null) {
      eventMappings.forEach(function (mapping) {
        _NativeAnimatedHelper.default.API.addAnimatedEventToView(viewTag, eventName, mapping);
      });
    }
    return {
      detach: function detach() {
        if (viewTag != null) {
          eventMappings.forEach(function (mapping) {
            _NativeAnimatedHelper.default.API.removeAnimatedEventFromView(viewTag, eventName,
            // $FlowFixMe[incompatible-call]
            mapping.animatedValueTag);
          });
        }
      }
    };
  }
  var AnimatedEvent = exports.AnimatedEvent = /*#__PURE__*/function () {
    function AnimatedEvent(argMapping, config) {
      var _this = this;
      (0, _classCallCheck2.default)(this, AnimatedEvent);
      this._listeners = [];
      this._callListeners = function () {
        for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
          args[_key2] = arguments[_key2];
        }
        _this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      };
      this._argMapping = argMapping;
      if (config == null) {
        console.warn('Animated.event now requires a second argument for options');
        config = {
          useNativeDriver: false
        };
      }
      if (config.listener) {
        this.__addListener(config.listener);
      }
      this._attachedEvent = null;
      this.__isNative = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      this.__platformConfig = config.platformConfig;
    }
    (0, _createClass2.default)(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        (0, _invariant.default)(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping, this.__platformConfig);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        (0, _invariant.default)(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this2 = this;
        if (this.__isNative) {
          {
            return this._callListeners;
          }
        }
        var validatedMapping = false;
        return function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
            args[_key4] = arguments[_key4];
          }
          var traverse = function traverse(recMapping, recEvt) {
            if (recMapping instanceof _AnimatedValue.default) {
              if (typeof recEvt === 'number') {
                recMapping.setValue(recEvt);
              }
            } else if (recMapping instanceof _AnimatedValueXY.default) {
              if (typeof recEvt === 'object') {
                traverse(recMapping.x, recEvt.x);
                traverse(recMapping.y, recEvt.y);
              }
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                /* $FlowFixMe[prop-missing] (>=0.120.0) This comment suppresses an
                 * error found when Flow v0.120 was deployed. To see the error,
                 * delete this comment and run Flow. */
                traverse(recMapping[mappingKey], recEvt[mappingKey]);
              }
            }
          };
          _this2._argMapping.forEach(function (mapping, idx) {
            traverse(mapping, args[idx]);
          });
          _this2._callListeners.apply(_this2, args);
        };
      }
    }]);
    return AnimatedEvent;
  }();
},300,[1,5,6,282,288,301,24,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var _uniqueId = 1;

  /**
   * 2D Value for driving 2D animations, such as pan gestures. Almost identical
   * API to normal `Animated.Value`, but multiplexed.
   *
   * See https://reactnative.dev/docs/animatedvaluexy
   */
  var AnimatedValueXY = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedValueXY, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedValueXY);
    function AnimatedValueXY(valueIn, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedValueXY);
      _this = _super.call(this);
      var value = valueIn || {
        x: 0,
        y: 0
      }; // fixme: shouldn't need `: any`
      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new _AnimatedValue.default(value.x);
        _this.y = new _AnimatedValue.default(value.y);
      } else {
        (0, _invariant.default)(value.x instanceof _AnimatedValue.default && value.y instanceof _AnimatedValue.default, "AnimatedValueXY must be initialized with an object of numbers or AnimatedValues.");
        _this.x = value.x;
        _this.y = value.y;
      }
      _this._listeners = {};
      if (config && config.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }

    /**
     * Directly set the value. This will stop any animations running on the value
     * and update all the bound properties.
     *
     * See https://reactnative.dev/docs/animatedvaluexy#setvalue
     */
    (0, _createClass2.default)(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }

      /**
       * Sets an offset that is applied on top of whatever value is set, whether
       * via `setValue`, an animation, or `Animated.event`. Useful for compensating
       * things like the start of a pan gesture.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#setoffset
       */
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }

      /**
       * Merges the offset value into the base value and resets the offset to zero.
       * The final output of the value is unchanged.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#flattenoffset
       */
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }

      /**
       * Sets the offset value to the base value, and resets the base value to
       * zero. The final output of the value is unchanged.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#extractoffset
       */
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }

      /**
       * Stops any animation and resets the value to its original.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#resetanimation
       */
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }

      /**
       * Stops any running animation or tracking. `callback` is invoked with the
       * final value after stopping the animation, which is useful for updating
       * state to match the animation position with layout.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#stopanimation
       */
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }

      /**
       * Adds an asynchronous listener to the value so you can observe updates from
       * animations.  This is useful because there is no way to synchronously read
       * the value because it might be driven natively.
       *
       * Returns a string that serves as an identifier for the listener.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#addlistener
       */
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;
        var id = String(_uniqueId++);
        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };
        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }

      /**
       * Unregister a listener. The `id` param shall match the identifier
       * previously returned by `addListener()`.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#removelistener
       */
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }

      /**
       * Remove all registered listeners.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#removealllisteners
       */
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }

      /**
       * Converts `{x, y}` into `{left, top}` for use in style.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#getlayout
       */
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }

      /**
       * Converts `{x, y}` into a useable translation transform.
       *
       * See https://reactnative.dev/docs/animatedvaluexy#gettranslatetransform
       */
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.x.__addChild(this);
        this.y.__addChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedValueXY.prototype), "__attach", this).call(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.x.__removeChild(this);
        this.y.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedValueXY.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.x.__makeNative(platformConfig);
        this.y.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedValueXY.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }]);
    return AnimatedValueXY;
  }(_AnimatedWithChildren2.default);
},301,[1,5,6,10,13,15,12,288,294,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var SpringConfig = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  var _Animation2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var SpringAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    (0, _inherits2.default)(SpringAnimation, _Animation);
    var _super = _createSuper(SpringAnimation);
    function SpringAnimation(config) {
      var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;
      var _this;
      (0, _classCallCheck2.default)(this, SpringAnimation);
      _this = _super.call(this);
      _this._overshootClamping = (_config$overshootClam = config.overshootClamping) != null ? _config$overshootClam : false;
      _this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) != null ? _config$restDisplacem : 0.001;
      _this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) != null ? _config$restSpeedThre : 0.001;
      _this._initialVelocity = (_config$velocity = config.velocity) != null ? _config$velocity : 0;
      _this._lastVelocity = (_config$velocity2 = config.velocity) != null ? _config$velocity2 : 0;
      _this._toValue = config.toValue;
      _this._delay = (_config$delay = config.delay) != null ? _config$delay : 0;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      _this._platformConfig = config.platformConfig;
      _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
      _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        var _config$stiffness, _config$damping, _config$mass;
        (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = (_config$stiffness = config.stiffness) != null ? _config$stiffness : 100;
        _this._damping = (_config$damping = config.damping) != null ? _config$damping : 10;
        _this._mass = (_config$mass = config.mass) != null ? _config$mass : 1;
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        var _config$bounciness, _config$speed;
        // Convert the origami bounciness/speed values to stiffness/damping
        // We assume mass is 1.
        (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) != null ? _config$bounciness : 8, (_config$speed = config.speed) != null ? _config$speed : 12);
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _config$tension, _config$friction;
        // Convert the origami tension/friction values to stiffness/damping
        // We assume mass is 1.
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction((_config$tension = config.tension) != null ? _config$tension : 40, (_config$friction = config.friction) != null ? _config$friction : 7);
        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }
      (0, _invariant.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      (0, _invariant.default)(_this._damping > 0, 'Damping value must be greater than 0');
      (0, _invariant.default)(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }
    (0, _createClass2.default)(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var _this$_initialVelocit;
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: (_this$_initialVelocit = this._initialVelocity) != null ? _this$_initialVelocit : this._lastVelocity,
          toValue: this._toValue,
          iterations: this.__iterations,
          platformConfig: this._platformConfig
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;
        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;
        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          // Set the initial velocity to the last velocity
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }
        var start = function start() {
          if (!_this2._useNativeDriver && animatedValue.__isNative === true) {
            throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
          }
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        //  If this._delay is more than 0, we start after the timeout.
        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }

      /**
       * This spring model is based off of a damped harmonic oscillator
       * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).
       *
       * We use the closed form of the second order differential equation:
       *
       * x'' + (2ζ⍵_0)x' + ⍵^2x = 0
       *
       * where
       *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),
       *    ζ = c / 2√mk (damping ratio),
       *    c = damping constant
       *    k = stiffness
       *    m = mass
       *
       * The derivation of the closed form is described in detail here:
       * http://planetmath.org/sites/default/files/texpdf/39745.pdf
       *
       * This algorithm happens to match the algorithm used by CASpringAnimation,
       * a QuartzCore (iOS) API that creates spring animations.
       */
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        // If for some reason we lost a lot of frames (e.g. process large payload or
        // stopped in the debugger), we only advance by 4 frames worth of
        // computation and will continue on the next frame. It's better to have it
        // running at faster speed than jumping to the end.
        var MAX_STEPS = 64;
        var now = Date.now();
        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }
        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m)); // damping ratio
        var omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay
        var x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0

        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;
        if (zeta < 1) {
          // Under damped
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          // This looks crazy -- it's actually just the derivative of the
          // oscillation function
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          // Critically damped
          var _envelope = Math.exp(-omega0 * t);
          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }
        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;
        this._onUpdate(position);
        if (!this.__active) {
          // a listener might have stopped us in _onUpdate
          return;
        }

        // Conditions for stopping the spring animation
        var isOvershooting = false;
        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }
        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
        var isDisplacement = true;
        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }
        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            // Ensure that we end up with a round value
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;
            this._onUpdate(this._toValue);
          }
          this.__debouncedOnEnd({
            finished: true
          });
          return;
        }
        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        (0, _get2.default)((0, _getPrototypeOf2.default)(SpringAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return SpringAnimation;
  }(_Animation2.default);
},302,[1,5,6,10,13,15,12,282,287,303,286,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fromBouncinessAndSpeed = fromBouncinessAndSpeed;
  exports.fromOrigamiTensionAndFriction = fromOrigamiTensionAndFriction;
  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }
  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }
  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }
  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }
    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }
    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }
    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }
    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }
    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }
    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }
    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }
    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }
},303,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _Animation2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var _easeInOut;
  function easeInOut() {
    if (!_easeInOut) {
      var Easing = _$$_REQUIRE(_dependencyMap[10]).default;
      _easeInOut = Easing.inOut(Easing.ease);
    }
    return _easeInOut;
  }
  var TimingAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    (0, _inherits2.default)(TimingAnimation, _Animation);
    var _super = _createSuper(TimingAnimation);
    function TimingAnimation(config) {
      var _config$easing, _config$duration, _config$delay, _config$iterations, _config$isInteraction;
      var _this;
      (0, _classCallCheck2.default)(this, TimingAnimation);
      _this = _super.call(this);
      _this._toValue = config.toValue;
      _this._easing = (_config$easing = config.easing) != null ? _config$easing : easeInOut();
      _this._duration = (_config$duration = config.duration) != null ? _config$duration : 500;
      _this._delay = (_config$delay = config.delay) != null ? _config$delay : 0;
      _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      _this._platformConfig = config.platformConfig;
      _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
      return _this;
    }
    (0, _createClass2.default)(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 16.666666666666668;
        var frames = [];
        var numFrames = Math.round(this._duration / frameDuration);
        for (var frame = 0; frame < numFrames; frame++) {
          frames.push(this._easing(frame / numFrames));
        }
        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations,
          platformConfig: this._platformConfig
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;
        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        var start = function start() {
          if (!_this2._useNativeDriver && animatedValue.__isNative === true) {
            throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
          }

          // Animations that sometimes have 0 duration and sometimes do not
          // still need to use the native driver when duration is 0 so as to
          // not cause intermixed JS and native animations.
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);
            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();
            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(
              // $FlowFixMe[method-unbinding] added when improving typing for this parameters
              _this2.onUpdate.bind(_this2));
            }
          }
        };
        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }
          this.__debouncedOnEnd({
            finished: true
          });
          return;
        }
        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
        if (this.__active) {
          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        (0, _get2.default)((0, _getPrototypeOf2.default)(TimingAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return TimingAnimation;
  }(_Animation2.default);
},304,[1,5,6,10,13,15,12,282,287,286,292]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimatedComponent;
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _useMergeRefs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _useAnimatedProps3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[7]);
  var _excluded = ["style"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function createAnimatedComponent(Component) {
    return React.forwardRef(function (props, forwardedRef) {
      var _useAnimatedProps = (0, _useAnimatedProps3.default)(
        // $FlowFixMe[incompatible-call]
        props),
        _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
        reducedProps = _useAnimatedProps2[0],
        callbackRef = _useAnimatedProps2[1];
      // $FlowFixMe[incompatible-call]
      var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);

      // Some components require explicit passthrough values for animation
      // to work properly. For example, if an animated component is
      // transformed and Pressable, onPress will not work after transform
      // without these passthrough values.
      // $FlowFixMe[prop-missing]
      var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues,
        style = reducedProps.style;
      var _ref = passthroughAnimatedPropExplicitValues != null ? passthroughAnimatedPropExplicitValues : {},
        passthroughStyle = _ref.style,
        passthroughProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var mergedStyle = Object.assign({}, style, passthroughStyle);
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, Object.assign({}, reducedProps, passthroughProps, {
        style: mergedStyle,
        ref: ref
      }));
    });
  }
},305,[1,119,26,156,306,307,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useMergeRefs;
  var _react = _$$_REQUIRE(_dependencyMap[0]);
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * Constructs a new ref that forwards new values to each of the given refs. The
   * given refs will always be invoked in the order that they are supplied.
   *
   * WARNING: A known problem of merging refs using this approach is that if any
   * of the given refs change, the returned callback ref will also be changed. If
   * the returned callback ref is supplied as a `ref` to a React element, this may
   * lead to problems with the given refs being invoked more times than desired.
   */
  function useMergeRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    return (0, _react.useCallback)(function (current) {
      for (var ref of refs) {
        if (ref != null) {
          if (typeof ref === 'function') {
            ref(current);
          } else {
            ref.current = current;
          }
        }
      }
    }, [].concat(refs) // eslint-disable-line react-hooks/exhaustive-deps
    );
  }
},306,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAnimatedProps;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _useRefEffect = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _AnimatedProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _react = _$$_REQUIRE(_dependencyMap[6]);
  function useAnimatedProps(props) {
    var _useReducer = (0, _react.useReducer)(function (count) {
        return count + 1;
      }, 0),
      _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
      scheduleUpdate = _useReducer2[1];
    var onUpdateRef = (0, _react.useRef)(null);

    // TODO: Only invalidate `node` if animated props or `style` change. In the
    // previous implementation, we permitted `style` to override props with the
    // same name property name as styles, so we can probably continue doing that.
    // The ordering of other props *should* not matter.
    var node = (0, _react.useMemo)(function () {
      return new _AnimatedProps.default(props, function () {
        return onUpdateRef.current == null ? undefined : onUpdateRef.current();
      });
    }, [props]);
    var useNativePropsInFabric = _ReactNativeFeatureFlags.default.shouldUseSetNativePropsInFabric();
    useAnimatedPropsLifecycle(node);

    // TODO: This "effect" does three things:
    //
    //   1) Call `setNativeView`.
    //   2) Update `onUpdateRef`.
    //   3) Update listeners for `AnimatedEvent` props.
    //
    // Ideally, each of these would be separate "effects" so that they are not
    // unnecessarily re-run when irrelevant dependencies change. For example, we
    // should be able to hoist all `AnimatedEvent` props and only do #3 if either
    // the `AnimatedEvent` props change or `instance` changes.
    //
    // But there is no way to transparently compose three separate callback refs,
    // so we just combine them all into one for now.
    var refEffect = (0, _react.useCallback)(function (instance) {
      // NOTE: This may be called more often than necessary (e.g. when `props`
      // changes), but `setNativeView` already optimizes for that.
      node.setNativeView(instance);

      // NOTE: When using the JS animation driver, this callback is called on
      // every animation frame. When using the native driver, this callback is
      // called when the animation completes.
      onUpdateRef.current = function () {
        if (typeof instance !== 'object' || typeof (instance == null ? undefined : instance.setNativeProps) !== 'function' || isFabricInstance(instance) && !useNativePropsInFabric) {
          // Schedule an update for this component to update `reducedProps`,
          // but do not compute it immediately. If a parent also updated, we
          // need to merge those new props in before updating.
          scheduleUpdate();
        } else if (!node.__isNative) {
          // $FlowIgnore[not-a-function] - Assume it's still a function.
          // $FlowFixMe[incompatible-use]
          instance.setNativeProps(node.__getAnimatedValue());
        }
      };
      var target = getEventTarget(instance);
      var events = [];
      for (var propName in props) {
        var propValue = props[propName];
        if (propValue instanceof _$$_REQUIRE(_dependencyMap[7]).AnimatedEvent && propValue.__isNative) {
          propValue.__attach(target, propName);
          events.push([propName, propValue]);
        }
      }
      return function () {
        onUpdateRef.current = null;
        for (var _ref of events) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var _propName = _ref2[0];
          var _propValue = _ref2[1];
          _propValue.__detach(target, _propName);
        }
      };
    }, [props, node, useNativePropsInFabric]);
    var callbackRef = (0, _useRefEffect.default)(refEffect);
    return [reduceAnimatedProps(node), callbackRef];
  }
  function reduceAnimatedProps(node) {
    // Force `collapsable` to be false so that the native view is not flattened.
    // Flattened views cannot be accurately referenced by the native driver.
    return Object.assign({}, node.__getValue(), {
      collapsable: false
    });
  }

  /**
   * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`
   * and `__detach`. However, this is more complicated because `AnimatedProps`
   * uses reference counting to determine when to recursively detach its children
   * nodes. So in order to optimize this, we avoid detaching until the next attach
   * unless we are unmounting.
   */
  function useAnimatedPropsLifecycle(node) {
    var prevNodeRef = (0, _react.useRef)(null);
    var isUnmountingRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(function () {
      // It is ok for multiple components to call `flushQueue` because it noops
      // if the queue is empty. When multiple animated components are mounted at
      // the same time. Only first component flushes the queue and the others will noop.
      _NativeAnimatedHelper.default.API.flushQueue();
    });
    (0, _react.useLayoutEffect)(function () {
      isUnmountingRef.current = false;
      return function () {
        isUnmountingRef.current = true;
      };
    }, []);
    (0, _react.useLayoutEffect)(function () {
      node.__attach();
      if (prevNodeRef.current != null) {
        var prevNode = prevNodeRef.current;
        // TODO: Stop restoring default values (unless `reset` is called).
        prevNode.__restoreDefaultValues();
        prevNode.__detach();
        prevNodeRef.current = null;
      }
      return function () {
        if (isUnmountingRef.current) {
          // NOTE: Do not restore default values on unmount, see D18197735.
          node.__detach();
        } else {
          prevNodeRef.current = node;
        }
      };
    }, [node]);
  }
  function getEventTarget(instance) {
    return typeof instance === 'object' && typeof (instance == null ? undefined : instance.getScrollableNode) === 'function' ?
    // $FlowFixMe[incompatible-use] - Legacy instance assumptions.
    instance.getScrollableNode() : instance;
  }

  // $FlowFixMe[unclear-type] - Legacy instance assumptions.
  function isFabricInstance(instance) {
    var _instance$getScrollRe;
    return (0, _$$_REQUIRE(_dependencyMap[8]).isPublicInstance)(instance) ||
    // Some components have a setNativeProps function but aren't a host component
    // such as lists like FlatList and SectionList. These should also use
    // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying
    // host component. This crazy hack is essentially special casing those lists and
    // ScrollView itself to use forceUpdate in Fabric.
    // If these components end up using forwardRef then these hacks can go away
    // as instance would actually be the underlying host component and the above check
    // would be sufficient.
    (0, _$$_REQUIRE(_dependencyMap[8]).isPublicInstance)(instance == null ? undefined : instance.getNativeScrollRef == null ? undefined : instance.getNativeScrollRef()) || (0, _$$_REQUIRE(_dependencyMap[8]).isPublicInstance)(instance == null ? undefined : instance.getScrollResponder == null ? undefined : (_instance$getScrollRe = instance.getScrollResponder()) == null ? undefined : _instance$getScrollRe.getNativeScrollRef == null ? undefined : _instance$getScrollRe.getNativeScrollRef());
  }
},307,[1,26,108,308,282,296,153,300,309]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useRefEffect;
  var _react = _$$_REQUIRE(_dependencyMap[0]);
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * Constructs a callback ref that provides similar semantics as `useEffect`. The
   * supplied `effect` callback will be called with non-null component instances.
   * The `effect` callback can also optionally return a cleanup function.
   *
   * When a component is updated or unmounted, the cleanup function is called. The
   * `effect` callback will then be called again, if applicable.
   *
   * When a new `effect` callback is supplied, the previously returned cleanup
   * function will be called before the new `effect` callback is called with the
   * same instance.
   *
   * WARNING: The `effect` callback should be stable (e.g. using `useCallback`).
   */
  function useRefEffect(effect) {
    var cleanupRef = (0, _react.useRef)(undefined);
    return (0, _react.useCallback)(function (instance) {
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = undefined;
      }
      if (instance != null) {
        cleanupRef.current = effect(instance);
      }
    }, [effect]);
  }
},308,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isPublicInstance = isPublicInstance;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * IMPORTANT!!
   *
   * This module cannot import `ReactFabric` (directly or indirectly)
   * because it can be used by apps only using the legacy renderer.
   * In that case `nativeFabricUIManager` isn't defined and `ReactFabric` throws.
   */

  function isPublicInstance(maybeInstance) {
    return maybeInstance != null && (
    // TODO: implement a better check when the instance is defined in the React Native repository.
    maybeInstance.__nativeTag != null ||
    // TODO: remove this check when syncing the new version of the renderer from React to React Native.
    isLegacyFabricInstance(maybeInstance));
  }
  function isLegacyFabricInstance(maybeInstance) {
    /* eslint-disable dot-notation */
    return maybeInstance != null &&
    // $FlowExpectedError[incompatible-use]
    maybeInstance['_internalInstanceHandle'] != null && maybeInstance['_internalInstanceHandle'].stateNode != null && maybeInstance['_internalInstanceHandle'].stateNode.canonical != null;
  }
},309,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedAddition = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedAddition, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedAddition);
    function AnimatedAddition(a, b) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedAddition);
      _this = _super.call(this);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _createClass2.default)(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedAddition.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedAddition;
  }(_AnimatedWithChildren2.default);
},310,[1,5,6,10,13,15,12,291,288,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedDiffClamp = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedDiffClamp, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedDiffClamp);
    function AnimatedDiffClamp(a, min, max) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedDiffClamp);
      _this = _super.call(this);
      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }
    (0, _createClass2.default)(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDiffClamp.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();
        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);
    return AnimatedDiffClamp;
  }(_AnimatedWithChildren2.default);
},311,[1,5,6,10,13,15,12,291,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedDivision = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedDivision, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedDivision);
    function AnimatedDivision(a, b) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedDivision);
      _this = _super.call(this);
      _this._warnedAboutDivideByZero = false;
      if (b === 0 || b instanceof _AnimatedNode.default && b.__getValue() === 0) {
        console.error('Detected potential division by zero in AnimatedDivision');
      }
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _createClass2.default)(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();
        var b = this._b.__getValue();
        if (b === 0) {
          // Prevent spamming the console/LogBox
          if (!this._warnedAboutDivideByZero) {
            console.error('Detected division by zero in AnimatedDivision');
            this._warnedAboutDivideByZero = true;
          }
          // Passing infinity/NaN to Fabric will cause a native crash
          return 0;
        }
        this._warnedAboutDivideByZero = false;
        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedDivision;
  }(_AnimatedWithChildren2.default);
},312,[1,5,6,10,13,15,12,291,295,288,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedModulo = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedModulo, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedModulo);
    function AnimatedModulo(a, modulus) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedModulo);
      _this = _super.call(this);
      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }
    (0, _createClass2.default)(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedModulo.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);
    return AnimatedModulo;
  }(_AnimatedWithChildren2.default);
},313,[1,5,6,10,13,15,12,291,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedMultiplication = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedMultiplication, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedMultiplication);
    function AnimatedMultiplication(a, b) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedMultiplication);
      _this = _super.call(this);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _createClass2.default)(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedMultiplication.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedMultiplication;
  }(_AnimatedWithChildren2.default);
},314,[1,5,6,10,13,15,12,291,288,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedSubtraction = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedSubtraction, _AnimatedWithChildren);
    var _super = _createSuper(AnimatedSubtraction);
    function AnimatedSubtraction(a, b) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedSubtraction);
      _this = _super.call(this);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _createClass2.default)(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedSubtraction.prototype), "__makeNative", this).call(this, platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedSubtraction.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedSubtraction;
  }(_AnimatedWithChildren2.default);
},315,[1,5,6,10,13,15,12,291,288,294]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var AnimatedTracking = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedTracking, _AnimatedNode);
    var _super = _createSuper(AnimatedTracking);
    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedTracking);
      _this = _super.call(this);
      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(animationConfig);
      _this._callback = callback;
      _this.__attach();
      return _this;
    }
    (0, _createClass2.default)(AnimatedTracking, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.__isNative = true;
        this._parent.__makeNative(platformConfig);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTracking.prototype), "__makeNative", this).call(this, platformConfig);
        this._value.__makeNative(platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
        if (this._useNativeDriver) {
          // when the tracking starts we need to convert this node to a "native node"
          // so that the parent node will be made "native" too. This is necessary as
          // if we don't do this `update` method will get called. At that point it
          // may be too late as it would mean the JS driver has already started
          // updating node values
          var platformConfig = this._animationConfig.platformConfig;
          this.__makeNative(platformConfig);
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(Object.assign({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var animation = new this._animationClass(Object.assign({}, this._animationConfig, {
          // remove toValue from the config as it's a ref to Animated.Value
          toValue: undefined
        }));
        var animationConfig = animation.__getNativeAnimationConfig();
        return {
          type: 'tracking',
          animationId: _NativeAnimatedHelper.default.generateNewAnimationId(),
          animationConfig: animationConfig,
          toValue: this._parent.__getNativeTag(),
          value: this._value.__getNativeTag()
        };
      }
    }]);
    return AnimatedTracking;
  }(_AnimatedNode2.default);
},316,[1,5,6,10,13,15,12,282,295]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _AnimatedImplementation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _AnimatedInterpolation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AnimatedValueXY = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  /**
   * Animations are a source of flakiness in snapshot testing. This mock replaces
   * animation functions from AnimatedImplementation with empty animations for
   * predictability in tests. When possible the animation will run immediately
   * to the final state.
   */

  // Prevent any callback invocation from recursively triggering another
  // callback, which may trigger another animation
  var inAnimationCallback = false;
  function mockAnimationStart(start) {
    return function (callback) {
      var guardedCallback = callback == null ? callback : function () {
        if (inAnimationCallback) {
          console.warn('Ignoring recursive animation callback when running mock animations');
          return;
        }
        inAnimationCallback = true;
        try {
          callback.apply(undefined, arguments);
        } finally {
          inAnimationCallback = false;
        }
      };
      start(guardedCallback);
    };
  }
  var emptyAnimation = {
    start: function start() {},
    stop: function stop() {},
    reset: function reset() {},
    _startNativeLoop: function _startNativeLoop() {},
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };
  var mockCompositeAnimation = function mockCompositeAnimation(animations) {
    return Object.assign({}, emptyAnimation, {
      start: mockAnimationStart(function (callback) {
        animations.forEach(function (animation) {
          return animation.start();
        });
        callback == null ? undefined : callback({
          finished: true
        });
      })
    });
  };
  var spring = function spring(value, config) {
    var anyValue = value;
    return Object.assign({}, emptyAnimation, {
      start: mockAnimationStart(function (callback) {
        anyValue.setValue(config.toValue);
        callback == null ? undefined : callback({
          finished: true
        });
      })
    });
  };
  var timing = function timing(value, config) {
    var anyValue = value;
    return Object.assign({}, emptyAnimation, {
      start: mockAnimationStart(function (callback) {
        anyValue.setValue(config.toValue);
        callback == null ? undefined : callback({
          finished: true
        });
      })
    });
  };
  var decay = function decay(value, config) {
    return emptyAnimation;
  };
  var sequence = function sequence(animations) {
    return mockCompositeAnimation(animations);
  };
  var parallel = function parallel(animations, config) {
    return mockCompositeAnimation(animations);
  };
  var delay = function delay(time) {
    return emptyAnimation;
  };
  var stagger = function stagger(time, animations) {
    return mockCompositeAnimation(animations);
  };
  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$iterations = _ref.iterations,
      iterations = _ref$iterations === undefined ? -1 : _ref$iterations;
    return emptyAnimation;
  };
  var _default = exports.default = {
    Value: _AnimatedValue.default,
    ValueXY: _AnimatedValueXY.default,
    Color: _AnimatedColor.default,
    Interpolation: _AnimatedInterpolation.default,
    Node: _AnimatedNode.default,
    decay: decay,
    timing: timing,
    spring: spring,
    add: _AnimatedImplementation.default.add,
    subtract: _AnimatedImplementation.default.subtract,
    divide: _AnimatedImplementation.default.divide,
    multiply: _AnimatedImplementation.default.multiply,
    modulo: _AnimatedImplementation.default.modulo,
    diffClamp: _AnimatedImplementation.default.diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: _AnimatedImplementation.default.event,
    createAnimatedComponent: _createAnimatedComponent.default,
    attachNativeEvent: _$$_REQUIRE(_dependencyMap[8]).attachNativeEvent,
    forkEvent: _AnimatedImplementation.default.forkEvent,
    unforkEvent: _AnimatedImplementation.default.unforkEvent,
    Event: _$$_REQUIRE(_dependencyMap[8]).AnimatedEvent
  };
},317,[1,280,305,287,291,295,288,301,300]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _FlatList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * @see https://github.com/facebook/react-native/commit/b8c8562
   */var FlatListWithEventThrottle = React.forwardRef(
  // $FlowFixMe[incompatible-call]
  function (props, ref) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_FlatList.default, Object.assign({}, props, {
      ref: ref
    }));
  });
  var _default = exports.default = (0, _createAnimatedComponent.default)(FlatListWithEventThrottle);
},318,[1,319,305,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _memoizeOne = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);
  var _excluded = ["numColumns", "columnWrapperStyle", "removeClippedSubviews", "strictMode"];
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var React = _$$_REQUIRE(_dependencyMap[9]);
  /**
   * Default Props Helper Functions
   * Use the following helper functions for default values
   */

  // removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)
  function removeClippedSubviewsOrDefault(removeClippedSubviews) {
    return removeClippedSubviews != null ? removeClippedSubviews : true;
  }

  // numColumnsOrDefault(this.props.numColumns)
  function numColumnsOrDefault(numColumns) {
    return numColumns != null ? numColumns : 1;
  }
  function isArrayLike(data) {
    // $FlowExpectedError[incompatible-use]
    return typeof Object(data).length === 'number';
  }
  /**
   * A performant interface for rendering simple, flat lists, supporting the most handy features:
   *
   *  - Fully cross-platform.
   *  - Optional horizontal mode.
   *  - Configurable viewability callbacks.
   *  - Header support.
   *  - Footer support.
   *  - Separator support.
   *  - Pull to Refresh.
   *  - Scroll loading.
   *  - ScrollToIndex support.
   *
   * If you need section support, use [`<SectionList>`](docs/sectionlist.html).
   *
   * Minimal Example:
   *
   *     <FlatList
   *       data={[{key: 'a'}, {key: 'b'}]}
   *       renderItem={({item}) => <Text>{item.key}</Text>}
   *     />
   *
   * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.
   *
   * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will
   *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even
   *   if the components rendered in `MyListItem` did not have such optimizations.
   * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render
   *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it
   *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will
   *   not show any changes.
   * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.
   *
   *
   *     class MyListItem extends React.PureComponent {
   *       _onPress = () => {
   *         this.props.onPressItem(this.props.id);
   *       };
   *
   *       render() {
   *         const textColor = this.props.selected ? "red" : "black";
   *         return (
   *           <TouchableOpacity onPress={this._onPress}>
   *             <View>
   *               <Text style={{ color: textColor }}>
   *                 {this.props.title}
   *               </Text>
   *             </View>
   *           </TouchableOpacity>
   *         );
   *       }
   *     }
   *
   *     class MultiSelectList extends React.PureComponent {
   *       state = {selected: (new Map(): Map<string, boolean>)};
   *
   *       _keyExtractor = (item, index) => item.id;
   *
   *       _onPressItem = (id: string) => {
   *         // updater functions are preferred for transactional updates
   *         this.setState((state) => {
   *           // copy the map rather than modifying state.
   *           const selected = new Map(state.selected);
   *           selected.set(id, !selected.get(id)); // toggle
   *           return {selected};
   *         });
   *       };
   *
   *       _renderItem = ({item}) => (
   *         <MyListItem
   *           id={item.id}
   *           onPressItem={this._onPressItem}
   *           selected={!!this.state.selected.get(item.id)}
   *           title={item.title}
   *         />
   *       );
   *
   *       render() {
   *         return (
   *           <FlatList
   *             data={this.props.data}
   *             extraData={this.state}
   *             keyExtractor={this._keyExtractor}
   *             renderItem={this._renderItem}
   *           />
   *         );
   *       }
   *     }
   *
   * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),
   * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed
   * here, along with the following caveats:
   *
   * - Internal state is not preserved when content scrolls out of the render window. Make sure all
   *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
   * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
   *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
   *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
   *   changes. This includes the `data` prop and parent component state.
   * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
   *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see
   *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
   *   and we are working on improving it behind the scenes.
   * - By default, the list looks for a `key` prop on each item and uses that for the React key.
   *   Alternatively, you can provide a custom `keyExtractor` prop.
   *
   * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.
   */
  var FlatList = /*#__PURE__*/function (_React$PureComponent) {
    (0, _inherits2.default)(FlatList, _React$PureComponent);
    var _super = _createSuper(FlatList);
    function FlatList(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, FlatList);
      _this = _super.call(this, _props);
      _this._virtualizedListPairs = [];
      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };
      _this._getItem = function (data, index) {
        var numColumns = numColumnsOrDefault(_this.props.numColumns);
        if (numColumns > 1) {
          var ret = [];
          for (var kk = 0; kk < numColumns; kk++) {
            var itemIndex = index * numColumns + kk;
            if (itemIndex < data.length) {
              var _item = data[itemIndex];
              ret.push(_item);
            }
          }
          return ret;
        } else {
          return data[index];
        }
      };
      _this._getItemCount = function (data) {
        // Legacy behavior of FlatList was to forward "undefined" length if invalid
        // data like a non-arraylike object is passed. VirtualizedList would then
        // coerce this, and the math would work out to no-op. For compatibility, if
        // invalid data is passed, we tell VirtualizedList there are zero items
        // available to prevent it from trying to read from the invalid data
        // (without propagating invalidly typed data).
        if (data != null && isArrayLike(data)) {
          var numColumns = numColumnsOrDefault(_this.props.numColumns);
          return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;
        } else {
          return 0;
        }
      };
      _this._keyExtractor = function (items, index) {
        var _this$props$keyExtrac;
        var numColumns = numColumnsOrDefault(_this.props.numColumns);
        var keyExtractor = (_this$props$keyExtrac = _this.props.keyExtractor) != null ? _this$props$keyExtrac : _$$_REQUIRE(_dependencyMap[10]).keyExtractor;
        if (numColumns > 1) {
          _$$_REQUIRE(_dependencyMap[11])(Array.isArray(items), "FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.", numColumns);
          return items.map(function (item, kk) {
            return keyExtractor(item, index * numColumns + kk);
          }).join(':');
        }

        // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array
        return keyExtractor(items, index);
      };
      _this._renderer = function (ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData
      // $FlowFixMe[missing-local-annot]
      ) {
        var cols = numColumnsOrDefault(numColumns);
        var render = function render(props) {
          if (ListItemComponent) {
            // $FlowFixMe[not-a-component] Component isn't valid
            // $FlowFixMe[incompatible-type-arg] Component isn't valid
            // $FlowFixMe[incompatible-return] Component isn't valid
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(ListItemComponent, Object.assign({}, props));
          } else if (renderItem) {
            // $FlowFixMe[incompatible-call]
            return renderItem(props);
          } else {
            return null;
          }
        };
        var renderProp = function renderProp(info) {
          if (cols > 1) {
            var _item2 = info.item,
              _index = info.index;
            _$$_REQUIRE(_dependencyMap[11])(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[12]), {
              style: _$$_REQUIRE(_dependencyMap[13]).compose(styles.row, columnWrapperStyle),
              children: _item2.map(function (it, kk) {
                var element = render({
                  // $FlowFixMe[incompatible-call]
                  item: it,
                  index: _index * cols + kk,
                  separators: info.separators
                });
                return element != null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
                  children: element
                }, kk) : null;
              })
            });
          } else {
            return render(info);
          }
        };
        return ListItemComponent ? {
          ListItemComponent: renderProp
        } : {
          renderItem: renderProp
        };
      };
      // $FlowFixMe[missing-local-annot]
      _this._memoizedRenderer = (0, _memoizeOne.default)(_this._renderer);
      _this._checkProps(_this.props);
      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
           * comment suppresses an error found when Flow v0.63 was deployed. To
           * see the error delete this comment and run Flow. */
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(
          // NOTE: we use a wrapper function to allow the actual callback to change
          // while still keeping the function provided to native to be stable
          function () {
            var _this$props;
            _$$_REQUIRE(_dependencyMap[11])(_this.props.onViewableItemsChanged, "Changing the nullability of onViewableItemsChanged is not supported. Once a function or null is supplied that cannot be changed.");
            return (_this$props = _this.props).onViewableItemsChanged.apply(_this$props, arguments);
          })
        });
      }
      return _this;
    }

    // $FlowFixMe[missing-local-annot]
    (0, _createClass2.default)(FlatList, [{
      key: "scrollToEnd",
      value:
      /**
       * Scrolls to the end of the content. May be janky without `getItemLayout` prop.
       */
      function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }

      /**
       * Scrolls to the item at the specified index such that it is positioned in the viewable area
       * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the
       * middle. `viewOffset` is a fixed number of pixels to offset the final target position.
       *
       * Note: cannot scroll to locations outside the render window without specifying the
       * `getItemLayout` prop.
       */
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }

      /**
       * Requires linear scan through data - use `scrollToIndex` instead if possible.
       *
       * Note: cannot scroll to locations outside the render window without specifying the
       * `getItemLayout` prop.
       */
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }

      /**
       * Scroll to a specific content pixel offset in the list.
       *
       * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList
       */
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }

      /**
       * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.
       * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
       * taps on items or by navigation actions.
       */
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }

      /**
       * Displays the scroll indicators momentarily.
       *
       * @platform ios
       */
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }

      /**
       * Provides a handle to the underlying scroll responder.
       */
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }

      /**
       * Provides a reference to the underlying host component
       */
    }, {
      key: "getNativeScrollRef",
      value: function getNativeScrollRef() {
        if (this._listRef) {
          /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing
           * TextInput typing */
          return this._listRef.getScrollRef();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        _$$_REQUIRE(_dependencyMap[11])(prevProps.numColumns === this.props.numColumns, "Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component.");
        _$$_REQUIRE(_dependencyMap[11])(prevProps.onViewableItemsChanged == null === (this.props.onViewableItemsChanged == null), 'Changing onViewableItemsChanged nullability on the fly is not supported');
        _$$_REQUIRE(_dependencyMap[11])(!_$$_REQUIRE(_dependencyMap[14])(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');
        _$$_REQUIRE(_dependencyMap[11])(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');
        this._checkProps(this.props);
      }
    }, {
      key: "_checkProps",
      value:
      // $FlowFixMe[missing-local-annot]
      function _checkProps(props) {
        var getItem = props.getItem,
          getItemCount = props.getItemCount,
          horizontal = props.horizontal,
          columnWrapperStyle = props.columnWrapperStyle,
          onViewableItemsChanged = props.onViewableItemsChanged,
          viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        var numColumns = numColumnsOrDefault(this.props.numColumns);
        _$$_REQUIRE(_dependencyMap[11])(!getItem && !getItemCount, 'FlatList does not support custom data formats.');
        if (numColumns > 1) {
          _$$_REQUIRE(_dependencyMap[11])(!horizontal, 'numColumns does not support horizontal.');
        } else {
          _$$_REQUIRE(_dependencyMap[11])(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }
        _$$_REQUIRE(_dependencyMap[11])(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), "FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.");
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _this$props$keyExtrac2;
        var numColumns = numColumnsOrDefault(this.props.numColumns);
        var keyExtractor = (_this$props$keyExtrac2 = this.props.keyExtractor) != null ? _this$props$keyExtrac2 : _$$_REQUIRE(_dependencyMap[10]).keyExtractor;
        v.item.forEach(function (item, ii) {
          _$$_REQUIRE(_dependencyMap[11])(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(Object.assign({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged
      // $FlowFixMe[missing-local-annot]
      ) {
        var _this2 = this;
        return function (info) {
          var numColumns = numColumnsOrDefault(_this2.props.numColumns);
          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var changed = [];
              var viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(changed, v);
              });
              onViewableItemsChanged({
                viewableItems: viewableItems,
                changed: changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
          numColumns = _this$props2.numColumns,
          columnWrapperStyle = _this$props2.columnWrapperStyle,
          _removeClippedSubviews = _this$props2.removeClippedSubviews,
          _this$props2$strictMo = _this$props2.strictMode,
          strictMode = _this$props2$strictMo === undefined ? false : _this$props2$strictMo,
          restProps = (0, _objectWithoutProperties2.default)(_this$props2, _excluded);
        var renderer = strictMode ? this._memoizedRenderer : this._renderer;
        return (
          /*#__PURE__*/
          // $FlowFixMe[incompatible-exact] - `restProps` (`Props`) is inexact.
          (0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[10]).VirtualizedList, Object.assign({}, restProps, {
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs,
            removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews)
          }, renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData)))
        );
      }
    }]);
    return FlatList;
  }(React.PureComponent);
  var styles = _$$_REQUIRE(_dependencyMap[13]).create({
    row: {
      flexDirection: 'row'
    }
  });
  module.exports = FlatList;
},319,[1,119,5,6,13,15,12,320,194,153,321,24,156,196,213]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === 'number' && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
      if (!isEqual(newInputs[i], lastInputs[i])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual) {
    if (isEqual === undefined) {
      isEqual = areInputsEqual;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
        return lastResult;
      }
      lastResult = resultFn.apply(this, newArgs);
      calledOnce = true;
      lastThis = this;
      lastArgs = newArgs;
      return lastResult;
    }
    return memoized;
  }
  module.exports = memoizeOne;
},320,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  module.exports = {
    keyExtractor: _$$_REQUIRE(_dependencyMap[0]).keyExtractor,
    get VirtualizedList() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },
    get VirtualizedSectionList() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },
    get VirtualizedListContextResetter() {
      var VirtualizedListContext = _$$_REQUIRE(_dependencyMap[3]);
      return VirtualizedListContext.VirtualizedListContextResetter;
    },
    get ViewabilityHelper() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },
    get FillRateHelper() {
      return _$$_REQUIRE(_dependencyMap[5]);
    }
  };
},321,[322,323,336,333,331,328]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.computeWindowedRenderLimits = computeWindowedRenderLimits;
  exports.elementsThatOverlapOffsets = elementsThatOverlapOffsets;
  exports.keyExtractor = keyExtractor;
  exports.newRangeCount = newRangeCount;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Used to find the indices of the frames that overlap the given offsets. Useful for finding the
   * items that bound different windows of content, such as the visible area or the buffered overscan
   * area.
   */
  function elementsThatOverlapOffsets(offsets, props, listMetrics) {
    var zoomScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var itemCount = props.getItemCount(props.data);
    var result = [];
    for (var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {
      var currentOffset = offsets[offsetIndex];
      var left = 0;
      var right = itemCount - 1;
      while (left <= right) {
        var mid = left + Math.floor((right - left) / 2);
        var frame = listMetrics.getCellMetricsApprox(mid, props);
        var scaledOffsetStart = frame.offset * zoomScale;
        var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;

        // We want the first frame that contains the offset, with inclusive bounds. Thus, for the
        // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.
        if (mid === 0 && currentOffset < scaledOffsetStart || mid !== 0 && currentOffset <= scaledOffsetStart) {
          right = mid - 1;
        } else if (currentOffset > scaledOffsetEnd) {
          left = mid + 1;
        } else {
          result[offsetIndex] = mid;
          break;
        }
      }
    }
    return result;
  }

  /**
   * Computes the number of elements in the `next` range that are new compared to the `prev` range.
   * Handy for calculating how many new items will be rendered when the render window changes so we
   * can restrict the number of new items render at once so that content can appear on the screen
   * faster.
   */
  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  /**
   * Custom logic for determining which items should be rendered given the current frame and scroll
   * metrics, as well as the previous render state. The algorithm may evolve over time, but generally
   * prioritizes the visible area first, then expands that with overscan regions ahead and behind,
   * biased in the direction of scroll.
   */
  function computeWindowedRenderLimits(props, maxToRenderPerBatch, windowSize, prev, listMetrics, scrollMetrics) {
    var itemCount = props.getItemCount(props.data);
    if (itemCount === 0) {
      return {
        first: 0,
        last: -1
      };
    }
    var offset = scrollMetrics.offset,
      velocity = scrollMetrics.velocity,
      visibleLength = scrollMetrics.visibleLength,
      _scrollMetrics$zoomSc = scrollMetrics.zoomScale,
      zoomScale = _scrollMetrics$zoomSc === undefined ? 1 : _scrollMetrics$zoomSc;

    // Start with visible area, then compute maximum overscan region by expanding from there, biased
    // in the direction of scroll. Total overscan area is capped, which should cap memory consumption
    // too.
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;

    // Considering velocity seems to introduce more churn than it's worth.
    var leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));

    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - 0.5 * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = listMetrics.getCellMetricsApprox(itemCount - 1, props).offset * zoomScale;
    if (lastItemOffset < overscanBegin) {
      // Entire list is before our overscan window
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    // Find the indices that correspond to the items at the render boundaries we're targeting.
    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props, listMetrics, zoomScale),
      _elementsThatOverlapO2 = (0, _slicedToArray2.default)(_elementsThatOverlapO, 4),
      overscanFirst = _elementsThatOverlapO2[0],
      first = _elementsThatOverlapO2[1],
      last = _elementsThatOverlapO2[2],
      overscanLast = _elementsThatOverlapO2[3];
    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };

    // We want to limit the number of new cells we're rendering per batch so that we can fill the
    // content on the screen quickly. If we rendered the entire overscan window at once, the user
    // could be staring at white space for a long time waiting for a bunch of offscreen content to
    // render.
    var newCellCount = newRangeCount(prev, visible);
    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        // If we fill the entire overscan range, we're done.
        break;
      }
      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);
      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        // We only want to stop if we've hit maxNewCells AND we cannot increment first or last
        // without rendering new items. This let's us preserve as many already rendered items as
        // possible, reducing render churn and keeping the rendered overscan range as large as
        // possible.
        break;
      }
      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }
        first--;
      }
      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }
        last++;
      }
    }
    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }
    return {
      first: first,
      last: last
    };
  }
  function keyExtractor(item, index) {
    if (typeof item === 'object' && (item == null ? undefined : item.key) != null) {
      return item.key;
    }
    if (typeof item === 'object' && (item == null ? undefined : item.id) != null) {
      return item.id;
    }
    return String(index);
  }
},322,[1,26]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);
  var _Batchinator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _clamp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _infoLog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  var _ChildListCollection = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));
  var _FillRateHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));
  var _ListMetricsAggregator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));
  var _StateSafePureComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));
  var _ViewabilityHelper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));
  var _VirtualizedListCellRenderer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[21]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[22]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var ON_EDGE_REACHED_EPSILON = 0.001;
  var _usedIndexForKey = false;
  var _keylessItemComponentName = '';
  function getScrollingThreshold(threshold, visibleLength) {
    return threshold * visibleLength / 2;
  }

  /**
   * Base implementation for the more convenient [`<FlatList>`](https://reactnative.dev/docs/flatlist)
   * and [`<SectionList>`](https://reactnative.dev/docs/sectionlist) components, which are also better
   * documented. In general, this should only really be used if you need more flexibility than
   * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.
   *
   * Virtualization massively improves memory consumption and performance of large lists by
   * maintaining a finite render window of active items and replacing all items outside of the render
   * window with appropriately sized blank space. The window adapts to scrolling behavior, and items
   * are rendered incrementally with low-pri (after any running interactions) if they are far from the
   * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.
   *
   * Some caveats:
   *
   * - Internal state is not preserved when content scrolls out of the render window. Make sure all
   *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
   * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
   *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
   *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
   *   changes. This includes the `data` prop and parent component state.
   * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
   *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see
   *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
   *   and we are working on improving it behind the scenes.
   * - By default, the list looks for a `key` or `id` prop on each item and uses that for the React key.
   *   Alternatively, you can provide a custom `keyExtractor` prop.
   * - As an effort to remove defaultProps, use helper functions when referencing certain props
   *
   */
  var VirtualizedList = /*#__PURE__*/function (_StateSafePureCompone) {
    (0, _inherits2.default)(VirtualizedList, _StateSafePureCompone);
    var _super = _createSuper(VirtualizedList);
    function VirtualizedList(_props) {
      var _this$props$updateCel, _this$props$maintainV, _this$props$maintainV2;
      var _this;
      (0, _classCallCheck2.default)(this, VirtualizedList);
      _this = _super.call(this, _props);
      // $FlowFixMe[missing-local-annot]
      _this._getScrollMetrics = function () {
        return _this._scrollMetrics;
      };
      // $FlowFixMe[missing-local-annot]
      _this._getOutermostParentListRef = function () {
        if (_this._isNestedWithSameOrientation()) {
          return _this.context.getOutermostParentListRef();
        } else {
          return (0, _assertThisInitialized2.default)(_this);
        }
      };
      _this._registerAsNestedChild = function (childList) {
        _this._nestedChildLists.add(childList.ref, childList.cellKey);
        if (_this._hasInteracted) {
          childList.ref.recordInteraction();
        }
      };
      _this._unregisterAsNestedChild = function (childList) {
        _this._nestedChildLists.remove(childList.ref);
      };
      _this._onUpdateSeparators = function (keys, newProps) {
        keys.forEach(function (key) {
          var ref = key != null && _this._cellRefs[key];
          ref && ref.updateSeparatorProps(newProps);
        });
      };
      _this._getSpacerKey = function (isVertical) {
        return isVertical ? 'height' : 'width';
      };
      _this._cellRefs = {};
      _this._listMetrics = new _ListMetricsAggregator.default();
      _this._footerLength = 0;
      // Used for preventing scrollToIndex from being called multiple times for initialScrollIndex
      _this._hasTriggeredInitialScrollToIndex = false;
      _this._hasInteracted = false;
      _this._hasMore = false;
      _this._hasWarned = {};
      _this._headerLength = 0;
      _this._hiPriInProgress = false;
      // flag to prevent infinite hiPri cell limit update
      _this._indicesToKeys = new Map();
      _this._lastFocusedCellKey = null;
      _this._nestedChildLists = new _ChildListCollection.default();
      _this._offsetFromParentVirtualizedList = 0;
      _this._pendingViewabilityUpdate = false;
      _this._prevParentOffset = 0;
      _this._scrollMetrics = {
        dOffset: 0,
        dt: 10,
        offset: 0,
        timestamp: 0,
        velocity: 0,
        visibleLength: 0,
        zoomScale: 1
      };
      _this._scrollRef = null;
      _this._sentStartForContentLength = 0;
      _this._sentEndForContentLength = 0;
      _this._viewabilityTuples = [];
      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
       * LTI update could not be added via codemod */
      _this._captureScrollRef = function (ref) {
        _this._scrollRef = ref;
      };
      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
       * LTI update could not be added via codemod */
      _this._defaultRenderScrollComponent = function (props) {
        var onRefresh = props.onRefresh;
        if (_this._isNestedWithSameOrientation()) {
          // $FlowFixMe[prop-missing] - Typing ReactNativeComponent revealed errors
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, Object.assign({}, props));
        } else if (onRefresh) {
          var _props$refreshing;
          (0, _invariant.default)(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify((_props$refreshing = props.refreshing) != null ? _props$refreshing : 'undefined') + '`');
          return (
            /*#__PURE__*/
            // $FlowFixMe[prop-missing] Invalid prop usage
            // $FlowFixMe[incompatible-use]
            (0, _jsxRuntime.jsx)(_reactNative.ScrollView, Object.assign({}, props, {
              refreshControl: props.refreshControl == null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.RefreshControl
              // $FlowFixMe[incompatible-type]
              , {
                refreshing: props.refreshing,
                onRefresh: onRefresh,
                progressViewOffset: props.progressViewOffset
              }) : props.refreshControl
            }))
          );
        } else {
          // $FlowFixMe[prop-missing] Invalid prop usage
          // $FlowFixMe[incompatible-use]
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ScrollView, Object.assign({}, props));
        }
      };
      _this._onCellLayout = function (e, cellKey, cellIndex) {
        var layoutHasChanged = _this._listMetrics.notifyCellLayout({
          cellIndex: cellIndex,
          cellKey: cellKey,
          layout: e.nativeEvent.layout,
          orientation: _this._orientation()
        });
        if (layoutHasChanged) {
          _this._scheduleCellsToRenderUpdate();
        }
        _this._triggerRemeasureForChildListsInCell(cellKey);
        _this._computeBlankness();
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
      };
      _this._onCellUnmount = function (cellKey) {
        delete _this._cellRefs[cellKey];
        _this._listMetrics.notifyCellUnmounted(cellKey);
      };
      _this._onLayout = function (e) {
        if (_this._isNestedWithSameOrientation()) {
          // Need to adjust our scroll metrics to be relative to our containing
          // VirtualizedList before we can make claims about list item viewability
          _this.measureLayoutRelativeToContainingList();
        } else {
          _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
        }
        _this.props.onLayout && _this.props.onLayout(e);
        _this._scheduleCellsToRenderUpdate();
        _this._maybeCallOnEdgeReached();
      };
      _this._onLayoutEmpty = function (e) {
        _this.props.onLayout && _this.props.onLayout(e);
      };
      _this._onLayoutFooter = function (e) {
        _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());
        _this._footerLength = _this._selectLength(e.nativeEvent.layout);
      };
      _this._onLayoutHeader = function (e) {
        _this._headerLength = _this._selectLength(e.nativeEvent.layout);
      };
      _this._onContentSizeChange = function (width, height) {
        _this._listMetrics.notifyListContentLayout({
          layout: {
            width: width,
            height: height
          },
          orientation: _this._orientation()
        });
        _this._maybeScrollToInitialScrollIndex(width, height);
        if (_this.props.onContentSizeChange) {
          _this.props.onContentSizeChange(width, height);
        }
        _this._scheduleCellsToRenderUpdate();
        _this._maybeCallOnEdgeReached();
      };
      /* Translates metrics from a scroll event in a parent VirtualizedList into
       * coordinates relative to the child list.
       */
      _this._convertParentScrollMetrics = function (metrics) {
        // Offset of the top of the nested list relative to the top of its parent's viewport
        var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
        // Child's visible length is the same as its parent's
        var visibleLength = metrics.visibleLength;
        var dOffset = offset - _this._scrollMetrics.offset;
        var contentLength = _this._listMetrics.getContentLength();
        return {
          visibleLength: visibleLength,
          contentLength: contentLength,
          offset: offset,
          dOffset: dOffset
        };
      };
      _this._onScroll = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList._onScroll(e);
        });
        if (_this.props.onScroll) {
          _this.props.onScroll(e);
        }
        var timestamp = e.timeStamp;
        var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
        var contentLength = _this._selectLength(e.nativeEvent.contentSize);
        var offset = _this._offsetFromScrollEvent(e);
        var dOffset = offset - _this._scrollMetrics.offset;
        if (_this._isNestedWithSameOrientation()) {
          if (_this._listMetrics.getContentLength() === 0) {
            // Ignore scroll events until onLayout has been called and we
            // know our offset from our offset from our parent
            return;
          }
          var _this$_convertParentS = _this._convertParentScrollMetrics({
            visibleLength: visibleLength,
            offset: offset
          });
          visibleLength = _this$_convertParentS.visibleLength;
          contentLength = _this$_convertParentS.contentLength;
          offset = _this$_convertParentS.offset;
          dOffset = _this$_convertParentS.dOffset;
        }
        var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
        var velocity = dOffset / dt;
        if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
          (0, _infoLog.default)("VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.", {
            dt: dt,
            prevDt: _this._scrollMetrics.dt,
            contentLength: contentLength
          });
          _this._hasWarned.perf = true;
        }

        // For invalid negative values (w/ RTL), set this to 1.
        var zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;
        _this._scrollMetrics = {
          dt: dt,
          dOffset: dOffset,
          offset: offset,
          timestamp: timestamp,
          velocity: velocity,
          visibleLength: visibleLength,
          zoomScale: zoomScale
        };
        if (_this.state.pendingScrollUpdateCount > 0) {
          _this.setState(function (state) {
            return {
              pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1
            };
          });
        }
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
        if (!_this.props) {
          return;
        }
        _this._maybeCallOnEdgeReached();
        if (velocity !== 0) {
          _this._fillRateHelper.activate();
        }
        _this._computeBlankness();
        _this._scheduleCellsToRenderUpdate();
      };
      _this._onScrollBeginDrag = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList._onScrollBeginDrag(e);
        });
        _this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.recordInteraction();
        });
        _this._hasInteracted = true;
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };
      _this._onScrollEndDrag = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList._onScrollEndDrag(e);
        });
        var velocity = e.nativeEvent.velocity;
        if (velocity) {
          _this._scrollMetrics.velocity = _this._selectOffset(velocity);
        }
        _this._computeBlankness();
        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };
      _this._onMomentumScrollBegin = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList._onMomentumScrollBegin(e);
        });
        _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
      };
      _this._onMomentumScrollEnd = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList._onMomentumScrollEnd(e);
        });
        _this._scrollMetrics.velocity = 0;
        _this._computeBlankness();
        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };
      _this._updateCellsToRender = function () {
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
        _this.setState(function (state, props) {
          var cellsAroundViewport = _this._adjustCellsAroundViewport(props, state.cellsAroundViewport, state.pendingScrollUpdateCount);
          var renderMask = VirtualizedList._createRenderMask(props, cellsAroundViewport, _this._getNonViewportRenderRegions(props));
          if (cellsAroundViewport.first === state.cellsAroundViewport.first && cellsAroundViewport.last === state.cellsAroundViewport.last && renderMask.equals(state.renderMask)) {
            return null;
          }
          return {
            cellsAroundViewport: cellsAroundViewport,
            renderMask: renderMask
          };
        });
      };
      _this._createViewToken = function (index, isViewable, props
      // $FlowFixMe[missing-local-annot]
      ) {
        var data = props.data,
          getItem = props.getItem;
        var item = getItem(data, index);
        return {
          index: index,
          item: item,
          key: VirtualizedList._keyExtractor(item, index, props),
          isViewable: isViewable
        };
      };
      _this._getNonViewportRenderRegions = function (props) {
        // Keep a viewport's worth of content around the last focused cell to allow
        // random navigation around it without any blanking. E.g. tabbing from one
        // focused item out of viewport to another.
        if (!(_this._lastFocusedCellKey && _this._cellRefs[_this._lastFocusedCellKey])) {
          return [];
        }
        var lastFocusedCellRenderer = _this._cellRefs[_this._lastFocusedCellKey];
        var focusedCellIndex = lastFocusedCellRenderer.props.index;
        var itemCount = props.getItemCount(props.data);

        // The last cell we rendered may be at a new index. Bail if we don't know
        // where it is.
        if (focusedCellIndex >= itemCount || VirtualizedList._getItemKey(props, focusedCellIndex) !== _this._lastFocusedCellKey) {
          return [];
        }
        var first = focusedCellIndex;
        var heightOfCellsBeforeFocused = 0;
        for (var i = first - 1; i >= 0 && heightOfCellsBeforeFocused < _this._scrollMetrics.visibleLength; i--) {
          first--;
          heightOfCellsBeforeFocused += _this._listMetrics.getCellMetricsApprox(i, props).length;
        }
        var last = focusedCellIndex;
        var heightOfCellsAfterFocused = 0;
        for (var _i = last + 1; _i < itemCount && heightOfCellsAfterFocused < _this._scrollMetrics.visibleLength; _i++) {
          last++;
          heightOfCellsAfterFocused += _this._listMetrics.getCellMetricsApprox(_i, props).length;
        }
        return [{
          first: first,
          last: last
        }];
      };
      _this._checkProps(_props);
      _this._fillRateHelper = new _FillRateHelper.default(_this._listMetrics);
      _this._updateCellsToRenderBatcher = new _Batchinator.default(_this._updateCellsToRender, (_this$props$updateCel = _this.props.updateCellsBatchingPeriod) != null ? _this$props$updateCel : 50);
      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new _ViewabilityHelper.default(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else {
        var _this$props = _this.props,
          onViewableItemsChanged = _this$props.onViewableItemsChanged,
          viewabilityConfig = _this$props.viewabilityConfig;
        if (onViewableItemsChanged) {
          _this._viewabilityTuples.push({
            viewabilityHelper: new _ViewabilityHelper.default(viewabilityConfig),
            onViewableItemsChanged: onViewableItemsChanged
          });
        }
      }
      var initialRenderRegion = VirtualizedList._initialRenderRegion(_props);
      var minIndexForVisible = (_this$props$maintainV = (_this$props$maintainV2 = _this.props.maintainVisibleContentPosition) == null ? undefined : _this$props$maintainV2.minIndexForVisible) != null ? _this$props$maintainV : 0;
      _this.state = {
        cellsAroundViewport: initialRenderRegion,
        renderMask: VirtualizedList._createRenderMask(_props, initialRenderRegion),
        firstVisibleItemKey: _this.props.getItemCount(_this.props.data) > minIndexForVisible ? VirtualizedList._getItemKey(_this.props, minIndexForVisible) : null,
        // When we have a non-zero initialScrollIndex, we will receive a
        // scroll event later so this will prevent the window from updating
        // until we get a valid offset.
        pendingScrollUpdateCount: _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 ? 1 : 0
      };
      return _this;
    }
    (0, _createClass2.default)(VirtualizedList, [{
      key: "scrollToEnd",
      value:
      // scrollToEnd may be janky without getItemLayout prop
      function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;
        if (veryLast < 0) {
          return;
        }
        var frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);
        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        // TODO: consider using `ref.scrollToEnd` directly
        this.scrollToOffset({
          animated: animated,
          offset: offset
        });
      }

      // scrollToIndex may be janky without getItemLayout prop
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _this$props2 = this.props,
          data = _this$props2.data,
          getItemCount = _this$props2.getItemCount,
          getItemLayout = _this$props2.getItemLayout,
          onScrollToIndexFailed = _this$props2.onScrollToIndexFailed;
        var animated = params.animated,
          index = params.index,
          viewOffset = params.viewOffset,
          viewPosition = params.viewPosition;
        (0, _invariant.default)(index >= 0, `scrollToIndex out of range: requested index ${index} but minimum is 0`);
        (0, _invariant.default)(getItemCount(data) >= 1, `scrollToIndex out of range: item length ${getItemCount(data)} but minimum is 1`);
        (0, _invariant.default)(index < getItemCount(data), `scrollToIndex out of range: requested index ${index} is out of 0 to ${getItemCount(data) - 1}`);
        if (!getItemLayout && index > this._listMetrics.getHighestMeasuredCellIndex()) {
          (0, _invariant.default)(!!onScrollToIndexFailed, "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures.");
          onScrollToIndexFailed({
            averageItemLength: this._listMetrics.getAverageCellLength(),
            highestMeasuredFrameIndex: this._listMetrics.getHighestMeasuredCellIndex(),
            index: index
          });
          return;
        }
        var frame = this._listMetrics.getCellMetricsApprox(Math.floor(index), this.props);
        var offset = Math.max(0, this._listMetrics.getCellOffsetApprox(index, this.props) - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
        this.scrollToOffset({
          offset: offset,
          animated: animated
        });
      }

      // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -
      // use scrollToIndex instead if possible.
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _this$props3 = this.props,
          data = _this$props3.data,
          getItem = _this$props3.getItem,
          getItemCount = _this$props3.getItemCount;
        var itemCount = getItemCount(data);
        for (var index = 0; index < itemCount; index++) {
          if (getItem(data, index) === item) {
            this.scrollToIndex(Object.assign({}, params, {
              index: index
            }));
            break;
          }
        }
      }

      /**
       * Scroll to a specific content pixel offset in the list.
       *
       * Param `offset` expects the offset to scroll to.
       * In case of `horizontal` is true, the offset is the x-value,
       * in any other case the offset is the y-value.
       *
       * Param `animated` (`true` by default) defines whether the list
       * should do an animation while scrolling.
       */
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
          offset = params.offset;
        var scrollRef = this._scrollRef;
        if (scrollRef == null) {
          return;
        }
        if (scrollRef.scrollTo == null) {
          console.warn("No scrollTo method provided. This may be because you have two nested VirtualizedLists with the same orientation, or because you are using a custom component that does not implement scrollTo.");
          return;
        }
        var _this$_orientation = this._orientation(),
          horizontal = _this$_orientation.horizontal,
          rtl = _this$_orientation.rtl;
        if (horizontal && rtl && !this._listMetrics.hasContentLength()) {
          console.warn('scrollToOffset may not be called in RTL before content is laid out');
          return;
        }
        scrollRef.scrollTo(Object.assign({
          animated: animated
        }, this._scrollToParamsFromOffset(offset)));
      }
    }, {
      key: "_scrollToParamsFromOffset",
      value: function _scrollToParamsFromOffset(offset) {
        var _this$_orientation2 = this._orientation(),
          horizontal = _this$_orientation2.horizontal,
          rtl = _this$_orientation2.rtl;
        if (horizontal && rtl) {
          // Add the visible length of the scrollview so that the offset is right-aligned
          var cartOffset = this._listMetrics.cartesianOffset(offset + this._scrollMetrics.visibleLength);
          return horizontal ? {
            x: cartOffset
          } : {
            y: cartOffset
          };
        } else {
          return horizontal ? {
            x: offset
          } : {
            y: offset
          };
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(function (childList) {
          childList.recordInteraction();
        });
        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });
        this._updateViewableItems(this.props, this.state.cellsAroundViewport);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._scrollRef == null) {
          return;
        }
        this._scrollRef.flashScrollIndicators();
      }

      /**
       * Provides a handle to the underlying scroll responder.
       * Note that `this._scrollRef` might not be a `ScrollView`, so we
       * need to check that it responds to `getScrollResponder` before calling it.
       */
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return (0, _reactNative.findNodeHandle)(this._scrollRef);
        }
      }
    }, {
      key: "getScrollRef",
      value: function getScrollRef() {
        if (this._scrollRef && this._scrollRef.getScrollRef) {
          return this._scrollRef.getScrollRef();
        } else {
          return this._scrollRef;
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        var _this$context;
        return ((_this$context = this.context) == null ? undefined : _this$context.cellKey) || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }, {
      key: "_checkProps",
      value: function _checkProps(props) {
        var onScroll = props.onScroll,
          windowSize = props.windowSize,
          getItemCount = props.getItemCount,
          data = props.data,
          initialScrollIndex = props.initialScrollIndex;
        (0, _invariant.default)(
        // $FlowFixMe[prop-missing]
        !onScroll || !onScroll.__isNative, "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver");
        (0, _invariant.default)((0, _$$_REQUIRE(_dependencyMap[23]).windowSizeOrDefault)(windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
        (0, _invariant.default)(getItemCount, 'VirtualizedList: The "getItemCount" prop must be provided');
        var itemCount = getItemCount(data);
        if (initialScrollIndex != null && !this._hasTriggeredInitialScrollToIndex && (initialScrollIndex < 0 || itemCount > 0 && initialScrollIndex >= itemCount) && !this._hasWarned.initialScrollIndex) {
          console.warn(`initialScrollIndex "${initialScrollIndex}" is not valid (list has ${itemCount} items)`);
          this._hasWarned.initialScrollIndex = true;
        }
      }
    }, {
      key: "_adjustCellsAroundViewport",
      value: function _adjustCellsAroundViewport(props, cellsAroundViewport, pendingScrollUpdateCount) {
        var data = props.data,
          getItemCount = props.getItemCount;
        var onEndReachedThreshold = (0, _$$_REQUIRE(_dependencyMap[23]).onEndReachedThresholdOrDefault)(props.onEndReachedThreshold);
        var _this$_scrollMetrics = this._scrollMetrics,
          offset = _this$_scrollMetrics.offset,
          visibleLength = _this$_scrollMetrics.visibleLength;
        var contentLength = this._listMetrics.getContentLength();
        var distanceFromEnd = contentLength - visibleLength - offset;

        // Wait until the scroll view metrics have been set up. And until then,
        // we will trust the initialNumToRender suggestion
        if (visibleLength <= 0 || contentLength <= 0) {
          return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
        }
        var newCellsAroundViewport;
        if (props.disableVirtualization) {
          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? (0, _$$_REQUIRE(_dependencyMap[23]).maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch) : 0;
          newCellsAroundViewport = {
            first: 0,
            last: Math.min(cellsAroundViewport.last + renderAhead, getItemCount(data) - 1)
          };
        } else {
          // If we have a pending scroll update, we should not adjust the render window as it
          // might override the correct window.
          if (pendingScrollUpdateCount > 0) {
            return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
          }
          newCellsAroundViewport = (0, _$$_REQUIRE(_dependencyMap[24]).computeWindowedRenderLimits)(props, (0, _$$_REQUIRE(_dependencyMap[23]).maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch), (0, _$$_REQUIRE(_dependencyMap[23]).windowSizeOrDefault)(props.windowSize), cellsAroundViewport, this._listMetrics, this._scrollMetrics);
          (0, _invariant.default)(newCellsAroundViewport.last < getItemCount(data), 'computeWindowedRenderLimits() should return range in-bounds');
        }
        if (this._nestedChildLists.size() > 0) {
          // If some cell in the new state has a child list in it, we should only render
          // up through that item, so that we give that list a chance to render.
          // Otherwise there's churn from multiple child lists mounting and un-mounting
          // their items.

          // Will this prevent rendering if the nested list doesn't realize the end?
          var childIdx = this._findFirstChildWithMore(newCellsAroundViewport.first, newCellsAroundViewport.last);
          newCellsAroundViewport.last = childIdx != null ? childIdx : newCellsAroundViewport.last;
        }
        return newCellsAroundViewport;
      }
    }, {
      key: "_findFirstChildWithMore",
      value: function _findFirstChildWithMore(first, last) {
        for (var ii = first; ii <= last; ii++) {
          var cellKeyForIndex = this._indicesToKeys.get(ii);
          if (cellKeyForIndex != null && this._nestedChildLists.anyInCell(cellKeyForIndex, function (childList) {
            return childList.hasMore();
          })) {
            return ii;
          }
        }
        return null;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.registerAsNestedChild({
            ref: this,
            cellKey: this.context.cellKey
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.unregisterAsNestedChild({
            ref: this
          });
        }
        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });
        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });
        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;
        var _this$props4 = this.props,
          CellRendererComponent = _this$props4.CellRendererComponent,
          ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
          ListHeaderComponent = _this$props4.ListHeaderComponent,
          ListItemComponent = _this$props4.ListItemComponent,
          data = _this$props4.data,
          debug = _this$props4.debug,
          getItem = _this$props4.getItem,
          getItemCount = _this$props4.getItemCount,
          getItemLayout = _this$props4.getItemLayout,
          horizontal = _this$props4.horizontal,
          renderItem = _this$props4.renderItem;
        var stickyOffset = ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey;
        last = Math.min(end, last);
        var _loop = function _loop() {
          var item = getItem(data, ii);
          var key = VirtualizedList._keyExtractor(item, ii, _this2.props);
          _this2._indicesToKeys.set(ii, key);
          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }
          var shouldListenForLayout = getItemLayout == null || debug || _this2._fillRateHelper.enabled();
          cells.push( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListCellRenderer.default, Object.assign({
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            ListItemComponent: ListItemComponent,
            cellKey: key,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onCellFocusCapture: function onCellFocusCapture(e) {
              return _this2._onCellFocusCapture(key);
            },
            onUnmount: _this2._onCellUnmount,
            ref: function ref(_ref) {
              _this2._cellRefs[key] = _ref;
            },
            renderItem: renderItem
          }, shouldListenForLayout && {
            onCellLayout: _this2._onCellLayout
          }), key));
          prevCellKey = key;
        };
        for (var ii = first; ii <= last; ii++) {
          _loop();
        }
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context;
        return !!(nestedContext && !!nestedContext.horizontal === (0, _$$_REQUIRE(_dependencyMap[23]).horizontalOrDefault)(this.props.horizontal));
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this,
          _this$props$scrollEve;
        this._checkProps(this.props);
        var _this$props5 = this.props,
          ListEmptyComponent = _this$props5.ListEmptyComponent,
          ListFooterComponent = _this$props5.ListFooterComponent,
          ListHeaderComponent = _this$props5.ListHeaderComponent;
        var _this$props6 = this.props,
          data = _this$props6.data,
          horizontal = _this$props6.horizontal;
        var inversionStyle = this.props.inverted ? (0, _$$_REQUIRE(_dependencyMap[23]).horizontalOrDefault)(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        // 1. Add cell for ListHeaderComponent
        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }
          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent :
          /*#__PURE__*/
          // $FlowFixMe[not-a-component]
          // $FlowFixMe[incompatible-type-arg]
          (0, _jsxRuntime.jsx)(ListHeaderComponent, {});
          cells.push( /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[25]).VirtualizedListCellContextProvider, {
            cellKey: this._getCellKey() + '-header',
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View
            // We expect that header component will be a single native view so make it
            // not collapsable to avoid this view being flattened and make this assumption
            // no longer true.
            , {
              collapsable: false,
              onLayout: this._onLayoutHeader,
              style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle),
              children:
              // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
              element
            })
          }, "$header"));
        }

        // 2a. Add a cell for ListEmptyComponent if applicable
        var itemCount = this.props.getItemCount(data);
        if (itemCount === 0 && ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent :
          /*#__PURE__*/
          // $FlowFixMe[not-a-component]
          // $FlowFixMe[incompatible-type-arg]
          (0, _jsxRuntime.jsx)(ListEmptyComponent, {});
          cells.push( /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[25]).VirtualizedListCellContextProvider, {
            cellKey: this._getCellKey() + '-empty',
            children: React.cloneElement(_element, {
              onLayout: function onLayout(event) {
                _this3._onLayoutEmpty(event);
                if (_element.props.onLayout) {
                  _element.props.onLayout(event);
                }
              },
              style: _reactNative.StyleSheet.compose(inversionStyle, _element.props.style)
            })
          }, "$empty"));
        }

        // 2b. Add cells and spacers for each item
        if (itemCount > 0) {
          _usedIndexForKey = false;
          _keylessItemComponentName = '';
          var spacerKey = this._getSpacerKey(!horizontal);
          var renderRegions = this.state.renderMask.enumerateRegions();
          var lastRegion = renderRegions[renderRegions.length - 1];
          var lastSpacer = lastRegion != null && lastRegion.isSpacer ? lastRegion : null;
          for (var section of renderRegions) {
            if (section.isSpacer) {
              // Legacy behavior is to avoid spacers when virtualization is
              // disabled (including head spacers on initial render).
              if (this.props.disableVirtualization) {
                continue;
              }

              // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to
              // prevent the user for hyperscrolling into un-measured area because otherwise content will
              // likely jump around as it renders in above the viewport.
              var isLastSpacer = section === lastSpacer;
              var constrainToMeasured = isLastSpacer && !this.props.getItemLayout;
              var last = constrainToMeasured ? (0, _clamp.default)(section.first - 1, section.last, this._listMetrics.getHighestMeasuredCellIndex()) : section.last;
              var firstMetrics = this._listMetrics.getCellMetricsApprox(section.first, this.props);
              var lastMetrics = this._listMetrics.getCellMetricsApprox(last, this.props);
              var spacerSize = lastMetrics.offset + lastMetrics.length - firstMetrics.offset;
              cells.push( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: (0, _defineProperty2.default)({}, spacerKey, spacerSize)
              }, `$spacer-${section.first}`));
            } else {
              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, section.first, section.last, inversionStyle);
            }
          }
          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn("VirtualizedList: missing keys for items, make sure to specify a key or id property on each item or provide a custom keyExtractor.", _keylessItemComponentName);
            this._hasWarned.keys = true;
          }
        }

        // 3. Add cell for ListFooterComponent
        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent :
          /*#__PURE__*/
          // $FlowFixMe[not-a-component]
          // $FlowFixMe[incompatible-type-arg]
          (0, _jsxRuntime.jsx)(ListFooterComponent, {});
          cells.push( /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[25]).VirtualizedListCellContextProvider, {
            cellKey: this._getFooterCellKey(),
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              onLayout: this._onLayoutFooter,
              style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle),
              children:
              // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
              _element2
            })
          }, "$footer"));
        }

        // 4. Render the ScrollView
        var scrollProps = Object.assign({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollBegin: this._onMomentumScrollBegin,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          // iOS/macOS requires a non-zero scrollEventThrottle to fire more than a
          // single notification while scrolling. This will otherwise no-op.
          scrollEventThrottle: (_this$props$scrollEve = this.props.scrollEventThrottle) != null ? _this$props$scrollEve : 0.0001,
          invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
          stickyHeaderIndices: stickyHeaderIndices,
          style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style,
          isInvertedVirtualizedList: this.props.inverted,
          maintainVisibleContentPosition: this.props.maintainVisibleContentPosition != null ? Object.assign({}, this.props.maintainVisibleContentPosition, {
            // Adjust index to account for ListHeaderComponent.
            minIndexForVisible: this.props.maintainVisibleContentPosition.minIndexForVisible + (this.props.ListHeaderComponent ? 1 : 0)
          }) : undefined
        });
        this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;
        var innerRet = /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[25]).VirtualizedListContextProvider, {
          value: {
            cellKey: null,
            getScrollMetrics: this._getScrollMetrics,
            horizontal: (0, _$$_REQUIRE(_dependencyMap[23]).horizontalOrDefault)(this.props.horizontal),
            getOutermostParentListRef: this._getOutermostParentListRef,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          },
          children: React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
            ref: this._captureScrollRef
          }, cells)
        });
        var ret = innerRet;
        if (this.props.debug) {
          return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.debug,
            children: [ret, this._renderDebugOverlay()]
          });
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props7 = this.props,
          data = _this$props7.data,
          extraData = _this$props7.extraData;
        if (data !== prevProps.data || extraData !== prevProps.extraData) {
          // clear the viewableIndices cache to also trigger
          // the onViewableItemsChanged callback with the new data
          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }
        // The `this._hiPriInProgress` is guaranteeing a hiPri cell update will only happen
        // once per fiber update. The `_scheduleCellsToRenderUpdate` will set it to true
        // if a hiPri update needs to perform. If `componentDidUpdate` is triggered with
        // `this._hiPriInProgress=true`, means it's triggered by the hiPri update. The
        // `_scheduleCellsToRenderUpdate` will check this condition and not perform
        // another hiPri update.
        var hiPriInProgress = this._hiPriInProgress;
        this._scheduleCellsToRenderUpdate();
        // Make sure setting `this._hiPriInProgress` back to false after `componentDidUpdate`
        // is triggered with `this._hiPriInProgress = true`
        if (hiPriInProgress) {
          this._hiPriInProgress = false;
        }
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state.cellsAroundViewport, this._scrollMetrics);
      }
    }, {
      key: "_onCellFocusCapture",
      value: function _onCellFocusCapture(cellKey) {
        this._lastFocusedCellKey = cellKey;
        this._updateCellsToRender();
      }
    }, {
      key: "_triggerRemeasureForChildListsInCell",
      value: function _triggerRemeasureForChildListsInCell(cellKey) {
        this._nestedChildLists.forEachInCell(cellKey, function (childList) {
          childList.measureLayoutRelativeToContainingList();
        });
      }
    }, {
      key: "measureLayoutRelativeToContainingList",
      value: function measureLayoutRelativeToContainingList() {
        var _this4 = this;
        // TODO (T35574538): findNodeHandle sometimes crashes with "Unable to find
        // node on an unmounted component" during scrolling
        try {
          if (!this._scrollRef) {
            return;
          }
          // We are assuming that getOutermostParentListRef().getScrollRef()
          // is a non-null reference to a ScrollView
          this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), function (x, y, width, height) {
            _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
              x: x,
              y: y
            });
            _this4._listMetrics.notifyListContentLayout({
              layout: {
                width: width,
                height: height
              },
              orientation: _this4._orientation()
            });
            var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.getScrollMetrics());
            var metricsChanged = _this4._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || _this4._scrollMetrics.offset !== scrollMetrics.offset;
            if (metricsChanged) {
              _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
              _this4._scrollMetrics.offset = scrollMetrics.offset;

              // If metrics of the scrollView changed, then we triggered remeasure for child list
              // to ensure VirtualizedList has the right information.
              _this4._nestedChildLists.forEach(function (childList) {
                childList.measureLayoutRelativeToContainingList();
              });
            }
          }, function (error) {
            console.warn("VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList.");
          });
        } catch (error) {
          console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
        }
      }
    }, {
      key: "_getFooterCellKey",
      value: function _getFooterCellKey() {
        return this._getCellKey() + '-footer';
      }
    }, {
      key: "_renderDebugOverlay",
      value:
      // $FlowFixMe[missing-local-annot]
      function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / (this._listMetrics.getContentLength() || 1);
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);
        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._listMetrics.getCellMetricsApprox(ii, this.props);
          if (frame.isMounted) {
            framesInLayout.push(frame);
          }
        }
        var windowTop = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.first, this.props).offset;
        var frameLast = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.last, this.props);
        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.debugOverlayBase, styles.debugOverlay],
          children: [framesInLayout.map(function (f, ii) {
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
                top: f.offset * normalize,
                height: f.length * normalize
              }]
            }, 'f' + ii);
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
              top: windowTop * normalize,
              height: windowLen * normalize
            }]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
              top: visTop * normalize,
              height: visLen * normalize
            }]
          })]
        });
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !(0, _$$_REQUIRE(_dependencyMap[23]).horizontalOrDefault)(this.props.horizontal) ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(_ref3) {
        var x = _ref3.x,
          y = _ref3.y;
        return this._orientation().horizontal ? x : y;
      }
    }, {
      key: "_orientation",
      value: function _orientation() {
        return {
          horizontal: (0, _$$_REQUIRE(_dependencyMap[23]).horizontalOrDefault)(this.props.horizontal),
          rtl: _reactNative.I18nManager.isRTL
        };
      }
    }, {
      key: "_maybeCallOnEdgeReached",
      value: function _maybeCallOnEdgeReached() {
        var _this$props8 = this.props,
          data = _this$props8.data,
          getItemCount = _this$props8.getItemCount,
          onStartReached = _this$props8.onStartReached,
          onStartReachedThreshold = _this$props8.onStartReachedThreshold,
          onEndReached = _this$props8.onEndReached,
          onEndReachedThreshold = _this$props8.onEndReachedThreshold;
        // If we have any pending scroll updates it means that the scroll metrics
        // are out of date and we should not call any of the edge reached callbacks.
        if (this.state.pendingScrollUpdateCount > 0) {
          return;
        }
        var _this$_scrollMetrics2 = this._scrollMetrics,
          visibleLength = _this$_scrollMetrics2.visibleLength,
          offset = _this$_scrollMetrics2.offset;
        var distanceFromStart = offset;
        var distanceFromEnd = this._listMetrics.getContentLength() - visibleLength - offset;

        // Especially when oERT is zero it's necessary to 'floor' very small distance values to be 0
        // since debouncing causes us to not fire this event for every single "pixel" we scroll and can thus
        // be at the edge of the list with a distance approximating 0 but not quite there.
        if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {
          distanceFromStart = 0;
        }
        if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {
          distanceFromEnd = 0;
        }

        // TODO: T121172172 Look into why we're "defaulting" to a threshold of 2px
        // when oERT is not present (different from 2 viewports used elsewhere)
        var DEFAULT_THRESHOLD_PX = 2;
        var startThreshold = onStartReachedThreshold != null ? onStartReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
        var endThreshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
        var isWithinStartThreshold = distanceFromStart <= startThreshold;
        var isWithinEndThreshold = distanceFromEnd <= endThreshold;

        // First check if the user just scrolled within the end threshold
        // and call onEndReached only once for a given content length,
        // and only if onStartReached is not being executed
        if (onEndReached && this.state.cellsAroundViewport.last === getItemCount(data) - 1 && isWithinEndThreshold && this._listMetrics.getContentLength() !== this._sentEndForContentLength) {
          this._sentEndForContentLength = this._listMetrics.getContentLength();
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }

        // Next check if the user just scrolled within the start threshold
        // and call onStartReached only once for a given content length,
        // and only if onEndReached is not being executed
        else if (onStartReached != null && this.state.cellsAroundViewport.first === 0 && isWithinStartThreshold && this._listMetrics.getContentLength() !== this._sentStartForContentLength) {
          this._sentStartForContentLength = this._listMetrics.getContentLength();
          onStartReached({
            distanceFromStart: distanceFromStart
          });
        }

        // If the user scrolls away from the start or end and back again,
        // cause onStartReached or onEndReached to be triggered again
        else {
          this._sentStartForContentLength = isWithinStartThreshold ? this._sentStartForContentLength : 0;
          this._sentEndForContentLength = isWithinEndThreshold ? this._sentEndForContentLength : 0;
        }
      }
    }, {
      key: "_maybeScrollToInitialScrollIndex",
      value:
      /**
       * Scroll to a specified `initialScrollIndex` prop after the ScrollView
       * content has been laid out, if it is still valid. Only a single scroll is
       * triggered throughout the lifetime of the list.
       */
      function _maybeScrollToInitialScrollIndex(contentWidth, contentHeight) {
        if (contentWidth > 0 && contentHeight > 0 && this.props.initialScrollIndex != null && this.props.initialScrollIndex > 0 && !this._hasTriggeredInitialScrollToIndex) {
          if (this.props.contentOffset == null) {
            if (this.props.initialScrollIndex < this.props.getItemCount(this.props.data)) {
              this.scrollToIndex({
                animated: false,
                index: (0, _nullthrows.default)(this.props.initialScrollIndex)
              });
            } else {
              this.scrollToEnd({
                animated: false
              });
            }
          }
          this._hasTriggeredInitialScrollToIndex = true;
        }
      }
    }, {
      key: "_offsetFromScrollEvent",
      value: function _offsetFromScrollEvent(e) {
        var _e$nativeEvent = e.nativeEvent,
          contentOffset = _e$nativeEvent.contentOffset,
          contentSize = _e$nativeEvent.contentSize,
          layoutMeasurement = _e$nativeEvent.layoutMeasurement;
        var _this$_orientation3 = this._orientation(),
          horizontal = _this$_orientation3.horizontal,
          rtl = _this$_orientation3.rtl;
        if (horizontal && rtl) {
          return this._selectLength(contentSize) - (this._selectOffset(contentOffset) + this._selectLength(layoutMeasurement));
        } else {
          return this._selectOffset(contentOffset);
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        // Only trigger high-priority updates if we've actually rendered cells,
        // and with that size estimate, accurately compute how many cells we should render.
        // Otherwise, it would just render as many cells as it can (of zero dimension),
        // each time through attempting to render more (limited by maxToRenderPerBatch),
        // starving the renderer from actually laying out the objects and computing _averageCellLength.
        // If this is triggered in an `componentDidUpdate` followed by a hiPri cellToRenderUpdate
        // We shouldn't do another hipri cellToRenderUpdate
        if ((this._listMetrics.getAverageCellLength() > 0 || this.props.getItemLayout != null) && this._shouldRenderWithPriority() && !this._hiPriInProgress) {
          this._hiPriInProgress = true;
          // Don't worry about interactions when scrolling quickly; focus on filling content as fast
          // as possible.
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });
          this._updateCellsToRender();
          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_shouldRenderWithPriority",
      value: function _shouldRenderWithPriority() {
        var _this$state$cellsArou = this.state.cellsAroundViewport,
          first = _this$state$cellsArou.first,
          last = _this$state$cellsArou.last;
        var _this$_scrollMetrics3 = this._scrollMetrics,
          offset = _this$_scrollMetrics3.offset,
          visibleLength = _this$_scrollMetrics3.visibleLength,
          velocity = _this$_scrollMetrics3.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;
        var onStartReachedThreshold = (0, _$$_REQUIRE(_dependencyMap[23]).onStartReachedThresholdOrDefault)(this.props.onStartReachedThreshold);
        var onEndReachedThreshold = (0, _$$_REQUIRE(_dependencyMap[23]).onEndReachedThresholdOrDefault)(this.props.onEndReachedThreshold);
        // Mark as high priority if we're close to the start of the first item
        // But only if there are items before the first rendered item
        if (first > 0) {
          var distTop = offset - this._listMetrics.getCellMetricsApprox(first, this.props).offset;
          hiPri = distTop < 0 || velocity < -2 && distTop < getScrollingThreshold(onStartReachedThreshold, visibleLength);
        }
        // Mark as high priority if we're close to the end of the last item
        // But only if there are items after the last rendered item
        if (!hiPri && last >= 0 && last < itemCount - 1) {
          var distBottom = this._listMetrics.getCellMetricsApprox(last, this.props).offset - (offset + visibleLength);
          hiPri = distBottom < 0 || velocity > 2 && distBottom < getScrollingThreshold(onEndReachedThreshold, visibleLength);
        }
        return hiPri;
      }
    }, {
      key: "__getListMetrics",
      value: function __getListMetrics() {
        return this._listMetrics;
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(props, cellsAroundViewport) {
        var _this5 = this;
        // If we have any pending scroll updates it means that the scroll metrics
        // are out of date and we should not call any of the visibility callbacks.
        if (this.state.pendingScrollUpdateCount > 0) {
          return;
        }
        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(props, _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._listMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, cellsAroundViewport);
        });
      }
    }], [{
      key: "_findItemIndexWithKey",
      value: function _findItemIndexWithKey(props, key, hint) {
        var itemCount = props.getItemCount(props.data);
        if (hint != null && hint >= 0 && hint < itemCount) {
          var curKey = VirtualizedList._getItemKey(props, hint);
          if (curKey === key) {
            return hint;
          }
        }
        for (var ii = 0; ii < itemCount; ii++) {
          var _curKey = VirtualizedList._getItemKey(props, ii);
          if (_curKey === key) {
            return ii;
          }
        }
        return null;
      }
    }, {
      key: "_getItemKey",
      value: function _getItemKey(props, index) {
        var item = props.getItem(props.data, index);
        return VirtualizedList._keyExtractor(item, index, props);
      }
    }, {
      key: "_createRenderMask",
      value: function _createRenderMask(props, cellsAroundViewport, additionalRegions) {
        var itemCount = props.getItemCount(props.data);
        (0, _invariant.default)(cellsAroundViewport.first >= 0 && cellsAroundViewport.last >= cellsAroundViewport.first - 1 && cellsAroundViewport.last < itemCount, `Invalid cells around viewport "[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]" was passed to VirtualizedList._createRenderMask`);
        var renderMask = new (_$$_REQUIRE(_dependencyMap[26]).CellRenderMask)(itemCount);
        if (itemCount > 0) {
          var allRegions = [cellsAroundViewport].concat((0, _toConsumableArray2.default)(additionalRegions != null ? additionalRegions : []));
          for (var region of allRegions) {
            renderMask.addCells(region);
          }

          // The initially rendered cells are retained as part of the
          // "scroll-to-top" optimization
          if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {
            var initialRegion = VirtualizedList._initialRenderRegion(props);
            renderMask.addCells(initialRegion);
          }

          // The layout coordinates of sticker headers may be off-screen while the
          // actual header is on-screen. Keep the most recent before the viewport
          // rendered, even if its layout coordinates are not in viewport.
          var stickyIndicesSet = new Set(props.stickyHeaderIndices);
          VirtualizedList._ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellsAroundViewport.first);
        }
        return renderMask;
      }
    }, {
      key: "_initialRenderRegion",
      value: function _initialRenderRegion(props) {
        var _props$initialScrollI;
        var itemCount = props.getItemCount(props.data);
        var firstCellIndex = Math.max(0, Math.min(itemCount - 1, Math.floor((_props$initialScrollI = props.initialScrollIndex) != null ? _props$initialScrollI : 0)));
        var lastCellIndex = Math.min(itemCount, firstCellIndex + (0, _$$_REQUIRE(_dependencyMap[23]).initialNumToRenderOrDefault)(props.initialNumToRender)) - 1;
        return {
          first: firstCellIndex,
          last: lastCellIndex
        };
      }
    }, {
      key: "_ensureClosestStickyHeader",
      value: function _ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellIdx) {
        var stickyOffset = props.ListHeaderComponent ? 1 : 0;
        for (var itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--) {
          if (stickyIndicesSet.has(itemIdx + stickyOffset)) {
            renderMask.addCells({
              first: itemIdx,
              last: itemIdx
            });
            break;
          }
        }
      }
    }, {
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(newProps, prevState) {
        var _newProps$maintainVis, _newProps$maintainVis2;
        // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make
        // sure we're rendering a reasonable range here.
        var itemCount = newProps.getItemCount(newProps.data);
        if (itemCount === prevState.renderMask.numCells()) {
          return prevState;
        }
        var maintainVisibleContentPositionAdjustment = null;
        var prevFirstVisibleItemKey = prevState.firstVisibleItemKey;
        var minIndexForVisible = (_newProps$maintainVis = (_newProps$maintainVis2 = newProps.maintainVisibleContentPosition) == null ? undefined : _newProps$maintainVis2.minIndexForVisible) != null ? _newProps$maintainVis : 0;
        var newFirstVisibleItemKey = newProps.getItemCount(newProps.data) > minIndexForVisible ? VirtualizedList._getItemKey(newProps, minIndexForVisible) : null;
        if (newProps.maintainVisibleContentPosition != null && prevFirstVisibleItemKey != null && newFirstVisibleItemKey != null) {
          if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {
            // Fast path if items were added at the start of the list.
            var hint = itemCount - prevState.renderMask.numCells() + minIndexForVisible;
            var firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(newProps, prevFirstVisibleItemKey, hint);
            maintainVisibleContentPositionAdjustment = firstVisibleItemIndex != null ? firstVisibleItemIndex - minIndexForVisible : null;
          } else {
            maintainVisibleContentPositionAdjustment = null;
          }
        }
        var constrainedCells = VirtualizedList._constrainToItemCount(maintainVisibleContentPositionAdjustment != null ? {
          first: prevState.cellsAroundViewport.first + maintainVisibleContentPositionAdjustment,
          last: prevState.cellsAroundViewport.last + maintainVisibleContentPositionAdjustment
        } : prevState.cellsAroundViewport, newProps);
        return {
          cellsAroundViewport: constrainedCells,
          renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),
          firstVisibleItemKey: newFirstVisibleItemKey,
          pendingScrollUpdateCount: maintainVisibleContentPositionAdjustment != null ? prevState.pendingScrollUpdateCount + 1 : prevState.pendingScrollUpdateCount
        };
      }
    }, {
      key: "_constrainToItemCount",
      value: function _constrainToItemCount(cells, props) {
        var itemCount = props.getItemCount(props.data);
        var lastPossibleCellIndex = itemCount - 1;

        // Constraining `last` may significantly shrink the window. Adjust `first`
        // to expand the window if the new `last` results in a new window smaller
        // than the number of cells rendered per batch.
        var maxToRenderPerBatch = (0, _$$_REQUIRE(_dependencyMap[23]).maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch);
        var maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);
        return {
          first: (0, _clamp.default)(0, cells.first, maxFirst),
          last: Math.min(lastPossibleCellIndex, cells.last)
        };
      }
    }, {
      key: "_keyExtractor",
      value: function _keyExtractor(item, index, props) {
        if (props.keyExtractor != null) {
          return props.keyExtractor(item, index);
        }
        var key = (0, _$$_REQUIRE(_dependencyMap[24]).keyExtractor)(item, index);
        if (key === String(index)) {
          _usedIndexForKey = true;
          if (item.type && item.type.displayName) {
            _keylessItemComponentName = item.type.displayName;
          }
        }
        return key;
      }
    }]);
    return VirtualizedList;
  }(_StateSafePureComponent.default);
  VirtualizedList.contextType = _$$_REQUIRE(_dependencyMap[25]).VirtualizedListContext;
  var styles = _reactNative.StyleSheet.create({
    verticallyInverted: _reactNative.Platform.OS === 'android' ? {
      transform: [{
        scale: -1
      }]
    } : {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    },
    debug: {
      flex: 1
    },
    debugOverlayBase: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    debugOverlay: {
      bottom: 0,
      width: 20,
      borderColor: 'blue',
      borderWidth: 1
    },
    debugOverlayFrame: {
      left: 0,
      backgroundColor: 'orange'
    },
    debugOverlayFrameLast: {
      left: 0,
      borderColor: 'green',
      borderWidth: 2
    },
    debugOverlayFrameVis: {
      left: 0,
      borderColor: 'red',
      borderWidth: 2
    }
  });
  module.exports = VirtualizedList;
},323,[1,34,170,5,6,16,13,15,12,2,324,325,326,327,328,329,330,331,332,24,43,153,194,334,322,333,335]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);
  var _createClass = _$$_REQUIRE(_dependencyMap[1]);
  var _require = _$$_REQUIRE(_dependencyMap[2]),
    InteractionManager = _require.InteractionManager;

  /**
   * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the
   * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,
   * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri
   * interactions are done running.
   *
   * Make sure to cleanup with dispose().  Example:
   *
   *   class Widget extends React.Component {
   *     _batchedSave: new Batchinator(() => this._saveState, 1000);
   *     _saveSate() {
   *       // save this.state to disk
   *     }
   *     componentDidUpdate() {
   *       this._batchedSave.schedule();
   *     }
   *     componentWillUnmount() {
   *       this._batchedSave.dispose();
   *     }
   *     ...
   *   }
   */
  var Batchinator = /*#__PURE__*/function () {
    function Batchinator(callback, delayMS) {
      _classCallCheck(this, Batchinator);
      this._delay = delayMS;
      this._callback = callback;
    }
    /*
     * Cleanup any pending tasks.
     *
     * By default, if there is a pending task the callback is run immediately. Set the option abort to
     * true to not call the callback if it was pending.
     */
    _createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };
        if (this._taskHandle) {
          this._taskHandle.cancel();
          if (!options.abort) {
            this._callback();
          }
          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;
        if (this._taskHandle) {
          return;
        }
        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            // Note that we clear the handle before invoking the callback so that if the callback calls
            // schedule again, it will actually schedule another task.
            _this._taskHandle = null;
            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);
    return Batchinator;
  }();
  module.exports = Batchinator;
},324,[5,6,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function clamp(min, value, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  }
  module.exports = clamp;
},325,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * Intentional info-level logging for clear separation from ad-hoc console debug logging.
   */
  function infoLog() {
    var _console;
    return (_console = console).log.apply(_console, arguments);
  }
  module.exports = infoLog;
},326,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var ChildListCollection = exports.default = /*#__PURE__*/function () {
    function ChildListCollection() {
      (0, _classCallCheck2.default)(this, ChildListCollection);
      this._cellKeyToChildren = new Map();
      this._childrenToCellKey = new Map();
    }
    (0, _createClass2.default)(ChildListCollection, [{
      key: "add",
      value: function add(list, cellKey) {
        var _this$_cellKeyToChild;
        (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');
        var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild : new Set();
        cellLists.add(list);
        this._cellKeyToChildren.set(cellKey, cellLists);
        this._childrenToCellKey.set(list, cellKey);
      }
    }, {
      key: "remove",
      value: function remove(list) {
        var cellKey = this._childrenToCellKey.get(list);
        (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');
        this._childrenToCellKey.delete(list);
        var cellLists = this._cellKeyToChildren.get(cellKey);
        (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');
        cellLists.delete(list);
        if (cellLists.size === 0) {
          this._cellKeyToChildren.delete(cellKey);
        }
      }
    }, {
      key: "forEach",
      value: function forEach(fn) {
        for (var listSet of this._cellKeyToChildren.values()) {
          for (var list of listSet) {
            fn(list);
          }
        }
      }
    }, {
      key: "forEachInCell",
      value: function forEachInCell(cellKey, fn) {
        var _this$_cellKeyToChild2;
        var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild2 : [];
        for (var list of listSet) {
          fn(list);
        }
      }
    }, {
      key: "anyInCell",
      value: function anyInCell(cellKey, fn) {
        var _this$_cellKeyToChild3;
        var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild3 : [];
        for (var list of listSet) {
          if (fn(list)) {
            return true;
          }
        }
        return false;
      }
    }, {
      key: "size",
      value: function size() {
        return this._childrenToCellKey.size;
      }
    }]);
    return ChildListCollection;
  }();
},327,[1,5,6,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _ListMetricsAggregator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var Info = /*#__PURE__*/(0, _createClass2.default)(function Info() {
    (0, _classCallCheck2.default)(this, Info);
    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  });
  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;
  var _sampleRate = null;

  /**
   * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.
   * By default the sampling rate is set to zero and this will do nothing. If you want to collect
   * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.
   *
   * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with
   * `SceneTracker.getActiveScene` to determine the context of the events.
   */
  var FillRateHelper = /*#__PURE__*/function () {
    function FillRateHelper(listMetrics) {
      (0, _classCallCheck2.default)(this, FillRateHelper);
      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._listMetrics = listMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();
      this._resetData();
    }
    (0, _createClass2.default)(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG;
          this._samplesStartTime = global.performance.now();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }
        var start = this._samplesStartTime; // const for flow
        if (start == null) {
          DEBUG;
          return;
        }
        if (this._info.sample_count < _minSampleCount) {
          // Don't bother with under-sampled events.
          this._resetData();
          return;
        }
        var total_time_spent = global.performance.now() - start;
        var info = Object.assign({}, this._info, {
          total_time_spent: total_time_spent
        });
        _listeners.forEach(function (listener) {
          return listener(info);
        });
        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, cellsAroundViewport, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {
          return 0;
        }
        var dOffset = scrollMetrics.dOffset,
          offset = scrollMetrics.offset,
          velocity = scrollMetrics.velocity,
          visibleLength = scrollMetrics.visibleLength;

        // Denominator metrics that we track for all events - most of the time there is no blankness and
        // we want to capture that.
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec

        // Whether blank now or not, record the elapsed time blank if we were blank last time.
        var now = global.performance.now();
        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }
        this._anyBlankStartTime = null;
        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }
        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = cellsAroundViewport.first;
        var firstFrame = this._listMetrics.getCellMetrics(first, props);
        while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.isMounted)) {
          firstFrame = this._listMetrics.getCellMetrics(first, props);
          first++;
        }
        // Only count blankTop if we aren't rendering the first item, otherwise we will count the header
        // as blank.
        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }
        var blankBottom = 0;
        var last = cellsAroundViewport.last;
        var lastFrame = this._listMetrics.getCellMetrics(last, props);
        while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.isMounted)) {
          lastFrame = this._listMetrics.getCellMetrics(last, props);
          last--;
        }
        // Only count blankBottom if we aren't rendering the last item, otherwise we will count the
        // footer as blank.
        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }
        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;
        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;
          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }
        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }], [{
      key: "addListener",
      value: function addListener(callback) {
        if (_sampleRate === null) {
          console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');
        }
        _listeners.push(callback);
        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);
    return FillRateHelper;
  }();
  module.exports = FillRateHelper;
},328,[1,6,5,329]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  // TODO: `inverted` can be incorporated here if it is moved to an order
  // based implementation instead of transform.
  /**
   * Subset of VirtualizedList props needed to calculate cell metrics
   */
  /**
   * Provides an interface to query information about the metrics of a list and its cells.
   */
  var ListMetricsAggregator = exports.default = /*#__PURE__*/function () {
    function ListMetricsAggregator() {
      (0, _classCallCheck2.default)(this, ListMetricsAggregator);
      this._averageCellLength = 0;
      this._cellMetrics = new Map();
      this._highestMeasuredCellIndex = 0;
      this._measuredCellsLength = 0;
      this._measuredCellsCount = 0;
      this._orientation = {
        horizontal: false,
        rtl: false
      };
    }
    (0, _createClass2.default)(ListMetricsAggregator, [{
      key: "notifyCellLayout",
      value:
      /**
       * Notify the ListMetricsAggregator that a cell has been laid out.
       *
       * @returns whether the cell layout has changed since last notification
       */
      function notifyCellLayout(_ref) {
        var cellIndex = _ref.cellIndex,
          cellKey = _ref.cellKey,
          orientation = _ref.orientation,
          layout = _ref.layout;
        this._invalidateIfOrientationChanged(orientation);
        var next = {
          index: cellIndex,
          length: this._selectLength(layout),
          isMounted: true,
          offset: this.flowRelativeOffset(layout)
        };
        var curr = this._cellMetrics.get(cellKey);
        if (!curr || next.offset !== curr.offset || next.length !== curr.length) {
          if (curr) {
            var dLength = next.length - curr.length;
            this._measuredCellsLength += dLength;
          } else {
            this._measuredCellsLength += next.length;
            this._measuredCellsCount += 1;
          }
          this._averageCellLength = this._measuredCellsLength / this._measuredCellsCount;
          this._cellMetrics.set(cellKey, next);
          this._highestMeasuredCellIndex = Math.max(this._highestMeasuredCellIndex, cellIndex);
          return true;
        } else {
          curr.isMounted = true;
          return false;
        }
      }

      /**
       * Notify ListMetricsAggregator that a cell has been unmounted.
       */
    }, {
      key: "notifyCellUnmounted",
      value: function notifyCellUnmounted(cellKey) {
        var curr = this._cellMetrics.get(cellKey);
        if (curr) {
          curr.isMounted = false;
        }
      }

      /**
       * Notify ListMetricsAggregator that the lists content container has been laid out.
       */
    }, {
      key: "notifyListContentLayout",
      value: function notifyListContentLayout(_ref2) {
        var orientation = _ref2.orientation,
          layout = _ref2.layout;
        this._invalidateIfOrientationChanged(orientation);
        this._contentLength = this._selectLength(layout);
      }

      /**
       * Return the average length of the cells which have been measured
       */
    }, {
      key: "getAverageCellLength",
      value: function getAverageCellLength() {
        return this._averageCellLength;
      }

      /**
       * Return the highest measured cell index (or 0 if nothing has been measured
       * yet)
       */
    }, {
      key: "getHighestMeasuredCellIndex",
      value: function getHighestMeasuredCellIndex() {
        return this._highestMeasuredCellIndex;
      }

      /**
       * Returns the exact metrics of a cell if it has already been laid out,
       * otherwise an estimate based on the average length of previously measured
       * cells
       */
    }, {
      key: "getCellMetricsApprox",
      value: function getCellMetricsApprox(index, props) {
        var frame = this.getCellMetrics(index, props);
        if (frame && frame.index === index) {
          // check for invalid frames due to row re-ordering
          return frame;
        } else {
          var data = props.data,
            getItemCount = props.getItemCount;
          (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get frame for out of range index ' + index);
          return {
            length: this._averageCellLength,
            offset: this._averageCellLength * index,
            index: index,
            isMounted: false
          };
        }
      }

      /**
       * Returns the exact metrics of a cell if it has already been laid out
       */
    }, {
      key: "getCellMetrics",
      value: function getCellMetrics(index, props) {
        var _props$keyExtractor;
        var data = props.data,
          getItem = props.getItem,
          getItemCount = props.getItemCount,
          getItemLayout = props.getItemLayout;
        (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get metrics for out of range cell index ' + index);
        var keyExtractor = (_props$keyExtractor = props.keyExtractor) != null ? _props$keyExtractor : _$$_REQUIRE(_dependencyMap[4]).keyExtractor;
        var frame = this._cellMetrics.get(keyExtractor(getItem(data, index), index));
        if (frame && frame.index === index) {
          return frame;
        }
        if (getItemLayout) {
          var _getItemLayout = getItemLayout(data, index),
            length = _getItemLayout.length,
            offset = _getItemLayout.offset;
          // TODO: `isMounted` is used for both "is exact layout" and "has been
          // unmounted". Should be refactored.
          return {
            index: index,
            length: length,
            offset: offset,
            isMounted: true
          };
        }
        return null;
      }

      /**
       * Gets an approximate offset to an item at a given index. Supports
       * fractional indices.
       */
    }, {
      key: "getCellOffsetApprox",
      value: function getCellOffsetApprox(index, props) {
        if (Number.isInteger(index)) {
          return this.getCellMetricsApprox(index, props).offset;
        } else {
          var frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);
          var remainder = index - Math.floor(index);
          return frameMetrics.offset + remainder * frameMetrics.length;
        }
      }

      /**
       * Returns the length of all ScrollView content along the scrolling axis.
       */
    }, {
      key: "getContentLength",
      value: function getContentLength() {
        var _this$_contentLength;
        return (_this$_contentLength = this._contentLength) != null ? _this$_contentLength : 0;
      }

      /**
       * Whether a content length has been observed
       */
    }, {
      key: "hasContentLength",
      value: function hasContentLength() {
        return this._contentLength != null;
      }

      /**
       * Finds the flow-relative offset (e.g. starting from the left in LTR, but
       * right in RTL) from a layout box.
       */
    }, {
      key: "flowRelativeOffset",
      value: function flowRelativeOffset(layout, referenceContentLength) {
        var _this$_orientation = this._orientation,
          horizontal = _this$_orientation.horizontal,
          rtl = _this$_orientation.rtl;
        if (horizontal && rtl) {
          var contentLength = referenceContentLength != null ? referenceContentLength : this._contentLength;
          (0, _invariant.default)(contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
          return contentLength - (this._selectOffset(layout) + this._selectLength(layout));
        } else {
          return this._selectOffset(layout);
        }
      }

      /**
       * Converts a flow-relative offset to a cartesian offset
       */
    }, {
      key: "cartesianOffset",
      value: function cartesianOffset(flowRelativeOffset) {
        var _this$_orientation2 = this._orientation,
          horizontal = _this$_orientation2.horizontal,
          rtl = _this$_orientation2.rtl;
        if (horizontal && rtl) {
          (0, _invariant.default)(this._contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
          return this._contentLength - flowRelativeOffset;
        } else {
          return flowRelativeOffset;
        }
      }
    }, {
      key: "_invalidateIfOrientationChanged",
      value: function _invalidateIfOrientationChanged(orientation) {
        if (orientation.rtl !== this._orientation.rtl) {
          this._cellMetrics.clear();
        }
        if (orientation.horizontal !== this._orientation.horizontal) {
          this._averageCellLength = 0;
          this._highestMeasuredCellIndex = 0;
          this._measuredCellsLength = 0;
          this._measuredCellsCount = 0;
        }
        this._orientation = orientation;
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(_ref3) {
        var width = _ref3.width,
          height = _ref3.height;
        return this._orientation.horizontal ? width : height;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(_ref4) {
        var x = _ref4.x,
          y = _ref4.y;
        return this._orientation.horizontal ? x : y;
      }
    }]);
    return ListMetricsAggregator;
  }();
},329,[1,5,6,24,322]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  /**
   * `setState` is called asynchronously, and should not rely on the value of
   * `this.props` or `this.state`:
   * https://react.dev/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous
   *
   * SafePureComponent adds runtime enforcement, to catch cases where these
   * variables are read in a state updater function, instead of the ones passed
   * in.
   */
  var StateSafePureComponent = exports.default = /*#__PURE__*/function (_React$PureComponent) {
    (0, _inherits2.default)(StateSafePureComponent, _React$PureComponent);
    var _super = _createSuper(StateSafePureComponent);
    function StateSafePureComponent(props) {
      var _this;
      (0, _classCallCheck2.default)(this, StateSafePureComponent);
      _this = _super.call(this, props);
      _this._inAsyncStateUpdate = false;
      _this._installSetStateHooks();
      return _this;
    }
    (0, _createClass2.default)(StateSafePureComponent, [{
      key: "setState",
      value: function setState(partialState, callback) {
        var _this2 = this;
        if (typeof partialState === 'function') {
          (0, _get2.default)((0, _getPrototypeOf2.default)(StateSafePureComponent.prototype), "setState", this).call(this, function (state, props) {
            _this2._inAsyncStateUpdate = true;
            var ret;
            try {
              ret = partialState(state, props);
            } catch (err) {
              throw err;
            } finally {
              _this2._inAsyncStateUpdate = false;
            }
            return ret;
          }, callback);
        } else {
          (0, _get2.default)((0, _getPrototypeOf2.default)(StateSafePureComponent.prototype), "setState", this).call(this, partialState, callback);
        }
      }
    }, {
      key: "_installSetStateHooks",
      value: function _installSetStateHooks() {
        var that = this;
        var props = this.props,
          state = this.state;
        Object.defineProperty(this, 'props', {
          get: function get() {
            (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.props" should not be accessed during state updates');
            return props;
          },
          set: function set(newProps) {
            props = newProps;
          }
        });
        Object.defineProperty(this, 'state', {
          get: function get() {
            (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.state" should not be acceessed during state updates');
            return state;
          },
          set: function set(newState) {
            state = newState;
          }
        });
      }
    }]);
    return StateSafePureComponent;
  }(React.PureComponent);
},330,[1,5,6,10,13,15,12,24,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _ListMetricsAggregator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  /**
   * A Utility class for calculating viewable items based on current metrics like scroll position and
   * layout.
   *
   * An item is said to be in a "viewable" state when any of the following
   * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`
   * is true):
   *
   * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item
   *   visible in the view area >= `itemVisiblePercentThreshold`.
   * - Entirely visible on screen
   */
  var ViewabilityHelper = /*#__PURE__*/function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };
      (0, _classCallCheck2.default)(this, ViewabilityHelper);
      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    /**
     * Cleanup, e.g. on unmount. Clears any pending timers.
     */
    (0, _createClass2.default)(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.63 was deployed. To see
         * the error delete this comment and run Flow. */
        this._timers.forEach(clearTimeout);
      }

      /**
       * Determines which items are viewable based on the current metrics and config.
       */
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(props, scrollOffset, viewportHeight, listMetrics,
      // Optional optimization to reduce the scan size
      renderRange) {
        var itemCount = props.getItemCount(props.data);
        var _this$_config = this._config,
          itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,
          viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        _$$_REQUIRE(_dependencyMap[5])(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];
        if (itemCount === 0) {
          return viewableIndices;
        }
        var firstVisible = -1;
        var _ref = renderRange || {
            first: 0,
            last: itemCount - 1
          },
          first = _ref.first,
          last = _ref.last;
        if (last >= itemCount) {
          console.warn('Invalid render range computing viewability ' + JSON.stringify({
            renderRange: renderRange,
            itemCount: itemCount
          }));
          return [];
        }
        for (var idx = first; idx <= last; idx++) {
          var metrics = listMetrics.getCellMetrics(idx, props);
          if (!metrics) {
            continue;
          }
          var top = Math.floor(metrics.offset - scrollOffset);
          var bottom = Math.floor(top + metrics.length);
          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;
            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }
        return viewableIndices;
      }

      /**
       * Figures out which items are viewable and how that has changed from before and calls
       * `onViewableItemsChanged` as appropriate.
       */
    }, {
      key: "onUpdate",
      value: function onUpdate(props, scrollOffset, viewportHeight, listMetrics, createViewToken, onViewableItemsChanged,
      // Optional optimization to reduce the scan size
      renderRange) {
        var _this = this;
        var itemCount = props.getItemCount(props.data);
        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !listMetrics.getCellMetrics(0, props)) {
          return;
        }
        var viewableIndices = [];
        if (itemCount) {
          viewableIndices = this.computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, renderRange);
        }
        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          // We might get a lot of scroll events where visibility doesn't change and we don't want to do
          // extra work in those cases.
          return;
        }
        this._viewableIndices = viewableIndices;
        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
             * comment suppresses an error found when Flow v0.63 was deployed. To
             * see the error delete this comment and run Flow. */
            _this._timers.delete(handle);
            _this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);
          /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This
           * comment suppresses an error found when Flow v0.63 was deployed. To see
           * the error delete this comment and run Flow. */
          this._timers.add(handle);
        } else {
          this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }

      /**
       * clean-up cached _viewableIndices to evaluate changed items on next update
       */
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }

      /**
       * Records that an interaction has happened even if there has been no scroll.
       */
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(props, viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;
        // Filter out indices that have gone out of view since this call was scheduled.
        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true, props);
          return [viewable.key, viewable];
        }));
        var changed = [];
        for (var _ref2 of nextItems) {
          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);
          var key = _ref3[0];
          var viewable = _ref3[1];
          if (!prevItems.has(key)) {
            changed.push(viewable);
          }
        }
        for (var _ref4 of prevItems) {
          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2);
          var _key = _ref5[0];
          var _viewable = _ref5[1];
          if (!nextItems.has(_key)) {
            changed.push(Object.assign({}, _viewable, {
              isViewable: false
            }));
          }
        }
        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);
    return ViewabilityHelper;
  }();
  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);
      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }
  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }
  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }
  module.exports = ViewabilityHelper;
},331,[1,26,5,6,329,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var CellRenderer = exports.default = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(CellRenderer, _React$Component);
    var _super = _createSuper(CellRenderer);
    function CellRenderer() {
      var _this;
      (0, _classCallCheck2.default)(this, CellRenderer);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this.props.item
        }
      };
      // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not
      // reused by SectionList and we can keep VirtualizedList simpler.
      // $FlowFixMe[missing-local-annot]
      _this._separators = {
        highlight: function highlight() {
          var _this$props = _this.props,
            cellKey = _this$props.cellKey,
            prevCellKey = _this$props.prevCellKey;
          _this.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this$props2 = _this.props,
            cellKey = _this$props2.cellKey,
            prevCellKey = _this$props2.prevCellKey;
          _this.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this$props3 = _this.props,
            cellKey = _this$props3.cellKey,
            prevCellKey = _this$props3.prevCellKey;
          _this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      };
      _this._onLayout = function (nativeEvent) {
        _this.props.onCellLayout && _this.props.onCellLayout(nativeEvent, _this.props.cellKey, _this.props.index);
      };
      return _this;
    }
    (0, _createClass2.default)(CellRenderer, [{
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: Object.assign({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "_renderElement",
      value: function _renderElement(renderItem, ListItemComponent, item, index) {
        if (renderItem && ListItemComponent) {
          console.warn("VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take precedence over renderItem.");
        }
        if (ListItemComponent) {
          /* $FlowFixMe[not-a-component] (>=0.108.0 site=react_native_fb) This
           * comment suppresses an error found when Flow v0.108 was deployed. To
           * see the error, delete this comment and run Flow. */
          /* $FlowFixMe[incompatible-type-arg] (>=0.108.0 site=react_native_fb)
           * This comment suppresses an error found when Flow v0.108 was deployed.
           * To see the error, delete this comment and run Flow. */
          return React.createElement(ListItemComponent, {
            item: item,
            index: index,
            separators: this._separators
          });
        }
        if (renderItem) {
          return renderItem({
            item: item,
            index: index,
            separators: this._separators
          });
        }
        (0, _invariant.default)(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
          CellRendererComponent = _this$props4.CellRendererComponent,
          ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
          ListItemComponent = _this$props4.ListItemComponent,
          cellKey = _this$props4.cellKey,
          horizontal = _this$props4.horizontal,
          item = _this$props4.item,
          index = _this$props4.index,
          inversionStyle = _this$props4.inversionStyle,
          onCellFocusCapture = _this$props4.onCellFocusCapture,
          onCellLayout = _this$props4.onCellLayout,
          renderItem = _this$props4.renderItem;
        var element = this._renderElement(renderItem, ListItemComponent, item, index);

        // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and
        // called explicitly by `ScrollViewStickyHeader`.
        var itemSeparator = React.isValidElement(ItemSeparatorComponent) ?
        // $FlowFixMe[incompatible-type]
        ItemSeparatorComponent :
        // $FlowFixMe[incompatible-type]
        ItemSeparatorComponent && /*#__PURE__*/(0, _jsxRuntime.jsx)(ItemSeparatorComponent, Object.assign({}, this.state.separatorProps));
        var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
        var result = !CellRendererComponent ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, Object.assign({
          style: cellStyle,
          onFocusCapture: onCellFocusCapture
        }, onCellLayout && {
          onLayout: this._onLayout
        }, {
          children: [element, itemSeparator]
        })) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(CellRendererComponent, Object.assign({
          cellKey: cellKey,
          index: index,
          item: item,
          style: cellStyle,
          onFocusCapture: onCellFocusCapture
        }, onCellLayout && {
          onLayout: this._onLayout
        }, {
          children: [element, itemSeparator]
        }));
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[10]).VirtualizedListCellContextProvider, {
          cellKey: this.props.cellKey,
          children: result
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        return {
          separatorProps: Object.assign({}, prevState.separatorProps, {
            leadingItem: props.item
          })
        };
      }
    }]);
    return CellRenderer;
  }(React.Component);
  var styles = _reactNative.StyleSheet.create({
    row: {
      flexDirection: 'row'
    },
    rowReverse: {
      flexDirection: 'row-reverse'
    },
    columnReverse: {
      flexDirection: 'column-reverse'
    }
  });
},332,[1,5,6,13,15,12,2,24,153,194,333]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VirtualizedListCellContextProvider = VirtualizedListCellContextProvider;
  exports.VirtualizedListContext = undefined;
  exports.VirtualizedListContextProvider = VirtualizedListContextProvider;
  exports.VirtualizedListContextResetter = VirtualizedListContextResetter;
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  var React = _react;
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[1]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var VirtualizedListContext = exports.VirtualizedListContext = React.createContext(null);
  /**
   * Resets the context. Intended for use by portal-like components (e.g. Modal).
   */
  function VirtualizedListContextResetter(_ref) {
    var children = _ref.children;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: null,
      children: children
    });
  }

  /**
   * Sets the context with memoization. Intended to be used by `VirtualizedList`.
   */
  function VirtualizedListContextProvider(_ref2) {
    var children = _ref2.children,
      value = _ref2.value;
    // Avoid setting a newly created context object if the values are identical.
    var context = (0, _react.useMemo)(function () {
      return {
        cellKey: null,
        getScrollMetrics: value.getScrollMetrics,
        horizontal: value.horizontal,
        getOutermostParentListRef: value.getOutermostParentListRef,
        registerAsNestedChild: value.registerAsNestedChild,
        unregisterAsNestedChild: value.unregisterAsNestedChild
      };
    }, [value.getScrollMetrics, value.horizontal, value.getOutermostParentListRef, value.registerAsNestedChild, value.unregisterAsNestedChild]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: context,
      children: children
    });
  }

  /**
   * Sets the `cellKey`. Intended to be used by `VirtualizedList` for each cell.
   */
  function VirtualizedListCellContextProvider(_ref3) {
    var cellKey = _ref3.cellKey,
      children = _ref3.children;
    // Avoid setting a newly created context object if the values are identical.
    var currContext = (0, _react.useContext)(VirtualizedListContext);
    var context = (0, _react.useMemo)(function () {
      return currContext == null ? null : Object.assign({}, currContext, {
        cellKey: cellKey
      });
    }, [currContext, cellKey]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: context,
      children: children
    });
  }
},333,[153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.horizontalOrDefault = horizontalOrDefault;
  exports.initialNumToRenderOrDefault = initialNumToRenderOrDefault;
  exports.maxToRenderPerBatchOrDefault = maxToRenderPerBatchOrDefault;
  exports.onEndReachedThresholdOrDefault = onEndReachedThresholdOrDefault;
  exports.onStartReachedThresholdOrDefault = onStartReachedThresholdOrDefault;
  exports.windowSizeOrDefault = windowSizeOrDefault;
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * Default Props Helper Functions
   * Use the following helper functions for default values
   */

  // horizontalOrDefault(this.props.horizontal)
  function horizontalOrDefault(horizontal) {
    return horizontal != null ? horizontal : false;
  }

  // initialNumToRenderOrDefault(this.props.initialNumToRender)
  function initialNumToRenderOrDefault(initialNumToRender) {
    return initialNumToRender != null ? initialNumToRender : 10;
  }

  // maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch)
  function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
    return maxToRenderPerBatch != null ? maxToRenderPerBatch : 10;
  }

  // onStartReachedThresholdOrDefault(this.props.onStartReachedThreshold)
  function onStartReachedThresholdOrDefault(onStartReachedThreshold) {
    return onStartReachedThreshold != null ? onStartReachedThreshold : 2;
  }

  // onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold)
  function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
    return onEndReachedThreshold != null ? onEndReachedThreshold : 2;
  }

  // windowSizeOrDefault(this.props.windowSize)
  function windowSizeOrDefault(windowSize) {
    return windowSize != null ? windowSize : 21;
  }
},334,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CellRenderMask = undefined;
  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var CellRenderMask = exports.CellRenderMask = /*#__PURE__*/function () {
    function CellRenderMask(numCells) {
      (0, _classCallCheck2.default)(this, CellRenderMask);
      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');
      this._numCells = numCells;
      if (numCells === 0) {
        this._regions = [];
      } else {
        this._regions = [{
          first: 0,
          last: numCells - 1,
          isSpacer: true
        }];
      }
    }
    (0, _createClass2.default)(CellRenderMask, [{
      key: "enumerateRegions",
      value: function enumerateRegions() {
        return this._regions;
      }
    }, {
      key: "addCells",
      value: function addCells(cells) {
        var _this$_regions;
        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');

        // VirtualizedList uses inclusive ranges, where zero-count states are
        // possible. E.g. [0, -1] for no cells, starting at 0.
        if (cells.last < cells.first) {
          return;
        }
        var _this$_findRegion = this._findRegion(cells.first),
          _this$_findRegion2 = (0, _slicedToArray2.default)(_this$_findRegion, 2),
          firstIntersect = _this$_findRegion2[0],
          firstIntersectIdx = _this$_findRegion2[1];
        var _this$_findRegion3 = this._findRegion(cells.last),
          _this$_findRegion4 = (0, _slicedToArray2.default)(_this$_findRegion3, 2),
          lastIntersect = _this$_findRegion4[0],
          lastIntersectIdx = _this$_findRegion4[1];

        // Fast-path if the cells to add are already all present in the mask. We
        // will otherwise need to do some mutation.
        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {
          return;
        }

        // We need to replace the existing covered regions with 1-3 new regions
        // depending whether we need to split spacers out of overlapping regions.
        var newLeadRegion = [];
        var newTailRegion = [];
        var newMainRegion = Object.assign({}, cells, {
          isSpacer: false
        });
        if (firstIntersect.first < newMainRegion.first) {
          if (firstIntersect.isSpacer) {
            newLeadRegion.push({
              first: firstIntersect.first,
              last: newMainRegion.first - 1,
              isSpacer: true
            });
          } else {
            newMainRegion.first = firstIntersect.first;
          }
        }
        if (lastIntersect.last > newMainRegion.last) {
          if (lastIntersect.isSpacer) {
            newTailRegion.push({
              first: newMainRegion.last + 1,
              last: lastIntersect.last,
              isSpacer: true
            });
          } else {
            newMainRegion.last = lastIntersect.last;
          }
        }
        var replacementRegions = [].concat(newLeadRegion, [newMainRegion], newTailRegion);
        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;
        (_this$_regions = this._regions).splice.apply(_this$_regions, [firstIntersectIdx, numRegionsToDelete].concat((0, _toConsumableArray2.default)(replacementRegions)));
      }
    }, {
      key: "numCells",
      value: function numCells() {
        return this._numCells;
      }
    }, {
      key: "equals",
      value: function equals(other) {
        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every(function (region, i) {
          return region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer;
        });
      }
    }, {
      key: "_findRegion",
      value: function _findRegion(cellIdx) {
        var firstIdx = 0;
        var lastIdx = this._regions.length - 1;
        while (firstIdx <= lastIdx) {
          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);
          var middleRegion = this._regions[middleIdx];
          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {
            return [middleRegion, middleIdx];
          } else if (cellIdx < middleRegion.first) {
            lastIdx = middleIdx - 1;
          } else if (cellIdx > middleRegion.last) {
            firstIdx = middleIdx + 1;
          }
        }
        (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);
      }
    }]);
    return CellRenderMask;
  }();
},335,[1,34,26,5,6,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);
  var _VirtualizedList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[13]);
  var _excluded = ["ItemSeparatorComponent", "SectionSeparatorComponent", "renderItem", "renderSectionFooter", "renderSectionHeader", "sections", "stickySectionHeadersEnabled"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  /**
   * Right now this just flattens everything into one list and uses VirtualizedList under the
   * hood. The only operation that might not scale well is concatting the data arrays of all the
   * sections when new props are received, which should be plenty fast for up to ~10,000 items.
   */
  var VirtualizedSectionList = /*#__PURE__*/function (_React$PureComponent) {
    (0, _inherits2.default)(VirtualizedSectionList, _React$PureComponent);
    var _super = _createSuper(VirtualizedSectionList);
    function VirtualizedSectionList() {
      var _this;
      (0, _classCallCheck2.default)(this, VirtualizedSectionList);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      // $FlowFixMe[missing-local-annot]
      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);
        return info && info.key || String(index);
      };
      _this._convertViewable = function (viewable) {
        var _info$index;
        (0, _invariant.default)(viewable.index != null, 'Received a broken ViewToken');
        var info = _this._subExtractor(viewable.index);
        if (!info) {
          return null;
        }
        var keyExtractorWithNullableIndex = info.section.keyExtractor;
        var keyExtractorWithNonNullableIndex = _this.props.keyExtractor || _$$_REQUIRE(_dependencyMap[14]).keyExtractor;
        var key = keyExtractorWithNullableIndex != null ? keyExtractorWithNullableIndex(viewable.item, info.index) : keyExtractorWithNonNullableIndex(viewable.item, (_info$index = info.index) != null ? _info$index : 0);
        return Object.assign({}, viewable, {
          index: info.index,
          key: key,
          section: info.section
        });
      };
      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
          changed = _ref.changed;
        var onViewableItemsChanged = _this.props.onViewableItemsChanged;
        if (onViewableItemsChanged != null) {
          onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, (0, _assertThisInitialized2.default)(_this)).filter(Boolean),
            changed: changed.map(_this._convertViewable, (0, _assertThisInitialized2.default)(_this)).filter(Boolean)
          });
        }
      };
      _this._renderItem = function (listItemCount) {
        return (
          // eslint-disable-next-line react/no-unstable-nested-components
          function (_ref2) {
            var item = _ref2.item,
              index = _ref2.index;
            var info = _this._subExtractor(index);
            if (!info) {
              return null;
            }
            var infoIndex = info.index;
            if (infoIndex == null) {
              var section = info.section;
              if (info.header === true) {
                var renderSectionHeader = _this.props.renderSectionHeader;
                return renderSectionHeader ? renderSectionHeader({
                  section: section
                }) : null;
              } else {
                var renderSectionFooter = _this.props.renderSectionFooter;
                return renderSectionFooter ? renderSectionFooter({
                  section: section
                }) : null;
              }
            } else {
              var renderItem = info.section.renderItem || _this.props.renderItem;
              var SeparatorComponent = _this._getSeparatorComponent(index, info, listItemCount);
              (0, _invariant.default)(renderItem, 'no renderItem!');
              return /*#__PURE__*/(0, _jsxRuntime.jsx)(ItemWithSeparator, {
                SeparatorComponent: SeparatorComponent,
                LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
                cellKey: info.key,
                index: infoIndex,
                item: item,
                leadingItem: info.leadingItem,
                leadingSection: info.leadingSection,
                prevCellKey: (_this._subExtractor(index - 1) || {}).key
                // Callback to provide updateHighlight for this item
                ,
                setSelfHighlightCallback: _this._setUpdateHighlightFor,
                setSelfUpdatePropsCallback: _this._setUpdatePropsFor
                // Provide child ability to set highlight/updateProps for previous item using prevCellKey
                ,
                updateHighlightFor: _this._updateHighlightFor,
                updatePropsFor: _this._updatePropsFor,
                renderItem: renderItem,
                section: info.section,
                trailingItem: info.trailingItem,
                trailingSection: info.trailingSection,
                inverted: !!_this.props.inverted
              });
            }
          }
        );
      };
      _this._updatePropsFor = function (cellKey, value) {
        var updateProps = _this._updatePropsMap[cellKey];
        if (updateProps != null) {
          updateProps(value);
        }
      };
      _this._updateHighlightFor = function (cellKey, value) {
        var updateHighlight = _this._updateHighlightMap[cellKey];
        if (updateHighlight != null) {
          updateHighlight(value);
        }
      };
      _this._setUpdateHighlightFor = function (cellKey, updateHighlightFn) {
        if (updateHighlightFn != null) {
          _this._updateHighlightMap[cellKey] = updateHighlightFn;
        } else {
          // $FlowFixMe[prop-missing]
          delete _this._updateHighlightFor[cellKey];
        }
      };
      _this._setUpdatePropsFor = function (cellKey, updatePropsFn) {
        if (updatePropsFn != null) {
          _this._updatePropsMap[cellKey] = updatePropsFn;
        } else {
          delete _this._updatePropsMap[cellKey];
        }
      };
      _this._updateHighlightMap = {};
      _this._updatePropsMap = {};
      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex;
        for (var i = 0; i < params.sectionIndex; i++) {
          index += this.props.getItemCount(this.props.sections[i].data) + 2;
        }
        var viewOffset = params.viewOffset || 0;
        if (this._listRef == null) {
          return;
        }
        var listRef = this._listRef;
        if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {
          var frame = listRef.__getListMetrics().getCellMetricsApprox(index - params.itemIndex, listRef.props);
          viewOffset += frame.length;
        }
        var toIndexParams = Object.assign({}, params, {
          viewOffset: viewOffset,
          index: index
        });
        // $FlowFixMe[incompatible-use]
        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        var _this$props = this.props,
          ItemSeparatorComponent = _this$props.ItemSeparatorComponent,
          SectionSeparatorComponent = _this$props.SectionSeparatorComponent,
          _renderItem = _this$props.renderItem,
          renderSectionFooter = _this$props.renderSectionFooter,
          renderSectionHeader = _this$props.renderSectionHeader,
          _sections = _this$props.sections,
          stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
          passThroughProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = this.props.stickySectionHeadersEnabled ? [] : undefined;
        var itemCount = 0;
        for (var section of this.props.sections) {
          // Track the section header indices
          if (stickyHeaderIndices != null) {
            stickyHeaderIndices.push(itemCount + listHeaderOffset);
          }

          // Add two for the section header and footer.
          itemCount += 2;
          itemCount += this.props.getItemCount(section.data);
        }
        var renderItem = this._renderItem(itemCount);
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedList.default, Object.assign({}, passThroughProps, {
          keyExtractor: this._keyExtractor,
          stickyHeaderIndices: stickyHeaderIndices,
          renderItem: renderItem,
          data: this.props.sections,
          getItem: function getItem(sections, index) {
            return _this2._getItem(_this2.props, sections, index);
          },
          getItemCount: function getItemCount() {
            return itemCount;
          },
          onViewableItemsChanged: this.props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
          ref: this._captureRef
        }));
      }
    }, {
      key: "_getItem",
      value: function _getItem(props, sections, index) {
        if (!sections) {
          return null;
        }
        var itemIdx = index - 1;
        for (var i = 0; i < sections.length; i++) {
          var section = sections[i];
          var sectionData = section.data;
          var itemCount = props.getItemCount(sectionData);
          if (itemIdx === -1 || itemIdx === itemCount) {
            // We intend for there to be overflow by one on both ends of the list.
            // This will be for headers and footers. When returning a header or footer
            // item the section itself is the item.
            return section;
          } else if (itemIdx < itemCount) {
            // If we are in the bounds of the list's data then return the item.
            return props.getItem(sectionData, itemIdx);
          } else {
            itemIdx -= itemCount + 2; // Add two for the header and footer
          }
        }
        return null;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var _this$props2 = this.props,
          getItem = _this$props2.getItem,
          getItemCount = _this$props2.getItemCount,
          keyExtractor = _this$props2.keyExtractor,
          sections = _this$props2.sections;
        for (var i = 0; i < sections.length; i++) {
          var section = sections[i];
          var sectionData = section.data;
          var key = section.key || String(i);
          itemIndex -= 1; // The section adds an item for the header
          if (itemIndex >= getItemCount(sectionData) + 1) {
            itemIndex -= getItemCount(sectionData) + 1; // The section adds an item for the footer.
          } else if (itemIndex === -1) {
            return {
              section: section,
              key: key + ':header',
              index: null,
              header: true,
              trailingSection: sections[i + 1]
            };
          } else if (itemIndex === getItemCount(sectionData)) {
            return {
              section: section,
              key: key + ':footer',
              index: null,
              header: false,
              trailingSection: sections[i + 1]
            };
          } else {
            var extractor = section.keyExtractor || keyExtractor || _$$_REQUIRE(_dependencyMap[14]).keyExtractor;
            return {
              section: section,
              key: key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),
              index: itemIndex,
              leadingItem: getItem(sectionData, itemIndex - 1),
              leadingSection: sections[i - 1],
              trailingItem: getItem(sectionData, itemIndex + 1),
              trailingSection: sections[i + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info, listItemCount) {
        info = info || this._subExtractor(index);
        if (!info) {
          return null;
        }
        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === listItemCount - 1;
        var isLastItemInSection = info.index === this.props.getItemCount(info.section.data) - 1;
        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }
        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }
        return null;
      }
    }]);
    return VirtualizedSectionList;
  }(React.PureComponent);
  function ItemWithSeparator(props) {
    var LeadingSeparatorComponent = props.LeadingSeparatorComponent,
      SeparatorComponent = props.SeparatorComponent,
      cellKey = props.cellKey,
      prevCellKey = props.prevCellKey,
      setSelfHighlightCallback = props.setSelfHighlightCallback,
      updateHighlightFor = props.updateHighlightFor,
      setSelfUpdatePropsCallback = props.setSelfUpdatePropsCallback,
      updatePropsFor = props.updatePropsFor,
      item = props.item,
      index = props.index,
      section = props.section,
      inverted = props.inverted;
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      leadingSeparatorHiglighted = _React$useState2[0],
      setLeadingSeparatorHighlighted = _React$useState2[1];
    var _React$useState3 = React.useState(false),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      separatorHighlighted = _React$useState4[0],
      setSeparatorHighlighted = _React$useState4[1];
    var _React$useState5 = React.useState({
        leadingItem: props.leadingItem,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.item,
        trailingSection: props.trailingSection
      }),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
      leadingSeparatorProps = _React$useState6[0],
      setLeadingSeparatorProps = _React$useState6[1];
    var _React$useState7 = React.useState({
        leadingItem: props.item,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.trailingItem,
        trailingSection: props.trailingSection
      }),
      _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
      separatorProps = _React$useState8[0],
      setSeparatorProps = _React$useState8[1];
    React.useEffect(function () {
      setSelfHighlightCallback(cellKey, setSeparatorHighlighted);
      // $FlowFixMe[incompatible-call]
      setSelfUpdatePropsCallback(cellKey, setSeparatorProps);
      return function () {
        setSelfUpdatePropsCallback(cellKey, null);
        setSelfHighlightCallback(cellKey, null);
      };
    }, [cellKey, setSelfHighlightCallback, setSeparatorProps, setSelfUpdatePropsCallback]);
    var separators = {
      highlight: function highlight() {
        setLeadingSeparatorHighlighted(true);
        setSeparatorHighlighted(true);
        if (prevCellKey != null) {
          updateHighlightFor(prevCellKey, true);
        }
      },
      unhighlight: function unhighlight() {
        setLeadingSeparatorHighlighted(false);
        setSeparatorHighlighted(false);
        if (prevCellKey != null) {
          updateHighlightFor(prevCellKey, false);
        }
      },
      updateProps: function updateProps(select, newProps) {
        if (select === 'leading') {
          if (LeadingSeparatorComponent != null) {
            setLeadingSeparatorProps(Object.assign({}, leadingSeparatorProps, newProps));
          } else if (prevCellKey != null) {
            // update the previous item's separator
            updatePropsFor(prevCellKey, Object.assign({}, leadingSeparatorProps, newProps));
          }
        } else if (select === 'trailing' && SeparatorComponent != null) {
          setSeparatorProps(Object.assign({}, separatorProps, newProps));
        }
      }
    };
    var element = props.renderItem({
      item: item,
      index: index,
      section: section,
      separators: separators
    });
    var leadingSeparator = LeadingSeparatorComponent != null && /*#__PURE__*/(0, _jsxRuntime.jsx)(LeadingSeparatorComponent, Object.assign({
      highlighted: leadingSeparatorHiglighted
    }, leadingSeparatorProps));
    var separator = SeparatorComponent != null && /*#__PURE__*/(0, _jsxRuntime.jsx)(SeparatorComponent, Object.assign({
      highlighted: separatorHighlighted
    }, separatorProps));
    return leadingSeparator || separator ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      children: [inverted === false ? leadingSeparator : separator, element, inverted === false ? separator : leadingSeparator]
    }) : element;
  }

  /* $FlowFixMe[class-object-subtyping] added when improving typing for this
   * parameters */
  // $FlowFixMe[method-unbinding]
  module.exports = VirtualizedSectionList;
},336,[1,26,119,5,6,16,13,15,12,2,323,24,153,194,322]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Image = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = (0, _createAnimatedComponent.default)(_Image.default);
},337,[1,338,305,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _TextAncestor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _ImageAnalyticsTagContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _ImageInjection = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _ImageViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _NativeImageLoaderAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _resolveAssetSource = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _TextInlineImageNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[13]);
  var _excluded = ["height", "width"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _requestId = 1;
  function generateRequestId() {
    return _requestId++;
  }

  /**
   * Retrieve the width and height (in pixels) of an image prior to displaying it
   *
   * See https://reactnative.dev/docs/image#getsize
   */
  function getSize(url, success, failure) {
    return _NativeImageLoaderAndroid.default.getSize(url).then(function (sizes) {
      success(sizes.width, sizes.height);
    }).catch(failure || function () {
      console.warn('Failed to get size for image: ' + url);
    });
  }

  /**
   * Retrieve the width and height (in pixels) of an image prior to displaying it
   * with the ability to provide the headers for the request
   *
   * See https://reactnative.dev/docs/image#getsizewithheaders
   */
  function getSizeWithHeaders(url, headers, success, failure) {
    return _NativeImageLoaderAndroid.default.getSizeWithHeaders(url, headers).then(function (sizes) {
      success(sizes.width, sizes.height);
    }).catch(failure || function () {
      console.warn('Failed to get size for image: ' + url);
    });
  }
  function prefetchWithMetadata(url, queryRootName, rootTag, callback) {
    // TODO: T79192300 Log queryRootName and rootTag
    prefetch(url, callback);
  }
  function prefetch(url, callback) {
    var requestId = generateRequestId();
    callback && callback(requestId);
    return _NativeImageLoaderAndroid.default.prefetchImage(url, requestId);
  }
  function abortPrefetch(requestId) {
    _NativeImageLoaderAndroid.default.abortRequest(requestId);
  }

  /**
   * Perform cache interrogation.
   *
   * See https://reactnative.dev/docs/image#querycache
   */
  function queryCache(_x) {
    return _queryCache.apply(this, arguments);
  }
  function _queryCache() {
    _queryCache = (0, _asyncToGenerator2.default)(function* (urls) {
      return yield _NativeImageLoaderAndroid.default.queryCache(urls);
    });
    return _queryCache.apply(this, arguments);
  }
  /**
   * A React component for displaying different types of images,
   * including network images, static resources, temporary local images, and
   * images from local disk, such as the camera roll.
   *
   * See https://reactnative.dev/docs/image
   */
  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */
  var BaseImage = function BaseImage(props, forwardedRef) {
    var _source$, _ref, _props$ariaLabel, _props$ariaLabelledb, _props$ariaBusy, _props$accessibilityS, _props$ariaChecked, _props$accessibilityS2, _props$ariaDisabled, _props$accessibilityS3, _props$ariaExpanded, _props$accessibilityS4, _props$ariaSelected, _props$accessibilityS5;
    var source = (0, _$$_REQUIRE(_dependencyMap[14]).getImageSourcesFromImageProps)(props) || {
      uri: undefined,
      width: undefined,
      height: undefined
    };
    var defaultSource = (0, _resolveAssetSource.default)(props.defaultSource);
    var loadingIndicatorSource = (0, _resolveAssetSource.default)(props.loadingIndicatorSource);
    if (props.children) {
      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }
    if (props.defaultSource && props.loadingIndicatorSource) {
      throw new Error('The <Image> component cannot have defaultSource and loadingIndicatorSource at the same time. Please use either defaultSource or loadingIndicatorSource.');
    }
    var style;
    var sources;
    if (Array.isArray(source)) {
      // $FlowFixMe[underconstrained-implicit-instantiation]
      style = (0, _flattenStyle.default)([styles.base, props.style]);
      sources = source;
    } else {
      // $FlowFixMe[incompatible-type]
      var _source$width = source.width,
        _width = _source$width === undefined ? props.width : _source$width,
        _source$height = source.height,
        _height = _source$height === undefined ? props.height : _source$height,
        uri = source.uri;
      // $FlowFixMe[underconstrained-implicit-instantiation]
      style = (0, _flattenStyle.default)([{
        width: _width,
        height: _height
      }, styles.base, props.style]);
      sources = [source];
      if (uri === '') {
        console.warn('source.uri should not be an empty string');
      }
    }
    var height = props.height,
      width = props.width,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var onLoadStart = props.onLoadStart,
      onLoad = props.onLoad,
      onLoadEnd = props.onLoadEnd,
      onError = props.onError;
    var nativeProps = Object.assign({}, restProps, {
      style: style,
      shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
      src: sources,
      /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
       * when making Flow check .android.js files. */
      headers: (source == null ? undefined : (_source$ = source[0]) == null ? undefined : _source$.headers) || (source == null ? undefined : source.headers),
      defaultSrc: defaultSource ? defaultSource.uri : null,
      loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null,
      ref: forwardedRef,
      accessibilityLabel: (_ref = (_props$ariaLabel = props['aria-label']) != null ? _props$ariaLabel : props.accessibilityLabel) != null ? _ref : props.alt,
      accessibilityLabelledBy: (_props$ariaLabelledb = props == null ? undefined : props['aria-labelledby']) != null ? _props$ariaLabelledb : props == null ? undefined : props.accessibilityLabelledBy,
      accessible: props.alt !== undefined ? true : props.accessible,
      accessibilityState: {
        busy: (_props$ariaBusy = props['aria-busy']) != null ? _props$ariaBusy : (_props$accessibilityS = props.accessibilityState) == null ? undefined : _props$accessibilityS.busy,
        checked: (_props$ariaChecked = props['aria-checked']) != null ? _props$ariaChecked : (_props$accessibilityS2 = props.accessibilityState) == null ? undefined : _props$accessibilityS2.checked,
        disabled: (_props$ariaDisabled = props['aria-disabled']) != null ? _props$ariaDisabled : (_props$accessibilityS3 = props.accessibilityState) == null ? undefined : _props$accessibilityS3.disabled,
        expanded: (_props$ariaExpanded = props['aria-expanded']) != null ? _props$ariaExpanded : (_props$accessibilityS4 = props.accessibilityState) == null ? undefined : _props$accessibilityS4.expanded,
        selected: (_props$ariaSelected = props['aria-selected']) != null ? _props$ariaSelected : (_props$accessibilityS5 = props.accessibilityState) == null ? undefined : _props$accessibilityS5.selected
      }
    });
    var objectFit =
    // $FlowFixMe[prop-missing]
    style && style.objectFit ?
    // $FlowFixMe[incompatible-call]
    (0, _$$_REQUIRE(_dependencyMap[15]).convertObjectFitToResizeMode)(style.objectFit) : null;
    // $FlowFixMe[prop-missing]
    var resizeMode =
    // $FlowFixMe[prop-missing]
    objectFit || props.resizeMode || style && style.resizeMode || 'cover';
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageAnalyticsTagContext.default.Consumer, {
      children: function children(analyticTag) {
        var nativePropsWithAnalytics = analyticTag !== null ? Object.assign({}, nativeProps, {
          internal_analyticTag: analyticTag
        }) : nativeProps;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Consumer, {
          children: function children(hasTextAncestor) {
            if (hasTextAncestor) {
              return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextInlineImageNativeComponent.default
              // $FlowFixMe[incompatible-type]
              , {
                style: style
                // $FlowFixMe[incompatible-type]
                ,
                resizeMode: resizeMode,
                headers: nativeProps.headers,
                src: sources,
                ref: forwardedRef
              });
            }
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageViewNativeComponent.default, Object.assign({}, nativePropsWithAnalytics, {
              // $FlowFixMe[incompatible-type]
              resizeMode: resizeMode
            }));
          }
        });
      }
    });
  };
  var Image = React.forwardRef(BaseImage);
  if (_ImageInjection.default.unstable_createImageComponent != null) {
    Image = _ImageInjection.default.unstable_createImageComponent(Image);
  }
  Image.displayName = 'Image';

  /**
   * Retrieve the width and height (in pixels) of an image prior to displaying it
   *
   * See https://reactnative.dev/docs/image#getsize
   */
  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */
  Image.getSize = getSize;

  /**
   * Retrieve the width and height (in pixels) of an image prior to displaying it
   * with the ability to provide the headers for the request
   *
   * See https://reactnative.dev/docs/image#getsizewithheaders
   */
  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */
  Image.getSizeWithHeaders = getSizeWithHeaders;

  /**
   * Prefetches a remote image for later use by downloading it to the disk
   * cache
   *
   * See https://reactnative.dev/docs/image#prefetch
   */
  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */
  Image.prefetch = prefetch;

  /**
   * Prefetches a remote image for later use by downloading it to the disk
   * cache, and adds metadata for queryRootName and rootTag.
   *
   * See https://reactnative.dev/docs/image#prefetch
   */
  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */
  Image.prefetchWithMetadata = prefetchWithMetadata;

  /**
   * Abort prefetch request.
   *
   * See https://reactnative.dev/docs/image#abortprefetch
   */
  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */
  Image.abortPrefetch = abortPrefetch;

  /**
   * Perform cache interrogation.
   *
   * See https://reactnative.dev/docs/image#querycache
   */
  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */
  Image.queryCache = queryCache;

  /**
   * Resolves an asset reference into an object.
   *
   * See https://reactnative.dev/docs/image#resolveassetsource
   */
  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an
   * error found when Flow v0.89 was deployed. To see the error, delete this
   * comment and run Flow. */
  Image.resolveAssetSource = _resolveAssetSource.default;

  /**
   * Switch to `deprecated-react-native-prop-types` for compatibility with future
   * releases. This is deprecated and will be removed in the future.
   */
  Image.propTypes = _$$_REQUIRE(_dependencyMap[16]).ImagePropTypes;
  var styles = _StyleSheet.default.create({
    base: {
      overflow: 'hidden'
    }
  });
  module.exports = Image;
},338,[1,119,339,157,196,158,340,341,342,344,177,343,153,194,345,346,256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
},339,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var Context = React.createContext(null);
  var _default = exports.default = Context;
},340,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ImageViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _TextInlineImageNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format strict-local
   * 
   */
  var _default = exports.default = {
    unstable_createImageComponent: null
  };
},341,[1,342,343,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
      topLoadStart: {
        registrationName: 'onLoadStart'
      },
      topProgress: {
        registrationName: 'onProgress'
      },
      topError: {
        registrationName: 'onError'
      },
      topLoad: {
        registrationName: 'onLoad'
      },
      topLoadEnd: {
        registrationName: 'onLoadEnd'
      }
    },
    validAttributes: {
      blurRadius: true,
      internal_analyticTag: true,
      resizeMode: true,
      tintColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      borderBottomLeftRadius: true,
      borderTopLeftRadius: true,
      resizeMethod: true,
      src: true,
      borderRadius: true,
      headers: true,
      shouldNotifyLoadEvents: true,
      defaultSrc: true,
      overlayColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      },
      accessible: true,
      progressiveRenderingEnabled: true,
      fadeDuration: true,
      borderBottomRightRadius: true,
      borderTopRightRadius: true,
      loadingIndicatorSrc: true
    }
  } : {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
      topLoadStart: {
        registrationName: 'onLoadStart'
      },
      topProgress: {
        registrationName: 'onProgress'
      },
      topError: {
        registrationName: 'onError'
      },
      topPartialLoad: {
        registrationName: 'onPartialLoad'
      },
      topLoad: {
        registrationName: 'onLoad'
      },
      topLoadEnd: {
        registrationName: 'onLoadEnd'
      }
    },
    validAttributes: Object.assign({
      blurRadius: true,
      capInsets: {
        diff: _$$_REQUIRE(_dependencyMap[4])
      },
      defaultSource: {
        process: _$$_REQUIRE(_dependencyMap[5])
      },
      internal_analyticTag: true,
      resizeMode: true,
      source: true,
      tintColor: {
        process: _$$_REQUIRE(_dependencyMap[3]).default
      }
    }, (0, _$$_REQUIRE(_dependencyMap[6]).ConditionallyIgnoredEventHandlers)({
      onLoadStart: true,
      onLoad: true,
      onLoadEnd: true,
      onProgress: true,
      onError: true,
      onPartialLoad: true
    }))
  };
  var ImageViewNativeComponent = NativeComponentRegistry.get('RCTImageView', function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var _default = exports.default = ImageViewNativeComponent;
},342,[1,160,21,164,175,177,190]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTTextInlineImage',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
      resizeMode: true,
      src: true,
      tintColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      headers: true
    }
  };
  var TextInlineImage = NativeComponentRegistry.get('RCTTextInlineImage', function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var _default = exports.default = TextInlineImage;
},343,[160,164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('ImageLoader');
},344,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSourcesFromImageProps = getImageSourcesFromImageProps;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _resolveAssetSource = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * A function which returns the appropriate value for image source
   * by resolving the `source`, `src` and `srcSet` props.
   */
  function getImageSourcesFromImageProps(imageProps) {
    var source = (0, _resolveAssetSource.default)(imageProps.source);
    var sources;
    var crossOrigin = imageProps.crossOrigin,
      referrerPolicy = imageProps.referrerPolicy,
      src = imageProps.src,
      srcSet = imageProps.srcSet,
      width = imageProps.width,
      height = imageProps.height;
    var headers = {};
    if (crossOrigin === 'use-credentials') {
      headers['Access-Control-Allow-Credentials'] = 'true';
    }
    if (referrerPolicy != null) {
      headers['Referrer-Policy'] = referrerPolicy;
    }
    if (srcSet != null) {
      var sourceList = [];
      var srcSetList = srcSet.split(', ');
      // `src` prop should be used with default scale if `srcSet` does not have 1x scale.
      var shouldUseSrcForDefaultScale = true;
      srcSetList.forEach(function (imageSrc) {
        var _imageSrc$split = imageSrc.split(' '),
          _imageSrc$split2 = (0, _slicedToArray2.default)(_imageSrc$split, 2),
          uri = _imageSrc$split2[0],
          _imageSrc$split2$ = _imageSrc$split2[1],
          xScale = _imageSrc$split2$ === undefined ? '1x' : _imageSrc$split2$;
        if (!xScale.endsWith('x')) {
          console.warn('The provided format for scale is not supported yet. Please use scales like 1x, 2x, etc.');
        } else {
          var scale = parseInt(xScale.split('x')[0], 10);
          if (!isNaN(scale)) {
            // 1x scale is provided in `srcSet` prop so ignore the `src` prop if provided.
            shouldUseSrcForDefaultScale = scale === 1 ? false : shouldUseSrcForDefaultScale;
            sourceList.push({
              headers: headers,
              scale: scale,
              uri: uri,
              width: width,
              height: height
            });
          }
        }
      });
      if (shouldUseSrcForDefaultScale && src != null) {
        sourceList.push({
          headers: headers,
          scale: 1,
          uri: src,
          width: width,
          height: height
        });
      }
      if (sourceList.length === 0) {
        console.warn('The provided value for srcSet is not valid.');
      }
      sources = sourceList;
    } else if (src != null) {
      sources = [{
        uri: src,
        headers: headers,
        width: width,
        height: height
      }];
    } else {
      sources = source;
    }
    return sources;
  }
},345,[1,26,177]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.convertObjectFitToResizeMode = convertObjectFitToResizeMode;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  function convertObjectFitToResizeMode(objectFit) {
    var objectFitMap = {
      contain: 'contain',
      cover: 'cover',
      fill: 'stretch',
      'scale-down': 'contain'
    };
    return objectFitMap[objectFit];
  }
},346,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _RefreshControl = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _ScrollView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _splitLayoutProps2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _useMergeRefs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _useAnimatedProps5 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));
  var React = _react;
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[12]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * @see https://github.com/facebook/react-native/commit/b8c8562
   */
  var AnimatedScrollView = React.forwardRef(function (props, forwardedRef) {
    // (Android only) When a ScrollView has a RefreshControl and
    // any `style` property set with an Animated.Value, the CSS
    // gets incorrectly applied twice. This is because ScrollView
    // swaps the parent/child relationship of itself and the
    // RefreshControl component (see ScrollView.js for more details).
    if (_Platform.default.OS === 'android' && props.refreshControl != null && props.style != null) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(AnimatedScrollViewWithInvertedRefreshControl, Object.assign({
        scrollEventThrottle: 0.0001
      }, props, {
        ref: forwardedRef,
        refreshControl: props.refreshControl
      }));
    } else {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(AnimatedScrollViewWithoutInvertedRefreshControl, Object.assign({
        scrollEventThrottle: 0.0001
      }, props, {
        ref: forwardedRef
      }));
    }
  });
  var AnimatedScrollViewWithInvertedRefreshControl = React.forwardRef(
  // $FlowFixMe[incompatible-call]
  function (props, forwardedRef) {
    // Split `props` into the animate-able props for the parent (RefreshControl)
    // and child (ScrollView).
    var _useMemo = (0, _react.useMemo)(function () {
        // $FlowFixMe[underconstrained-implicit-instantiation]
        // $FlowFixMe[incompatible-call]
        var _splitLayoutProps = (0, _splitLayoutProps2.default)((0, _flattenStyle.default)(props.style)),
          outer = _splitLayoutProps.outer,
          inner = _splitLayoutProps.inner;
        return {
          intermediatePropsForRefreshControl: {
            style: outer
          },
          intermediatePropsForScrollView: Object.assign({}, props, {
            style: inner
          })
        };
      }, [props]),
      intermediatePropsForRefreshControl = _useMemo.intermediatePropsForRefreshControl,
      intermediatePropsForScrollView = _useMemo.intermediatePropsForScrollView;

    // Handle animated props on `refreshControl`.
    var _useAnimatedProps = (0, _useAnimatedProps5.default)(intermediatePropsForRefreshControl),
      _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
      refreshControlAnimatedProps = _useAnimatedProps2[0],
      refreshControlRef = _useAnimatedProps2[1];
    // NOTE: Assumes that refreshControl.ref` and `refreshControl.style` can be
    // safely clobbered.
    var refreshControl = React.cloneElement(props.refreshControl, Object.assign({}, refreshControlAnimatedProps, {
      ref: refreshControlRef
    }));

    // Handle animated props on `NativeDirectionalScrollView`.
    var _useAnimatedProps3 = (0, _useAnimatedProps5.default)(intermediatePropsForScrollView),
      _useAnimatedProps4 = (0, _slicedToArray2.default)(_useAnimatedProps3, 2),
      scrollViewAnimatedProps = _useAnimatedProps4[0],
      scrollViewRef = _useAnimatedProps4[1];
    var ref = (0, _useMergeRefs.default)(scrollViewRef, forwardedRef);
    return (
      /*#__PURE__*/
      // $FlowFixMe[incompatible-use] Investigate useAnimatedProps return value
      (0, _jsxRuntime.jsx)(_ScrollView.default, Object.assign({}, scrollViewAnimatedProps, {
        ref: ref,
        refreshControl: refreshControl
        // Because `refreshControl` is a clone of `props.refreshControl` with
        // `refreshControlAnimatedProps` added, we need to pass ScrollView.js
        // the combined styles since it also splits the outer/inner styles for
        // its parent/child, respectively. Without this, the refreshControl
        // styles would be ignored.
        ,
        style: _StyleSheet.default.compose(scrollViewAnimatedProps.style, refreshControlAnimatedProps.style)
      }))
    );
  });
  var AnimatedScrollViewWithoutInvertedRefreshControl = (0, _createAnimatedComponent.default)(_ScrollView.default);
  var _default = exports.default = AnimatedScrollView;
},347,[1,26,348,351,157,354,196,21,306,305,307,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  var _PullToRefreshViewNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9]);
  var _excluded = ["enabled", "colors", "progressBackgroundColor", "size"],
    _excluded2 = ["tintColor", "titleColor", "title"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var React = _$$_REQUIRE(_dependencyMap[10]);
  /**
   * This component is used inside a ScrollView or ListView to add pull to refresh
   * functionality. When the ScrollView is at `scrollY: 0`, swiping down
   * triggers an `onRefresh` event.
   *
   * ### Usage example
   *
   * ``` js
   * class RefreshableList extends Component {
   *   constructor(props) {
   *     super(props);
   *     this.state = {
   *       refreshing: false,
   *     };
   *   }
   *
   *   _onRefresh() {
   *     this.setState({refreshing: true});
   *     fetchData().then(() => {
   *       this.setState({refreshing: false});
   *     });
   *   }
   *
   *   render() {
   *     return (
   *       <ListView
   *         refreshControl={
   *           <RefreshControl
   *             refreshing={this.state.refreshing}
   *             onRefresh={this._onRefresh.bind(this)}
   *           />
   *         }
   *         ...
   *       >
   *       ...
   *       </ListView>
   *     );
   *   }
   *   ...
   * }
   * ```
   *
   * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true
   * in the `onRefresh` function otherwise the refresh indicator will stop immediately.
   */
  var RefreshControl = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(RefreshControl, _React$Component);
    var _super = _createSuper(RefreshControl);
    function RefreshControl() {
      var _this;
      (0, _classCallCheck2.default)(this, RefreshControl);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this._lastNativeRefreshing = false;
      _this._onRefresh = function () {
        _this._lastNativeRefreshing = true;

        // $FlowFixMe[unused-promise]
        _this.props.onRefresh && _this.props.onRefresh();

        // The native component will start refreshing so force an update to
        // make sure it stays in sync with the js component.
        _this.forceUpdate();
      };
      _this._setNativeRef = function (ref) {
        _this._nativeRef = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(RefreshControl, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativeRefreshing = this.props.refreshing;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        // RefreshControl is a controlled component so if the native refreshing
        // value doesn't match the current js refreshing prop update it to
        // the js value.
        if (this.props.refreshing !== prevProps.refreshing) {
          this._lastNativeRefreshing = this.props.refreshing;
        } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {
          {
            _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
          }
          this._lastNativeRefreshing = this.props.refreshing;
        }
      }
    }, {
      key: "render",
      value: function render() {
        {
          var _this$props2 = this.props,
            tintColor = _this$props2.tintColor,
            titleColor = _this$props2.titleColor,
            title = _this$props2.title,
            _props = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_AndroidSwipeRefreshLayoutNativeComponent.default, Object.assign({}, _props, {
            ref: this._setNativeRef,
            onRefresh: this._onRefresh
          }));
        }
      }
    }]);
    return RefreshControl;
  }(React.Component);
  module.exports = RefreshControl;
},348,[1,119,5,6,13,15,12,349,350,194,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var nativeComponentName = 'AndroidSwipeRefreshLayout';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidSwipeRefreshLayout',
    directEventTypes: {
      topRefresh: {
        registrationName: 'onRefresh'
      }
    },
    validAttributes: Object.assign({
      enabled: true,
      colors: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      progressBackgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[5])
      },
      size: true,
      progressViewOffset: true,
      refreshing: true
    }, _$$_REQUIRE(_dependencyMap[6]).ConditionallyIgnoredEventHandlers({
      onRefresh: true
    }))
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[7]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var Commands = exports.Commands = {
    setNativeRefreshing: function setNativeRefreshing(ref, value) {
      _$$_REQUIRE(_dependencyMap[8]).dispatchCommand(ref, "setNativeRefreshing", [value]);
    }
  };
},349,[1,193,206,153,176,164,190,160,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var nativeComponentName = 'RCTRefreshControl';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTRefreshControl',
    directEventTypes: {
      topRefresh: {
        registrationName: 'onRefresh'
      }
    },
    validAttributes: Object.assign({
      tintColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      titleColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      title: true,
      progressViewOffset: true,
      refreshing: true
    }, _$$_REQUIRE(_dependencyMap[5]).ConditionallyIgnoredEventHandlers({
      onRefresh: true
    }))
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[6]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var Commands = exports.Commands = {
    setNativeRefreshing: function setNativeRefreshing(ref, refreshing) {
      _$$_REQUIRE(_dependencyMap[7]).dispatchCommand(ref, "setNativeRefreshing", [refreshing]);
    }
  };
},350,[1,193,206,153,164,190,160,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _AnimatedImplementation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _FrameRateLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _splitLayoutProps2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));
  var _Dimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));
  var _dismissKeyboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));
  var _Keyboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));
  var _TextInputState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));
  var _AndroidHorizontalScrollContentViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));
  var _AndroidHorizontalScrollViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));
  var _processDecelerationRate = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));
  var _ScrollContentViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));
  var _ScrollViewCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));
  var _ScrollViewContext = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[25]));
  var _ScrollViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[26]));
  var _ScrollViewStickyHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[27]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[28]));
  var _memoizeOne = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[29]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[30]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[31]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[32]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  if (_Platform.default.OS === 'ios') {
    _$$_REQUIRE(_dependencyMap[33]); // Force side effects to prevent T55744311
  }
  var _ref = _Platform.default.OS === 'android' ? {
      NativeHorizontalScrollViewTuple: [_AndroidHorizontalScrollViewNativeComponent.default, _AndroidHorizontalScrollContentViewNativeComponent.default],
      NativeVerticalScrollViewTuple: [_ScrollViewNativeComponent.default, _View.default]
    } : {
      NativeHorizontalScrollViewTuple: [_ScrollViewNativeComponent.default, _ScrollContentViewNativeComponent.default],
      NativeVerticalScrollViewTuple: [_ScrollViewNativeComponent.default, _ScrollContentViewNativeComponent.default]
    },
    NativeHorizontalScrollViewTuple = _ref.NativeHorizontalScrollViewTuple,
    NativeVerticalScrollViewTuple = _ref.NativeVerticalScrollViewTuple;

  /*
   * iOS scroll event timing nuances:
   * ===============================
   *
   *
   * Scrolling without bouncing, if you touch down:
   * -------------------------------
   *
   * 1. `onMomentumScrollBegin` (when animation begins after letting up)
   *    ... physical touch starts ...
   * 2. `onTouchStartCapture`   (when you press down to stop the scroll)
   * 3. `onTouchStart`          (same, but bubble phase)
   * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)
   * 5. `onMomentumScrollEnd`
   *
   *
   * Scrolling with bouncing, if you touch down:
   * -------------------------------
   *
   * 1. `onMomentumScrollBegin` (when animation begins after letting up)
   *    ... bounce begins ...
   *    ... some time elapses ...
   *    ... physical touch during bounce ...
   * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)
   * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)
   * 4. `onTouchStart`          (same, but bubble phase)
   * 5. `onTouchEnd`            (You could hold the touch start for a long time)
   * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)
   *
   * So when we receive an `onTouchStart`, how can we tell if we are touching
   * *during* an animation (which then causes the animation to stop)? The only way
   * to tell is if the `touchStart` occurred immediately after the
   * `onMomentumScrollEnd`.
   *
   * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if
   * necessary
   *
   * `ScrollView` also includes logic for blurring a currently focused input
   * if one is focused while scrolling. This is a natural place
   * to put this logic since it can support not dismissing the keyboard while
   * scrolling, unless a recognized "tap"-like gesture has occurred.
   *
   * The public lifecycle API includes events for keyboard interaction, responder
   * interaction, and scrolling (among others). The keyboard callbacks
   * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll
   * responder's props so that you can guarantee that the scroll responder's
   * internal state has been updated accordingly (and deterministically) by
   * the time the props callbacks are invoke. Otherwise, you would always wonder
   * if the scroll responder is currently in a state where it recognizes new
   * keyboard positions etc. If coordinating scrolling with keyboard movement,
   * *always* use these hooks instead of listening to your own global keyboard
   * events.
   *
   * Public keyboard lifecycle API: (props callbacks)
   *
   * Standard Keyboard Appearance Sequence:
   *
   *   this.props.onKeyboardWillShow
   *   this.props.onKeyboardDidShow
   *
   * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate
   * tap inside the scroll responder's scrollable region was responsible
   * for the dismissal of the keyboard. There are other reasons why the
   * keyboard could be dismissed.
   *
   *   this.props.onScrollResponderKeyboardDismissed
   *
   * Standard Keyboard Hide Sequence:
   *
   *   this.props.onKeyboardWillHide
   *   this.props.onKeyboardDidHide
   */

  // Public methods for ScrollView

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
  /**
   * Component that wraps platform ScrollView while providing
   * integration with touch locking "responder" system.
   *
   * Keep in mind that ScrollViews must have a bounded height in order to work,
   * since they contain unbounded-height children into a bounded container (via
   * a scroll interaction). In order to bound the height of a ScrollView, either
   * set the height of the view directly (discouraged) or make sure all parent
   * views have bounded height. Forgetting to transfer `{flex: 1}` down the
   * view stack can lead to errors here, which the element inspector makes
   * easy to debug.
   *
   * Doesn't yet support other contained responders from blocking this scroll
   * view from becoming the responder.
   *
   *
   * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?
   *
   * `ScrollView` simply renders all its react child components at once. That
   * makes it very easy to understand and use.
   *
   * On the other hand, this has a performance downside. Imagine you have a very
   * long list of items you want to display, maybe several screens worth of
   * content. Creating JS components and native views for everything all at once,
   * much of which may not even be shown, will contribute to slow rendering and
   * increased memory usage.
   *
   * This is where `FlatList` comes into play. `FlatList` renders items lazily,
   * just when they are about to appear, and removes items that scroll way off
   * screen to save memory and processing time.
   *
   * `FlatList` is also handy if you want to render separators between your items,
   * multiple columns, infinite scroll loading, or any number of other features it
   * supports out of the box.
   */
  var ScrollView = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(ScrollView, _React$Component);
    var _super = _createSuper(ScrollView);
    function ScrollView(props) {
      var _this$props$contentOf, _this$props$contentOf2, _this$props$contentIn, _this$props$contentIn2;
      var _this;
      (0, _classCallCheck2.default)(this, ScrollView);
      _this = _super.call(this, props);
      _this._scrollAnimatedValueAttachment = null;
      _this._stickyHeaderRefs = new Map();
      _this._headerLayoutYs = new Map();
      _this._keyboardMetrics = null;
      _this._additionalScrollOffset = 0;
      _this._isTouching = false;
      _this._lastMomentumScrollBeginTime = 0;
      _this._lastMomentumScrollEndTime = 0;
      // Reset to false every time becomes responder. This is used to:
      // - Determine if the scroll view has been scrolled and therefore should
      // refuse to give up its responder lock.
      // - Determine if releasing should dismiss the keyboard when we are in
      // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').
      _this._observedScrollSinceBecomingResponder = false;
      _this._becameResponderWhileAnimating = false;
      _this._preventNegativeScrollOffset = null;
      _this._animated = null;
      _this._subscriptionKeyboardWillShow = null;
      _this._subscriptionKeyboardWillHide = null;
      _this._subscriptionKeyboardDidShow = null;
      _this._subscriptionKeyboardDidHide = null;
      _this.state = {
        layoutHeight: null
      };
      /**
       * Returns a reference to the underlying scroll responder, which supports
       * operations like `scrollTo`. All ScrollView-like components should
       * implement this method so that they can be composed while providing access
       * to the underlying scroll responder's methods.
       */
      _this.getScrollResponder = function () {
        // $FlowFixMe[unclear-type]
        return (0, _assertThisInitialized2.default)(_this);
      };
      _this.getScrollableNode = function () {
        return (0, _$$_REQUIRE(_dependencyMap[34]).findNodeHandle)(_this._scrollView.nativeInstance);
      };
      _this.getInnerViewNode = function () {
        return (0, _$$_REQUIRE(_dependencyMap[34]).findNodeHandle)(_this._innerView.nativeInstance);
      };
      _this.getInnerViewRef = function () {
        return _this._innerView.nativeInstance;
      };
      _this.getNativeScrollRef = function () {
        return _this._scrollView.nativeInstance;
      };
      /**
       * Scrolls to a given x, y offset, either immediately or with a smooth animation.
       *
       * Example:
       *
       * `scrollTo({x: 0, y: 0, animated: true})`
       *
       * Note: The weird function signature is due to the fact that, for historical reasons,
       * the function also accepts separate arguments as an alternative to the options object.
       * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.
       */
      _this.scrollTo = function (options, deprecatedX, deprecatedAnimated) {
        var x, y, animated;
        if (typeof options === 'number') {
          console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");
          y = options;
          x = deprecatedX;
          animated = deprecatedAnimated;
        } else if (options) {
          y = options.y;
          x = options.x;
          animated = options.animated;
        }
        if (_this._scrollView.nativeInstance == null) {
          return;
        }
        _ScrollViewCommands.default.scrollTo(_this._scrollView.nativeInstance, x || 0, y || 0, animated !== false);
      };
      /**
       * If this is a vertical ScrollView scrolls to the bottom.
       * If this is a horizontal ScrollView scrolls to the right.
       *
       * Use `scrollToEnd({animated: true})` for smooth animated scrolling,
       * `scrollToEnd({animated: false})` for immediate scrolling.
       * If no options are passed, `animated` defaults to true.
       */
      _this.scrollToEnd = function (options) {
        // Default to true
        var animated = (options && options.animated) !== false;
        if (_this._scrollView.nativeInstance == null) {
          return;
        }
        _ScrollViewCommands.default.scrollToEnd(_this._scrollView.nativeInstance, animated);
      };
      /**
       * Displays the scroll indicators momentarily.
       *
       * @platform ios
       */
      _this.flashScrollIndicators = function () {
        if (_this._scrollView.nativeInstance == null) {
          return;
        }
        _ScrollViewCommands.default.flashScrollIndicators(_this._scrollView.nativeInstance);
      };
      /**
       * This method should be used as the callback to onFocus in a TextInputs'
       * parent view. Note that any module using this mixin needs to return
       * the parent view's ref in getScrollViewRef() in order to use this method.
       * @param {number} nodeHandle The TextInput node handle
       * @param {number} additionalOffset The scroll view's bottom "contentInset".
       *        Default is 0.
       * @param {bool} preventNegativeScrolling Whether to allow pulling the content
       *        down to make it meet the keyboard's top. Default is false.
       */
      _this.scrollResponderScrollNativeHandleToKeyboard = function (nodeHandle, additionalOffset, preventNegativeScrollOffset) {
        _this._additionalScrollOffset = additionalOffset || 0;
        _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
        if (_this._innerView.nativeInstance == null) {
          return;
        }
        if (typeof nodeHandle === 'number') {
          _UIManager.default.measureLayout(nodeHandle, (0, _nullthrows.default)((0, _$$_REQUIRE(_dependencyMap[34]).findNodeHandle)((0, _assertThisInitialized2.default)(_this))),
          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
          _this._textInputFocusError, _this._inputMeasureAndScrollToKeyboard);
        } else {
          nodeHandle.measureLayout(_this._innerView.nativeInstance, _this._inputMeasureAndScrollToKeyboard,
          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
          _this._textInputFocusError);
        }
      };
      /**
       * A helper function to zoom to a specific rect in the scrollview. The argument has the shape
       * {x: number; y: number; width: number; height: number; animated: boolean = true}
       *
       * @platform ios
       */
      _this.scrollResponderZoomTo = function (rect, animated // deprecated, put this inside the rect argument instead
      ) {
        (0, _invariant.default)(_Platform.default.OS === 'ios', 'zoomToRect is not implemented');
        if ('animated' in rect) {
          _this._animated = rect.animated;
          delete rect.animated;
        } else if (typeof animated !== 'undefined') {
          console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
        }
        if (_this._scrollView.nativeInstance == null) {
          return;
        }
        _ScrollViewCommands.default.zoomToRect(_this._scrollView.nativeInstance, rect, animated !== false);
      };
      /**
       * The calculations performed here assume the scroll view takes up the entire
       * screen - even if has some content inset. We then measure the offsets of the
       * keyboard, and compensate both for the scroll view's "contentInset".
       *
       * @param {number} left Position of input w.r.t. table view.
       * @param {number} top Position of input w.r.t. table view.
       * @param {number} width Width of the text input.
       * @param {number} height Height of the text input.
       */
      _this._inputMeasureAndScrollToKeyboard = function (left, top, width, height) {
        var keyboardScreenY = _Dimensions.default.get('window').height;
        var scrollTextInputIntoVisibleRect = function scrollTextInputIntoVisibleRect() {
          if (_this._keyboardMetrics != null) {
            keyboardScreenY = _this._keyboardMetrics.screenY;
          }
          var scrollOffsetY = top - keyboardScreenY + height + _this._additionalScrollOffset;

          // By default, this can scroll with negative offset, pulling the content
          // down so that the target component's bottom meets the keyboard's top.
          // If requested otherwise, cap the offset at 0 minimum to avoid content
          // shifting down.
          if (_this._preventNegativeScrollOffset === true) {
            scrollOffsetY = Math.max(0, scrollOffsetY);
          }
          _this.scrollTo({
            x: 0,
            y: scrollOffsetY,
            animated: true
          });
          _this._additionalScrollOffset = 0;
          _this._preventNegativeScrollOffset = false;
        };
        if (_this._keyboardMetrics == null) {
          // `_keyboardMetrics` is set inside `scrollResponderKeyboardWillShow` which
          // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.
          // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to
          // text input.
          setTimeout(function () {
            scrollTextInputIntoVisibleRect();
          }, 0);
        } else {
          scrollTextInputIntoVisibleRect();
        }
      };
      _this._handleScroll = function (e) {
        _this._observedScrollSinceBecomingResponder = true;
        _this.props.onScroll && _this.props.onScroll(e);
      };
      _this._handleLayout = function (e) {
        if (_this.props.invertStickyHeaders === true) {
          _this.setState({
            layoutHeight: e.nativeEvent.layout.height
          });
        }
        if (_this.props.onLayout) {
          _this.props.onLayout(e);
        }
      };
      _this._handleContentOnLayout = function (e) {
        var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
        _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
      };
      _this._innerView = createRefForwarder(function (instance) {
        return instance;
      });
      _this._scrollView = createRefForwarder(function (nativeInstance) {
        // This is a hack. Ideally we would forwardRef  to the underlying
        // host component. However, since ScrollView has it's own methods that can be
        // called as well, if we used the standard forwardRef then these
        // methods wouldn't be accessible and thus be a breaking change.
        //
        // Therefore we edit ref to include ScrollView's public methods so that
        // they are callable from the ref.

        // $FlowFixMe[prop-missing] - Known issue with appending custom methods.
        var publicInstance = Object.assign(nativeInstance, {
          getScrollResponder: _this.getScrollResponder,
          getScrollableNode: _this.getScrollableNode,
          getInnerViewNode: _this.getInnerViewNode,
          getInnerViewRef: _this.getInnerViewRef,
          getNativeScrollRef: _this.getNativeScrollRef,
          scrollTo: _this.scrollTo,
          scrollToEnd: _this.scrollToEnd,
          flashScrollIndicators: _this.flashScrollIndicators,
          scrollResponderZoomTo: _this.scrollResponderZoomTo,
          scrollResponderScrollNativeHandleToKeyboard: _this.scrollResponderScrollNativeHandleToKeyboard
        });
        return publicInstance;
      });
      /**
       * Warning, this may be called several times for a single keyboard opening.
       * It's best to store the information in this method and then take any action
       * at a later point (either in `keyboardDidShow` or other).
       *
       * Here's the order that events occur in:
       * - focus
       * - willShow {startCoordinates, endCoordinates} several times
       * - didShow several times
       * - blur
       * - willHide {startCoordinates, endCoordinates} several times
       * - didHide several times
       *
       * The `ScrollResponder` module callbacks for each of these events.
       * Even though any user could have easily listened to keyboard events
       * themselves, using these `props` callbacks ensures that ordering of events
       * is consistent - and not dependent on the order that the keyboard events are
       * subscribed to. This matters when telling the scroll view to scroll to where
       * the keyboard is headed - the scroll responder better have been notified of
       * the keyboard destination before being instructed to scroll to where the
       * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything
       * will work.
       *
       * WARNING: These callbacks will fire even if a keyboard is displayed in a
       * different navigation pane. Filter out the events to determine if they are
       * relevant to you. (For example, only if you receive these callbacks after
       * you had explicitly focused a node etc).
       */
      _this.scrollResponderKeyboardWillShow = function (e) {
        _this._keyboardMetrics = e.endCoordinates;
        _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);
      };
      _this.scrollResponderKeyboardWillHide = function (e) {
        _this._keyboardMetrics = null;
        _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);
      };
      _this.scrollResponderKeyboardDidShow = function (e) {
        _this._keyboardMetrics = e.endCoordinates;
        _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);
      };
      _this.scrollResponderKeyboardDidHide = function (e) {
        _this._keyboardMetrics = null;
        _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);
      };
      /**
       * Invoke this from an `onMomentumScrollBegin` event.
       */
      _this._handleMomentumScrollBegin = function (e) {
        _this._lastMomentumScrollBeginTime = global.performance.now();
        _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
      };
      /**
       * Invoke this from an `onMomentumScrollEnd` event.
       */
      _this._handleMomentumScrollEnd = function (e) {
        _FrameRateLogger.default.endScroll();
        _this._lastMomentumScrollEndTime = global.performance.now();
        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };
      /**
       * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll
       * animation, and there's not an easy way to distinguish a drag vs. stopping
       * momentum.
       *
       * Invoke this from an `onScrollBeginDrag` event.
       */
      _this._handleScrollBeginDrag = function (e) {
        _FrameRateLogger.default.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation

        if (_Platform.default.OS === 'android' && _this.props.keyboardDismissMode === 'on-drag') {
          (0, _dismissKeyboard.default)();
        }
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };
      /**
       * Invoke this from an `onScrollEndDrag` event.
       */
      _this._handleScrollEndDrag = function (e) {
        var velocity = e.nativeEvent.velocity;
        // - If we are animating, then this is a "drag" that is stopping the scrollview and momentum end
        //   will fire.
        // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or
        //   another drag starts and ends.
        // - If we don't get velocity, better to stop the interaction twice than not stop it.
        if (!_this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
          _FrameRateLogger.default.endScroll();
        }
        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };
      /**
       * A helper function for this class that lets us quickly determine if the
       * view is currently animating. This is particularly useful to know when
       * a touch has just started or ended.
       */
      _this._isAnimating = function () {
        var now = global.performance.now();
        var timeSinceLastMomentumScrollEnd = now - _this._lastMomentumScrollEndTime;
        var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this._lastMomentumScrollEndTime < _this._lastMomentumScrollBeginTime;
        return isAnimating;
      };
      /**
       * Invoke this from an `onResponderGrant` event.
       */
      _this._handleResponderGrant = function (e) {
        _this._observedScrollSinceBecomingResponder = false;
        _this.props.onResponderGrant && _this.props.onResponderGrant(e);
        _this._becameResponderWhileAnimating = _this._isAnimating();
      };
      /**
       * Invoke this from an `onResponderReject` event.
       *
       * Some other element is not yielding its role as responder. Normally, we'd
       * just disable the `UIScrollView`, but a touch has already began on it, the
       * `UIScrollView` will not accept being disabled after that. The easiest
       * solution for now is to accept the limitation of disallowing this
       * altogether. To improve this, find a way to disable the `UIScrollView` after
       * a touch has already started.
       */
      _this._handleResponderReject = function () {};
      /**
       * Invoke this from an `onResponderRelease` event.
       */
      _this._handleResponderRelease = function (e) {
        _this._isTouching = e.nativeEvent.touches.length !== 0;
        _this.props.onResponderRelease && _this.props.onResponderRelease(e);
        if (typeof e.target === 'number') {
          return;
        }

        // By default scroll views will unfocus a textField
        // if another touch occurs outside of it
        var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
        if (currentlyFocusedTextInput != null && _this.props.keyboardShouldPersistTaps !== true && _this.props.keyboardShouldPersistTaps !== 'always' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !_this._observedScrollSinceBecomingResponder && !_this._becameResponderWhileAnimating) {
          _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
        }
      };
      /**
       * We will allow the scroll view to give up its lock iff it acquired the lock
       * during an animation. This is a very useful default that happens to satisfy
       * many common user experiences.
       *
       * - Stop a scroll on the left edge, then turn that into an outer view's
       *   backswipe.
       * - Stop a scroll mid-bounce at the top, continue pulling to have the outer
       *   view dismiss.
       * - However, without catching the scroll view mid-bounce (while it is
       *   motionless), if you drag far enough for the scroll view to become
       *   responder (and therefore drag the scroll view a bit), any backswipe
       *   navigation of a swipe gesture higher in the view hierarchy, should be
       *   rejected.
       */
      _this._handleResponderTerminationRequest = function () {
        return !_this._observedScrollSinceBecomingResponder;
      };
      /**
       * Invoke this from an `onScroll` event.
       */
      _this._handleScrollShouldSetResponder = function () {
        // Allow any event touch pass through if the default pan responder is disabled
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }
        return _this._isTouching;
      };
      /**
       * Merely touch starting is not sufficient for a scroll view to become the
       * responder. Being the "responder" means that the very next touch move/end
       * event will result in an action/movement.
       *
       * Invoke this from an `onStartShouldSetResponder` event.
       *
       * `onStartShouldSetResponder` is used when the next move/end will trigger
       * some UI movement/action, but when you want to yield priority to views
       * nested inside of the view.
       *
       * There may be some cases where scroll views actually should return `true`
       * from `onStartShouldSetResponder`: Any time we are detecting a standard tap
       * that gives priority to nested views.
       *
       * - If a single tap on the scroll view triggers an action such as
       *   recentering a map style view yet wants to give priority to interaction
       *   views inside (such as dropped pins or labels), then we would return true
       *   from this method when there is a single touch.
       *
       * - Similar to the previous case, if a two finger "tap" should trigger a
       *   zoom, we would check the `touches` count, and if `>= 2`, we would return
       *   true.
       *
       */
      _this._handleStartShouldSetResponder = function (e) {
        // Allow any event touch pass through if the default pan responder is disabled
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }
        var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
        if (_this.props.keyboardShouldPersistTaps === 'handled' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {
          return true;
        }
        return false;
      };
      /**
       * There are times when the scroll view wants to become the responder
       * (meaning respond to the next immediate `touchStart/touchEnd`), in a way
       * that *doesn't* give priority to nested views (hence the capture phase):
       *
       * - Currently animating.
       * - Tapping anywhere that is not a text input, while the keyboard is
       *   up (which should dismiss the keyboard).
       *
       * Invoke this from an `onStartShouldSetResponderCapture` event.
       */
      _this._handleStartShouldSetResponderCapture = function (e) {
        // The scroll view should receive taps instead of its descendants if:
        // * it is already animating/decelerating
        if (_this._isAnimating()) {
          return true;
        }

        // Allow any event touch pass through if the default pan responder is disabled
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }

        // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),
        // and a new touch starts with a non-textinput target (in which case the
        // first tap should be sent to the scroll view and dismiss the keyboard,
        // then the second tap goes to the actual interior view)
        var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
        var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
        if (typeof e.target === 'number') {
          return false;
        }

        // Let presses through if the soft keyboard is detached from the viewport
        if (_this._softKeyboardIsDetached()) {
          return false;
        }
        if (keyboardNeverPersistTaps && _this._keyboardIsDismissible() && e.target != null &&
        // $FlowFixMe[incompatible-call]
        !_TextInputState.default.isTextInput(e.target)) {
          return true;
        }
        return false;
      };
      /**
       * Do we consider there to be a dismissible soft-keyboard open?
       */
      _this._keyboardIsDismissible = function () {
        var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();

        // We cannot dismiss the keyboard without an input to blur, even if a soft
        // keyboard is open (e.g. when keyboard is open due to a native component
        // not participating in TextInputState). It's also possible that the
        // currently focused input isn't a TextInput (such as by calling ref.focus
        // on a non-TextInput).
        var hasFocusedTextInput = currentlyFocusedInput != null && _TextInputState.default.isTextInput(currentlyFocusedInput);

        // Even if an input is focused, we may not have a keyboard to dismiss. E.g
        // when using a physical keyboard. Ensure we have an event for an opened
        // keyboard.
        var softKeyboardMayBeOpen = _this._keyboardMetrics != null || _this._keyboardEventsAreUnreliable();
        return hasFocusedTextInput && softKeyboardMayBeOpen;
      };
      /**
       * Whether an open soft keyboard is present which does not overlap the
       * viewport. E.g. for a VR soft-keyboard which is detached from the app
       * viewport.
       */
      _this._softKeyboardIsDetached = function () {
        return _this._keyboardMetrics != null && _this._keyboardMetrics.height === 0;
      };
      _this._keyboardEventsAreUnreliable = function () {
        // Android versions prior to API 30 rely on observing layout changes when
        // `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.
        return _Platform.default.OS === 'android' && _Platform.default.Version < 30;
      };
      /**
       * Invoke this from an `onTouchEnd` event.
       *
       * @param {PressEvent} e Event.
       */
      _this._handleTouchEnd = function (e) {
        var nativeEvent = e.nativeEvent;
        _this._isTouching = nativeEvent.touches.length !== 0;
        var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
        var keyboardNeverPersistsTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

        // Dismiss the keyboard now if we didn't become responder in capture phase
        // to eat presses, but still want to dismiss on interaction.
        // Don't do anything if the target of the touch event is the current input.
        var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
        if (currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && _this._softKeyboardIsDetached() && _this._keyboardIsDismissible() && keyboardNeverPersistsTaps) {
          _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
        }
        _this.props.onTouchEnd && _this.props.onTouchEnd(e);
      };
      /**
       * Invoke this from an `onTouchCancel` event.
       *
       * @param {PressEvent} e Event.
       */
      _this._handleTouchCancel = function (e) {
        _this._isTouching = false;
        _this.props.onTouchCancel && _this.props.onTouchCancel(e);
      };
      /**
       * Invoke this from an `onTouchStart` event.
       *
       * Since we know that the `SimpleEventPlugin` occurs later in the plugin
       * order, after `ResponderEventPlugin`, we can detect that we were *not*
       * permitted to be the responder (presumably because a contained view became
       * responder). The `onResponderReject` won't fire in that case - it only
       * fires when a *current* responder rejects our request.
       *
       * @param {PressEvent} e Touch Start event.
       */
      _this._handleTouchStart = function (e) {
        _this._isTouching = true;
        _this.props.onTouchStart && _this.props.onTouchStart(e);
      };
      /**
       * Invoke this from an `onTouchMove` event.
       *
       * Since we know that the `SimpleEventPlugin` occurs later in the plugin
       * order, after `ResponderEventPlugin`, we can detect that we were *not*
       * permitted to be the responder (presumably because a contained view became
       * responder). The `onResponderReject` won't fire in that case - it only
       * fires when a *current* responder rejects our request.
       *
       * @param {PressEvent} e Touch Start event.
       */
      _this._handleTouchMove = function (e) {
        _this.props.onTouchMove && _this.props.onTouchMove(e);
      };
      _this._scrollAnimatedValue = new _AnimatedImplementation.default.Value((_this$props$contentOf = (_this$props$contentOf2 = _this.props.contentOffset) == null ? undefined : _this$props$contentOf2.y) != null ? _this$props$contentOf : 0);
      _this._scrollAnimatedValue.setOffset((_this$props$contentIn = (_this$props$contentIn2 = _this.props.contentInset) == null ? undefined : _this$props$contentIn2.top) != null ? _this$props$contentIn : 0);
      return _this;
    }
    (0, _createClass2.default)(ScrollView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {
          console.warn(`'keyboardShouldPersistTaps={${this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'}}' is deprecated. ` + `Use 'keyboardShouldPersistTaps="${this.props.keyboardShouldPersistTaps ? 'always' : 'never'}"' instead`);
        }
        this._keyboardMetrics = _Keyboard.default.metrics();
        this._additionalScrollOffset = 0;
        this._subscriptionKeyboardWillShow = _Keyboard.default.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
        this._subscriptionKeyboardWillHide = _Keyboard.default.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
        this._subscriptionKeyboardDidShow = _Keyboard.default.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
        this._subscriptionKeyboardDidHide = _Keyboard.default.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
        this._updateAnimatedNodeAttachment();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;
        var newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
        if (prevContentInsetTop !== newContentInsetTop) {
          this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);
        }
        this._updateAnimatedNodeAttachment();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscriptionKeyboardWillShow != null) {
          this._subscriptionKeyboardWillShow.remove();
        }
        if (this._subscriptionKeyboardWillHide != null) {
          this._subscriptionKeyboardWillHide.remove();
        }
        if (this._subscriptionKeyboardDidShow != null) {
          this._subscriptionKeyboardDidShow.remove();
        }
        if (this._subscriptionKeyboardDidHide != null) {
          this._subscriptionKeyboardDidHide.remove();
        }
        if (this._scrollAnimatedValueAttachment) {
          this._scrollAnimatedValueAttachment.detach();
        }
      }
    }, {
      key: "_textInputFocusError",
      value: function _textInputFocusError() {
        console.warn('Error measuring text field.');
      }
    }, {
      key: "_getKeyForIndex",
      value: function _getKeyForIndex(index, childArray) {
        var child = childArray[index];
        return child && child.key;
      }
    }, {
      key: "_updateAnimatedNodeAttachment",
      value: function _updateAnimatedNodeAttachment() {
        if (this._scrollAnimatedValueAttachment) {
          this._scrollAnimatedValueAttachment.detach();
        }
        if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
          this._scrollAnimatedValueAttachment = _AnimatedImplementation.default.attachNativeEvent(this._scrollView.nativeInstance, 'onScroll', [{
            nativeEvent: {
              contentOffset: {
                y: this._scrollAnimatedValue
              }
            }
          }]);
        }
      }
    }, {
      key: "_setStickyHeaderRef",
      value: function _setStickyHeaderRef(key, ref) {
        if (ref) {
          this._stickyHeaderRefs.set(key, ref);
        } else {
          this._stickyHeaderRefs.delete(key);
        }
      }
    }, {
      key: "_onStickyHeaderLayout",
      value: function _onStickyHeaderLayout(index, event, key) {
        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        if (!stickyHeaderIndices) {
          return;
        }
        var childArray = React.Children.toArray(this.props.children);
        if (key !== this._getKeyForIndex(index, childArray)) {
          // ignore stale layout update
          return;
        }
        var layoutY = event.nativeEvent.layout.y;
        this._headerLayoutYs.set(key, layoutY);
        var indexOfIndex = stickyHeaderIndices.indexOf(index);
        var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];
        if (previousHeaderIndex != null) {
          var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
          previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        var _ref2 = this.props.horizontal === true ? NativeHorizontalScrollViewTuple : NativeVerticalScrollViewTuple,
          _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          NativeDirectionalScrollView = _ref3[0],
          NativeDirectionalScrollContentView = _ref3[1];
        var contentContainerStyle = [this.props.horizontal === true && styles.contentContainerHorizontal, this.props.contentContainerStyle];
        var contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {
          onLayout: this._handleContentOnLayout
        };
        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        var children = this.props.children;
        if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
          var childArray = React.Children.toArray(this.props.children);
          children = childArray.map(function (child, index) {
            var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
            if (indexOfIndex > -1) {
              var key = child.key;
              var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
              var StickyHeaderComponent = _this2.props.StickyHeaderComponent || _ScrollViewStickyHeader.default;
              return /*#__PURE__*/(0, _jsxRuntime.jsx)(StickyHeaderComponent, {
                ref: function ref(_ref4) {
                  return _this2._setStickyHeaderRef(key, _ref4);
                },
                nextHeaderLayoutY: _this2._headerLayoutYs.get(_this2._getKeyForIndex(nextIndex, childArray)),
                onLayout: function onLayout(event) {
                  return _this2._onStickyHeaderLayout(index, event, key);
                },
                scrollAnimatedValue: _this2._scrollAnimatedValue,
                inverted: _this2.props.invertStickyHeaders,
                hiddenOnScroll: _this2.props.stickyHeaderHiddenOnScroll,
                scrollViewHeight: _this2.state.layoutHeight,
                children: child
              }, key);
            } else {
              return child;
            }
          });
        }
        children = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollViewContext.default.Provider, {
          value: this.props.horizontal === true ? _ScrollViewContext.HORIZONTAL : _ScrollViewContext.VERTICAL,
          children: children
        });
        var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
        var contentContainer = /*#__PURE__*/(0, _jsxRuntime.jsx)(NativeDirectionalScrollContentView, Object.assign({}, contentSizeChangeProps, {
          ref: this._innerView.getForwardingRef(this.props.innerViewRef),
          style: contentContainerStyle,
          removeClippedSubviews:
          // Subview clipping causes issues with sticky headers on Android and
          // would be hard to fix properly in a performant way.
          _Platform.default.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
          collapsable: false,
          children: children
        }));
        var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
        var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
        var baseStyle = this.props.horizontal === true ? styles.baseHorizontal : styles.baseVertical;
        var props = Object.assign({}, this.props, {
          alwaysBounceHorizontal: alwaysBounceHorizontal,
          alwaysBounceVertical: alwaysBounceVertical,
          style: _StyleSheet.default.compose(baseStyle, this.props.style),
          // Override the onContentSizeChange from props, since this event can
          // bubble up from TextInputs
          onContentSizeChange: null,
          onLayout: this._handleLayout,
          onMomentumScrollBegin: this._handleMomentumScrollBegin,
          onMomentumScrollEnd: this._handleMomentumScrollEnd,
          onResponderGrant: this._handleResponderGrant,
          onResponderReject: this._handleResponderReject,
          onResponderRelease: this._handleResponderRelease,
          onResponderTerminationRequest: this._handleResponderTerminationRequest,
          onScrollBeginDrag: this._handleScrollBeginDrag,
          onScrollEndDrag: this._handleScrollEndDrag,
          onScrollShouldSetResponder: this._handleScrollShouldSetResponder,
          onStartShouldSetResponder: this._handleStartShouldSetResponder,
          onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,
          onTouchEnd: this._handleTouchEnd,
          onTouchMove: this._handleTouchMove,
          onTouchStart: this._handleTouchStart,
          onTouchCancel: this._handleTouchCancel,
          onScroll: this._handleScroll,
          scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
          sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
          // default to true
          snapToStart: this.props.snapToStart !== false,
          // default to true
          snapToEnd: this.props.snapToEnd !== false,
          // pagingEnabled is overridden by snapToInterval / snapToOffsets
          pagingEnabled: _Platform.default.select({
            // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work
            ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,
            // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work
            android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null
          })
        });
        var decelerationRate = this.props.decelerationRate;
        if (decelerationRate != null) {
          props.decelerationRate = (0, _processDecelerationRate.default)(decelerationRate);
        }
        var refreshControl = this.props.refreshControl;
        var scrollViewRef = this._scrollView.getForwardingRef(this.props.scrollViewRef);
        if (refreshControl) {
          if (_Platform.default.OS === 'ios') {
            // On iOS the RefreshControl is a child of the ScrollView.
            return /*#__PURE__*/(0, _jsxRuntime.jsxs)(NativeDirectionalScrollView, Object.assign({}, props, {
              ref: scrollViewRef,
              children: [refreshControl, contentContainer]
            }));
          } else if (_Platform.default.OS === 'android') {
            // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.
            // Since the ScrollView is wrapped add the style props to the
            // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.
            // Note: we should split props.style on the inner and outer props
            // however, the ScrollView still needs the baseStyle to be scrollable
            // $FlowFixMe[underconstrained-implicit-instantiation]
            // $FlowFixMe[incompatible-call]
            var _splitLayoutProps = (0, _splitLayoutProps2.default)((0, _flattenStyle.default)(props.style)),
              outer = _splitLayoutProps.outer,
              inner = _splitLayoutProps.inner;
            return React.cloneElement(refreshControl, {
              style: _StyleSheet.default.compose(baseStyle, outer)
            }, /*#__PURE__*/(0, _jsxRuntime.jsx)(NativeDirectionalScrollView, Object.assign({}, props, {
              style: _StyleSheet.default.compose(baseStyle, inner),
              ref: scrollViewRef,
              children: contentContainer
            })));
          }
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(NativeDirectionalScrollView, Object.assign({}, props, {
          ref: scrollViewRef,
          children: contentContainer
        }));
      }
    }]);
    return ScrollView;
  }(React.Component);
  ScrollView.Context = _ScrollViewContext.default;
  var styles = _StyleSheet.default.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  /**
   * Helper function that should be replaced with `useCallback` and `useMergeRefs`
   * once `ScrollView` is reimplemented as a functional component.
   */
  function createRefForwarder(mutator) {
    var state = {
      getForwardingRef: (0, _memoizeOne.default)(function (forwardedRef) {
        return function (nativeInstance) {
          var publicInstance = nativeInstance == null ? null : mutator(nativeInstance);
          state.nativeInstance = nativeInstance;
          state.publicInstance = publicInstance;
          if (forwardedRef != null) {
            if (typeof forwardedRef === 'function') {
              forwardedRef(publicInstance);
            } else {
              forwardedRef.current = publicInstance;
            }
          }
        };
      }),
      nativeInstance: null,
      publicInstance: null
    };
    return state;
  }

  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */
  function Wrapper(props, ref) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ScrollView, Object.assign({}, props, {
      scrollViewRef: ref
    }));
  }
  Wrapper.displayName = 'ScrollView';
  // $FlowFixMe[incompatible-call]
  var ForwardedScrollView = React.forwardRef(Wrapper);

  // $FlowFixMe[prop-missing] Add static context to ForwardedScrollView
  ForwardedScrollView.Context = _ScrollViewContext.default;
  ForwardedScrollView.displayName = 'ScrollView';
  module.exports = ForwardedScrollView;
},351,[1,26,5,6,16,13,15,12,280,352,42,157,354,196,183,355,21,356,211,156,359,360,361,362,363,364,365,366,24,320,43,153,194,239,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeFrameRateLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                        * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                        *
                                                                                        * This source code is licensed under the MIT license found in the
                                                                                        * LICENSE file in the root directory of this source tree.
                                                                                        *
                                                                                        * @format
                                                                                        * 
                                                                                        */

  /**
   * Flow API for native FrameRateLogger module. If the native module is not installed, function calls
   * are just no-ops.
   *
   * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a
   * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the
   * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the
   * native module gathers up all it's frame drop data and reports it via an analytics pipeline for
   * analysis.
   *
   * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a
   * bug, but the native module should be robust to that.
   *
   * In the future we may add support for tracking frame drops in other types of interactions beyond
   * scrolling.
   */
  var FrameRateLogger = {
    /**
     * Enable `debug` to see local logs of what's going on. `reportStackTraces` will grab stack traces
     * during UI thread stalls and upload them if the native module supports it.
     */
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        _$$_REQUIRE(_dependencyMap[2])(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
      }
      if (_NativeFrameRateLogger.default) {
        // Needs to clone the object first to avoid modifying the argument.
        var optionsClone = {
          debug: !!options.debug,
          reportStackTraces: !!options.reportStackTraces
        };
        _NativeFrameRateLogger.default.setGlobalOptions(optionsClone);
      }
    },
    /**
     * Must call `setContext` before any events can be properly tracked, which is done automatically
     * in `AppRegistry`, but navigation is also a common place to hook in.
     */
    setContext: function setContext(context) {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.setContext(context);
    },
    /**
     * Called in `ScrollResponder` so any component that uses that module will handle this
     * automatically.
     */
    beginScroll: function beginScroll() {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.beginScroll();
    },
    /**
     * Called in `ScrollResponder` so any component that uses that module will handle this
     * automatically.
     */
    endScroll: function endScroll() {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},352,[1,353,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  var _default = exports.default = TurboModuleRegistry.get('FrameRateLogger');
},353,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = splitLayoutProps;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  function splitLayoutProps(props) {
    var outer = null;
    var inner = null;
    if (props != null) {
      // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.
      outer = {};
      // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.
      inner = {};
      for (var prop of Object.keys(props)) {
        switch (prop) {
          case 'margin':
          case 'marginHorizontal':
          case 'marginVertical':
          case 'marginBottom':
          case 'marginTop':
          case 'marginLeft':
          case 'marginRight':
          case 'flex':
          case 'flexGrow':
          case 'flexShrink':
          case 'flexBasis':
          case 'alignSelf':
          case 'height':
          case 'minHeight':
          case 'maxHeight':
          case 'width':
          case 'minWidth':
          case 'maxWidth':
          case 'position':
          case 'left':
          case 'right':
          case 'bottom':
          case 'top':
          case 'transform':
          case 'transformOrigin':
          case 'rowGap':
          case 'columnGap':
          case 'gap':
            // $FlowFixMe[cannot-write]
            // $FlowFixMe[incompatible-use]
            // $FlowFixMe[prop-missing]
            outer[prop] = props[prop];
            break;
          default:
            // $FlowFixMe[cannot-write]
            // $FlowFixMe[incompatible-use]
            // $FlowFixMe[prop-missing]
            inner[prop] = props[prop];
            break;
        }
      }
    }
    return {
      outer: outer,
      inner: inner
    };
  }
},354,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  // This function dismisses the currently-open keyboard, if any.

  'use strict';

  function dismissKeyboard() {
    _$$_REQUIRE(_dependencyMap[0]).blurTextInput(_$$_REQUIRE(_dependencyMap[0]).currentlyFocusedInput());
  }
  module.exports = dismissKeyboard;
},355,[211]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _LayoutAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _dismissKeyboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeKeyboardObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  /**
   * `Keyboard` module to control keyboard events.
   *
   * ### Usage
   *
   * The Keyboard module allows you to listen for native events and react to them, as
   * well as make changes to the keyboard, like dismissing it.
   *
   *```
   * import React, { Component } from 'react';
   * import { Keyboard, TextInput } from 'react-native';
   *
   * class Example extends Component {
   *   componentWillMount () {
   *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);
   *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);
   *   }
   *
   *   componentWillUnmount () {
   *     this.keyboardDidShowListener.remove();
   *     this.keyboardDidHideListener.remove();
   *   }
   *
   *   _keyboardDidShow () {
   *     alert('Keyboard Shown');
   *   }
   *
   *   _keyboardDidHide () {
   *     alert('Keyboard Hidden');
   *   }
   *
   *   render() {
   *     return (
   *       <TextInput
   *         onSubmitEditing={Keyboard.dismiss}
   *       />
   *     );
   *   }
   * }
   *```
   */
  var Keyboard = /*#__PURE__*/function () {
    function Keyboard() {
      var _this = this;
      (0, _classCallCheck2.default)(this, Keyboard);
      this._emitter = new _NativeEventEmitter.default(
      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
      // If you want to use the native module on other platforms, please remove this condition and test its behavior
      _Platform.default.OS !== 'ios' ? null : _NativeKeyboardObserver.default);
      this.addListener('keyboardDidShow', function (ev) {
        _this._currentlyShowing = ev;
      });
      this.addListener('keyboardDidHide', function (_ev) {
        _this._currentlyShowing = null;
      });
    }

    /**
     * The `addListener` function connects a JavaScript function to an identified native
     * keyboard notification event.
     *
     * This function then returns the reference to the listener.
     *
     * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This
     *can be any of the following:
     *
     * - `keyboardWillShow`
     * - `keyboardDidShow`
     * - `keyboardWillHide`
     * - `keyboardDidHide`
     * - `keyboardWillChangeFrame`
     * - `keyboardDidChangeFrame`
     *
     * Android versions prior to API 30 rely on observing layout changes when
     * `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.
     *
     * `keyboardWillShow` as well as `keyboardWillHide` are not available on Android since there is
     * no native corresponding event.
     *
     * @param {function} callback function to be called when the event fires.
     */
    (0, _createClass2.default)(Keyboard, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener);
      }

      /**
       * Removes all listeners for a specific event type.
       *
       * @param {string} eventType The native event string listeners are watching which will be removed.
       */
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }

      /**
       * Dismisses the active keyboard and removes focus.
       */
    }, {
      key: "dismiss",
      value: function dismiss() {
        (0, _dismissKeyboard.default)();
      }

      /**
       * Whether the keyboard is last known to be visible.
       */
    }, {
      key: "isVisible",
      value: function isVisible() {
        return !!this._currentlyShowing;
      }

      /**
       * Return the metrics of the soft-keyboard if visible.
       */
    }, {
      key: "metrics",
      value: function metrics() {
        var _this$_currentlyShowi;
        return (_this$_currentlyShowi = this._currentlyShowing) == null ? undefined : _this$_currentlyShowi.endCoordinates;
      }

      /**
       * Useful for syncing TextInput (or other keyboard accessory view) size of
       * position changes with keyboard movements.
       */
    }, {
      key: "scheduleLayoutAnimation",
      value: function scheduleLayoutAnimation(event) {
        var duration = event.duration,
          easing = event.easing;
        if (duration != null && duration !== 0) {
          _LayoutAnimation.default.configureNext({
            duration: duration,
            update: {
              duration: duration,
              type: easing != null && _LayoutAnimation.default.Types[easing] || 'keyboard'
            }
          });
        }
      }
    }]);
    return Keyboard;
  }();
  module.exports = new Keyboard();
},356,[1,5,6,111,357,355,21,358]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _ReactNativeFeatureFlags = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  // Reexport type

  var isLayoutAnimationEnabled = _ReactNativeFeatureFlags.default.isLayoutAnimationEnabled();
  function setEnabled(value) {
    isLayoutAnimationEnabled = isLayoutAnimationEnabled;
  }

  /**
   * Configures the next commit to be animated.
   *
   * onAnimationDidEnd is guaranteed to be called when the animation completes.
   * onAnimationDidFail is *never* called in the classic, pre-Fabric renderer,
   * and never has been. In the new renderer (Fabric) it is called only if configuration
   * parsing fails.
   */
  function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
    var _config$duration;
    if (_Platform.default.isDisableAnimations) {
      return;
    }
    if (!isLayoutAnimationEnabled) {
      return;
    }

    // Since LayoutAnimations may possibly be disabled for now on iOS (Fabric),
    // or Android (non-Fabric) we race a setTimeout with animation completion,
    // in case onComplete is never called
    // from native. Once LayoutAnimations+Fabric unconditionally ship everywhere, we can
    // delete this mechanism at least in the Fabric branch.
    var animationCompletionHasRun = false;
    var onAnimationComplete = function onAnimationComplete() {
      if (animationCompletionHasRun) {
        return;
      }
      animationCompletionHasRun = true;
      clearTimeout(raceWithAnimationId);
      onAnimationDidEnd == null ? undefined : onAnimationDidEnd();
    };
    var raceWithAnimationId = setTimeout(onAnimationComplete, ((_config$duration = config.duration) != null ? _config$duration : 0) + 17 /* one frame + 1ms */);

    // In Fabric, LayoutAnimations are unconditionally enabled for Android, and
    // conditionally enabled on iOS (pending fully shipping; this is a temporary state).
    var FabricUIManager = (0, _$$_REQUIRE(_dependencyMap[3]).getFabricUIManager)();
    if (FabricUIManager != null && FabricUIManager.configureNextLayoutAnimation) {
      var _global, _global$nativeFabricU;
      (_global = global) == null ? undefined : (_global$nativeFabricU = _global.nativeFabricUIManager) == null ? undefined : _global$nativeFabricU.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail != null ? onAnimationDidFail : function () {} /* this will only be called if configuration parsing fails */);
      return;
    }

    // This will only run if Fabric is *not* installed.
    // If you have Fabric + non-Fabric running in the same VM, non-Fabric LayoutAnimations
    // will not work.
    if (_$$_REQUIRE(_dependencyMap[4]) != null && _$$_REQUIRE(_dependencyMap[4]).configureNextLayoutAnimation) {
      _$$_REQUIRE(_dependencyMap[4]).configureNextLayoutAnimation(config, onAnimationComplete != null ? onAnimationComplete : function () {}, onAnimationDidFail != null ? onAnimationDidFail : function () {} /* this should never be called in Non-Fabric */);
    }
  }
  function create(duration, type, property) {
    return {
      duration: duration,
      create: {
        type: type,
        property: property
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: property
      }
    };
  }
  var Presets = {
    easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
    linear: create(500, 'linear', 'opacity'),
    spring: {
      duration: 700,
      create: {
        type: 'linear',
        property: 'opacity'
      },
      update: {
        type: 'spring',
        springDamping: 0.4
      },
      delete: {
        type: 'linear',
        property: 'opacity'
      }
    }
  };

  /**
   * Automatically animates views to their new positions when the
   * next layout happens.
   *
   * A common way to use this API is to call it before calling `setState`.
   *
   * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:
   *
   *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);
   */
  var LayoutAnimation = {
    /**
     * Schedules an animation to happen on the next layout.
     *
     * @param config Specifies animation properties:
     *
     *   - `duration` in milliseconds
     *   - `create`, `AnimationConfig` for animating in new views
     *   - `update`, `AnimationConfig` for animating views that have been updated
     *
     * @param onAnimationDidEnd Called when the animation finished.
     * Only supported on iOS.
     * @param onError Called on error. Only supported on iOS.
     */
    configureNext: configureNext,
    /**
     * Helper for creating a config for `configureNext`.
     */
    create: create,
    Types: Object.freeze({
      spring: 'spring',
      linear: 'linear',
      easeInEaseOut: 'easeInEaseOut',
      easeIn: 'easeIn',
      easeOut: 'easeOut',
      keyboard: 'keyboard'
    }),
    Properties: Object.freeze({
      opacity: 'opacity',
      scaleX: 'scaleX',
      scaleY: 'scaleY',
      scaleXY: 'scaleXY'
    }),
    checkConfig: function checkConfig() {
      console.error('LayoutAnimation.checkConfig(...) has been disabled.');
    },
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring),
    setEnabled: setEnabled
  };
  module.exports = LayoutAnimation;
},357,[1,108,21,49,42]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('KeyboardObserver');
},358,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                         * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                         *
                                                                                         * This source code is licensed under the MIT license found in the
                                                                                         * LICENSE file in the root directory of this source tree.
                                                                                         *
                                                                                         * @format
                                                                                         * 
                                                                                         */

  var nativeComponentName = 'AndroidHorizontalScrollContentView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollContentView',
    validAttributes: {
      removeClippedSubviews: true
    }
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[2]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
},359,[1,206,160]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
      decelerationRate: true,
      disableIntervalMomentum: true,
      endFillColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      fadingEdgeLength: true,
      nestedScrollEnabled: true,
      overScrollMode: true,
      pagingEnabled: true,
      persistentScrollbar: true,
      scrollEnabled: true,
      scrollPerfTag: true,
      sendMomentumEvents: true,
      showsHorizontalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToStart: true,
      snapToOffsets: true,
      contentOffset: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderRadius: true,
      borderStyle: true,
      borderRightColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      borderBottomColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      borderTopLeftRadius: true,
      borderTopColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      removeClippedSubviews: true,
      borderTopRightRadius: true,
      borderLeftColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      pointerEvents: true
    }
  };
  var AndroidHorizontalScrollViewNativeComponent = NativeComponentRegistry.get('AndroidHorizontalScrollView', function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var _default = exports.default = AndroidHorizontalScrollViewNativeComponent;
},360,[160,164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      return _Platform.default.select({
        ios: 0.998,
        android: 0.985
      });
    } else if (decelerationRate === 'fast') {
      return _Platform.default.select({
        ios: 0.99,
        android: 0.9
      });
    }
    return decelerationRate;
  }
  module.exports = processDecelerationRate;
},361,[1,21]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTScrollContentView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {}
  };
  var ScrollContentViewNativeComponent = NativeComponentRegistry.get('RCTScrollContentView', function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var _default = exports.default = ScrollContentViewNativeComponent;
},362,[160]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  var _default = exports.default = (0, _codegenNativeCommands.default)({
    supportedCommands: ['flashScrollIndicators', 'scrollTo', 'scrollToEnd', 'zoomToRect']
  });
},363,[1,193,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.VERTICAL = exports.HORIZONTAL = undefined;
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var ScrollViewContext = React.createContext(null);
  var _default = exports.default = ScrollViewContext;
  var HORIZONTAL = exports.HORIZONTAL = Object.freeze({
    horizontal: true
  });
  var VERTICAL = exports.VERTICAL = Object.freeze({
    horizontal: false
  });
},364,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
      topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
      },
      topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
      },
      topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
      }
    },
    validAttributes: {
      contentOffset: {
        diff: _$$_REQUIRE(_dependencyMap[3])
      },
      decelerationRate: true,
      disableIntervalMomentum: true,
      pagingEnabled: true,
      scrollEnabled: true,
      showsVerticalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToOffsets: true,
      snapToStart: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      sendMomentumEvents: true,
      borderRadius: true,
      nestedScrollEnabled: true,
      borderStyle: true,
      borderRightColor: {
        process: _$$_REQUIRE(_dependencyMap[4]).default
      },
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[4]).default
      },
      borderBottomColor: {
        process: _$$_REQUIRE(_dependencyMap[4]).default
      },
      persistentScrollbar: true,
      endFillColor: {
        process: _$$_REQUIRE(_dependencyMap[4]).default
      },
      fadingEdgeLength: true,
      overScrollMode: true,
      borderTopLeftRadius: true,
      scrollPerfTag: true,
      borderTopColor: {
        process: _$$_REQUIRE(_dependencyMap[4]).default
      },
      removeClippedSubviews: true,
      borderTopRightRadius: true,
      borderLeftColor: {
        process: _$$_REQUIRE(_dependencyMap[4]).default
      },
      pointerEvents: true,
      isInvertedVirtualizedList: true
    }
  } : {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
      topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
      },
      topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
      },
      topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
      },
      topScrollToTop: {
        registrationName: 'onScrollToTop'
      }
    },
    validAttributes: Object.assign({
      alwaysBounceHorizontal: true,
      alwaysBounceVertical: true,
      automaticallyAdjustContentInsets: true,
      automaticallyAdjustKeyboardInsets: true,
      automaticallyAdjustsScrollIndicatorInsets: true,
      bounces: true,
      bouncesZoom: true,
      canCancelContentTouches: true,
      centerContent: true,
      contentInset: {
        diff: _$$_REQUIRE(_dependencyMap[5])
      },
      contentOffset: {
        diff: _$$_REQUIRE(_dependencyMap[3])
      },
      contentInsetAdjustmentBehavior: true,
      decelerationRate: true,
      directionalLockEnabled: true,
      disableIntervalMomentum: true,
      indicatorStyle: true,
      inverted: true,
      keyboardDismissMode: true,
      maintainVisibleContentPosition: true,
      maximumZoomScale: true,
      minimumZoomScale: true,
      pagingEnabled: true,
      pinchGestureEnabled: true,
      scrollEnabled: true,
      scrollEventThrottle: true,
      scrollIndicatorInsets: {
        diff: _$$_REQUIRE(_dependencyMap[5])
      },
      scrollToOverflowEnabled: true,
      scrollsToTop: true,
      showsHorizontalScrollIndicator: true,
      showsVerticalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToOffsets: true,
      snapToStart: true,
      zoomScale: true
    }, (0, _$$_REQUIRE(_dependencyMap[6]).ConditionallyIgnoredEventHandlers)({
      onScrollBeginDrag: true,
      onMomentumScrollEnd: true,
      onScrollEndDrag: true,
      onMomentumScrollBegin: true,
      onScrollToTop: true,
      onScroll: true
    }))
  };
  var ScrollViewNativeComponent = NativeComponentRegistry.get('RCTScrollView', function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var _default = exports.default = ScrollViewNativeComponent;
},365,[1,160,21,174,164,175,190]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _Animated = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _useMergeRefs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));
  var React = _react;
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[7]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var ScrollViewStickyHeaderWithForwardedRef = React.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {
    var inverted = props.inverted,
      scrollViewHeight = props.scrollViewHeight,
      hiddenOnScroll = props.hiddenOnScroll,
      scrollAnimatedValue = props.scrollAnimatedValue,
      _nextHeaderLayoutY = props.nextHeaderLayoutY;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      measured = _useState2[0],
      setMeasured = _useState2[1];
    var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      layoutY = _useState4[0],
      setLayoutY = _useState4[1];
    var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      layoutHeight = _useState6[0],
      setLayoutHeight = _useState6[1];
    var _useState7 = (0, _react.useState)(null),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      translateY = _useState8[0],
      setTranslateY = _useState8[1];
    var _useState9 = (0, _react.useState)(_nextHeaderLayoutY),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      nextHeaderLayoutY = _useState10[0],
      setNextHeaderLayoutY = _useState10[1];
    var _useState11 = (0, _react.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      isFabric = _useState12[0],
      setIsFabric = _useState12[1];
    var callbackRef = (0, _react.useCallback)(function (ref) {
      if (ref == null) {
        return;
      }
      ref.setNextHeaderY = setNextHeaderLayoutY;
      setIsFabric((0, _$$_REQUIRE(_dependencyMap[8]).isPublicInstance)(ref));
    }, []);
    var ref =
    // $FlowFixMe[incompatible-type] - Ref is mutated by `callbackRef`.
    // $FlowFixMe[incompatible-call]
    (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var offset = (0, _react.useMemo)(function () {
      return hiddenOnScroll === true ? _Animated.default.diffClamp(scrollAnimatedValue.interpolate({
        extrapolateLeft: 'clamp',
        inputRange: [layoutY, layoutY + 1],
        outputRange: [0, 1]
      }).interpolate({
        inputRange: [0, 1],
        outputRange: [0, -1]
      }), -layoutHeight, 0) : null;
    }, [scrollAnimatedValue, layoutHeight, layoutY, hiddenOnScroll]);
    var _useState13 = (0, _react.useState)(function () {
        var inputRange = [-1, 0];
        var outputRange = [0, 0];
        var initialTranslateY = scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        if (offset != null) {
          return _Animated.default.add(initialTranslateY, offset);
        }
        return initialTranslateY;
      }),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      animatedTranslateY = _useState14[0],
      setAnimatedTranslateY = _useState14[1];
    var haveReceivedInitialZeroTranslateY = (0, _react.useRef)(true);
    var translateYDebounceTimer = (0, _react.useRef)(null);
    (0, _react.useEffect)(function () {
      if (translateY !== 0 && translateY != null) {
        haveReceivedInitialZeroTranslateY.current = false;
      }
    }, [translateY]);

    // This is called whenever the (Interpolated) Animated Value
    // updates, which is several times per frame during scrolling.
    // To ensure that the Fabric ShadowTree has the most recent
    // translate style of this node, we debounce the value and then
    // pass it through to the underlying node during render.
    // This is:
    // 1. Only an issue in Fabric.
    // 2. Worse in Android than iOS. In Android, but not iOS, you
    //    can touch and move your finger slightly and still trigger
    //    a "tap" event. In iOS, moving will cancel the tap in
    //    both Fabric and non-Fabric. On Android when you move
    //    your finger, the hit-detection moves from the Android
    //    platform to JS, so we need the ShadowTree to have knowledge
    //    of the current position.
    var animatedValueListener = (0, _react.useCallback)(function (_ref) {
      var value = _ref.value;
      var debounceTimeout = _Platform.default.OS === 'android' ? 15 : 64;
      // When the AnimatedInterpolation is recreated, it always initializes
      // to a value of zero and emits a value change of 0 to its listeners.
      if (value === 0 && !haveReceivedInitialZeroTranslateY.current) {
        haveReceivedInitialZeroTranslateY.current = true;
        return;
      }
      if (translateYDebounceTimer.current != null) {
        clearTimeout(translateYDebounceTimer.current);
      }
      translateYDebounceTimer.current = setTimeout(function () {
        return setTranslateY(value);
      }, debounceTimeout);
    }, []);
    (0, _react.useEffect)(function () {
      var inputRange = [-1, 0];
      var outputRange = [0, 0];
      if (measured) {
        if (inverted === true) {
          // The interpolation looks like:
          // - Negative scroll: no translation
          // - `stickStartPoint` is the point at which the header will start sticking.
          //   It is calculated using the ScrollView viewport height so it is a the bottom.
          // - Headers that are in the initial viewport will never stick, `stickStartPoint`
          //   will be negative.
          // - From 0 to `stickStartPoint` no translation. This will cause the header
          //   to scroll normally until it reaches the top of the scroll view.
          // - From `stickStartPoint` to when the next header y hits the bottom edge of the header: translate
          //   equally to scroll. This will cause the header to stay at the top of the scroll view.
          // - Past the collision with the next header y: no more translation. This will cause the
          //   header to continue scrolling up and make room for the next sticky header.
          //   In the case that there is no next header just translate equally to
          //   scroll indefinitely.
          if (scrollViewHeight != null) {
            var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
            if (stickStartPoint > 0) {
              inputRange.push(stickStartPoint);
              outputRange.push(0);
              inputRange.push(stickStartPoint + 1);
              outputRange.push(1);
              // If the next sticky header has not loaded yet (probably windowing) or is the last
              // we can just keep it sticked forever.
              var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
              if (collisionPoint > stickStartPoint) {
                inputRange.push(collisionPoint, collisionPoint + 1);
                outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
              }
            }
          }
        } else {
          // The interpolation looks like:
          // - Negative scroll: no translation
          // - From 0 to the y of the header: no translation. This will cause the header
          //   to scroll normally until it reaches the top of the scroll view.
          // - From header y to when the next header y hits the bottom edge of the header: translate
          //   equally to scroll. This will cause the header to stay at the top of the scroll view.
          // - Past the collision with the next header y: no more translation. This will cause the
          //   header to continue scrolling up and make room for the next sticky header.
          //   In the case that there is no next header just translate equally to
          //   scroll indefinitely.
          inputRange.push(layoutY);
          outputRange.push(0);
          // If the next sticky header has not loaded yet (probably windowing) or is the last
          // we can just keep it sticked forever.
          var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;
          if (_collisionPoint >= layoutY) {
            inputRange.push(_collisionPoint, _collisionPoint + 1);
            outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
          } else {
            inputRange.push(layoutY + 1);
            outputRange.push(1);
          }
        }
      }
      var newAnimatedTranslateY = scrollAnimatedValue.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });
      if (offset != null) {
        newAnimatedTranslateY = _Animated.default.add(newAnimatedTranslateY, offset);
      }

      // add the event listener
      var animatedListenerId;
      if (isFabric) {
        animatedListenerId = newAnimatedTranslateY.addListener(animatedValueListener);
      }
      setAnimatedTranslateY(newAnimatedTranslateY);

      // clean up the event listener and timer
      return function () {
        if (animatedListenerId) {
          newAnimatedTranslateY.removeListener(animatedListenerId);
        }
        if (translateYDebounceTimer.current != null) {
          clearTimeout(translateYDebounceTimer.current);
        }
      };
    }, [nextHeaderLayoutY, measured, layoutHeight, layoutY, scrollViewHeight, scrollAnimatedValue, inverted, offset, animatedValueListener, isFabric]);
    var _onLayout = function _onLayout(event) {
      setLayoutY(event.nativeEvent.layout.y);
      setLayoutHeight(event.nativeEvent.layout.height);
      setMeasured(true);
      props.onLayout(event);
      var child = React.Children.only(props.children);
      if (child.props.onLayout) {
        child.props.onLayout(event);
      }
    };
    var child = React.Children.only(props.children);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Animated.default.View, {
      collapsable: false,
      nativeID: props.nativeID,
      onLayout: _onLayout,
      ref: ref,
      style: [child.props.style, styles.header, {
        transform: [{
          translateY: animatedTranslateY
        }]
      }],
      children: React.cloneElement(child, {
        style: styles.fill,
        // We transfer the child style to the wrapper.
        onLayout: undefined // we call this manually through our this._onLayout
      })
    });
  });
  var styles = _StyleSheet.default.create({
    header: {
      zIndex: 10,
      position: 'relative'
    },
    fill: {
      flex: 1
    }
  });
  var _default = exports.default = ScrollViewStickyHeaderWithForwardedRef;
},366,[1,26,279,196,21,306,153,194,309]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _SectionList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * @see https://github.com/facebook/react-native/commit/b8c8562
   */var SectionListWithEventThrottle = React.forwardRef(
  // $FlowFixMe[incompatible-call]
  function (props, ref) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SectionList.default, Object.assign({}, props, {
      ref: ref
    }));
  });
  var _default = exports.default = (0, _createAnimatedComponent.default)(SectionListWithEventThrottle);
},367,[1,368,305,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9]);
  var _excluded = ["stickySectionHeadersEnabled"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * A performant interface for rendering sectioned lists, supporting the most handy features:
   *
   *  - Fully cross-platform.
   *  - Configurable viewability callbacks.
   *  - List header support.
   *  - List footer support.
   *  - Item separator support.
   *  - Section header support.
   *  - Section separator support.
   *  - Heterogeneous data and item rendering support.
   *  - Pull to Refresh.
   *  - Scroll loading.
   *
   * If you don't need section support and want a simpler interface, use
   * [`<FlatList>`](https://reactnative.dev/docs/flatlist).
   *
   * Simple Examples:
   *
   *     <SectionList
   *       renderItem={({item}) => <ListItem title={item} />}
   *       renderSectionHeader={({section}) => <Header title={section.title} />}
   *       sections={[ // homogeneous rendering between sections
   *         {data: [...], title: ...},
   *         {data: [...], title: ...},
   *         {data: [...], title: ...},
   *       ]}
   *     />
   *
   *     <SectionList
   *       sections={[ // heterogeneous rendering between sections
   *         {data: [...], renderItem: ...},
   *         {data: [...], renderItem: ...},
   *         {data: [...], renderItem: ...},
   *       ]}
   *     />
   *
   * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist),
   * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed
   * here, along with the following caveats:
   *
   * - Internal state is not preserved when content scrolls out of the render window. Make sure all
   *   your data is captured in the item data or external stores like Flux, Redux, or Relay.
   * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-
   *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop
   *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on
   *   changes. This includes the `data` prop and parent component state.
   * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously
   *   offscreen. This means it's possible to scroll faster than the fill rate and momentarily see
   *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,
   *   and we are working on improving it behind the scenes.
   * - By default, the list looks for a `key` prop on each item and uses that for the React key.
   *   Alternatively, you can provide a custom `keyExtractor` prop.
   *
   */
  var SectionList = exports.default = /*#__PURE__*/function (_React$PureComponent) {
    (0, _inherits2.default)(SectionList, _React$PureComponent);
    var _super = _createSuper(SectionList);
    function SectionList() {
      var _this;
      (0, _classCallCheck2.default)(this, SectionList);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
       * LTI update could not be added via codemod */
      _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(SectionList, [{
      key: "scrollToLocation",
      value:
      /**
       * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)
       * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be
       * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a
       * fixed number of pixels to offset the final target position, e.g. to compensate for sticky
       * headers.
       *
       * Note: cannot scroll to locations outside the render window without specifying the
       * `getItemLayout` prop.
       */
      function scrollToLocation(params) {
        if (this._wrapperListRef != null) {
          this._wrapperListRef.scrollToLocation(params);
        }
      }

      /**
       * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.
       * if `waitForInteractions` is true and the user has not scrolled. This is typically called by
       * taps on items or by navigation actions.
       */
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        listRef && listRef.recordInteraction();
      }

      /**
       * Displays the scroll indicators momentarily.
       *
       * @platform ios
       */
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        listRef && listRef.flashScrollIndicators();
      }

      /**
       * Provides a handle to the underlying scroll responder.
       */
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          _stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var stickySectionHeadersEnabled = _stickySectionHeadersEnabled != null ? _stickySectionHeadersEnabled : _Platform.default.OS === 'ios';
        return (
          /*#__PURE__*/
          /* $FlowFixMe[incompatible-type] Error revealed after improved builtin
           * React utility types */
          /* $FlowFixMe[incompatible-type] Error revealed after improved builtin
           * React utility types */
          (0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[10]).VirtualizedSectionList, Object.assign({}, restProps, {
            stickySectionHeadersEnabled: stickySectionHeadersEnabled,
            ref: this._captureRef
            // $FlowFixMe[missing-local-annot]
            ,
            getItemCount: function getItemCount(items) {
              return items.length;
            }
            // $FlowFixMe[missing-local-annot]
            ,
            getItem: function getItem(items, index) {
              return items[index];
            }
          }))
        );
      }
    }]);
    return SectionList;
  }(React.PureComponent);
},368,[1,119,5,6,13,15,12,21,153,194,321]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = (0, _createAnimatedComponent.default)(_Text.default);
},369,[1,246,305,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = (0, _createAnimatedComponent.default)(_View.default);
},370,[1,156,305,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _dismissKeyboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _StatusBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _AndroidDrawerLayoutNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[15]);
  var _excluded = ["drawerBackgroundColor", "onDrawerStateChanged", "renderNavigationView", "onDrawerOpen", "onDrawerClose"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];
  /**
   * React component that wraps the platform `DrawerLayout` (Android only). The
   * Drawer (typically used for navigation) is rendered with `renderNavigationView`
   * and direct children are the main view (where your content goes). The navigation
   * view is initially not visible on the screen, but can be pulled in from the
   * side of the window specified by the `drawerPosition` prop and its width can
   * be set by the `drawerWidth` prop.
   *
   * Example:
   *
   * ```
   * render: function() {
   *   var navigationView = (
   *     <View style={{flex: 1, backgroundColor: '#fff'}}>
   *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>
   *     </View>
   *   );
   *   return (
   *     <DrawerLayoutAndroid
   *       drawerWidth={300}
   *       drawerPosition="left"
   *       renderNavigationView={() => navigationView}>
   *       <View style={{flex: 1, alignItems: 'center'}}>
   *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>
   *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>
   *       </View>
   *     </DrawerLayoutAndroid>
   *   );
   * },
   * ```
   */
  var DrawerLayoutAndroid = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(DrawerLayoutAndroid, _React$Component);
    var _super = _createSuper(DrawerLayoutAndroid);
    function DrawerLayoutAndroid() {
      var _this;
      (0, _classCallCheck2.default)(this, DrawerLayoutAndroid);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      // $FlowFixMe[missing-local-annot]
      _this._nativeRef = React.createRef();
      _this.state = {
        statusBarBackgroundColor: null
      };
      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
       * LTI update could not be added via codemod */
      _this._onDrawerSlide = function (event) {
        if (_this.props.onDrawerSlide) {
          // $FlowFixMe[unused-promise]
          _this.props.onDrawerSlide(event);
        }
        if (_this.props.keyboardDismissMode === 'on-drag') {
          (0, _dismissKeyboard.default)();
        }
      };
      _this._onDrawerOpen = function () {
        if (_this.props.onDrawerOpen) {
          _this.props.onDrawerOpen();
        }
      };
      _this._onDrawerClose = function () {
        if (_this.props.onDrawerClose) {
          _this.props.onDrawerClose();
        }
      };
      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
       * LTI update could not be added via codemod */
      _this._onDrawerStateChanged = function (event) {
        if (_this.props.onDrawerStateChanged) {
          _this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
        }
      };
      return _this;
    }
    (0, _createClass2.default)(DrawerLayoutAndroid, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          _this$props$drawerBac = _this$props.drawerBackgroundColor,
          drawerBackgroundColor = _this$props$drawerBac === undefined ? 'white' : _this$props$drawerBac,
          onDrawerStateChanged = _this$props.onDrawerStateChanged,
          renderNavigationView = _this$props.renderNavigationView,
          onDrawerOpen = _this$props.onDrawerOpen,
          onDrawerClose = _this$props.onDrawerClose,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var drawStatusBar = _Platform.default.OS === 'android' && _Platform.default.Version >= 21 && this.props.statusBarBackgroundColor != null;
        var drawerViewWrapper = /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
          style: [styles.drawerSubview, {
            width: this.props.drawerWidth,
            backgroundColor: drawerBackgroundColor
          }],
          collapsable: false,
          children: [renderNavigationView(), drawStatusBar && /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
            style: styles.drawerStatusBar
          })]
        });
        var childrenWrapper = /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
          style: styles.mainSubview,
          collapsable: false,
          children: [drawStatusBar && /*#__PURE__*/(0, _jsxRuntime.jsx)(_StatusBar.default, {
            translucent: true,
            backgroundColor: this.props.statusBarBackgroundColor
          }), drawStatusBar && /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
            style: [styles.statusBar, {
              backgroundColor: this.props.statusBarBackgroundColor
            }]
          }), this.props.children]
        });
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_AndroidDrawerLayoutNativeComponent.default, Object.assign({}, props, {
          ref: this._nativeRef,
          drawerBackgroundColor: drawerBackgroundColor,
          drawerWidth: this.props.drawerWidth,
          drawerPosition: this.props.drawerPosition,
          drawerLockMode: this.props.drawerLockMode,
          style: [styles.base, this.props.style],
          onDrawerSlide: this._onDrawerSlide,
          onDrawerOpen: this._onDrawerOpen,
          onDrawerClose: this._onDrawerClose,
          onDrawerStateChanged: this._onDrawerStateChanged,
          children: [childrenWrapper, drawerViewWrapper]
        }));
      }
    }, {
      key: "openDrawer",
      value:
      /**
       * Opens the drawer.
       */
      function openDrawer() {
        _AndroidDrawerLayoutNativeComponent.Commands.openDrawer((0, _nullthrows.default)(this._nativeRef.current));
      }

      /**
       * Closes the drawer.
       */
    }, {
      key: "closeDrawer",
      value: function closeDrawer() {
        _AndroidDrawerLayoutNativeComponent.Commands.closeDrawer((0, _nullthrows.default)(this._nativeRef.current));
      }

      /**
       * Closing and opening example
       * Note: To access the drawer you have to give it a ref
       *
       * Class component:
       *
       * render () {
       *   this.openDrawer = () => {
       *     this.refs.DRAWER.openDrawer()
       *   }
       *   this.closeDrawer = () => {
       *     this.refs.DRAWER.closeDrawer()
       *   }
       *   return (
       *     <DrawerLayoutAndroid ref={'DRAWER'}>
       *      {children}
       *     </DrawerLayoutAndroid>
       *   )
       * }
       *
       * Function component:
       *
       * const drawerRef = useRef()
       * const openDrawer = () => {
       *   drawerRef.current.openDrawer()
       * }
       * const closeDrawer = () => {
       *   drawerRef.current.closeDrawer()
       * }
       * return (
       *   <DrawerLayoutAndroid ref={drawerRef}>
       *     {children}
       *   </DrawerLayoutAndroid>
       * )
       */

      /**
       * Native methods
       */
    }, {
      key: "blur",
      value: function blur() {
        (0, _nullthrows.default)(this._nativeRef.current).blur();
      }
    }, {
      key: "focus",
      value: function focus() {
        (0, _nullthrows.default)(this._nativeRef.current).focus();
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        (0, _nullthrows.default)(this._nativeRef.current).measure(callback);
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        (0, _nullthrows.default)(this._nativeRef.current).measureInWindow(callback);
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        (0, _nullthrows.default)(this._nativeRef.current).measureLayout(relativeToNativeNode, onSuccess, onFail);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        (0, _nullthrows.default)(this._nativeRef.current).setNativeProps(nativeProps);
      }
    }], [{
      key: "positions",
      get: function get() {
        console.warn('Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value "left" or "right"');
        return {
          Left: 'left',
          Right: 'right'
        };
      }
    }]);
    return DrawerLayoutAndroid;
  }(React.Component);
  var styles = _StyleSheet.default.create({
    base: {
      flex: 1,
      elevation: 16
    },
    mainSubview: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    drawerSubview: {
      position: 'absolute',
      top: 0,
      bottom: 0
    },
    statusBar: {
      height: _StatusBar.default.currentHeight
    },
    drawerStatusBar: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: _StatusBar.default.currentHeight,
      backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
  });
  module.exports = DrawerLayoutAndroid;
},371,[1,119,5,6,13,15,12,196,355,21,372,156,375,43,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _NativeStatusBarManagerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _NativeStatusBarManagerIOS = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));
  var _class, _NativeStatusBarManag;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * Status bar style
   */

  /**
   * Status bar animation
   */

  /**
   * Merges the prop stack with the default values.
   */
  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }
      return prev;
    }, Object.assign({}, defaultValues));
  }

  /**
   * Returns an object to insert in the props stack from the props
   * and the transition/animation info.
   */
  function createStackEntry(props) {
    var _props$animated, _props$showHideTransi;
    var animated = (_props$animated = props.animated) != null ? _props$animated : false;
    var showHideTransition = (_props$showHideTransi = props.showHideTransition) != null ? _props$showHideTransi : 'fade';
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: animated,
        transition: showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  /**
   * Component to control the app status bar.
   *
   * ### Usage with Navigator
   *
   * It is possible to have multiple `StatusBar` components mounted at the same
   * time. The props will be merged in the order the `StatusBar` components were
   * mounted. One use case is to specify status bar styles per route using `Navigator`.
   *
   * ```
   *  <View>
   *    <StatusBar
   *      backgroundColor="blue"
   *      barStyle="light-content"
   *    />
   *    <Navigator
   *      initialRoute={{statusBarHidden: true}}
   *      renderScene={(route, navigator) =>
   *        <View>
   *          <StatusBar hidden={route.statusBarHidden} />
   *          ...
   *        </View>
   *      }
   *    />
   *  </View>
   * ```
   *
   * ### Imperative API
   *
   * For cases where using a component is not ideal, there are static methods
   * to manipulate the `StatusBar` display stack. These methods have the same
   * behavior as mounting and unmounting a `StatusBar` component.
   *
   * For example, you can call `StatusBar.pushStackEntry` to update the status bar
   * before launching a third-party native UI component, and then call
   * `StatusBar.popStackEntry` when completed.
   *
   * ```
   * const openThirdPartyBugReporter = async () => {
   *   // The bug reporter has a dark background, so we push a new status bar style.
   *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});
   *
   *   // `open` returns a promise that resolves when the UI is dismissed.
   *   await BugReporter.open();
   *
   *   // Don't forget to call `popStackEntry` when you're done.
   *   StatusBar.popStackEntry(stackEntry);
   * };
   * ```
   *
   * There is a legacy imperative API that enables you to manually update the
   * status bar styles. However, the legacy API does not update the internal
   * `StatusBar` display stack, which means that any changes will be overridden
   * whenever a `StatusBar` component is mounted or unmounted.
   *
   * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or
   * `replaceStackEntry` instead of the static methods beginning with `set`.
   *
   * ### Constants
   *
   * `currentHeight` (Android only) The height of the status bar.
   */
  var StatusBar = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(StatusBar, _React$Component);
    var _super = _createSuper(StatusBar);
    function StatusBar() {
      var _this;
      (0, _classCallCheck2.default)(this, StatusBar);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      // $FlowFixMe[missing-local-annot]
      _this._stackEntry = null;
      return _this;
    }
    (0, _createClass2.default)(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        // Every time a StatusBar component is mounted, we push it's prop to a stack
        // and always update the native status bar with the props from the top of then
        // stack. This allows having multiple StatusBar components and the one that is
        // added last or is deeper in the view hierarchy will have priority.
        this._stackEntry = StatusBar.pushStackEntry(this.props);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        // When a StatusBar is unmounted, remove itself from the stack and update
        // the native bar with the next props.
        StatusBar.popStackEntry(this._stackEntry);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
      }

      /**
       * Updates the native status bar with the props from the stack.
       */
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value:
      // Provide an imperative API as static functions of the component.
      // See the corresponding prop for more detail.

      /**
       * Show or hide the status bar
       * @param hidden Hide the status bar.
       * @param animation Optional animation when
       *    changing the status bar hidden property.
       */
      function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;
        if (_Platform.default.OS === 'ios') {
          _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
        } else if (_Platform.default.OS === 'android') {
          _NativeStatusBarManagerAndroid.default.setHidden(hidden);
        }
      }

      /**
       * Set the status bar style
       * @param style Status bar style to set
       * @param animated Animate the style change.
       */
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;
        if (_Platform.default.OS === 'ios') {
          _NativeStatusBarManagerIOS.default.setStyle(style, animated);
        } else if (_Platform.default.OS === 'android') {
          _NativeStatusBarManagerAndroid.default.setStyle(style);
        }
      }

      /**
       * Control the visibility of the network activity indicator
       * @param visible Show the indicator.
       */
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        if (_Platform.default.OS !== 'ios') {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }
        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
      }

      /**
       * Set the background color for the status bar
       * @param color Background color.
       * @param animated Animate the style change.
       */
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        if (_Platform.default.OS !== 'android') {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }
        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        var processedColor = (0, _processColor.default)(color);
        if (processedColor == null) {
          console.warn(`\`StatusBar.setBackgroundColor\`: Color ${color} parsed to null or undefined`);
          return;
        }
        (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');
        _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
      }

      /**
       * Control the translucency of the status bar
       * @param translucent Set as translucent.
       */
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        if (_Platform.default.OS !== 'android') {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }
        StatusBar._defaultProps.translucent = translucent;
        _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
      }

      /**
       * Push a StatusBar entry onto the stack.
       * The return value should be passed to `popStackEntry` when complete.
       *
       * @param props Object containing the StatusBar props to use in the stack entry.
       */
    }, {
      key: "pushStackEntry",
      value: function pushStackEntry(props) {
        var entry = createStackEntry(props);
        StatusBar._propsStack.push(entry);
        StatusBar._updatePropsStack();
        return entry;
      }

      /**
       * Pop a StatusBar entry from the stack.
       *
       * @param entry Entry returned from `pushStackEntry`.
       */
    }, {
      key: "popStackEntry",
      value: function popStackEntry(entry) {
        var index = StatusBar._propsStack.indexOf(entry);
        if (index !== -1) {
          StatusBar._propsStack.splice(index, 1);
        }
        StatusBar._updatePropsStack();
      }

      /**
       * Replace an existing StatusBar stack entry with new props.
       *
       * @param entry Entry returned from `pushStackEntry` to replace.
       * @param props Object containing the StatusBar props to use in the replacement stack entry.
       */
    }, {
      key: "replaceStackEntry",
      value: function replaceStackEntry(entry, props) {
        var newEntry = createStackEntry(props);
        var index = StatusBar._propsStack.indexOf(entry);
        if (index !== -1) {
          StatusBar._propsStack[index] = newEntry;
        }
        StatusBar._updatePropsStack();
        return newEntry;
      }
    }]);
    return StatusBar;
  }(React.Component);
  _class = StatusBar;
  StatusBar._propsStack = [];
  StatusBar._defaultProps = createStackEntry({
    backgroundColor: _Platform.default.OS === 'android' ? (_NativeStatusBarManag = _NativeStatusBarManagerAndroid.default.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManag : 'black' : 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  });
  // Timer for updating the native module values at the end of the frame.
  // $FlowFixMe[missing-local-annot]
  StatusBar._updateImmediate = null;
  // The current merged values from the props stack.
  // $FlowFixMe[missing-local-annot]
  StatusBar._currentValues = null;
  // TODO(janic): Provide a real API to deal with status bar height. See the
  // discussion in #6195.
  /**
   * The current height of the status bar on the device.
   *
   * @platform android
   */
  StatusBar.currentHeight = _Platform.default.OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT : null;
  StatusBar._updatePropsStack = function () {
    // Send the update to the native module only once at the end of the frame.
    clearImmediate(_class._updateImmediate);
    _class._updateImmediate = setImmediate(function () {
      var oldProps = _class._currentValues;
      var mergedProps = mergePropsStack(_class._propsStack, _class._defaultProps);

      // Update the props that have changed using the merged values from the props stack.
      if (_Platform.default.OS === 'ios') {
        if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
          _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
        }
        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
          _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
        }
        if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
          _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
        }
      } else if (_Platform.default.OS === 'android') {
        //todo(T60684787): Add back optimization to only update bar style and
        //background color if the new value is different from the old value.
        _NativeStatusBarManagerAndroid.default.setStyle(mergedProps.barStyle.value);
        var processedColor = (0, _processColor.default)(mergedProps.backgroundColor.value);
        if (processedColor == null) {
          console.warn(`\`StatusBar._updatePropsStack\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`);
        } else {
          (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');
          _NativeStatusBarManagerAndroid.default.setColor(processedColor, mergedProps.backgroundColor.animated);
        }
        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
          _NativeStatusBarManagerAndroid.default.setHidden(mergedProps.hidden.value);
        }
        // Activities are not translucent by default, so always set if true.
        if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {
          _NativeStatusBarManagerAndroid.default.setTranslucent(mergedProps.translucent);
        }
      }
      // Update the current prop values.
      _class._currentValues = mergedProps;
    });
  };
  module.exports = StatusBar;
},372,[1,5,6,13,15,12,164,21,373,374,24,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
  var constants = null;
  var NativeStatusBarManager = {
    getConstants: function getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    },
    setColor: function setColor(color, animated) {
      NativeModule.setColor(color, animated);
    },
    setTranslucent: function setTranslucent(translucent) {
      NativeModule.setTranslucent(translucent);
    },
    /**
     *  - statusBarStyles can be:
     *    - 'default'
     *    - 'dark-content'
     */
    setStyle: function setStyle(statusBarStyle) {
      NativeModule.setStyle(statusBarStyle);
    },
    setHidden: function setHidden(hidden) {
      NativeModule.setHidden(hidden);
    }
  };
  var _default = exports.default = NativeStatusBarManager;
},373,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
  var constants = null;
  var NativeStatusBarManager = {
    getConstants: function getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    },
    // TODO(T47754272) Can we remove this method?
    getHeight: function getHeight(callback) {
      NativeModule.getHeight(callback);
    },
    setNetworkActivityIndicatorVisible: function setNetworkActivityIndicatorVisible(visible) {
      NativeModule.setNetworkActivityIndicatorVisible(visible);
    },
    addListener: function addListener(eventType) {
      NativeModule.addListener(eventType);
    },
    removeListeners: function removeListeners(count) {
      NativeModule.removeListeners(count);
    },
    /**
     *  - statusBarStyles can be:
     *    - 'default'
     *    - 'dark-content'
     *    - 'light-content'
     */
    setStyle: function setStyle(statusBarStyle, animated) {
      NativeModule.setStyle(statusBarStyle, animated);
    },
    /**
     *  - withAnimation can be: 'none' | 'fade' | 'slide'
     */
    setHidden: function setHidden(hidden, withAnimation) {
      NativeModule.setHidden(hidden, withAnimation);
    }
  };
  var _default = exports.default = NativeStatusBarManager;
},374,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var nativeComponentName = 'AndroidDrawerLayout';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidDrawerLayout',
    directEventTypes: {
      topDrawerSlide: {
        registrationName: 'onDrawerSlide'
      },
      topDrawerStateChanged: {
        registrationName: 'onDrawerStateChanged'
      },
      topDrawerOpen: {
        registrationName: 'onDrawerOpen'
      },
      topDrawerClose: {
        registrationName: 'onDrawerClose'
      }
    },
    validAttributes: Object.assign({
      keyboardDismissMode: true,
      drawerBackgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      drawerPosition: true,
      drawerWidth: true,
      drawerLockMode: true,
      statusBarBackgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      }
    }, _$$_REQUIRE(_dependencyMap[5]).ConditionallyIgnoredEventHandlers({
      onDrawerSlide: true,
      onDrawerStateChanged: true,
      onDrawerOpen: true,
      onDrawerClose: true
    }))
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[6]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var Commands = exports.Commands = {
    openDrawer: function openDrawer(ref) {
      _$$_REQUIRE(_dependencyMap[7]).dispatchCommand(ref, "openDrawer", []);
    },
    closeDrawer: function closeDrawer(ref) {
      _$$_REQUIRE(_dependencyMap[7]).dispatchCommand(ref, "closeDrawer", []);
    }
  };
},375,[1,193,206,153,164,190,160,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _Image = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[12]);
  var _excluded = ["children", "style", "imageStyle", "imageRef", "importantForAccessibility"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Very simple drop-in replacement for <Image> which supports nesting views.
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, View, ImageBackground, Text } from 'react-native';
 *
 * class DisplayAnImageBackground extends Component {
 *   render() {
 *     return (
 *       <ImageBackground
 *         style={{width: 50, height: 50}}
 *         source={{uri: 'https://reactnative.dev/img/opengraph.png'}}
 *       >
 *         <Text>React</Text>
 *       </ImageBackground>
 *     );
 *   }
 * }
 *
 * // App registration and rendering
 * AppRegistry.registerComponent('DisplayAnImageBackground', () => DisplayAnImageBackground);
 * ```
 */
  var ImageBackground = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(ImageBackground, _React$Component);
    var _super = _createSuper(ImageBackground);
    function ImageBackground() {
      var _this;
      (0, _classCallCheck2.default)(this, ImageBackground);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this._viewRef = null;
      _this._captureRef = function (ref) {
        _this._viewRef = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        // Work-around flow
        var viewRef = this._viewRef;
        if (viewRef) {
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          children = _this$props.children,
          style = _this$props.style,
          imageStyle = _this$props.imageStyle,
          imageRef = _this$props.imageRef,
          importantForAccessibility = _this$props.importantForAccessibility,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);

        // $FlowFixMe[underconstrained-implicit-instantiation]
        var flattenedStyle = (0, _flattenStyle.default)(style);
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
          accessibilityIgnoresInvertColors: true,
          importantForAccessibility: importantForAccessibility,
          style: style,
          ref: this._captureRef,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Image.default, Object.assign({}, props, {
            importantForAccessibility: importantForAccessibility,
            style: [_StyleSheet.default.absoluteFill, {
              // Temporary Workaround:
              // Current (imperfect yet) implementation of <Image> overwrites width and height styles
              // (which is not quite correct), and these styles conflict with explicitly set styles
              // of <ImageBackground> and with our internal layout model here.
              // So, we have to proxy/reapply these styles explicitly for actual <Image> component.
              // This workaround should be removed after implementing proper support of
              // intrinsic content size of the <Image>.
              // $FlowFixMe[prop-missing]
              width: flattenedStyle == null ? undefined : flattenedStyle.width,
              // $FlowFixMe[prop-missing]
              height: flattenedStyle == null ? undefined : flattenedStyle.height
            }, imageStyle],
            ref: imageRef
          })), children]
        });
      }
    }]);
    return ImageBackground;
  }(React.Component);
  module.exports = ImageBackground;
},376,[1,119,5,6,13,15,12,156,157,196,338,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */ /**
 * Note: iOS only
 *
 * A component which enables customization of the keyboard input accessory view.
 * The input accessory view is displayed above the keyboard whenever a TextInput
 * has focus. This component can be used to create custom toolbars.
 *
 * To use this component wrap your custom toolbar with the
 * InputAccessoryView component, and set a nativeID. Then, pass that nativeID
 * as the inputAccessoryViewID of whatever TextInput you desire. A simple
 * example:
 *
 * ```ReactNativeWebPlayer
 * import React, { Component } from 'react';
 * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';
 *
 * export default class UselessTextInput extends Component {
 *   constructor(props) {
 *     super(props);
 *     this.state = {text: 'Placeholder Text'};
 *   }
 *
 *   render() {
 *     const inputAccessoryViewID = "uniqueID";
 *     return (
 *       <View>
 *         <ScrollView keyboardDismissMode="interactive">
 *           <TextInput
 *             style={{
 *               padding: 10,
 *               paddingTop: 50,
 *             }}
 *             inputAccessoryViewID=inputAccessoryViewID
 *             onChangeText={text => this.setState({text})}
 *             value={this.state.text}
 *           />
 *         </ScrollView>
 *         <InputAccessoryView nativeID=inputAccessoryViewID>
 *           <Button
 *             onPress={() => this.setState({text: 'Placeholder Text'})}
 *             title="Reset Text"
 *           />
 *         </InputAccessoryView>
 *       </View>
 *     );
 *   }
 * }
 *
 * // skip this line if using Create React Native App
 * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);
 * ```
 *
 * This component can also be used to create sticky text inputs (text inputs
 * which are anchored to the top of the keyboard). To do this, wrap a
 * TextInput with the InputAccessoryView component, and don't set a nativeID.
 * For an example, look at InputAccessoryViewExample.js in RNTester.
 */
  var InputAccessoryView = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(InputAccessoryView, _React$Component);
    var _super = _createSuper(InputAccessoryView);
    function InputAccessoryView() {
      (0, _classCallCheck2.default)(this, InputAccessoryView);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(InputAccessoryView, [{
      key: "render",
      value: function render() {
        if (_Platform.default.OS === 'ios') {
          if (React.Children.count(this.props.children) === 0) {
            return null;
          }
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
            style: [this.props.style, styles.container],
            nativeID: this.props.nativeID,
            backgroundColor: this.props.backgroundColor,
            children: this.props.children
          });
        } else {
          console.warn('<InputAccessoryView> is only supported on iOS.');
          return null;
        }
      }
    }]);
    return InputAccessoryView;
  }(React.Component);
  var styles = _StyleSheet.default.create({
    container: {
      position: 'absolute'
    }
  });
  module.exports = InputAccessoryView;
},377,[1,5,6,13,15,12,196,21,378,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                         * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                         *
                                                                                         * This source code is licensed under the MIT license found in the
                                                                                         * LICENSE file in the root directory of this source tree.
                                                                                         *
                                                                                         * 
                                                                                         * @format
                                                                                         */

  var nativeComponentName = 'RCTInputAccessoryView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTInputAccessoryView',
    validAttributes: {
      backgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[2])
      }
    }
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[3]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
},378,[1,206,164,160]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _LayoutAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _AccessibilityInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  var _Keyboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[15]);
  var _excluded = ["behavior", "children", "contentContainerStyle", "enabled", "keyboardVerticalOffset", "style", "onLayout"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  /**
   * View that moves out of the way when the keyboard appears by automatically
   * adjusting its height, position, or bottom padding.
   */
  var KeyboardAvoidingView = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(KeyboardAvoidingView, _React$Component);
    var _super = _createSuper(KeyboardAvoidingView);
    function KeyboardAvoidingView(props) {
      var _this;
      (0, _classCallCheck2.default)(this, KeyboardAvoidingView);
      _this = _super.call(this, props);
      _this._frame = null;
      _this._keyboardEvent = null;
      _this._subscriptions = [];
      _this._initialFrameHeight = 0;
      _this._bottom = 0;
      _this._onKeyboardChange = function (event) {
        _this._keyboardEvent = event;
        // $FlowFixMe[unused-promise]
        _this._updateBottomIfNecessary();
      };
      _this._onLayout = /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (event) {
          var oldFrame = _this._frame;
          _this._frame = event.nativeEvent.layout;
          if (!_this._initialFrameHeight) {
            // save the initial frame height, before the keyboard is visible
            _this._initialFrameHeight = _this._frame.height;
          }

          // update bottom height for the first time or when the height is changed
          if (!oldFrame || oldFrame.height !== _this._frame.height) {
            yield _this._updateBottomIfNecessary();
          }
          if (_this.props.onLayout) {
            _this.props.onLayout(event);
          }
        });
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }();
      // Avoid unnecessary renders if the KeyboardAvoidingView is disabled.
      _this._setBottom = function (value) {
        var _this$props$enabled;
        var enabled = (_this$props$enabled = _this.props.enabled) != null ? _this$props$enabled : true;
        _this._bottom = value;
        if (enabled) {
          _this.setState({
            bottom: value
          });
        }
      };
      _this._updateBottomIfNecessary = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
        var _this$props$enabled2;
        if (_this._keyboardEvent == null) {
          _this._setBottom(0);
          return;
        }
        var _this$_keyboardEvent = _this._keyboardEvent,
          duration = _this$_keyboardEvent.duration,
          easing = _this$_keyboardEvent.easing,
          endCoordinates = _this$_keyboardEvent.endCoordinates;
        var height = yield _this._relativeKeyboardHeight(endCoordinates);
        if (_this._bottom === height) {
          return;
        }
        _this._setBottom(height);
        var enabled = (_this$props$enabled2 = _this.props.enabled) != null ? _this$props$enabled2 : true;
        if (enabled && duration && easing) {
          _LayoutAnimation.default.configureNext({
            // We have to pass the duration equal to minimal accepted duration defined here: RCTLayoutAnimation.m
            duration: duration > 10 ? duration : 10,
            update: {
              duration: duration > 10 ? duration : 10,
              type: _LayoutAnimation.default.Types[easing] || 'keyboard'
            }
          });
        }
      });
      _this.state = {
        bottom: 0
      };
      _this.viewRef = React.createRef();
      return _this;
    }
    (0, _createClass2.default)(KeyboardAvoidingView, [{
      key: "_relativeKeyboardHeight",
      value: function () {
        var _relativeKeyboardHeight2 = (0, _asyncToGenerator2.default)(function* (keyboardFrame) {
          var _this$props$keyboardV;
          var frame = this._frame;
          if (!frame || !keyboardFrame) {
            return 0;
          }

          // On iOS when Prefer Cross-Fade Transitions is enabled, the keyboard position
          // & height is reported differently (0 instead of Y position value matching height of frame)
          if (_Platform.default.OS === 'ios' && keyboardFrame.screenY === 0 && (yield _AccessibilityInfo.default.prefersCrossFadeTransitions())) {
            return 0;
          }
          var keyboardY = keyboardFrame.screenY - ((_this$props$keyboardV = this.props.keyboardVerticalOffset) != null ? _this$props$keyboardV : 0);
          if (this.props.behavior === 'height') {
            return Math.max(this.state.bottom + frame.y + frame.height - keyboardY, 0);
          }

          // Calculate the displacement needed for the view such that it
          // no longer overlaps with the keyboard
          return Math.max(frame.y + frame.height - keyboardY, 0);
        });
        function _relativeKeyboardHeight(_x2) {
          return _relativeKeyboardHeight2.apply(this, arguments);
        }
        return _relativeKeyboardHeight;
      }()
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(_, prevState) {
        var _this$props$enabled3;
        var enabled = (_this$props$enabled3 = this.props.enabled) != null ? _this$props$enabled3 : true;
        if (enabled && this._bottom !== prevState.bottom) {
          this.setState({
            bottom: this._bottom
          });
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (_Platform.default.OS === 'ios') {
          this._subscriptions = [_Keyboard.default.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
        } else {
          this._subscriptions = [_Keyboard.default.addListener('keyboardDidHide', this._onKeyboardChange), _Keyboard.default.addListener('keyboardDidShow', this._onKeyboardChange)];
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._subscriptions.forEach(function (subscription) {
          subscription.remove();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          behavior = _this$props.behavior,
          children = _this$props.children,
          contentContainerStyle = _this$props.contentContainerStyle,
          _this$props$enabled4 = _this$props.enabled,
          enabled = _this$props$enabled4 === undefined ? true : _this$props$enabled4,
          _this$props$keyboardV2 = _this$props.keyboardVerticalOffset,
          keyboardVerticalOffset = _this$props$keyboardV2 === undefined ? 0 : _this$props$keyboardV2,
          style = _this$props.style,
          onLayout = _this$props.onLayout,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var bottomHeight = enabled === true ? this.state.bottom : 0;
        switch (behavior) {
          case 'height':
            var heightStyle;
            if (this._frame != null && this.state.bottom > 0) {
              // Note that we only apply a height change when there is keyboard present,
              // i.e. this.state.bottom is greater than 0. If we remove that condition,
              // this.frame.height will never go back to its original value.
              // When height changes, we need to disable flex.
              heightStyle = {
                height: this._initialFrameHeight - bottomHeight,
                flex: 0
              };
            }
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, Object.assign({
              ref: this.viewRef,
              style: _StyleSheet.default.compose(style, heightStyle),
              onLayout: this._onLayout
            }, props, {
              children: children
            }));
          case 'position':
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, Object.assign({
              ref: this.viewRef,
              style: style,
              onLayout: this._onLayout
            }, props, {
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
                style: _StyleSheet.default.compose(contentContainerStyle, {
                  bottom: bottomHeight
                }),
                children: children
              })
            }));
          case 'padding':
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, Object.assign({
              ref: this.viewRef,
              style: _StyleSheet.default.compose(style, {
                paddingBottom: bottomHeight
              }),
              onLayout: this._onLayout
            }, props, {
              children: children
            }));
          default:
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, Object.assign({
              ref: this.viewRef,
              onLayout: this._onLayout,
              style: style
            }, props, {
              children: children
            }));
        }
      }
    }]);
    return KeyboardAvoidingView;
  }(React.Component);
  var _default = exports.default = KeyboardAvoidingView;
},379,[1,119,339,5,6,13,15,12,357,196,21,3,156,356,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _ModalInjection = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _NativeModalManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _RCTModalHostViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[11]);
  var _ModalInjection$unsta;
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  var React = _$$_REQUIRE(_dependencyMap[12]);
  var ModalEventEmitter = null;

  /**
   * The Modal component is a simple way to present content above an enclosing view.
   *
   * See https://reactnative.dev/docs/modal
   */

  // In order to route onDismiss callbacks, we need to uniquely identifier each
  // <Modal> on screen. There can be different ones, either nested or as siblings.
  // We cannot pass the onDismiss callback to native as the view will be
  // destroyed before the callback is fired.
  var uniqueModalIdentifier = 0;
  var Modal = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(Modal, _React$Component);
    var _super = _createSuper(Modal);
    function Modal(props) {
      var _this;
      (0, _classCallCheck2.default)(this, Modal);
      _this = _super.call(this, props);
      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }
    (0, _createClass2.default)(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this; // 'modalDismissed' is for the old renderer in iOS only
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {}
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;
        if (this.props.visible !== true) {
          return null;
        }
        var containerStyles = {
          backgroundColor: this.props.transparent === true ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType || 'none';
        var presentationStyle = this.props.presentationStyle;
        if (!presentationStyle) {
          presentationStyle = 'fullScreen';
          if (this.props.transparent === true) {
            presentationStyle = 'overFullScreen';
          }
        }
        var innerChildren = this.props.children;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RCTModalHostViewNativeComponent.default, {
          animationType: animationType,
          presentationStyle: presentationStyle,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          onDismiss: function onDismiss() {
            if (_this3.props.onDismiss) {
              _this3.props.onDismiss();
            }
          },
          visible: this.props.visible,
          statusBarTranslucent: this.props.statusBarTranslucent,
          identifier: this._identifier,
          style: styles.modal
          // $FlowFixMe[method-unbinding] added when improving typing for this parameters
          ,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange,
          testID: this.props.testID,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[13]).VirtualizedListContextResetter, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[14]).Context.Provider, {
              value: null,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[15]), {
                style: [styles.container, containerStyles],
                collapsable: false,
                children: innerChildren
              })
            })
          })
        });
      }

      // We don't want any responder events bubbling out of the modal.
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }]);
    return Modal;
  }(React.Component);
  Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  };
  Modal.contextType = _$$_REQUIRE(_dependencyMap[16]).RootTagContext;
  var side = _$$_REQUIRE(_dependencyMap[17]).getConstants().isRTL ? 'right' : 'left';
  var styles = _$$_REQUIRE(_dependencyMap[18]).create({
    modal: {
      position: 'absolute'
    },
    container: (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, side, 0), "top", 0), "flex", 1)
  });
  var ExportedModal = (_ModalInjection$unsta = _ModalInjection.default.unstable_Modal) != null ? _ModalInjection$unsta : Modal;
  module.exports = ExportedModal;
},380,[1,170,5,6,13,15,12,111,381,382,383,194,153,321,351,156,232,200,196]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = {
    unstable_Modal: null
  };
},381,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('ModalManager');
},382,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                         * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                         *
                                                                                         * This source code is licensed under the MIT license found in the
                                                                                         * LICENSE file in the root directory of this source tree.
                                                                                         *
                                                                                         * @format
                                                                                         * 
                                                                                         */

  var nativeComponentName = 'RCTModalHostView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTModalHostView',
    directEventTypes: {
      topRequestClose: {
        registrationName: 'onRequestClose'
      },
      topShow: {
        registrationName: 'onShow'
      },
      topDismiss: {
        registrationName: 'onDismiss'
      },
      topOrientationChange: {
        registrationName: 'onOrientationChange'
      }
    },
    validAttributes: Object.assign({
      animationType: true,
      presentationStyle: true,
      transparent: true,
      statusBarTranslucent: true,
      hardwareAccelerated: true,
      visible: true,
      animated: true,
      supportedOrientations: true,
      identifier: true
    }, _$$_REQUIRE(_dependencyMap[2]).ConditionallyIgnoredEventHandlers({
      onRequestClose: true,
      onShow: true,
      onDismiss: true,
      onOrientationChange: true
    }))
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[3]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
},383,[1,206,190,160]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _usePressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _useMergeRefs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _useAndroidRippleForView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  var React = _react;
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);
  var _excluded = ["accessible", "accessibilityState", "aria-live", "android_disableSound", "android_ripple", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-label", "aria-selected", "cancelable", "children", "delayHoverIn", "delayHoverOut", "delayLongPress", "disabled", "focusable", "hitSlop", "onHoverIn", "onHoverOut", "onLongPress", "onPress", "onPressIn", "onPressOut", "pressRetentionOffset", "style", "testOnly_pressed", "unstable_pressDelay"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Component used to build display components that should respond to whether the
   * component is currently pressed or not.
   */
  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */
  function Pressable(props, forwardedRef) {
    var _props$ariaValuemax, _props$accessibilityV, _props$ariaValuemin, _props$accessibilityV2, _props$ariaValuenow, _props$accessibilityV3, _props$ariaValuetext, _props$accessibilityV4, _restProps$ariaModal;
    var accessible = props.accessible,
      accessibilityState = props.accessibilityState,
      ariaLive = props['aria-live'],
      android_disableSound = props.android_disableSound,
      android_ripple = props.android_ripple,
      ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaLabel = props['aria-label'],
      ariaSelected = props['aria-selected'],
      cancelable = props.cancelable,
      children = props.children,
      delayHoverIn = props.delayHoverIn,
      delayHoverOut = props.delayHoverOut,
      delayLongPress = props.delayLongPress,
      disabled = props.disabled,
      focusable = props.focusable,
      hitSlop = props.hitSlop,
      onHoverIn = props.onHoverIn,
      onHoverOut = props.onHoverOut,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      _onPressIn = props.onPressIn,
      _onPressOut = props.onPressOut,
      pressRetentionOffset = props.pressRetentionOffset,
      style = props.style,
      testOnly_pressed = props.testOnly_pressed,
      unstable_pressDelay = props.unstable_pressDelay,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var viewRef = (0, _react.useRef)(null);
    var mergedRef = (0, _useMergeRefs.default)(forwardedRef, viewRef);
    var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);
    var _usePressState = usePressState(testOnly_pressed === true),
      _usePressState2 = (0, _slicedToArray2.default)(_usePressState, 2),
      pressed = _usePressState2[0],
      setPressed = _usePressState2[1];
    var _accessibilityState = {
      busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? undefined : accessibilityState.busy,
      checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? undefined : accessibilityState.checked,
      disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? undefined : accessibilityState.disabled,
      expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? undefined : accessibilityState.expanded,
      selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? undefined : accessibilityState.selected
    };
    _accessibilityState = disabled != null ? Object.assign({}, _accessibilityState, {
      disabled: disabled
    }) : _accessibilityState;
    var accessibilityValue = {
      max: (_props$ariaValuemax = props['aria-valuemax']) != null ? _props$ariaValuemax : (_props$accessibilityV = props.accessibilityValue) == null ? undefined : _props$accessibilityV.max,
      min: (_props$ariaValuemin = props['aria-valuemin']) != null ? _props$ariaValuemin : (_props$accessibilityV2 = props.accessibilityValue) == null ? undefined : _props$accessibilityV2.min,
      now: (_props$ariaValuenow = props['aria-valuenow']) != null ? _props$ariaValuenow : (_props$accessibilityV3 = props.accessibilityValue) == null ? undefined : _props$accessibilityV3.now,
      text: (_props$ariaValuetext = props['aria-valuetext']) != null ? _props$ariaValuetext : (_props$accessibilityV4 = props.accessibilityValue) == null ? undefined : _props$accessibilityV4.text
    };
    var accessibilityLiveRegion = ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : props.accessibilityLiveRegion;
    var accessibilityLabel = ariaLabel != null ? ariaLabel : props.accessibilityLabel;
    var restPropsWithDefaults = Object.assign({}, restProps, android_rippleConfig == null ? undefined : android_rippleConfig.viewProps, {
      accessible: accessible !== false,
      accessibilityViewIsModal: (_restProps$ariaModal = restProps['aria-modal']) != null ? _restProps$ariaModal : restProps.accessibilityViewIsModal,
      accessibilityLiveRegion: accessibilityLiveRegion,
      accessibilityLabel: accessibilityLabel,
      accessibilityState: _accessibilityState,
      focusable: focusable !== false,
      accessibilityValue: accessibilityValue,
      hitSlop: hitSlop
    });
    var config = (0, _react.useMemo)(function () {
      return {
        cancelable: cancelable,
        disabled: disabled,
        hitSlop: hitSlop,
        pressRectOffset: pressRetentionOffset,
        android_disableSound: android_disableSound,
        delayHoverIn: delayHoverIn,
        delayHoverOut: delayHoverOut,
        delayLongPress: delayLongPress,
        delayPressIn: unstable_pressDelay,
        onHoverIn: onHoverIn,
        onHoverOut: onHoverOut,
        onLongPress: onLongPress,
        onPress: onPress,
        onPressIn: function onPressIn(event) {
          if (android_rippleConfig != null) {
            android_rippleConfig.onPressIn(event);
          }
          setPressed(true);
          if (_onPressIn != null) {
            _onPressIn(event);
          }
        },
        onPressMove: android_rippleConfig == null ? undefined : android_rippleConfig.onPressMove,
        onPressOut: function onPressOut(event) {
          if (android_rippleConfig != null) {
            android_rippleConfig.onPressOut(event);
          }
          setPressed(false);
          if (_onPressOut != null) {
            _onPressOut(event);
          }
        }
      };
    }, [android_disableSound, android_rippleConfig, cancelable, delayHoverIn, delayHoverOut, delayLongPress, disabled, hitSlop, onHoverIn, onHoverOut, onLongPress, onPress, _onPressIn, _onPressOut, pressRetentionOffset, setPressed, unstable_pressDelay]);
    var eventHandlers = (0, _usePressability.default)(config);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, Object.assign({}, restPropsWithDefaults, eventHandlers, {
      ref: mergedRef,
      style: typeof style === 'function' ? style({
        pressed: pressed
      }) : style,
      collapsable: false,
      children: [typeof children === 'function' ? children({
        pressed: pressed
      }) : children, null]
    }));
  }
  function usePressState(forcePressed) {
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      pressed = _useState2[0],
      setPressed = _useState2[1];
    return [pressed || forcePressed, setPressed];
  }
  var MemoedPressable = React.memo(React.forwardRef(Pressable));
  MemoedPressable.displayName = 'Pressable';
  var _default = exports.default = MemoedPressable;
},384,[1,26,119,248,306,156,385,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAndroidRippleForView;
  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5]));
  var React = _react;
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * Provides the event handlers and props for configuring the ripple effect on
   * supported versions of Android.
   */
  function useAndroidRippleForView(rippleConfig, viewRef) {
    var _ref = rippleConfig != null ? rippleConfig : {},
      color = _ref.color,
      borderless = _ref.borderless,
      radius = _ref.radius,
      foreground = _ref.foreground;
    return (0, _react.useMemo)(function () {
      if (_Platform.default.OS === 'android' && _Platform.default.Version >= 21 && (color != null || borderless != null || radius != null)) {
        var processedColor = (0, _processColor.default)(color);
        (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
        var nativeRippleValue = {
          type: 'RippleAndroid',
          color: processedColor,
          borderless: borderless === true,
          rippleRadius: radius
        };
        return {
          viewProps: foreground === true && _Platform.default.Version >= 23 ? {
            nativeForegroundAndroid: nativeRippleValue
          } : {
            nativeBackgroundAndroid: nativeRippleValue
          },
          onPressIn: function onPressIn(event) {
            var view = viewRef.current;
            if (view != null) {
              var _event$nativeEvent$lo, _event$nativeEvent$lo2;
              _$$_REQUIRE(_dependencyMap[6]).Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);
              _$$_REQUIRE(_dependencyMap[6]).Commands.setPressed(view, true);
            }
          },
          onPressMove: function onPressMove(event) {
            var view = viewRef.current;
            if (view != null) {
              var _event$nativeEvent$lo3, _event$nativeEvent$lo4;
              _$$_REQUIRE(_dependencyMap[6]).Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);
            }
          },
          onPressOut: function onPressOut(event) {
            var view = viewRef.current;
            if (view != null) {
              _$$_REQUIRE(_dependencyMap[6]).Commands.setPressed(view, false);
            }
          }
        };
      }
      return null;
    }, [borderless, color, foreground, radius, viewRef]);
  }
},385,[1,164,21,156,24,153,159]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  /**
   * Renders nested content and automatically applies paddings reflect the portion
   * of the view that is not covered by navigation bars, tab bars, toolbars, and
   * other ancestor views.
   *
   * Moreover, and most importantly, Safe Area's paddings reflect physical
   * limitation of the screen, such as rounded corners or camera notches (aka
   * sensor housing area on iPhone X).
   */
  var exported = _Platform.default.select({
    ios: _$$_REQUIRE(_dependencyMap[4]).default,
    default: _View.default
  });
  var _default = exports.default = exported;
},386,[1,21,156,153,387]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                         * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                         *
                                                                                         * This source code is licensed under the MIT license found in the
                                                                                         * LICENSE file in the root directory of this source tree.
                                                                                         *
                                                                                         * @format
                                                                                         * 
                                                                                         */

  var nativeComponentName = 'RCTSafeAreaView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSafeAreaView',
    validAttributes: {}
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[2]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
},387,[1,206,160]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _useMergeRefs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _AndroidSwitchNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));
  var _SwitchNativeComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9]);
  var _excluded = ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   * @generate-docs
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var returnsFalse = function returnsFalse() {
    return false;
  };
  var returnsTrue = function returnsTrue() {
    return true;
  };

  /**
    Renders a boolean input.
  
    This is a controlled component that requires an `onValueChange`
    callback that updates the `value` prop in order for the component to
    reflect user actions. If the `value` prop is not updated, the
    component will continue to render the supplied `value` prop instead of
    the expected result of any user actions.
  
    ```SnackPlayer name=Switch
    import React, { useState } from "react";
    import { View, Switch, StyleSheet } from "react-native";
  
    const App = () => {
      const [isEnabled, setIsEnabled] = useState(false);
      const toggleSwitch = () => setIsEnabled(previousState => !previousState);
  
      return (
        <View style={styles.container}>
          <Switch
            trackColor={{ false: "#767577", true: "#81b0ff" }}
            thumbColor={isEnabled ? "#f5dd4b" : "#f4f3f4"}
            ios_backgroundColor="#3e3e3e"
            onValueChange={toggleSwitch}
            value={isEnabled}
          />
        </View>
      );
    }
  
    const styles = StyleSheet.create({
      container: {
        flex: 1,
        alignItems: "center",
        justifyContent: "center"
      }
    });
  
    export default App;
    ```
   */

  var SwitchWithForwardedRef = React.forwardRef(function Switch(props, forwardedRef) {
    var disabled = props.disabled,
      ios_backgroundColor = props.ios_backgroundColor,
      onChange = props.onChange,
      onValueChange = props.onValueChange,
      style = props.style,
      thumbColor = props.thumbColor,
      trackColor = props.trackColor,
      value = props.value,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var trackColorForFalse = trackColor == null ? undefined : trackColor.false;
    var trackColorForTrue = trackColor == null ? undefined : trackColor.true;
    var nativeSwitchRef = React.useRef(null);

    // $FlowFixMe[incompatible-call]
    var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);
    var _React$useState = React.useState({
        value: null
      }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      native = _React$useState2[0],
      setNative = _React$useState2[1];
    var handleChange = function handleChange(event) {
      // $FlowFixMe[unused-promise]
      onChange == null ? undefined : onChange(event);
      // $FlowFixMe[unused-promise]
      onValueChange == null ? undefined : onValueChange(event.nativeEvent.value);
      setNative({
        value: event.nativeEvent.value
      });
    };
    React.useLayoutEffect(function () {
      var _nativeSwitchRef$curr;
      // This is necessary in case native updates the switch and JS decides
      // that the update should be ignored and we should stick with the value
      // that we have in JS.
      var jsValue = value === true;
      var shouldUpdateNativeSwitch = native.value != null && native.value !== jsValue;
      if (shouldUpdateNativeSwitch && ((_nativeSwitchRef$curr = nativeSwitchRef.current) == null ? undefined : _nativeSwitchRef$curr.setNativeProps) != null) {
        if (_Platform.default.OS === 'android') {
          _AndroidSwitchNativeComponent.Commands.setNativeValue(nativeSwitchRef.current, jsValue);
        } else {
          _SwitchNativeComponent.Commands.setValue(nativeSwitchRef.current, jsValue);
        }
      }
    }, [value, native]);
    if (_Platform.default.OS === 'android') {
      var _props$accessibilityR;
      var accessibilityState = restProps.accessibilityState;
      var _disabled = disabled != null ? disabled : accessibilityState == null ? undefined : accessibilityState.disabled;
      var _accessibilityState = _disabled !== (accessibilityState == null ? undefined : accessibilityState.disabled) ? Object.assign({}, accessibilityState, {
        disabled: _disabled
      }) : accessibilityState;
      var platformProps = {
        accessibilityState: _accessibilityState,
        enabled: _disabled !== true,
        on: value === true,
        style: style,
        thumbTintColor: thumbColor,
        trackColorForFalse: trackColorForFalse,
        trackColorForTrue: trackColorForTrue,
        trackTintColor: value === true ? trackColorForTrue : trackColorForFalse
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_AndroidSwitchNativeComponent.default, Object.assign({}, restProps, platformProps, {
        accessibilityRole: (_props$accessibilityR = props.accessibilityRole) != null ? _props$accessibilityR : 'switch',
        onChange: handleChange,
        onResponderTerminationRequest: returnsFalse,
        onStartShouldSetResponder: returnsTrue,
        ref: ref
      }));
    } else {
      var _props$accessibilityR2;
      var _platformProps = {
        disabled: disabled,
        onTintColor: trackColorForTrue,
        style: _StyleSheet.default.compose({
          height: 31,
          width: 51
        }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
          backgroundColor: ios_backgroundColor,
          borderRadius: 16
        })),
        thumbTintColor: thumbColor,
        tintColor: trackColorForFalse,
        value: value === true
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SwitchNativeComponent.default, Object.assign({}, restProps, _platformProps, {
        accessibilityRole: (_props$accessibilityR2 = props.accessibilityRole) != null ? _props$accessibilityR2 : 'switch',
        onChange: handleChange,
        onResponderTerminationRequest: returnsFalse,
        onStartShouldSetResponder: returnsTrue,
        ref: ref
      }));
    }
  });
  var _default = exports.default = SwitchWithForwardedRef;
},388,[1,26,119,196,21,306,389,390,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var nativeComponentName = 'AndroidSwitch';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidSwitch',
    bubblingEventTypes: {
      topChange: {
        phasedRegistrationNames: {
          captured: 'onChangeCapture',
          bubbled: 'onChange'
        }
      }
    },
    validAttributes: Object.assign({
      disabled: true,
      enabled: true,
      thumbColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      trackColorForFalse: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      trackColorForTrue: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      value: true,
      on: true,
      thumbTintColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      trackTintColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      }
    }, _$$_REQUIRE(_dependencyMap[5]).ConditionallyIgnoredEventHandlers({
      onChange: true
    }))
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[6]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var Commands = exports.Commands = {
    setNativeValue: function setNativeValue(ref, value) {
      _$$_REQUIRE(_dependencyMap[7]).dispatchCommand(ref, "setNativeValue", [value]);
    }
  };
},389,[1,193,206,153,164,190,160,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var nativeComponentName = 'RCTSwitch';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSwitch',
    bubblingEventTypes: {
      topChange: {
        phasedRegistrationNames: {
          captured: 'onChangeCapture',
          bubbled: 'onChange'
        }
      }
    },
    validAttributes: Object.assign({
      disabled: true,
      value: true,
      tintColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      onTintColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      thumbTintColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      thumbColor: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      trackColorForFalse: {
        process: _$$_REQUIRE(_dependencyMap[4])
      },
      trackColorForTrue: {
        process: _$$_REQUIRE(_dependencyMap[4])
      }
    }, _$$_REQUIRE(_dependencyMap[5]).ConditionallyIgnoredEventHandlers({
      onChange: true
    }))
  };
  var _default = exports.default = _$$_REQUIRE(_dependencyMap[6]).get(nativeComponentName, function () {
    return __INTERNAL_VIEW_CONFIG;
  });
  var Commands = exports.Commands = {
    setValue: function setValue(ref, value) {
      _$$_REQUIRE(_dependencyMap[7]).dispatchCommand(ref, "setValue", [value]);
    }
  };
},390,[1,193,206,153,164,190,160,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _usePressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _TextAncestor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _useMergeRefs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _TextInputState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));
  var React = _react;
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[14]);
  var _excluded = ["aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-selected", "accessibilityState", "id", "tabIndex", "selection"],
    _excluded2 = ["onBlur", "onFocus"],
    _excluded3 = ["allowFontScaling", "rejectResponderTermination", "underlineColorAndroid", "autoComplete", "textContentType", "readOnly", "editable", "enterKeyHint", "returnKeyType", "inputMode", "showSoftInputOnFocus", "keyboardType"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var AndroidTextInput;
  var AndroidTextInputCommands;
  var RCTSinglelineTextInputView;
  var RCTSinglelineTextInputNativeCommands;
  var RCTMultilineTextInputView;
  var RCTMultilineTextInputNativeCommands;
  if (_Platform.default.OS === 'android') {
    AndroidTextInput = _$$_REQUIRE(_dependencyMap[15]).default;
    AndroidTextInputCommands = _$$_REQUIRE(_dependencyMap[15]).Commands;
  } else if (_Platform.default.OS === 'ios') {
    RCTSinglelineTextInputView = _$$_REQUIRE(_dependencyMap[16]).default;
    RCTSinglelineTextInputNativeCommands = _$$_REQUIRE(_dependencyMap[16]).Commands;
    RCTMultilineTextInputView = _$$_REQUIRE(_dependencyMap[17]).default;
    RCTMultilineTextInputNativeCommands = _$$_REQUIRE(_dependencyMap[17]).Commands;
  }
  var emptyFunctionThatReturnsTrue = function emptyFunctionThatReturnsTrue() {
    return true;
  };

  /**
   * A foundational component for inputting text into the app via a
   * keyboard. Props provide configurability for several features, such as
   * auto-correction, auto-capitalization, placeholder text, and different keyboard
   * types, such as a numeric keypad.
   *
   * The simplest use case is to plop down a `TextInput` and subscribe to the
   * `onChangeText` events to read the user input. There are also other events,
   * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple
   * example:
   *
   * ```ReactNativeWebPlayer
   * import React, { Component } from 'react';
   * import { AppRegistry, TextInput } from 'react-native';
   *
   * export default class UselessTextInput extends Component {
   *   constructor(props) {
   *     super(props);
   *     this.state = { text: 'Useless Placeholder' };
   *   }
   *
   *   render() {
   *     return (
   *       <TextInput
   *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}
   *         onChangeText={(text) => this.setState({text})}
   *         value={this.state.text}
   *       />
   *     );
   *   }
   * }
   *
   * // skip this line if using Create React Native App
   * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);
   * ```
   *
   * Two methods exposed via the native element are .focus() and .blur() that
   * will focus or blur the TextInput programmatically.
   *
   * Note that some props are only available with `multiline={true/false}`.
   * Additionally, border styles that apply to only one side of the element
   * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if
   * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`
   * in a `View`:
   *
   * ```ReactNativeWebPlayer
   * import React, { Component } from 'react';
   * import { AppRegistry, View, TextInput } from 'react-native';
   *
   * class UselessTextInput extends Component {
   *   render() {
   *     return (
   *       <TextInput
   *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below
   *         editable = {true}
   *         maxLength = {40}
   *       />
   *     );
   *   }
   * }
   *
   * export default class UselessTextInputMultiline extends Component {
   *   constructor(props) {
   *     super(props);
   *     this.state = {
   *       text: 'Useless Multiline Placeholder',
   *     };
   *   }
   *
   *   // If you type something in the text box that is a color, the background will change to that
   *   // color.
   *   render() {
   *     return (
   *      <View style={{
   *        backgroundColor: this.state.text,
   *        borderBottomColor: '#000000',
   *        borderBottomWidth: 1 }}
   *      >
   *        <UselessTextInput
   *          multiline = {true}
   *          numberOfLines = {4}
   *          onChangeText={(text) => this.setState({text})}
   *          value={this.state.text}
   *        />
   *      </View>
   *     );
   *   }
   * }
   *
   * // skip these lines if using Create React Native App
   * AppRegistry.registerComponent(
   *  'AwesomeProject',
   *  () => UselessTextInputMultiline
   * );
   * ```
   *
   * `TextInput` has by default a border at the bottom of its view. This border
   * has its padding set by the background image provided by the system, and it
   * cannot be changed. Solutions to avoid this is to either not set height
   * explicitly, case in which the system will take care of displaying the border
   * in the correct position, or to not display the border by setting
   * `underlineColorAndroid` to transparent.
   *
   * Note that on Android performing text selection in input can change
   * app's activity `windowSoftInputMode` param to `adjustResize`.
   * This may cause issues with components that have position: 'absolute'
   * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`
   * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )
   * or control this param programmatically with native code.
   *
   */
  function InternalTextInput(props) {
    var _propsSelection$end, _props$multiline;
    var ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaSelected = props['aria-selected'],
      accessibilityState = props.accessibilityState,
      id = props.id,
      tabIndex = props.tabIndex,
      propsSelection = props.selection,
      otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var inputRef = (0, _react.useRef)(null);

    // eslint-disable-next-line react-hooks/exhaustive-deps
    var selection = propsSelection == null ? null : {
      start: propsSelection.start,
      end: (_propsSelection$end = propsSelection.end) != null ? _propsSelection$end : propsSelection.start
    };
    var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      mostRecentEventCount = _useState2[0],
      setMostRecentEventCount = _useState2[1];
    var _useState3 = (0, _react.useState)(props.value),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      lastNativeText = _useState4[0],
      setLastNativeText = _useState4[1];
    var _useState5 = (0, _react.useState)({
        selection: selection,
        mostRecentEventCount: mostRecentEventCount
      }),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      lastNativeSelectionState = _useState6[0],
      setLastNativeSelection = _useState6[1];
    var lastNativeSelection = lastNativeSelectionState.selection;
    var viewCommands;
    if (AndroidTextInputCommands) {
      viewCommands = AndroidTextInputCommands;
    } else {
      viewCommands = props.multiline === true ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands;
    }
    var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : '';

    // This is necessary in case native updates the text and JS decides
    // that the update should be ignored and we should stick with the value
    // that we have in JS.
    (0, _react.useLayoutEffect)(function () {
      var nativeUpdate = {};
      if (lastNativeText !== props.value && typeof props.value === 'string') {
        nativeUpdate.text = props.value;
        setLastNativeText(props.value);
      }
      if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
        nativeUpdate.selection = selection;
        setLastNativeSelection({
          selection: selection,
          mostRecentEventCount: mostRecentEventCount
        });
      }
      if (Object.keys(nativeUpdate).length === 0) {
        return;
      }
      if (inputRef.current != null) {
        var _selection$start, _selection$end;
        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (_selection$start = selection == null ? undefined : selection.start) != null ? _selection$start : -1, (_selection$end = selection == null ? undefined : selection.end) != null ? _selection$end : -1);
      }
    }, [mostRecentEventCount, inputRef, props.value, props.defaultValue, lastNativeText, selection, lastNativeSelection, text, viewCommands]);
    (0, _react.useLayoutEffect)(function () {
      var inputRefValue = inputRef.current;
      if (inputRefValue != null) {
        _TextInputState.default.registerInput(inputRefValue);
        return function () {
          _TextInputState.default.unregisterInput(inputRefValue);
          if (_TextInputState.default.currentlyFocusedInput() === inputRefValue) {
            (0, _nullthrows.default)(inputRefValue).blur();
          }
        };
      }
    }, [inputRef]);
    var setLocalRef = (0, _react.useCallback)(function (instance) {
      inputRef.current = instance;

      /*
      Hi reader from the future. I'm sorry for this.
       This is a hack. Ideally we would forwardRef to the underlying
      host component. However, since TextInput has it's own methods that can be
      called as well, if we used the standard forwardRef then these
      methods wouldn't be accessible and thus be a breaking change.
       We have a couple of options of how to handle this:
      - Return a new ref with everything we methods from both. This is problematic
        because we need React to also know it is a host component which requires
        internals of the class implementation of the ref.
      - Break the API and have some other way to call one set of the methods or
        the other. This is our long term approach as we want to eventually
        get the methods on host components off the ref. So instead of calling
        ref.measure() you might call ReactNative.measure(ref). This would hopefully
        let the ref for TextInput then have the methods like `.clear`. Or we do it
        the other way and make it TextInput.clear(textInputRef) which would be fine
        too. Either way though is a breaking change that is longer term.
      - Mutate this ref. :( Gross, but accomplishes what we need in the meantime
        before we can get to the long term breaking change.
      */
      if (instance != null) {
        // $FlowFixMe[incompatible-use] - See the explanation above.
        Object.assign(instance, {
          clear: function clear() {
            if (inputRef.current != null) {
              viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
            }
          },
          // TODO: Fix this returning true on null === null, when no input is focused
          isFocused: function isFocused() {
            return _TextInputState.default.currentlyFocusedInput() === inputRef.current;
          },
          getNativeRef: function getNativeRef() {
            return inputRef.current;
          },
          setSelection: function setSelection(start, end) {
            if (inputRef.current != null) {
              viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, null, start, end);
            }
          }
        });
      }
    }, [mostRecentEventCount, viewCommands]);
    var ref = (0, _useMergeRefs.default)(setLocalRef, props.forwardedRef);
    var _onChange = function _onChange(event) {
      var currentText = event.nativeEvent.text;
      props.onChange && props.onChange(event);
      props.onChangeText && props.onChangeText(currentText);
      if (inputRef.current == null) {
        // calling `props.onChange` or `props.onChangeText`
        // may clean up the input itself. Exits here.
        return;
      }
      setLastNativeText(currentText);
      // This must happen last, after we call setLastNativeText.
      // Different ordering can cause bugs when editing AndroidTextInputs
      // with multiple Fragments.
      // We must update this so that controlled input updates work.
      setMostRecentEventCount(event.nativeEvent.eventCount);
    };
    var _onChangeSync = function _onChangeSync(event) {
      var currentText = event.nativeEvent.text;
      props.unstable_onChangeSync && props.unstable_onChangeSync(event);
      props.unstable_onChangeTextSync && props.unstable_onChangeTextSync(currentText);
      if (inputRef.current == null) {
        // calling `props.onChange` or `props.onChangeText`
        // may clean up the input itself. Exits here.
        return;
      }
      setLastNativeText(currentText);
      // This must happen last, after we call setLastNativeText.
      // Different ordering can cause bugs when editing AndroidTextInputs
      // with multiple Fragments.
      // We must update this so that controlled input updates work.
      setMostRecentEventCount(event.nativeEvent.eventCount);
    };
    var _onSelectionChange = function _onSelectionChange(event) {
      props.onSelectionChange && props.onSelectionChange(event);
      if (inputRef.current == null) {
        // calling `props.onSelectionChange`
        // may clean up the input itself. Exits here.
        return;
      }
      setLastNativeSelection({
        selection: event.nativeEvent.selection,
        mostRecentEventCount: mostRecentEventCount
      });
    };
    var _onFocus = function _onFocus(event) {
      _TextInputState.default.focusInput(inputRef.current);
      if (props.onFocus) {
        props.onFocus(event);
      }
    };
    var _onBlur = function _onBlur(event) {
      _TextInputState.default.blurInput(inputRef.current);
      if (props.onBlur) {
        props.onBlur(event);
      }
    };
    var _onScroll = function _onScroll(event) {
      props.onScroll && props.onScroll(event);
    };
    var textInput = null;
    var multiline = (_props$multiline = props.multiline) != null ? _props$multiline : false;
    var submitBehavior;
    if (props.submitBehavior != null) {
      // `submitBehavior` is set explicitly
      if (!multiline && props.submitBehavior === 'newline') {
        // For single line text inputs, `'newline'` is not a valid option
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = props.submitBehavior;
      }
    } else if (multiline) {
      if (props.blurOnSubmit === true) {
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = 'newline';
      }
    } else {
      // Single line
      if (props.blurOnSubmit !== false) {
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = 'submit';
      }
    }
    var accessible = props.accessible !== false;
    var focusable = props.focusable !== false;
    var config = React.useMemo(function () {
      return {
        hitSlop: props.hitSlop,
        onPress: function onPress(event) {
          if (props.editable !== false) {
            if (inputRef.current != null) {
              inputRef.current.focus();
            }
          }
        },
        onPressIn: props.onPressIn,
        onPressOut: props.onPressOut,
        cancelable: _Platform.default.OS === 'ios' ? !props.rejectResponderTermination : null
      };
    }, [props.editable, props.hitSlop, props.onPressIn, props.onPressOut, props.rejectResponderTermination]);

    // Hide caret during test runs due to a flashing caret
    // makes screenshot tests flakey
    var caretHidden = props.caretHidden;
    if (_Platform.default.isTesting) {
      caretHidden = true;
    }

    // TextInput handles onBlur and onFocus events
    // so omitting onBlur and onFocus pressability handlers here.
    var _ref = (0, _usePressability.default)(config) || {},
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      eventHandlers = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      _accessibilityState = {
        busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? undefined : accessibilityState.busy,
        checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? undefined : accessibilityState.checked,
        disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? undefined : accessibilityState.disabled,
        expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? undefined : accessibilityState.expanded,
        selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? undefined : accessibilityState.selected
      };
    }

    // $FlowFixMe[underconstrained-implicit-instantiation]
    var style = (0, _flattenStyle.default)(props.style);
    if (_Platform.default.OS === 'ios') {
      var RCTTextInputView = props.multiline === true ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
      style = props.multiline === true ? [styles.multilineInput, style] : style;
      var useOnChangeSync = (props.unstable_onChangeSync || props.unstable_onChangeTextSync) && !(props.onChange || props.onChangeText);
      textInput = /*#__PURE__*/(0, _jsxRuntime.jsx)(RCTTextInputView
      // $FlowFixMe[incompatible-type] - Figure out imperative + forward refs.
      , Object.assign({
        ref: ref
      }, otherProps, eventHandlers, {
        accessibilityState: _accessibilityState,
        accessible: accessible,
        submitBehavior: submitBehavior,
        caretHidden: caretHidden,
        dataDetectorTypes: props.dataDetectorTypes,
        focusable: tabIndex !== undefined ? !tabIndex : focusable,
        mostRecentEventCount: mostRecentEventCount,
        nativeID: id != null ? id : props.nativeID,
        onBlur: _onBlur,
        onKeyPressSync: props.unstable_onKeyPressSync,
        onChange: _onChange,
        onChangeSync: useOnChangeSync === true ? _onChangeSync : null,
        onContentSizeChange: props.onContentSizeChange,
        onFocus: _onFocus,
        onScroll: _onScroll,
        onSelectionChange: _onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
        selection: selection,
        style: style,
        text: text
      }));
    } else if (_Platform.default.OS === 'android') {
      var _props$ariaLabelledb, _props$placeholder, _props$rows;
      var autoCapitalize = props.autoCapitalize || 'sentences';
      var _accessibilityLabelledBy = (_props$ariaLabelledb = props == null ? undefined : props['aria-labelledby']) != null ? _props$ariaLabelledb : props == null ? undefined : props.accessibilityLabelledBy;
      var placeholder = (_props$placeholder = props.placeholder) != null ? _props$placeholder : '';
      var children = props.children;
      var childCount = React.Children.count(children);
      (0, _invariant.default)(!(props.value != null && childCount), 'Cannot specify both value and children.');
      if (childCount > 1) {
        children = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
          children: children
        });
      }
      textInput =
      /*#__PURE__*/
      /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match up
       * exactly with the props for TextInput. This will need to get fixed */
      /* $FlowFixMe[incompatible-type] the types for AndroidTextInput don't
       * match up exactly with the props for TextInput. This will need to get
       * fixed */
      /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput don't
       * match up exactly with the props for TextInput. This will need to get
       * fixed */
      (0, _jsxRuntime.jsx)(AndroidTextInput
      // $FlowFixMe[incompatible-type] - Figure out imperative + forward refs.
      , Object.assign({
        ref: ref
      }, otherProps, eventHandlers, {
        accessibilityState: _accessibilityState,
        accessibilityLabelledBy: _accessibilityLabelledBy,
        accessible: accessible,
        autoCapitalize: autoCapitalize,
        submitBehavior: submitBehavior,
        caretHidden: caretHidden,
        children: children,
        disableFullscreenUI: props.disableFullscreenUI,
        focusable: tabIndex !== undefined ? !tabIndex : focusable,
        mostRecentEventCount: mostRecentEventCount,
        nativeID: id != null ? id : props.nativeID,
        numberOfLines: (_props$rows = props.rows) != null ? _props$rows : props.numberOfLines,
        onBlur: _onBlur,
        onChange: _onChange,
        onFocus: _onFocus
        /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match
         * up exactly with the props for TextInput. This will need to get fixed
         */
        /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput
         * don't match up exactly with the props for TextInput. This will need
         * to get fixed */,
        onScroll: _onScroll,
        onSelectionChange: _onSelectionChange,
        placeholder: placeholder,
        style: style,
        text: text,
        textBreakStrategy: props.textBreakStrategy
      }));
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
      value: true,
      children: textInput
    });
  }
  var enterKeyHintToReturnTypeMap = {
    enter: 'default',
    done: 'done',
    go: 'go',
    next: 'next',
    previous: 'previous',
    search: 'search',
    send: 'send'
  };
  var inputModeToKeyboardTypeMap = {
    none: 'default',
    text: 'default',
    decimal: 'decimal-pad',
    numeric: 'number-pad',
    tel: 'phone-pad',
    search: _Platform.default.OS === 'ios' ? 'web-search' : 'default',
    email: 'email-address',
    url: 'url'
  };

  // Map HTML autocomplete values to Android autoComplete values
  var autoCompleteWebToAutoCompleteAndroidMap = {
    'address-line1': 'postal-address-region',
    'address-line2': 'postal-address-locality',
    bday: 'birthdate-full',
    'bday-day': 'birthdate-day',
    'bday-month': 'birthdate-month',
    'bday-year': 'birthdate-year',
    'cc-csc': 'cc-csc',
    'cc-exp': 'cc-exp',
    'cc-exp-month': 'cc-exp-month',
    'cc-exp-year': 'cc-exp-year',
    'cc-number': 'cc-number',
    country: 'postal-address-country',
    'current-password': 'password',
    email: 'email',
    'honorific-prefix': 'name-prefix',
    'honorific-suffix': 'name-suffix',
    name: 'name',
    'additional-name': 'name-middle',
    'family-name': 'name-family',
    'given-name': 'name-given',
    'new-password': 'password-new',
    off: 'off',
    'one-time-code': 'sms-otp',
    'postal-code': 'postal-code',
    sex: 'gender',
    'street-address': 'street-address',
    tel: 'tel',
    'tel-country-code': 'tel-country-code',
    'tel-national': 'tel-national',
    username: 'username'
  };

  // Map HTML autocomplete values to iOS textContentType values
  var autoCompleteWebToTextContentTypeMap = {
    'address-line1': 'streetAddressLine1',
    'address-line2': 'streetAddressLine2',
    bday: 'birthdate',
    'bday-day': 'birthdateDay',
    'bday-month': 'birthdateMonth',
    'bday-year': 'birthdateYear',
    'cc-csc': 'creditCardSecurityCode',
    'cc-exp-month': 'creditCardExpirationMonth',
    'cc-exp-year': 'creditCardExpirationYear',
    'cc-exp': 'creditCardExpiration',
    'cc-given-name': 'creditCardGivenName',
    'cc-additional-name': 'creditCardMiddleName',
    'cc-family-name': 'creditCardFamilyName',
    'cc-name': 'creditCardName',
    'cc-number': 'creditCardNumber',
    'cc-type': 'creditCardType',
    'current-password': 'password',
    country: 'countryName',
    email: 'emailAddress',
    name: 'name',
    'additional-name': 'middleName',
    'family-name': 'familyName',
    'given-name': 'givenName',
    nickname: 'nickname',
    'honorific-prefix': 'namePrefix',
    'honorific-suffix': 'nameSuffix',
    'new-password': 'newPassword',
    off: 'none',
    'one-time-code': 'oneTimeCode',
    organization: 'organizationName',
    'organization-title': 'jobTitle',
    'postal-code': 'postalCode',
    'street-address': 'fullStreetAddress',
    tel: 'telephoneNumber',
    url: 'URL',
    username: 'username'
  };
  var ExportedForwardRef = React.forwardRef(function TextInput(_ref2, forwardedRef) {
    var _autoCompleteWebToAut;
    var _ref2$allowFontScalin = _ref2.allowFontScaling,
      allowFontScaling = _ref2$allowFontScalin === undefined ? true : _ref2$allowFontScalin,
      _ref2$rejectResponder = _ref2.rejectResponderTermination,
      rejectResponderTermination = _ref2$rejectResponder === undefined ? true : _ref2$rejectResponder,
      _ref2$underlineColorA = _ref2.underlineColorAndroid,
      underlineColorAndroid = _ref2$underlineColorA === undefined ? 'transparent' : _ref2$underlineColorA,
      autoComplete = _ref2.autoComplete,
      textContentType = _ref2.textContentType,
      readOnly = _ref2.readOnly,
      editable = _ref2.editable,
      enterKeyHint = _ref2.enterKeyHint,
      returnKeyType = _ref2.returnKeyType,
      inputMode = _ref2.inputMode,
      showSoftInputOnFocus = _ref2.showSoftInputOnFocus,
      keyboardType = _ref2.keyboardType,
      restProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded3);
    // $FlowFixMe[underconstrained-implicit-instantiation]
    var style = (0, _flattenStyle.default)(restProps.style);
    if ((style == null ? undefined : style.verticalAlign) != null) {
      // $FlowFixMe[prop-missing]
      // $FlowFixMe[cannot-write]
      style.textAlignVertical =
      // $FlowFixMe[invalid-computed-prop]
      verticalAlignToTextAlignVerticalMap[style.verticalAlign];
      // $FlowFixMe[prop-missing]
      // $FlowFixMe[cannot-write]
      delete style.verticalAlign;
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(InternalTextInput, Object.assign({
      allowFontScaling: allowFontScaling,
      rejectResponderTermination: rejectResponderTermination,
      underlineColorAndroid: underlineColorAndroid,
      editable: readOnly !== undefined ? !readOnly : editable,
      returnKeyType: enterKeyHint ? enterKeyHintToReturnTypeMap[enterKeyHint] : returnKeyType,
      keyboardType: inputMode ? inputModeToKeyboardTypeMap[inputMode] : keyboardType,
      showSoftInputOnFocus: inputMode == null ? showSoftInputOnFocus : inputMode !== 'none',
      autoComplete: _Platform.default.OS === 'android' ? // $FlowFixMe[invalid-computed-prop]
      // $FlowFixMe[prop-missing]
      (_autoCompleteWebToAut = autoCompleteWebToAutoCompleteAndroidMap[autoComplete]) != null ? _autoCompleteWebToAut : autoComplete : undefined,
      textContentType: textContentType != null ? textContentType : _Platform.default.OS === 'ios' && autoComplete && autoComplete in autoCompleteWebToTextContentTypeMap ?
      // $FlowFixMe[invalid-computed-prop]
      // $FlowFixMe[prop-missing]
      autoCompleteWebToTextContentTypeMap[autoComplete] : textContentType
    }, restProps, {
      forwardedRef: forwardedRef,
      style: style
    }));
  });
  ExportedForwardRef.displayName = 'TextInput';

  /**
   * Switch to `deprecated-react-native-prop-types` for compatibility with future
   * releases. This is deprecated and will be removed in the future.
   */
  ExportedForwardRef.propTypes = _$$_REQUIRE(_dependencyMap[18]).TextInputPropTypes;

  // $FlowFixMe[prop-missing]
  ExportedForwardRef.State = {
    currentlyFocusedInput: _TextInputState.default.currentlyFocusedInput,
    currentlyFocusedField: _TextInputState.default.currentlyFocusedField,
    focusTextInput: _TextInputState.default.focusTextInput,
    blurTextInput: _TextInputState.default.blurTextInput
  };
  var styles = _StyleSheet.default.create({
    multilineInput: {
      // This default top inset makes RCTMultilineTextInputView seem as close as possible
      // to single-line RCTSinglelineTextInputView defaults, using the system defaults
      // of font size 17 and a height of 31 points.
      paddingTop: 5
    }
  });
  var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
  };

  // $FlowFixMe[unclear-type] Unclear type. Using `any` type is not safe.
  module.exports = ExportedForwardRef;
},391,[1,26,119,248,157,196,246,158,21,306,211,24,43,153,194,212,392,394,256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _RCTTextInputViewConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = Object.assign({
    uiViewClassName: 'RCTSinglelineTextInputView'
  }, _RCTTextInputViewConfig.default);
  var SinglelineTextInputNativeComponent = NativeComponentRegistry.get('RCTSinglelineTextInputView', function () {
    return __INTERNAL_VIEW_CONFIG;
  });

  // flowlint-next-line unclear-type:off
  var _default = exports.default = SinglelineTextInputNativeComponent;
},392,[1,160,193,393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var RCTTextInputViewConfig = {
    bubblingEventTypes: {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topContentSizeChange: {
        phasedRegistrationNames: {
          captured: 'onContentSizeChangeCapture',
          bubbled: 'onContentSizeChange'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      }
    },
    directEventTypes: {
      topTextInput: {
        registrationName: 'onTextInput'
      },
      topKeyPressSync: {
        registrationName: 'onKeyPressSync'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topSelectionChange: {
        registrationName: 'onSelectionChange'
      },
      topChangeSync: {
        registrationName: 'onChangeSync'
      }
    },
    validAttributes: Object.assign({
      fontSize: true,
      fontWeight: true,
      fontVariant: true,
      // flowlint-next-line untyped-import:off
      textShadowOffset: {
        diff: _$$_REQUIRE(_dependencyMap[0])
      },
      allowFontScaling: true,
      fontStyle: true,
      textTransform: true,
      textAlign: true,
      fontFamily: true,
      lineHeight: true,
      isHighlighted: true,
      writingDirection: true,
      textDecorationLine: true,
      textShadowRadius: true,
      letterSpacing: true,
      textDecorationStyle: true,
      textDecorationColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      color: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      maxFontSizeMultiplier: true,
      textShadowColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      editable: true,
      inputAccessoryViewID: true,
      caretHidden: true,
      enablesReturnKeyAutomatically: true,
      placeholderTextColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      clearButtonMode: true,
      keyboardType: true,
      selection: true,
      returnKeyType: true,
      submitBehavior: true,
      mostRecentEventCount: true,
      scrollEnabled: true,
      selectionColor: {
        process: _$$_REQUIRE(_dependencyMap[1]).default
      },
      contextMenuHidden: true,
      secureTextEntry: true,
      placeholder: true,
      autoCorrect: true,
      multiline: true,
      textContentType: true,
      maxLength: true,
      autoCapitalize: true,
      keyboardAppearance: true,
      passwordRules: true,
      spellCheck: true,
      selectTextOnFocus: true,
      text: true,
      clearTextOnFocus: true,
      showSoftInputOnFocus: true,
      autoFocus: true,
      lineBreakStrategyIOS: true,
      smartInsertDelete: true
    }, (0, _$$_REQUIRE(_dependencyMap[2]).ConditionallyIgnoredEventHandlers)({
      onChange: true,
      onSelectionChange: true,
      onContentSizeChange: true,
      onScroll: true,
      onChangeSync: true,
      onKeyPressSync: true,
      onTextInput: true
    }))
  };
  module.exports = RCTTextInputViewConfig;
},393,[172,164,190]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _RCTTextInputViewConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = Object.assign({
    uiViewClassName: 'RCTMultilineTextInputView'
  }, _RCTTextInputViewConfig.default, {
    validAttributes: Object.assign({}, _RCTTextInputViewConfig.default.validAttributes, {
      dataDetectorTypes: true
    })
  });
  var MultilineTextInputNativeComponent = NativeComponentRegistry.get('RCTMultilineTextInputView', function () {
    return __INTERNAL_VIEW_CONFIG;
  });

  // flowlint-next-line unclear-type:off
  var _default = exports.default = MultilineTextInputNativeComponent;
},394,[1,160,193,393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _SoundManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _BoundingDimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _Position = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var extractSingleTouch = function extractSingleTouch(nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;
    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  };

  /**
   * `Touchable`: Taps done right.
   *
   * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`
   * will measure time/geometry and tells you when to give feedback to the user.
   *
   * ====================== Touchable Tutorial ===============================
   * The `Touchable` mixin helps you handle the "press" interaction. It analyzes
   * the geometry of elements, and observes when another responder (scroll view
   * etc) has stolen the touch lock. It notifies your component when it should
   * give feedback to the user. (bouncing/highlighting/unhighlighting).
   *
   * - When a touch was activated (typically you highlight)
   * - When a touch was deactivated (typically you unhighlight)
   * - When a touch was "pressed" - a touch ended while still within the geometry
   *   of the element, and no other element (like scroller) has "stolen" touch
   *   lock ("responder") (Typically you bounce the element).
   *
   * A good tap interaction isn't as simple as you might think. There should be a
   * slight delay before showing a highlight when starting a touch. If a
   * subsequent touch move exceeds the boundary of the element, it should
   * unhighlight, but if that same touch is brought back within the boundary, it
   * should rehighlight again. A touch can move in and out of that boundary
   * several times, each time toggling highlighting, but a "press" is only
   * triggered if that touch ends while within the element's boundary and no
   * scroller (or anything else) has stolen the lock on touches.
   *
   * To create a new type of component that handles interaction using the
   * `Touchable` mixin, do the following:
   *
   * - Initialize the `Touchable` state.
   *
   *   getInitialState: function() {
   *     return merge(this.touchableGetInitialState(), yourComponentState);
   *   }
   *
   * - Choose the rendered component who's touches should start the interactive
   *   sequence. On that rendered node, forward all `Touchable` responder
   *   handlers. You can choose any rendered node you like. Choose a node whose
   *   hit target you'd like to instigate the interaction sequence:
   *
   *   // In render function:
   *   return (
   *     <View
   *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}
   *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}
   *       onResponderGrant={this.touchableHandleResponderGrant}
   *       onResponderMove={this.touchableHandleResponderMove}
   *       onResponderRelease={this.touchableHandleResponderRelease}
   *       onResponderTerminate={this.touchableHandleResponderTerminate}>
   *       <View>
   *         Even though the hit detection/interactions are triggered by the
   *         wrapping (typically larger) node, we usually end up implementing
   *         custom logic that highlights this inner one.
   *       </View>
   *     </View>
   *   );
   *
   * - You may set up your own handlers for each of these events, so long as you
   *   also invoke the `touchable*` handlers inside of your custom handler.
   *
   * - Implement the handlers on your component class in order to provide
   *   feedback to the user. See documentation for each of these class methods
   *   that you should implement.
   *
   *   touchableHandlePress: function() {
   *      this.performBounceAnimation();  // or whatever you want to do.
   *   },
   *   touchableHandleActivePressIn: function() {
   *     this.beginHighlighting(...);  // Whatever you like to convey activation
   *   },
   *   touchableHandleActivePressOut: function() {
   *     this.endHighlighting(...);  // Whatever you like to convey deactivation
   *   },
   *
   * - There are more advanced methods you can implement (see documentation below):
   *   touchableGetHighlightDelayMS: function() {
   *     return 20;
   *   }
   *   // In practice, *always* use a predeclared constant (conserve memory).
   *   touchableGetPressRectOffset: function() {
   *     return {top: 20, left: 20, right: 20, bottom: 100};
   *   }
   */

  /**
   * Touchable states.
   */

  var States = {
    NOT_RESPONDER: 'NOT_RESPONDER',
    // Not the responder
    RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',
    // Responder, inactive, in the `PressRect`
    RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',
    // Responder, inactive, out of `PressRect`
    RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',
    // Responder, active, in the `PressRect`
    RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',
    // Responder, active, out of `PressRect`
    RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
    // Responder, active, in the `PressRect`, after long press threshold
    RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
    // Responder, active, out of `PressRect`, after long press threshold
    ERROR: 'ERROR'
  };
  /*
   * Quick lookup map for states that are considered to be "active"
   */

  var baseStatesConditions = {
    NOT_RESPONDER: false,
    RESPONDER_INACTIVE_PRESS_IN: false,
    RESPONDER_INACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_PRESS_IN: false,
    RESPONDER_ACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_LONG_PRESS_IN: false,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
    ERROR: false
  };
  var IsActive = Object.assign({}, baseStatesConditions, {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  });

  /**
   * Quick lookup for states that are considered to be "pressing" and are
   * therefore eligible to result in a "selection" if the press stops.
   */
  var IsPressingIn = Object.assign({}, baseStatesConditions, {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  });
  var IsLongPressingIn = Object.assign({}, baseStatesConditions, {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  });

  /**
   * Inputs to the state machine.
   */
  var Signals = {
    DELAY: 'DELAY',
    RESPONDER_GRANT: 'RESPONDER_GRANT',
    RESPONDER_RELEASE: 'RESPONDER_RELEASE',
    RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
    ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
    LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
    LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'
  };
  /**
   * Mapping from States x Signals => States
   */
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };

  // ==== Typical Constants for integrating into UI components ====
  // var HIT_EXPAND_PX = 20;
  // var HIT_VERT_OFFSET_PX = 10;
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = 370;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;

  // Default amount "active" region protrudes beyond box

  /**
   * By convention, methods prefixed with underscores are meant to be @private,
   * and not @protected. Mixers shouldn't access them - not even to provide them
   * as callback handlers.
   *
   *
   * ========== Geometry =========
   * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`
   * is an abstract box that is extended beyond the `HitRect`.
   *
   *  +--------------------------+
   *  |                          | - "Start" events in `HitRect` cause `HitRect`
   *  |  +--------------------+  |   to become the responder.
   *  |  |  +--------------+  |  | - `HitRect` is typically expanded around
   *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.
   *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,
   *  |  |  |              |  |  |   and before letting up, the Visual React
   *  |  |  +--------------+  |  |   will become "active". This makes it eligible
   *  |  |     HitRect        |  |   for being highlighted (so long as the
   *  |  +--------------------+  |   press remains in the `PressRect`).
   *  |        PressRect     o   |
   *  +----------------------|---+
   *           Out Region    |
   *                         +-----+ This gap between the `HitRect` and
   *                                 `PressRect` allows a touch to move far away
   *                                 from the original hit rect, and remain
   *                                 highlighted, and eligible for a "Press".
   *                                 Customize this via
   *                                 `touchableGetPressRectOffset()`.
   *
   *
   *
   * ======= State Machine =======
   *
   * +-------------+ <---+ RESPONDER_RELEASE
   * |NOT_RESPONDER|
   * +-------------+ <---+ RESPONDER_TERMINATED
   *     +
   *     | RESPONDER_GRANT (HitRect)
   *     v
   * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+
   * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|
   * +---------------------------+          +-------------------------+                +------------------------------+
   *     +            ^                         +           ^                                 +           ^
   *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_
   *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT
   *     |            |                         |           |                                 |           |
   *     v            +                         v           +                                 v           +
   * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+
   * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|
   * +----------------------------+         +--------------------------+               +-------------------------------+
   *
   * T + DELAY => LONG_PRESS_DELAY_MS + DELAY
   *
   * Not drawn are the side effects of each transition. The most important side
   * effect is the `touchableHandlePress` abstract method invocation that occurs
   * when a responder is released while in either of the "Press" states.
   *
   * The other important side effects are the highlight abstract method
   * invocations (internal callbacks) to be implemented by the mixer.
   *
   *
   * @lends Touchable.prototype
   */
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!_Platform.default.isTV) {
        return;
      }
    },
    /**
     * Clear all timeouts on unmount
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    componentWillUnmount: function componentWillUnmount() {
      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    /**
     * It's prefer that mixins determine state in this way, having the class
     * explicitly mix the state in the one and only `getInitialState` method.
     *
     * @return {object} State object to be placed inside of
     * `this.state.touchable`.
     */
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    // ==== Hooks to Gesture Responder system ====
    /**
     * Must return true if embedded in a native platform scroll view.
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    /**
     * Must return true to start the process of `Touchable`.
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    /**
     * Return true to cancel press on long press.
     */
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    /**
     * Place as callback for a DOM element's `onResponderGrant` event.
     * @param {SyntheticEvent} e Synthetic event from event system.
     *
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      // Since e is used in a callback invoked on another event loop
      // (as in setTimeout etc), we need to call e.persist() on the
      // event to make sure it doesn't get reused in the event object pool.
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;
      this._receiveSignal(Signals.RESPONDER_GRANT, e);
      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }
      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    /**
     * Place as callback for a DOM element's `onResponderRelease` event.
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this.pressInLocation = null;
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    /**
     * Place as callback for a DOM element's `onResponderTerminate` event.
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this.pressInLocation = null;
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    /**
     * Place as callback for a DOM element's `onResponderMove` event.
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      // Measurement may not have returned yet.
      if (!this.state.touchable.positionOnActivate) {
        return;
      }
      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;
      if (hitSlop) {
        pressExpandLeft += hitSlop.left || 0;
        pressExpandTop += hitSlop.top || 0;
        pressExpandRight += hitSlop.right || 0;
        pressExpandBottom += hitSlop.bottom || 0;
      }
      var touch = extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }
      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
      if (isTouchWithinActive) {
        var prevState = this.state.touchable.touchState;
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
        var curState = this.state.touchable.touchState;
        if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
          // fix for t7967420
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();
        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    /**
     * Invoked when the item receives focus. Mixers might override this to
     * visually distinguish the `VisualRect` so that the user knows that it
     * currently has the focus. Most platforms only support a single element being
     * focused at a time, in which case there may have been a previously focused
     * element that was blurred just prior to this. This can be overridden when
     * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    touchableHandleFocus: function touchableHandleFocus(e) {
      this.props.onFocus && this.props.onFocus(e);
    },
    /**
     * Invoked when the item loses focus. Mixers might override this to
     * visually distinguish the `VisualRect` so that the user knows that it
     * no longer has focus. Most platforms only support a single element being
     * focused at a time, in which case the focus may have moved to another.
     * This can be overridden when using
     * `Touchable.Mixin.withoutDefaultFocusAndBlur`.
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    touchableHandleBlur: function touchableHandleBlur(e) {
      this.props.onBlur && this.props.onBlur(e);
    },
    // ==== Abstract Application Callbacks ====

    /**
     * Invoked when the item should be highlighted. Mixers should implement this
     * to visually distinguish the `VisualRect` so that the user knows that
     * releasing a touch will result in a "selection" (analog to click).
     *
     * @abstract
     * touchableHandleActivePressIn: function,
     */

    /**
     * Invoked when the item is "active" (in that it is still eligible to become
     * a "select") but the touch has left the `PressRect`. Usually the mixer will
     * want to unhighlight the `VisualRect`. If the user (while pressing) moves
     * back into the `PressRect` `touchableHandleActivePressIn` will be invoked
     * again and the mixer should probably highlight the `VisualRect` again. This
     * event will not fire on an `touchEnd/mouseUp` event, only move events while
     * the user is depressing the mouse/touch.
     *
     * @abstract
     * touchableHandleActivePressOut: function
     */

    /**
     * Invoked when the item is "selected" - meaning the interaction ended by
     * letting up while the item was either in the state
     * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.
     *
     * @abstract
     * touchableHandlePress: function
     */

    /**
     * Invoked when the item is long pressed - meaning the interaction ended by
     * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If
     * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will
     * be called as it normally is. If `touchableHandleLongPress` is provided, by
     * default any `touchableHandlePress` callback will not be invoked. To
     * override this default behavior, override `touchableLongPressCancelsPress`
     * to return false. As a result, `touchableHandlePress` will be called when
     * lifting up, even if `touchableHandleLongPress` has also been called.
     *
     * @abstract
     * touchableHandleLongPress: function
     */

    /**
     * Returns the number of millis to wait before triggering a highlight.
     *
     * @abstract
     * touchableGetHighlightDelayMS: function
     */

    /**
     * Returns the amount to extend the `HitRect` into the `PressRect`. Positive
     * numbers mean the size expands outwards.
     *
     * @abstract
     * touchableGetPressRectOffset: function
     */

    // ==== Internal Logic ====

    /**
     * Measures the `HitRect` node on activation. The Bounding rectangle is with
     * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`
     * should result in points that are in the same coordinate system as an
     * event's `globalX/globalY` data values.
     *
     * - Consider caching this for the lifetime of the component, or possibly
     *   being able to share this cache between any `ScrollMap` view.
     *
     * @sideeffects
     * @private
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var responderID = this.state.touchable.responderID;
      if (responderID == null) {
        return;
      }
      if (typeof responderID === 'number') {
        _UIManager.default.measure(responderID, this._handleQueryLayout);
      } else {
        responderID.measure(this._handleQueryLayout);
      }
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      //don't do anything UIManager failed to measure node
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }
      this.state.touchable.positionOnActivate && _Position.default.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && _BoundingDimensions.default.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = _Position.default.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = _BoundingDimensions.default.getPooled(w, h);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;
      this._receiveSignal(Signals.DELAY, e);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;
      if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    /**
     * Receives a state machine signal, performs side effects of the transition
     * and stores the new state. Validates the transition as well.
     *
     * @param {Signals} signal State machine signal.
     * @throws Error if invalid state transition or unrecognized signal.
     * @sideeffects
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];
      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }
      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : "host component`");
      }
      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : "<<host component>>`");
      }
      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);
        this.state.touchable.touchState = nextState;
      }
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    /**
     * Will perform a transition between touchable states, and identify any
     * highlighting or unhighlighting that must be performed for this particular
     * transition.
     *
     * @param {States} curState Current Touchable state.
     * @param {States} nextState Next Touchable state.
     * @param {Signal} signal Signal that triggered the transition.
     * @param {Event} e Native event.
     * @sideeffects
     */
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);
      var newIsHighlight = this._isHighlight(nextState);
      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;
      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }
      var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
      var isActiveTransition = !IsActive[curState] && IsActive[nextState];
      if (isInitialTransition || isActiveTransition) {
        this._remeasureMetricsOnActivation();
      }
      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }
      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }
      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (
        // We *are* long pressing.. // But either has no long handler
        !hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.

        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            // we never highlighted because of delay, but we should highlight now
            this._startHighlight(e);
            this._endHighlight(e);
          }
          if (_Platform.default.OS === 'android' && !this.props.touchSoundDisabled) {
            _SoundManager.default.playTouchSound();
          }
          this.touchableHandlePress(e);
        }
      }
      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);
      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */
    _endHighlight: function _endHighlight(e) {
      var _this = this;
      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    },
    withoutDefaultFocusAndBlur: {}
  };

  /**
   * Provide an optional version of the mixin where `touchableHandleFocus` and
   * `touchableHandleBlur` can be overridden. This allows appropriate defaults to
   * be set on TV platforms, without breaking existing implementations of
   * `Touchable`.
   */
  var touchableHandleFocus = TouchableMixin.touchableHandleFocus,
    touchableHandleBlur = TouchableMixin.touchableHandleBlur,
    TouchableMixinWithoutDefaultFocusAndBlur = (0, _objectWithoutProperties2.default)(TouchableMixin, ["touchableHandleFocus", "touchableHandleBlur"]);
  TouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
  var Touchable = {
    Mixin: TouchableMixin,
    /**
     * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).
     */
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
        hitSlop = _ref.hitSlop;
      return null;
    }
  };
  module.exports = Touchable;
},395,[1,119,42,21,250,396,398,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _PooledClass = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;

  /**
   * PooledClass representing the bounding rectangle of a region.
   *
   * @param {number} width Width of bounding rectangle.
   * @param {number} height Height of bounding rectangle.
   * @constructor BoundingDimensions
   */
  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }
  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  /**
   * @param {HTMLElement} element Element to return `BoundingDimensions` for.
   * @return {BoundingDimensions} Bounding dimensions of `element`.
   */
  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };
  _PooledClass.default.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},396,[1,397]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Static poolers. Several custom versions for each potential number of
   * arguments. A completely generic pooler is easy to implement, but would
   * require accessing the `arguments` object. In each of these, `this` refers to
   * the Class itself, not an instance. If any others are needed, simply add them
   * here, or in their own files.
   */
  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */
  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
      var _instance = Klass.instancePool.pop();
      Klass.call(_instance, copyFieldsFrom);
      return _instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */
  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
      var _instance2 = Klass.instancePool.pop();
      Klass.call(_instance2, a1, a2);
      return _instance2;
    } else {
      return new Klass(a1, a2);
    }
  };

  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */
  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
      var _instance3 = Klass.instancePool.pop();
      Klass.call(_instance3, a1, a2, a3);
      return _instance3;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */
  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this; // eslint-disable-line consistent-this
    if (Klass.instancePool.length) {
      var _instance4 = Klass.instancePool.pop();
      Klass.call(_instance4, a1, a2, a3, a4);
      return _instance4;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
   * LTI update could not be added via codemod */
  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */
  var standardReleaser = function standardReleaser(instance) {
    var Klass = this; // eslint-disable-line consistent-this
    (0, _invariant.default)(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };
  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;
  /**
   * Augments `CopyConstructor` to be a poolable class, augmenting only the class
   * itself (statically) not adding any prototypical fields. Any CopyConstructor
   * you give this may have a `poolSize` property, and will look for a
   * prototypical `destructor` on instances.
   *
   * @param {Function} CopyConstructor Constructor that can be used to reset.
   * @param {Function} pooler Customizable pooler.
   */
  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    // Casting as any so that flow ignores the actual implementation and trusts
    // it to match the type we declared
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
  };
  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},397,[1,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _PooledClass = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;

  /**
   * Position does not expose methods for construction via an `HTMLDOMElement`,
   * because it isn't meaningful to construct such a thing without first defining
   * a frame of reference.
   *
   * @param {number} windowStartKey Key that window starts at.
   * @param {number} windowEndKey Key that window ends at.
   */
  function Position(left, top) {
    this.left = left;
    this.top = top;
  }
  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };
  _PooledClass.default.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},398,[1,397]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[12]);
  var _excluded = ["onBlur", "onFocus"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  /**
   * A wrapper for making views respond properly to touches.
   * On press down, the opacity of the wrapped view is decreased, which allows
   * the underlay color to show through, darkening or tinting the view.
   *
   * The underlay comes from wrapping the child in a new View, which can affect
   * layout, and sometimes cause unwanted visual artifacts if not used correctly,
   * for example if the backgroundColor of the wrapped view isn't explicitly set
   * to an opaque color.
   *
   * TouchableHighlight must have one child (not zero or more than one).
   * If you wish to have several child components, wrap them in a View.
   *
   * Example:
   *
   * ```
   * renderButton: function() {
   *   return (
   *     <TouchableHighlight onPress={this._onPressButton}>
   *       <Image
   *         style={styles.button}
   *         source={require('./myButton.png')}
   *       />
   *     </TouchableHighlight>
   *   );
   * },
   * ```
   *
   *
   * ### Example
   *
   * ```ReactNativeWebPlayer
   * import React, { Component } from 'react'
   * import {
   *   AppRegistry,
   *   StyleSheet,
   *   TouchableHighlight,
   *   Text,
   *   View,
   * } from 'react-native'
   *
   * class App extends Component {
   *   constructor(props) {
   *     super(props)
   *     this.state = { count: 0 }
   *   }
   *
   *   onPress = () => {
   *     this.setState({
   *       count: this.state.count+1
   *     })
   *   }
   *
   *  render() {
   *     return (
   *       <View style={styles.container}>
   *         <TouchableHighlight
   *          style={styles.button}
   *          onPress={this.onPress}
   *         >
   *          <Text> Touch Here </Text>
   *         </TouchableHighlight>
   *         <View style={[styles.countContainer]}>
   *           <Text style={[styles.countText]}>
   *             { this.state.count !== 0 ? this.state.count: null}
   *           </Text>
   *         </View>
   *       </View>
   *     )
   *   }
   * }
   *
   * const styles = StyleSheet.create({
   *   container: {
   *     flex: 1,
   *     justifyContent: 'center',
   *     paddingHorizontal: 10
   *   },
   *   button: {
   *     alignItems: 'center',
   *     backgroundColor: '#DDDDDD',
   *     padding: 10
   *   },
   *   countContainer: {
   *     alignItems: 'center',
   *     padding: 10
   *   },
   *   countText: {
   *     color: '#FF00FF'
   *   }
   * })
   *
   * AppRegistry.registerComponent('App', () => App)
   * ```
   *
   */
  var TouchableHighlight = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(TouchableHighlight, _React$Component);
    var _super = _createSuper(TouchableHighlight);
    function TouchableHighlight() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableHighlight);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this._isMounted = false;
      _this.state = {
        pressability: new _Pressability.default(_this._createPressabilityConfig()),
        extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null
      };
      return _this;
    }
    (0, _createClass2.default)(TouchableHighlight, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        var _this$props$accessibi,
          _this2 = this;
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled != null ? this.props.disabled : (_this$props$accessibi = this.props.accessibilityState) == null ? undefined : _this$props$accessibi.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          android_disableSound: this.props.touchSoundDisabled,
          onBlur: function onBlur(event) {
            if (_Platform.default.isTV) {
              _this2._hideUnderlay();
            }
            if (_this2.props.onBlur != null) {
              _this2.props.onBlur(event);
            }
          },
          onFocus: function onFocus(event) {
            if (_Platform.default.isTV) {
              _this2._showUnderlay();
            }
            if (_this2.props.onFocus != null) {
              _this2.props.onFocus(event);
            }
          },
          onLongPress: this.props.onLongPress,
          onPress: function onPress(event) {
            if (_this2._hideTimeout != null) {
              clearTimeout(_this2._hideTimeout);
            }
            if (!_Platform.default.isTV) {
              var _this2$props$delayPre;
              _this2._showUnderlay();
              _this2._hideTimeout = setTimeout(function () {
                _this2._hideUnderlay();
              }, (_this2$props$delayPre = _this2.props.delayPressOut) != null ? _this2$props$delayPre : 0);
            }
            if (_this2.props.onPress != null) {
              _this2.props.onPress(event);
            }
          },
          onPressIn: function onPressIn(event) {
            if (_this2._hideTimeout != null) {
              clearTimeout(_this2._hideTimeout);
              _this2._hideTimeout = null;
            }
            _this2._showUnderlay();
            if (_this2.props.onPressIn != null) {
              _this2.props.onPressIn(event);
            }
          },
          onPressOut: function onPressOut(event) {
            if (_this2._hideTimeout == null) {
              _this2._hideUnderlay();
            }
            if (_this2.props.onPressOut != null) {
              _this2.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_createExtraStyles",
      value: function _createExtraStyles() {
        var _this$props$activeOpa;
        return {
          child: {
            opacity: (_this$props$activeOpa = this.props.activeOpacity) != null ? _this$props$activeOpa : 0.85
          },
          underlay: {
            backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor
          }
        };
      }
    }, {
      key: "_showUnderlay",
      value: function _showUnderlay() {
        if (!this._isMounted || !this._hasPressHandler()) {
          return;
        }
        this.setState({
          extraStyles: this._createExtraStyles()
        });
        if (this.props.onShowUnderlay != null) {
          this.props.onShowUnderlay();
        }
      }
    }, {
      key: "_hideUnderlay",
      value: function _hideUnderlay() {
        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
          this._hideTimeout = null;
        }
        if (this.props.testOnly_pressed === true) {
          return;
        }
        if (this._hasPressHandler()) {
          this.setState({
            extraStyles: null
          });
          if (this.props.onHideUnderlay != null) {
            this.props.onHideUnderlay();
          }
        }
      }
    }, {
      key: "_hasPressHandler",
      value: function _hasPressHandler() {
        return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props$ariaValu, _this$props$accessibi2, _this$props$ariaValu2, _this$props$accessibi3, _this$props$ariaValu3, _this$props$accessibi4, _this$props$ariaValu4, _this$props$accessibi5, _this$props$ariaLive, _this$props$ariaLabe, _this$props$ariaModa, _this$props$ariaHidd, _this$state$extraStyl, _this$props$id, _this$state$extraStyl2;
        var child = React.Children.only(this.props.children);

        // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
        // adopting `Pressability`, so preserve that behavior.
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var accessibilityState = this.props.disabled != null ? Object.assign({}, this.props.accessibilityState, {
          disabled: this.props.disabled
        }) : this.props.accessibilityState;
        var accessibilityValue = {
          max: (_this$props$ariaValu = this.props['aria-valuemax']) != null ? _this$props$ariaValu : (_this$props$accessibi2 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi2.max,
          min: (_this$props$ariaValu2 = this.props['aria-valuemin']) != null ? _this$props$ariaValu2 : (_this$props$accessibi3 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi3.min,
          now: (_this$props$ariaValu3 = this.props['aria-valuenow']) != null ? _this$props$ariaValu3 : (_this$props$accessibi4 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi4.now,
          text: (_this$props$ariaValu4 = this.props['aria-valuetext']) != null ? _this$props$ariaValu4 : (_this$props$accessibi5 = this.props.accessibilityValue) == null ? undefined : _this$props$accessibi5.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : (_this$props$ariaLive = this.props['aria-live']) != null ? _this$props$ariaLive : this.props.accessibilityLiveRegion;
        var accessibilityLabel = (_this$props$ariaLabe = this.props['aria-label']) != null ? _this$props$ariaLabe : this.props.accessibilityLabel;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, Object.assign({
          accessible: this.props.accessible !== false,
          accessibilityLabel: accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: accessibilityState,
          accessibilityValue: accessibilityValue,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: (_this$props$ariaModa = this.props['aria-modal']) != null ? _this$props$ariaModa : this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: (_this$props$ariaHidd = this.props['aria-hidden']) != null ? _this$props$ariaHidd : this.props.accessibilityElementsHidden,
          style: _StyleSheet.default.compose(this.props.style, (_this$state$extraStyl = this.state.extraStyles) == null ? undefined : _this$state$extraStyl.underlay),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined,
          nativeID: (_this$props$id = this.props.id) != null ? _this$props$id : this.props.nativeID,
          testID: this.props.testID,
          ref: this.props.hostRef
        }, eventHandlersWithoutBlurAndFocus, {
          children: [React.cloneElement(child, {
            style: _StyleSheet.default.compose(child.props.style, (_this$state$extraStyl2 = this.state.extraStyles) == null ? undefined : _this$state$extraStyl2.child)
          }), null]
        }));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
        }
        this.state.pressability.reset();
      }
    }]);
    return TouchableHighlight;
  }(React.Component);
  var Touchable = React.forwardRef(function (props, hostRef) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableHighlight, Object.assign({}, props, {
      hostRef: hostRef
    }));
  });
  Touchable.displayName = 'TouchableHighlight';
  module.exports = Touchable;
},399,[1,119,5,6,13,15,12,156,249,196,21,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);
  var _excluded = ["onBlur", "onFocus"],
    _excluded2 = ["aria-disabled"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
  var PASSTHROUGH_PROPS = ['accessibilityActions', 'accessibilityElementsHidden', 'accessibilityHint', 'accessibilityLanguage', 'accessibilityIgnoresInvertColors', 'accessibilityLabel', 'accessibilityLiveRegion', 'accessibilityRole', 'accessibilityValue', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'accessibilityViewIsModal', 'aria-modal', 'hitSlop', 'importantForAccessibility', 'nativeID', 'onAccessibilityAction', 'onBlur', 'onFocus', 'onLayout', 'testID'];
  var TouchableWithoutFeedback = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2.default)(TouchableWithoutFeedback, _React$Component);
    var _super = _createSuper(TouchableWithoutFeedback);
    function TouchableWithoutFeedback() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableWithoutFeedback);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        pressability: new _Pressability.default(createPressabilityConfig(_this.props))
      };
      return _this;
    }
    (0, _createClass2.default)(TouchableWithoutFeedback, [{
      key: "render",
      value: function render() {
        var _this$props$ariaBusy, _this$props$accessibi, _this$props$ariaChec, _this$props$accessibi2, _this$props$ariaDisa, _this$props$accessibi3, _this$props$ariaExpa, _this$props$accessibi4, _this$props$ariaSele, _this$props$accessibi5, _this$props$ariaHidd, _this$props$id;
        var element = React.Children.only(this.props.children);
        var children = [element.props.children];
        var ariaLive = this.props['aria-live'];
        var _accessibilityState = {
          busy: (_this$props$ariaBusy = this.props['aria-busy']) != null ? _this$props$ariaBusy : (_this$props$accessibi = this.props.accessibilityState) == null ? undefined : _this$props$accessibi.busy,
          checked: (_this$props$ariaChec = this.props['aria-checked']) != null ? _this$props$ariaChec : (_this$props$accessibi2 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi2.checked,
          disabled: (_this$props$ariaDisa = this.props['aria-disabled']) != null ? _this$props$ariaDisa : (_this$props$accessibi3 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi3.disabled,
          expanded: (_this$props$ariaExpa = this.props['aria-expanded']) != null ? _this$props$ariaExpa : (_this$props$accessibi4 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi4.expanded,
          selected: (_this$props$ariaSele = this.props['aria-selected']) != null ? _this$props$ariaSele : (_this$props$accessibi5 = this.props.accessibilityState) == null ? undefined : _this$props$accessibi5.selected
        };

        // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before
        // adopting `Pressability`, so preserve that behavior.
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var elementProps = Object.assign({}, eventHandlersWithoutBlurAndFocus, {
          accessible: this.props.accessible !== false,
          accessibilityState: this.props.disabled != null ? Object.assign({}, _accessibilityState, {
            disabled: this.props.disabled
          }) : _accessibilityState,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined,
          accessibilityElementsHidden: (_this$props$ariaHidd = this.props['aria-hidden']) != null ? _this$props$ariaHidd : this.props.accessibilityElementsHidden,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : this.props.accessibilityLiveRegion,
          nativeID: (_this$props$id = this.props.id) != null ? _this$props$id : this.props.nativeID
        });
        for (var prop of PASSTHROUGH_PROPS) {
          if (this.props[prop] !== undefined) {
            elementProps[prop] = this.props[prop];
          }
        }

        // $FlowFixMe[incompatible-call]
        return React.cloneElement.apply(React, [element, elementProps].concat(children));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.state.pressability.configure(createPressabilityConfig(this.props));
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.pressability.reset();
      }
    }]);
    return TouchableWithoutFeedback;
  }(React.Component);
  function createPressabilityConfig(_ref) {
    var _props$accessibilityS;
    var ariaDisabled = _ref['aria-disabled'],
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
    var accessibilityStateDisabled = ariaDisabled != null ? ariaDisabled : (_props$accessibilityS = props.accessibilityState) == null ? undefined : _props$accessibilityS.disabled;
    return {
      cancelable: !props.rejectResponderTermination,
      disabled: props.disabled !== null ? props.disabled : accessibilityStateDisabled,
      hitSlop: props.hitSlop,
      delayLongPress: props.delayLongPress,
      delayPressIn: props.delayPressIn,
      delayPressOut: props.delayPressOut,
      minPressDuration: 0,
      pressRectOffset: props.pressRetentionOffset,
      android_disableSound: props.touchSoundDisabled,
      onBlur: props.onBlur,
      onFocus: props.onFocus,
      onLongPress: props.onLongPress,
      onPress: props.onPress,
      onPressIn: props.onPressIn,
      onPressOut: props.onPressOut
    };
  }
  TouchableWithoutFeedback.displayName = 'TouchableWithoutFeedback';
  module.exports = TouchableWithoutFeedback;
},400,[1,119,5,6,13,15,12,156,249,153,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]).VirtualizedList;
},401,[321]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]).VirtualizedSectionList;
},402,[321]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _NativeActionSheetManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _excluded = ["tintColor", "cancelButtonTintColor", "destructiveButtonIndex"];
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  /**
   * Display action sheets and share sheets on iOS.
   *
   * See https://reactnative.dev/docs/actionsheetios
   */
  var ActionSheetIOS = {
    /**
     * Display an iOS action sheet.
     *
     * The `options` object must contain one or more of:
     *
     * - `options` (array of strings) - a list of button titles (required)
     * - `cancelButtonIndex` (int) - index of cancel button in `options`
     * - `destructiveButtonIndex` (int or array of ints) - index or indices of destructive buttons in `options`
     * - `title` (string) - a title to show above the action sheet
     * - `message` (string) - a message to show below the title
     * - `disabledButtonIndices` (array of numbers) - a list of button indices which should be disabled
     *
     * The 'callback' function takes one parameter, the zero-based index
     * of the selected item.
     *
     * See https://reactnative.dev/docs/actionsheetios#showactionsheetwithoptions
     */
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      _$$_REQUIRE(_dependencyMap[3])(typeof options === 'object' && options !== null, 'Options must be a valid object');
      _$$_REQUIRE(_dependencyMap[3])(typeof callback === 'function', 'Must provide a valid callback');
      _$$_REQUIRE(_dependencyMap[3])(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      var tintColor = options.tintColor,
        cancelButtonTintColor = options.cancelButtonTintColor,
        destructiveButtonIndex = options.destructiveButtonIndex,
        remainingOptions = (0, _objectWithoutProperties2.default)(options, _excluded);
      var destructiveButtonIndices = null;
      if (Array.isArray(destructiveButtonIndex)) {
        destructiveButtonIndices = destructiveButtonIndex;
      } else if (typeof destructiveButtonIndex === 'number') {
        destructiveButtonIndices = [destructiveButtonIndex];
      }
      var processedTintColor = _$$_REQUIRE(_dependencyMap[4]).default(tintColor);
      var processedCancelButtonTintColor = _$$_REQUIRE(_dependencyMap[4]).default(cancelButtonTintColor);
      _$$_REQUIRE(_dependencyMap[3])(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
      _$$_REQUIRE(_dependencyMap[3])(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
      _NativeActionSheetManager.default.showActionSheetWithOptions(Object.assign({}, remainingOptions, {
        tintColor: processedTintColor,
        cancelButtonTintColor: processedCancelButtonTintColor,
        destructiveButtonIndices: destructiveButtonIndices
      }), callback);
    },
    /**
     * Display the iOS share sheet. The `options` object should contain
     * one or both of `message` and `url` and can additionally have
     * a `subject` or `excludedActivityTypes`:
     *
     * - `url` (string) - a URL to share
     * - `message` (string) - a message to share
     * - `subject` (string) - a subject for the message
     * - `excludedActivityTypes` (array) - the activities to exclude from
     *   the ActionSheet
     * - `tintColor` (color) - tint color of the buttons
     *
     * The 'failureCallback' function takes one parameter, an error object.
     * The only property defined on this object is an optional `stack` property
     * of type `string`.
     *
     * The 'successCallback' function takes two parameters:
     *
     * - a boolean value signifying success or failure
     * - a string that, in the case of success, indicates the method of sharing
     *
     * See https://reactnative.dev/docs/actionsheetios#showshareactionsheetwithoptions
     */
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      _$$_REQUIRE(_dependencyMap[3])(typeof options === 'object' && options !== null, 'Options must be a valid object');
      _$$_REQUIRE(_dependencyMap[3])(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      _$$_REQUIRE(_dependencyMap[3])(typeof successCallback === 'function', 'Must provide a valid successCallback');
      _$$_REQUIRE(_dependencyMap[3])(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      _NativeActionSheetManager.default.showShareActionSheetWithOptions(Object.assign({}, options, {
        tintColor: _$$_REQUIRE(_dependencyMap[4]).default(options.tintColor)
      }), failureCallback, successCallback);
    },
    dismissActionSheet: function dismissActionSheet() {
      _$$_REQUIRE(_dependencyMap[3])(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
        _NativeActionSheetManager.default.dismissActionSheet();
      }
    }
  };
  module.exports = ActionSheetIOS;
},403,[1,119,404,24,164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('ActionSheetManager');
},404,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _NativeAppearance = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var eventEmitter = new _EventEmitter.default();
  if (_NativeAppearance.default) {
    var nativeEventEmitter = new _NativeEventEmitter.default(
    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
    // If you want to use the native module on other platforms, please remove this condition and test its behavior
    _Platform.default.OS !== 'ios' ? null : _NativeAppearance.default);
    nativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {
      var colorScheme = newAppearance.colorScheme;
      (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
      eventEmitter.emit('change', {
        colorScheme: colorScheme
      });
    });
  }
  module.exports = {
    /**
     * Note: Although color scheme is available immediately, it may change at any
     * time. Any rendering logic or styles that depend on this should try to call
     * this function on every render, rather than caching the value (for example,
     * using inline styles rather than setting a value in a `StyleSheet`).
     *
     * Example: `const colorScheme = Appearance.getColorScheme();`
     *
     * @returns {?ColorSchemeName} Value for the color scheme preference.
     */
    getColorScheme: function getColorScheme() {
      // TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union
      var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;
      (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
      return nativeColorScheme;
    },
    setColorScheme: function setColorScheme(colorScheme) {
      var nativeColorScheme = colorScheme == null ? 'unspecified' : colorScheme;
      (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
      if (_NativeAppearance.default != null && _NativeAppearance.default.setColorScheme != null) {
        _NativeAppearance.default.setColorScheme(nativeColorScheme);
      }
    },
    /**
     * Add an event handler that is fired when appearance preferences change.
     */
    addChangeListener: function addChangeListener(listener) {
      return eventEmitter.addListener('change', listener);
    }
  };
},405,[1,111,21,17,406,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('Appearance');
},406,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _logError = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _NativeAppState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  /**
   * `AppState` can tell you if the app is in the foreground or background,
   * and notify you when the state changes.
   *
   * See https://reactnative.dev/docs/appstate
   */
  var AppState = /*#__PURE__*/function () {
    function AppState() {
      var _this = this;
      (0, _classCallCheck2.default)(this, AppState);
      this.currentState = null;
      if (_NativeAppState.default == null) {
        this.isAvailable = false;
      } else {
        this.isAvailable = true;
        var emitter = new _NativeEventEmitter.default(
        // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeAppState.default);
        this._emitter = emitter;
        this.currentState = _NativeAppState.default.getConstants().initialAppState;
        var eventUpdated = false;

        // TODO: this is a terrible solution - in order to ensure `currentState`
        // prop is up to date, we have to register an observer that updates it
        // whenever the state changes, even if nobody cares. We should just
        // deprecate the `currentState` property and get rid of this.
        emitter.addListener('appStateDidChange', function (appStateData) {
          eventUpdated = true;
          _this.currentState = appStateData.app_state;
        });

        // TODO: see above - this request just populates the value of `currentState`
        // when the module is first initialized. Would be better to get rid of the
        // prop and expose `getCurrentAppState` method directly.
        // $FlowExpectedError[incompatible-call]
        _NativeAppState.default.getCurrentAppState(function (appStateData) {
          // It's possible that the state will have changed here & listeners need to be notified
          if (!eventUpdated && _this.currentState !== appStateData.app_state) {
            _this.currentState = appStateData.app_state;
            // $FlowFixMe[incompatible-call]
            emitter.emit('appStateDidChange', appStateData);
          }
        }, _logError.default);
      }
    }

    /**
     * Add a handler to AppState changes by listening to the `change` event type
     * and providing the handler.
     *
     * See https://reactnative.dev/docs/appstate#addeventlistener
     */
    (0, _createClass2.default)(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        var emitter = this._emitter;
        if (emitter == null) {
          throw new Error('Cannot use AppState when `isAvailable` is false.');
        }
        switch (type) {
          case 'change':
            // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
            var changeHandler = handler;
            return emitter.addListener('appStateDidChange', function (appStateData) {
              changeHandler(appStateData.app_state);
            });
          case 'memoryWarning':
            // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
            var memoryWarningHandler = handler;
            return emitter.addListener('memoryWarning', memoryWarningHandler);
          case 'blur':
          case 'focus':
            // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type
            var focusOrBlurHandler = handler;
            return emitter.addListener('appStateFocusChange', function (hasFocus) {
              if (type === 'blur' && !hasFocus) {
                focusOrBlurHandler();
              }
              if (type === 'focus' && hasFocus) {
                focusOrBlurHandler();
              }
            });
        }
        throw new Error('Trying to subscribe to unknown event: ' + type);
      }
    }]);
    return AppState;
  }();
  module.exports = new AppState();
},407,[1,5,6,111,408,21,409]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * Small utility that can be used as an error handler. You cannot just pass
   * `console.error` as a failure callback - it's not properly bound.  If passes an
   * `Error` object, it will print the message and stack.
   */
  var logError = function logError() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };
  module.exports = logError;
},408,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('AppState');
},409,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeClipboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * `Clipboard` gives you an interface for setting and getting content from Clipboard on both iOS and Android
   */
  module.exports = {
    /**
     * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content
     * ```javascript
     * async _getContent() {
     *   var content = await Clipboard.getString();
     * }
     * ```
     */
    getString: function getString() {
      return _NativeClipboard.default.getString();
    },
    /**
     * Set content of string type. You can use following code to set clipboard content
     * ```javascript
     * _setContent() {
     *   Clipboard.setString('hello world');
     * }
     * ```
     * @param {string} content the content to be stored in the clipboard.
     */
    setString: function setString(content) {
      _NativeClipboard.default.setString(content);
    }
  };
},410,[1,411]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Clipboard');
},411,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeDeviceInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  module.exports = _NativeDeviceInfo.default;
},412,[1,184]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _NativeDevSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var DevSettings = {
    addMenuItem: function addMenuItem(title, handler) {},
    reload: function reload(reason) {},
    onFastRefresh: function onFastRefresh() {}
  };
  module.exports = DevSettings;
},413,[1,111,414,21]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('DevSettings');
},414,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _NativeEventEmitter2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _NativeIntentAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _NativeLinkingManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } /**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 * 
 */
  /**
   * `Linking` gives you a general interface to interact with both incoming
   * and outgoing app links.
   *
   * See https://reactnative.dev/docs/linking
   */
  var Linking = /*#__PURE__*/function (_NativeEventEmitter) {
    (0, _inherits2.default)(Linking, _NativeEventEmitter);
    var _super = _createSuper(Linking);
    function Linking() {
      (0, _classCallCheck2.default)(this, Linking);
      return _super.call(this, _Platform.default.OS === 'ios' ? (0, _nullthrows.default)(_NativeLinkingManager.default) : undefined);
    }

    /**
     * Add a handler to Linking changes by listening to the `url` event type
     * and providing the handler
     *
     * See https://reactnative.dev/docs/linking#addeventlistener
     */
    (0, _createClass2.default)(Linking, [{
      key: "addEventListener",
      value: function addEventListener(eventType, listener, context) {
        return this.addListener(eventType, listener);
      }

      /**
       * Try to open the given `url` with any of the installed apps.
       *
       * See https://reactnative.dev/docs/linking#openurl
       */
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);
        if (_Platform.default.OS === 'android') {
          return (0, _nullthrows.default)(_NativeIntentAndroid.default).openURL(url);
        } else {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).openURL(url);
        }
      }

      /**
       * Determine whether or not an installed app can handle a given URL.
       *
       * See https://reactnative.dev/docs/linking#canopenurl
       */
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);
        if (_Platform.default.OS === 'android') {
          return (0, _nullthrows.default)(_NativeIntentAndroid.default).canOpenURL(url);
        } else {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).canOpenURL(url);
        }
      }

      /**
       * Open app settings.
       *
       * See https://reactnative.dev/docs/linking#opensettings
       */
    }, {
      key: "openSettings",
      value: function openSettings() {
        if (_Platform.default.OS === 'android') {
          return (0, _nullthrows.default)(_NativeIntentAndroid.default).openSettings();
        } else {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).openSettings();
        }
      }

      /**
       * If the app launch was triggered by an app link,
       * it will give the link url, otherwise it will give `null`
       *
       * See https://reactnative.dev/docs/linking#getinitialurl
       */
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return _Platform.default.OS === 'android' ? (0, _nullthrows.default)(_NativeIntentAndroid.default).getInitialURL() : (0, _nullthrows.default)(_NativeLinkingManager.default).getInitialURL();
      }

      /*
       * Launch an Android intent with extras (optional)
       *
       * @platform android
       *
       * See https://reactnative.dev/docs/linking#sendintent
       */
    }, {
      key: "sendIntent",
      value: function sendIntent(action, extras) {
        if (_Platform.default.OS === 'android') {
          return (0, _nullthrows.default)(_NativeIntentAndroid.default).sendIntent(action, extras);
        } else {
          return new Promise(function (resolve, reject) {
            return reject(new Error('Unsupported'));
          });
        }
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        (0, _invariant.default)(url, 'Invalid URL: cannot be empty');
      }
    }]);
    return Linking;
  }(_NativeEventEmitter2.default);
  module.exports = new Linking();
},415,[1,5,6,13,15,12,111,21,416,417,24,43]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('IntentAndroid');
},416,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('LinkingManager');
},417,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _RCTLog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  var LogBox;
  /**
   * LogBox displays logs in the app.
   */

  {
    LogBox = {
      install: function install() {
        // Do nothing.
      },
      uninstall: function uninstall() {
        // Do nothing.
      },
      isInstalled: function isInstalled() {
        return false;
      },
      ignoreLogs: function ignoreLogs(patterns) {
        // Do nothing.
      },
      ignoreAllLogs: function ignoreAllLogs(value) {
        // Do nothing.
      },
      clearAllLogs: function clearAllLogs() {
        // Do nothing.
      },
      addLog: function addLog(log) {
        // Do nothing.
      },
      addException: function addException(error) {
        // Do nothing.
      }
    };
  }
  var _default = exports.default = LogBox;
},418,[1,21,138]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /**
   * `PanResponder` reconciles several touches into a single gesture. It makes
   * single-touch gestures resilient to extra touches, and can be used to
   * recognize simple multi-touch gestures.
   *
   * By default, `PanResponder` holds an `InteractionManager` handle to block
   * long-running JS events from interrupting active gestures.
   *
   * It provides a predictable wrapper of the responder handlers provided by the
   * [gesture responder system](docs/gesture-responder-system.html).
   * For each handler, it provides a new `gestureState` object alongside the
   * native event object:
   *
   * ```
   * onPanResponderMove: (event, gestureState) => {}
   * ```
   *
   * A native event is a synthetic touch event with the following form:
   *
   *  - `nativeEvent`
   *      + `changedTouches` - Array of all touch events that have changed since the last event
   *      + `identifier` - The ID of the touch
   *      + `locationX` - The X position of the touch, relative to the element
   *      + `locationY` - The Y position of the touch, relative to the element
   *      + `pageX` - The X position of the touch, relative to the root element
   *      + `pageY` - The Y position of the touch, relative to the root element
   *      + `target` - The node id of the element receiving the touch event
   *      + `timestamp` - A time identifier for the touch, useful for velocity calculation
   *      + `touches` - Array of all current touches on the screen
   *
   * A `gestureState` object has the following:
   *
   *  - `stateID` - ID of the gestureState- persisted as long as there at least
   *     one touch on screen
   *  - `moveX` - the latest screen coordinates of the recently-moved touch
   *  - `moveY` - the latest screen coordinates of the recently-moved touch
   *  - `x0` - the screen coordinates of the responder grant
   *  - `y0` - the screen coordinates of the responder grant
   *  - `dx` - accumulated distance of the gesture since the touch started
   *  - `dy` - accumulated distance of the gesture since the touch started
   *  - `vx` - current velocity of the gesture
   *  - `vy` - current velocity of the gesture
   *  - `numberActiveTouches` - Number of touches currently on screen
   *
   * ### Basic Usage
   *
   * ```
   *   componentWillMount: function() {
   *     this._panResponder = PanResponder.create({
   *       // Ask to be the responder:
   *       onStartShouldSetPanResponder: (evt, gestureState) => true,
   *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,
   *       onMoveShouldSetPanResponder: (evt, gestureState) => true,
   *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,
   *
   *       onPanResponderGrant: (evt, gestureState) => {
   *         // The gesture has started. Show visual feedback so the user knows
   *         // what is happening!
   *
   *         // gestureState.d{x,y} will be set to zero now
   *       },
   *       onPanResponderMove: (evt, gestureState) => {
   *         // The most recent move distance is gestureState.move{X,Y}
   *
   *         // The accumulated gesture distance since becoming responder is
   *         // gestureState.d{x,y}
   *       },
   *       onPanResponderTerminationRequest: (evt, gestureState) => true,
   *       onPanResponderRelease: (evt, gestureState) => {
   *         // The user has released all touches while this view is the
   *         // responder. This typically means a gesture has succeeded
   *       },
   *       onPanResponderTerminate: (evt, gestureState) => {
   *         // Another component has become the responder, so this gesture
   *         // should be cancelled
   *       },
   *       onShouldBlockNativeResponder: (evt, gestureState) => {
   *         // Returns whether this component should block native components from becoming the JS
   *         // responder. Returns true by default. Is currently only supported on android.
   *         return true;
   *       },
   *     });
   *   },
   *
   *   render: function() {
   *     return (
   *       <View {...this._panResponder.panHandlers} />
   *     );
   *   },
   *
   * ```
   *
   * ### Working Example
   *
   * To see it in action, try the
   * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/HEAD/packages/rn-tester/js/examples/PanResponder/PanResponderExample.js)
   */

  var PanResponder = {
    /**
     *
     * A graphical explanation of the touch data flow:
     *
     * +----------------------------+             +--------------------------------+
     * | ResponderTouchHistoryStore |             |TouchHistoryMath                |
     * +----------------------------+             +----------+---------------------+
     * |Global store of touchHistory|             |Allocation-less math util       |
     * |including activeness, start |             |on touch history (centroids     |
     * |position, prev/cur position.|             |and multitouch movement etc)    |
     * |                            |             |                                |
     * +----^-----------------------+             +----^---------------------------+
     *      |                                          |
     *      | (records relevant history                |
     *      |  of touches relevant for                 |
     *      |  implementing higher level               |
     *      |  gestures)                               |
     *      |                                          |
     * +----+-----------------------+             +----|---------------------------+
     * | ResponderEventPlugin       |             |    |   Your App/Component      |
     * +----------------------------+             +----|---------------------------+
     * |Negotiates which view gets  | Low level   |    |             High level    |
     * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |
     * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |
     * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|
     * +----------------------------+ attached to |  |         |     distance and  |
     *                                 each event |  +---------+     velocity.     |
     *                                            |                                |
     *                                            |                                |
     *                                            +--------------------------------+
     *
     *
     *
     * Gesture that calculates cumulative movement over time in a way that just
     * "does the right thing" for multiple touches. The "right thing" is very
     * nuanced. When moving two touches in opposite directions, the cumulative
     * distance is zero in each dimension. When two touches move in parallel five
     * pixels in the same direction, the cumulative distance is five, not ten. If
     * two touches start, one moves five in a direction, then stops and the other
     * touch moves fives in the same direction, the cumulative distance is ten.
     *
     * This logic requires a kind of processing of time "clusters" of touch events
     * so that two touch moves that essentially occur in parallel but move every
     * other frame respectively, are considered part of the same movement.
     *
     * Explanation of some of the non-obvious fields:
     *
     * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is
     *   invalid. If a move event has been observed, `(moveX, moveY)` is the
     *   centroid of the most recently moved "cluster" of active touches.
     *   (Currently all move have the same timeStamp, but later we should add some
     *   threshold for what is considered to be "moving"). If a palm is
     *   accidentally counted as a touch, but a finger is moving greatly, the palm
     *   will move slightly, but we only want to count the single moving touch.
     * - x0/y0: Centroid location (non-cumulative) at the time of becoming
     *   responder.
     * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch
     *   distance. Accounts for touch moves that are clustered together in time,
     *   moving the same direction. Only valid when currently responder (otherwise,
     *   it only represents the drag distance below the threshold).
     * - vx/vy: Velocity.
     */
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      // All `gestureState` accounts for timeStamps up until:
      gestureState._accountsForMovesUpTo = 0;
    },
    /**
     * This is nuanced and is necessary. It is incorrect to continuously take all
     * active *and* recently moved touches, find the centroid, and track how that
     * result changes over time. Instead, we must take all recently moved
     * touches, and calculate how the centroid has changed just for those
     * recently moved touches, and append that change to an accumulator. This is
     * to (at least) handle the case where the user is moving three fingers, and
     * then one of the fingers stops but the other two continue.
     *
     * This is very different than taking all of the recently moved touches and
     * storing their centroid as `dx/dy`. For correctness, we must *accumulate
     * changes* in the centroid of recently moved touches.
     *
     * There is also some nuance with how we handle multiple moved touches in a
     * single event. With the way `ReactNativeEventEmitter` dispatches touches as
     * individual events, multiple touches generate two 'move' events, each of
     * them triggering `onResponderMove`. But with the way `PanResponder` works,
     * all of the gesture inference is performed on the first dispatch, since it
     * looks at all of the touches (even the ones for which there hasn't been a
     * native dispatch yet). Therefore, `PanResponder` does not call
     * `onResponderMove` passed the first dispatch. This diverges from the
     * typical responder callback pattern (without using `PanResponder`), but
     * avoids more dispatches than necessary.
     */
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = _$$_REQUIRE(_dependencyMap[0]).currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = _$$_REQUIRE(_dependencyMap[0]).currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = _$$_REQUIRE(_dependencyMap[0]).previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = _$$_REQUIRE(_dependencyMap[0]).currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = _$$_REQUIRE(_dependencyMap[0]).previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = _$$_REQUIRE(_dependencyMap[0]).currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);

      // TODO: This must be filtered intelligently.
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    /**
     * @param {object} config Enhanced versions of all of the responder callbacks
     * that provide not only the typical `ResponderSyntheticEvent`, but also the
     * `PanResponder` gesture state.  Simply replace the word `Responder` with
     * `PanResponder` in each of the typical `onResponder*` callbacks. For
     * example, the `config` object would look like:
     *
     *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`
     *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`
     *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`
     *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`
     *  - `onPanResponderReject: (e, gestureState) => {...}`
     *  - `onPanResponderGrant: (e, gestureState) => {...}`
     *  - `onPanResponderStart: (e, gestureState) => {...}`
     *  - `onPanResponderEnd: (e, gestureState) => {...}`
     *  - `onPanResponderRelease: (e, gestureState) => {...}`
     *  - `onPanResponderMove: (e, gestureState) => {...}`
     *  - `onPanResponderTerminate: (e, gestureState) => {...}`
     *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`
     *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`
     *
     *  In general, for events that have capture equivalents, we update the
     *  gestureState once in the capture phase and can use it in the bubble phase
     *  as well.
     *
     *  Be careful with onStartShould* callbacks. They only reflect updated
     *  `gestureState` for start/end events that bubble/capture to the Node.
     *  Once the node is the responder, you can rely on every start/end event
     *  being processed by the gesture and `gestureState` being updated
     *  accordingly. (numberActiveTouches) may not be totally accurate unless you
     *  are the responder.
     */
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        // Useful for debugging
        stateID: Math.random(),
        moveX: 0,
        moveY: 0,
        x0: 0,
        y0: 0,
        dx: 0,
        dy: 0,
        vx: 0,
        vy: 0,
        numberActiveTouches: 0,
        _accountsForMovesUpTo: 0
      };
      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(event) {
          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {
          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {
          // TODO: Actually, we should reinitialize the state any time
          // touches.length increases from 0 active to > 0 active.
          if (event.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }
          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {
          var touchHistory = event.touchHistory;
          // Responder system incorrectly dispatches should* to current responder
          // Filter out any touch moves past the first one - we would have
          // already processed multi-touch geometry during the first event.
          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }
          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(event) {
          if (!interactionState.handle) {
            interactionState.handle = _$$_REQUIRE(_dependencyMap[1]).createInteractionHandle();
          }
          gestureState.x0 = _$$_REQUIRE(_dependencyMap[0]).currentCentroidX(event.touchHistory);
          gestureState.y0 = _$$_REQUIRE(_dependencyMap[0]).currentCentroidY(event.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;
          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(event, gestureState);
          }
          // TODO: t7467124 investigate if this can be removed
          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);
        },
        onResponderReject: function onResponderReject(event) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);
        },
        onResponderRelease: function onResponderRelease(event) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);
          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(event) {
          var touchHistory = event.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          if (config.onPanResponderStart) {
            config.onPanResponderStart(event, gestureState);
          }
        },
        onResponderMove: function onResponderMove(event) {
          var touchHistory = event.touchHistory;
          // Guard against the dispatch of two touch moves when there are two
          // simultaneously changed touches.
          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }
          // Filter out any touch moves past the first one - we would have
          // already processed multi-touch geometry during the first event.
          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
          if (config.onPanResponderMove) {
            config.onPanResponderMove(event, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(event) {
          var touchHistory = event.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(event) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);
          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(event) {
          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };
  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      _$$_REQUIRE(_dependencyMap[1]).clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }
    if (callback) {
      callback(event, gestureState);
    }
  }
  var _default = exports.default = PanResponder;
},419,[420,289]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  var TouchHistoryMath = {
    /**
     * This code is optimized and not intended to look beautiful. This allows
     * computing of touch centroids that have moved after `touchesChangedAfter`
     * timeStamp. You can compute the current centroid involving all touches
     * moves after `touchesChangedAfter`, or you can compute the previous
     * centroid of all touches that were moved after `touchesChangedAfter`.
     *
     * @param {TouchHistoryMath} touchHistory Standard Responder touch track
     * data.
     * @param {number} touchesChangedAfter timeStamp after which moved touches
     * are considered "actively moving" - not just "active".
     * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.
     * @param {boolean} ofCurrent Compute current centroid for actively moving
     * touches vs. previous centroid of now actively moving touches.
     * @return {number} value of centroid in specified dimension.
     */
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];
          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = undefined; // Yuck, program temporarily in invalid state.
            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }
            total += toAdd;
            count++;
          }
        }
      }
      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true,
      // isXAxis
      true // ofCurrent
      );
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false,
      // isXAxis
      true // ofCurrent
      );
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true,
      // isXAxis
      false // ofCurrent
      );
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false,
      // isXAxis
      false // ofCurrent
      );
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0,
      // touchesChangedAfter
      true,
      // isXAxis
      true // ofCurrent
      );
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0,
      // touchesChangedAfter
      false,
      // isXAxis
      true // ofCurrent
      );
    },
    noCentroid: -1
  };
  module.exports = TouchHistoryMath;
},420,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _NativeDialogManagerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _NativePermissionsAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6])); /**
                                                                            * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                            *
                                                                            * This source code is licensed under the MIT license found in the
                                                                            * LICENSE file in the root directory of this source tree.
                                                                            *
                                                                            * @format
                                                                            * 
                                                                            */

  var PERMISSION_REQUEST_RESULT = Object.freeze({
    GRANTED: 'granted',
    DENIED: 'denied',
    NEVER_ASK_AGAIN: 'never_ask_again'
  });
  var PERMISSIONS = Object.freeze({
    READ_CALENDAR: 'android.permission.READ_CALENDAR',
    WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
    CAMERA: 'android.permission.CAMERA',
    READ_CONTACTS: 'android.permission.READ_CONTACTS',
    WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
    GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
    ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
    ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
    ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
    RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
    READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
    CALL_PHONE: 'android.permission.CALL_PHONE',
    READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
    WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
    ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
    READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',
    WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',
    USE_SIP: 'android.permission.USE_SIP',
    PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
    BODY_SENSORS: 'android.permission.BODY_SENSORS',
    BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',
    SEND_SMS: 'android.permission.SEND_SMS',
    RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
    READ_SMS: 'android.permission.READ_SMS',
    RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
    RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
    READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
    READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',
    READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',
    READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',
    READ_MEDIA_VISUAL_USER_SELECTED: 'android.permission.READ_MEDIA_VISUAL_USER_SELECTED',
    WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
    BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
    BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
    BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',
    ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',
    ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',
    ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',
    ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',
    READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',
    UWB_RANGING: 'android.permission.UWB_RANGING',
    POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
    NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES'
  });

  /**
   * `PermissionsAndroid` provides access to Android M's new permissions model.
   *
   * See https://reactnative.dev/docs/permissionsandroid
   */
  var PermissionsAndroid = /*#__PURE__*/function () {
    function PermissionsAndroid() {
      (0, _classCallCheck2.default)(this, PermissionsAndroid);
      this.PERMISSIONS = PERMISSIONS;
      this.RESULTS = PERMISSION_REQUEST_RESULT;
    }
    (0, _createClass2.default)(PermissionsAndroid, [{
      key: "checkPermission",
      value:
      /**
       * DEPRECATED - use check
       *
       * Returns a promise resolving to a boolean value as to whether the specified
       * permissions has been granted
       *
       * @deprecated
       */
      function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
      }

      /**
       * Returns a promise resolving to a boolean value as to whether the specified
       * permissions has been granted
       *
       * See https://reactnative.dev/docs/permissionsandroid#check
       */
    }, {
      key: "check",
      value: function check(permission) {
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
      }

      /**
       * DEPRECATED - use request
       *
       * Prompts the user to enable a permission and returns a promise resolving to a
       * boolean value indicating whether the user allowed or denied the request
       *
       * If the optional rationale argument is included (which is an object with a
       * `title` and `message`), this function checks with the OS whether it is
       * necessary to show a dialog explaining why the permission is needed
       * (https://developer.android.com/training/permissions/requesting#explain)
       * and then shows the system permission dialog
       *
       * @deprecated
       */
    }, {
      key: "requestPermission",
      value: (function () {
        var _requestPermission = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
          console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
          var response = yield this.request(permission, rationale);
          return response === this.RESULTS.GRANTED;
        });
        function requestPermission(_x, _x2) {
          return _requestPermission.apply(this, arguments);
        }
        return requestPermission;
      }()
      /**
       * Prompts the user to enable a permission and returns a promise resolving to a
       * string value indicating whether the user allowed or denied the request
       *
       * See https://reactnative.dev/docs/permissionsandroid#request
       */
      )
    }, {
      key: "request",
      value: (function () {
        var _request = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
          (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
          if (rationale) {
            var shouldShowRationale = yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission);
            if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
              return new Promise(function (resolve, reject) {
                var options = Object.assign({}, rationale);
                _NativeDialogManagerAndroid.default.showAlert(
                /* $FlowFixMe[incompatible-exact] (>=0.111.0 site=react_native_fb)
                 * This comment suppresses an error found when Flow v0.111 was
                 * deployed. To see the error, delete this comment and run Flow.
                 */
                options, function () {
                  return reject(new Error('Error showing rationale'));
                }, function () {
                  return resolve(_NativePermissionsAndroid.default.requestPermission(permission));
                });
              });
            }
          }
          return _NativePermissionsAndroid.default.requestPermission(permission);
        });
        function request(_x3, _x4) {
          return _request.apply(this, arguments);
        }
        return request;
      }()
      /**
       * Prompts the user to enable multiple permissions in the same dialog and
       * returns an object with the permissions as keys and strings as values
       * indicating whether the user allowed or denied the request
       *
       * See https://reactnative.dev/docs/permissionsandroid#requestmultiple
       */
      )
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
      }
    }]);
    return PermissionsAndroid;
  }();
  var PermissionsAndroidInstance = new PermissionsAndroid();
  module.exports = PermissionsAndroidInstance;
},421,[1,339,5,6,131,422,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  // TODO: Use proper enum types.
  /*
  export type PermissionStatus = 'granted' | 'denied' | 'never_ask_again';
  export type PermissionType =
    | 'android.permission.READ_CALENDAR'
    | 'android.permission.WRITE_CALENDAR'
    | 'android.permission.CAMERA'
    | 'android.permission.READ_CONTACTS'
    | 'android.permission.WRITE_CONTACTS'
    | 'android.permission.GET_ACCOUNTS'
    | 'android.permission.ACCESS_BACKGROUND_LOCATION'
    | 'android.permission.ACCESS_FINE_LOCATION'
    | 'android.permission.ACCESS_COARSE_LOCATION'
    | 'android.permission.RECORD_AUDIO'
    | 'android.permission.READ_PHONE_STATE'
    | 'android.permission.CALL_PHONE'
    | 'android.permission.READ_CALL_LOG'
    | 'android.permission.WRITE_CALL_LOG'
    | 'com.android.voicemail.permission.ADD_VOICEMAIL'
    | 'com.android.voicemail.permission.READ_VOICEMAIL'
    | 'com.android.voicemail.permission.WRITE_VOICEMAIL'
    | 'android.permission.USE_SIP'
    | 'android.permission.PROCESS_OUTGOING_CALLS'
    | 'android.permission.BODY_SENSORS'
    | 'android.permission.BODY_SENSORS_BACKGROUND'
    | 'android.permission.SEND_SMS'
    | 'android.permission.RECEIVE_SMS'
    | 'android.permission.READ_SMS'
    | 'android.permission.RECEIVE_WAP_PUSH'
    | 'android.permission.RECEIVE_MMS'
    | 'android.permission.READ_EXTERNAL_STORAGE'
    | 'android.permission.READ_MEDIA_IMAGES',
    | 'android.permission.READ_MEDIA_VIDEO',
    | 'android.permission.READ_MEDIA_AUDIO',
    | 'android.permission.READ_MEDIA_VISUAL_USER_SELECTED'
    | 'android.permission.WRITE_EXTERNAL_STORAGE'
    | 'android.permission.BLUETOOTH_CONNECT'
    | 'android.permission.BLUETOOTH_SCAN'
    | 'android.permission.BLUETOOTH_ADVERTISE'
    | 'android.permission.ACCESS_MEDIA_LOCATION'
    | 'android.permission.ACCEPT_HANDOVER'
    | 'android.permission.ACTIVITY_RECOGNITION'
    | 'android.permission.ANSWER_PHONE_CALLS'
    | 'android.permission.READ_PHONE_NUMBERS'
    | 'android.permission.UWB_RANGING'
    | 'android.permission.POST_NOTIFICATIONS'
    | 'android.permission.NEARBY_WIFI_DEVICES';
  */
  var _default = exports.default = TurboModuleRegistry.get('PermissionsAndroid');
},422,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _NativePushNotificationManagerIOS = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var PushNotificationEmitter = new _NativeEventEmitter.default(
  // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
  // If you want to use the native module on other platforms, please remove this condition and test its behavior
  _Platform.default.OS !== 'ios' ? null : _NativePushNotificationManagerIOS.default);
  var _notifHandlers = new Map();
  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

  /**
   * An event emitted by PushNotificationIOS.
   */
  /**
   *
   * Handle push notifications for your app, including permission handling and
   * icon badge number.
   *
   * See https://reactnative.dev/docs/pushnotificationios
   */
  var PushNotificationIOS = /*#__PURE__*/function () {
    /**
     * You will never need to instantiate `PushNotificationIOS` yourself.
     * Listening to the `notification` event and invoking
     * `getInitialNotification` is sufficient
     *
     */
    function PushNotificationIOS(nativeNotif) {
      var _this = this;
      (0, _classCallCheck2.default)(this, PushNotificationIOS);
      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;
      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }
      if (nativeNotif.remote) {
        // Extract data from Apple's `aps` dict as defined:
        // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];
          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
            _this._threadID = notifVal['thread-id'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        // Local notifications aren't being sent down with `aps` dict.
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    /**
     * This method is available for remote notifications that have been received via:
     * `application:didReceiveRemoteNotification:fetchCompletionHandler:`
     *
     * See https://reactnative.dev/docs/pushnotificationios#finish
     */
    (0, _createClass2.default)(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }
        this._remoteNotificationCompleteCallbackCalled = true;
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(this._notificationId, fetchResult);
      }

      /**
       * An alias for `getAlert` to get the notification's main message string
       */
    }, {
      key: "getMessage",
      value: function getMessage() {
        // alias because "alert" is an ambiguous name
        return this._alert;
      }

      /**
       * Gets the sound string from the `aps` object
       *
       * See https://reactnative.dev/docs/pushnotificationios#getsound
       */
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }

      /**
       * Gets the category string from the `aps` object
       *
       * See https://reactnative.dev/docs/pushnotificationios#getcategory
       */
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }

      /**
       * Gets the notification's main message from the `aps` object
       *
       * See https://reactnative.dev/docs/pushnotificationios#getalert
       */
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }

      /**
       * Gets the content-available number from the `aps` object
       *
       * See https://reactnative.dev/docs/pushnotificationios#getcontentavailable
       */
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }

      /**
       * Gets the badge count number from the `aps` object
       *
       * See https://reactnative.dev/docs/pushnotificationios#getbadgecount
       */
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }

      /**
       * Gets the data object on the notif
       *
       * See https://reactnative.dev/docs/pushnotificationios#getdata
       */
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }

      /**
       * Gets the thread ID on the notif
       *
       * See https://reactnative.dev/docs/pushnotificationios#getthreadid
       */
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }], [{
      key: "presentLocalNotification",
      value:
      /**
       * Schedules the localNotification for immediate presentation.
       *
       * See https://reactnative.dev/docs/pushnotificationios#presentlocalnotification
       */
      function presentLocalNotification(details) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.presentLocalNotification(details);
      }

      /**
       * Schedules the localNotification for future presentation.
       *
       * See https://reactnative.dev/docs/pushnotificationios#schedulelocalnotification
       */
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.scheduleLocalNotification(details);
      }

      /**
       * Cancels all scheduled localNotifications.
       *
       * See https://reactnative.dev/docs/pushnotificationios#cancelalllocalnotifications
       */
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
      }

      /**
       * Remove all delivered notifications from Notification Center.
       *
       * See https://reactnative.dev/docs/pushnotificationios#removealldeliverednotifications
       */
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
      }

      /**
       * Provides you with a list of the app’s notifications that are still displayed in Notification Center.
       *
       * See https://reactnative.dev/docs/pushnotificationios#getdeliverednotifications
       */
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getDeliveredNotifications(callback);
      }

      /**
       * Removes the specified notifications from Notification Center
       *
       * See https://reactnative.dev/docs/pushnotificationios#removedeliverednotifications
       */
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(identifiers);
      }

      /**
       * Sets the badge number for the app icon on the home screen.
       *
       * See https://reactnative.dev/docs/pushnotificationios#setapplicationiconbadgenumber
       */
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(number);
      }

      /**
       * Gets the current badge number for the app icon on the home screen.
       *
       * See https://reactnative.dev/docs/pushnotificationios#getapplicationiconbadgenumber
       */
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(callback);
      }

      /**
       * Cancel local notifications.
       *
       * See https://reactnative.dev/docs/pushnotificationios#cancellocalnotification
       */
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.cancelLocalNotifications(userInfo);
      }

      /**
       * Gets the local notifications that are currently scheduled.
       *
       * See https://reactnative.dev/docs/pushnotificationios#getscheduledlocalnotifications
       */
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(callback);
      }

      /**
       * Attaches a listener to remote or local notification events while the app
       * is running in the foreground or the background.
       *
       * See https://reactnative.dev/docs/pushnotificationios#addeventlistener
       */
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;
        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }
        _notifHandlers.set(type, listener);
      }

      /**
       * Removes the event listener. Do this in `componentWillUnmount` to prevent
       * memory leaks.
       *
       * See https://reactnative.dev/docs/pushnotificationios#removeeventlistener
       */
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener = _notifHandlers.get(type);
        if (!listener) {
          return;
        }
        listener.remove();
        _notifHandlers.delete(type);
      }

      /**
       * Requests notification permissions from iOS, prompting the user's
       * dialog box. By default, it will request all notification permissions, but
       * a subset of these can be requested by passing a map of requested
       * permissions.
       *
       * See https://reactnative.dev/docs/pushnotificationios#requestpermissions
       */
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {
          alert: true,
          badge: true,
          sound: true
        };
        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        }
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        return _NativePushNotificationManagerIOS.default.requestPermissions(requestedPermissions);
      }

      /**
       * Unregister for all remote notifications received via Apple Push Notification service.
       *
       * See https://reactnative.dev/docs/pushnotificationios#abandonpermissions
       */
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.abandonPermissions();
      }

      /**
       * See what push permissions are currently enabled. `callback` will be
       * invoked with a `permissions` object.
       *
       * See https://reactnative.dev/docs/pushnotificationios#checkpermissions
       */
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        (0, _invariant.default)(typeof callback === 'function', 'Must provide a valid callback');
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.checkPermissions(callback);
      }

      /**
       * This method returns a promise that resolves to either the notification
       * object if the app was launched by a push notification, or `null` otherwise.
       *
       * See https://reactnative.dev/docs/pushnotificationios#getinitialnotification
       */
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        return _NativePushNotificationManagerIOS.default.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }

      /**
       * This method returns a promise that resolves to notification authorization status.
       */
    }, {
      key: "getAuthorizationStatus",
      value: function getAuthorizationStatus(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getAuthorizationStatus(callback);
      }
    }]);
    return PushNotificationIOS;
  }();
  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  module.exports = PushNotificationIOS;
},423,[1,5,6,111,21,424,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */
  var _default = exports.default = TurboModuleRegistry.get('PushNotificationManager');
},424,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var Settings = {
    get: function get(key) {
      console.warn('Settings is not yet supported on this platform.');
      return null;
    },
    set: function set(settings) {
      console.warn('Settings is not yet supported on this platform.');
    },
    watchKeys: function watchKeys(keys, callback) {
      console.warn('Settings is not yet supported on this platform.');
      return -1;
    },
    clearWatch: function clearWatch(watchId) {
      console.warn('Settings is not yet supported on this platform.');
    }
  };
  module.exports = Settings;
},425,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _NativeActionSheetManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _NativeShareModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4])); /**
                                                                                    * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                    *
                                                                                    * This source code is licensed under the MIT license found in the
                                                                                    * LICENSE file in the root directory of this source tree.
                                                                                    *
                                                                                    * @format
                                                                                    * 
                                                                                    */
  var Share = /*#__PURE__*/function () {
    function Share() {
      (0, _classCallCheck2.default)(this, Share);
    }
    (0, _createClass2.default)(Share, null, [{
      key: "share",
      value:
      /**
       * Open a dialog to share text content.
       *
       * In iOS, Returns a Promise which will be invoked an object containing `action`, `activityType`.
       * If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction`
       * and all the other keys being undefined.
       *
       * In Android, Returns a Promise which always be resolved with action being `Share.sharedAction`.
       *
       * ### Content
       *
       *  - `message` - a message to share
       *
       * #### iOS
       *
       *  - `url` - a URL to share
       *
       * At least one of URL and message is required.
       *
       * #### Android
       *
       * - `title` - title of the message
       *
       * ### Options
       *
       * #### iOS
       *
       *  - `subject` - a subject to share via email
       *  - `excludedActivityTypes`
       *  - `tintColor`
       *
       * #### Android
       *
       *  - `dialogTitle`
       *
       */
      function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        _$$_REQUIRE(_dependencyMap[5])(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        _$$_REQUIRE(_dependencyMap[5])(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        _$$_REQUIRE(_dependencyMap[5])(typeof options === 'object' && options !== null, 'Options must be a valid object');
        {
          _$$_REQUIRE(_dependencyMap[5])(_NativeShareModule.default, 'ShareModule should be registered on Android.');
          _$$_REQUIRE(_dependencyMap[5])(content.title == null || typeof content.title === 'string', 'Invalid title: title should be a string.');
          var newContent = {
            title: content.title,
            message: typeof content.message === 'string' ? content.message : undefined
          };
          return _NativeShareModule.default.share(newContent, options.dialogTitle).then(function (result) {
            return Object.assign({
              activityType: null
            }, result);
          });
        }
      }

      /**
       * The content was successfully shared.
       */
    }]);
    return Share;
  }();
  Share.sharedAction = 'sharedAction';
  /**
   * The dialog has been dismissed.
   * @platform ios
   */
  Share.dismissedAction = 'dismissedAction';
  module.exports = Share;
},426,[1,5,6,404,427,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.get('ShareModule');
},427,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeToastAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /**
   * This exposes the native ToastAndroid module as a JS module. This has a function 'show'
   * which takes the following parameters:
   *
   * 1. String message: A string with the text to toast
   * 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG
   *
   * There is also a function `showWithGravity` to specify the layout gravity. May be
   * ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER.
   *
   * The 'showWithGravityAndOffset' function adds on the ability to specify offset
   * These offset values will translate to pixels.
   *
   * Basic usage:
   * ```javascript
   * ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
   * ToastAndroid.showWithGravity('All Your Base Are Belong To Us', ToastAndroid.SHORT, ToastAndroid.CENTER);
   * ToastAndroid.showWithGravityAndOffset('A wild toast appeared!', ToastAndroid.LONG, ToastAndroid.BOTTOM, 25, 50);
   * ```
   */

  var ToastAndroidConstants = _NativeToastAndroid.default.getConstants();
  var ToastAndroid = {
    // Toast duration constants
    SHORT: ToastAndroidConstants.SHORT,
    LONG: ToastAndroidConstants.LONG,
    // Toast gravity constants
    TOP: ToastAndroidConstants.TOP,
    BOTTOM: ToastAndroidConstants.BOTTOM,
    CENTER: ToastAndroidConstants.CENTER,
    show: function show(message, duration) {
      _NativeToastAndroid.default.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
      _NativeToastAndroid.default.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
      _NativeToastAndroid.default.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
  };
  module.exports = ToastAndroid;
},428,[1,429]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('ToastAndroid');
},429,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAnimatedValue;
  var _Animated = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _react = _$$_REQUIRE(_dependencyMap[2]);
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  function useAnimatedValue(initialValue, config) {
    var ref = (0, _react.useRef)(null);
    if (ref.current == null) {
      ref.current = new _Animated.default.Value(initialValue, config);
    }
    return ref.current;
  }
},430,[1,279,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useColorScheme;
  var _Appearance = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _react = _$$_REQUIRE(_dependencyMap[2]);
  var subscribe = function subscribe(onStoreChange) {
    var appearanceSubscription = _Appearance.default.addChangeListener(onStoreChange);
    return function () {
      return appearanceSubscription.remove();
    };
  };
  function useColorScheme() {
    return (0, _react.useSyncExternalStore)(subscribe, _Appearance.default.getColorScheme);
  }
},431,[1,405,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useWindowDimensions;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _Dimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _react = _$$_REQUIRE(_dependencyMap[3]);
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  function useWindowDimensions() {
    var _useState = (0, _react.useState)(function () {
        return _Dimensions.default.get('window');
      }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      dimensions = _useState2[0],
      setDimensions = _useState2[1];
    (0, _react.useEffect)(function () {
      function handleChange(_ref) {
        var window = _ref.window;
        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {
          setDimensions(window);
        }
      }
      var subscription = _Dimensions.default.addEventListener('change', handleChange);
      // We might have missed an update between calling `get` in render and
      // `addEventListener` in this handler, so we set it here. If there was
      // no change, React will filter out this update as a no-op.
      handleChange({
        window: _Dimensions.default.get('window')
      });
      return function () {
        subscription.remove();
      };
    }, [dimensions]);
    return dimensions;
  }
},432,[1,26,183,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /**
   * A collection of Unicode sequences for various characters and emoji.
   *
   *  - More explicit than using the sequences directly in code.
   *  - Source code should be limited to ASCII.
   *  - Less chance of typos.
   */
  var UTFSequence = _$$_REQUIRE(_dependencyMap[0])({
    BOM: "\uFEFF",
    // byte order mark
    BULLET: "\u2022",
    // bullet: &#8226;
    BULLET_SP: "\xA0\u2022\xA0",
    // &nbsp;&#8226;&nbsp;
    MIDDOT: "\xB7",
    // normal middle dot: &middot;
    MIDDOT_SP: "\xA0\xB7\xA0",
    // &nbsp;&middot;&nbsp;
    MIDDOT_KATAKANA: "\u30FB",
    // katakana middle dot
    MDASH: "\u2014",
    // em dash: &mdash;
    MDASH_SP: "\xA0\u2014\xA0",
    // &nbsp;&mdash;&nbsp;
    NDASH: "\u2013",
    // en dash: &ndash;
    NDASH_SP: "\xA0\u2013\xA0",
    // &nbsp;&ndash;&nbsp;
    NEWLINE: "\n",
    NBSP: "\xA0",
    // non-breaking space: &nbsp;
    PIZZA: "\uD83C\uDF55",
    TRIANGLE_LEFT: "\u25C0",
    // black left-pointing triangle
    TRIANGLE_RIGHT: "\u25B6" // black right-pointing triangle
  });
  var _default = exports.default = UTFSequence;
},433,[214]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  var _NativeVibration = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1])); /**
                                                                                  * Copyright (c) Meta Platforms, Inc. and affiliates.
                                                                                  *
                                                                                  * This source code is licensed under the MIT license found in the
                                                                                  * LICENSE file in the root directory of this source tree.
                                                                                  *
                                                                                  * @format
                                                                                  * 
                                                                                  * @jsdoc
                                                                                  */

  /**
   * Vibration API
   *
   * See https://reactnative.dev/docs/vibration
   */

  var _vibrating = false;
  var _id = 0; // _id is necessary to prevent race condition.
  var _default_vibration_length = 400;
  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }
    _NativeVibration.default.vibrate(_default_vibration_length);
    if (nextIndex >= pattern.length) {
      if (repeat) {
        // $FlowFixMe[reassign-const]
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }
    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }
  var Vibration = {
    /**
     * Trigger a vibration with specified `pattern`.
     *
     * See https://reactnative.dev/docs/vibration#vibrate
     */
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _default_vibration_length;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      {
        if (typeof pattern === 'number') {
          _NativeVibration.default.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          _NativeVibration.default.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    /**
     * Stop vibration
     *
     * See https://reactnative.dev/docs/vibration#cancel
     */
    cancel: function cancel() {
      {
        _NativeVibration.default.cancel();
      }
    }
  };
  module.exports = Vibration;
},434,[1,435]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Vibration');
},435,[23]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);
  var _createClass = _$$_REQUIRE(_dependencyMap[1]);
  var _inherits = _$$_REQUIRE(_dependencyMap[2]);
  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);
  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var React = _$$_REQUIRE(_dependencyMap[5]);
  var YellowBox;
  {
    YellowBox = /*#__PURE__*/function (_React$Component2) {
      _inherits(YellowBox, _React$Component2);
      var _super2 = _createSuper(YellowBox);
      function YellowBox() {
        _classCallCheck(this, YellowBox);
        return _super2.apply(this, arguments);
      }
      _createClass(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {
          // Do nothing.
        }
      }, {
        key: "install",
        value: function install() {
          // Do nothing.
        }
      }, {
        key: "uninstall",
        value: function uninstall() {
          // Do nothing.
        }
      }]);
      return YellowBox;
    }(React.Component);
  }

  // $FlowFixMe[method-unbinding]
  module.exports = YellowBox;
},436,[5,6,13,15,12,153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DynamicColorIOS = undefined;
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  var DynamicColorIOS = exports.DynamicColorIOS = function DynamicColorIOS(tuple) {
    throw new Error('DynamicColorIOS is not available on this platform.');
  };
},437,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);
  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _Dashboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[4]);
  var App = function App() {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.SafeAreaView, {
      style: {
        flex: 1
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dashboard.default, {})
    });
  };
  var _default = exports.default = App;
},438,[1,2,153,439,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));
  var _reactNativeShimmerPlaceholder = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var Animatable = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);
  var _sound = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _reactNativeFlipCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } //music sound
  _$$_REQUIRE(_dependencyMap[9]).setCategory('Playback');

  //main screen
  var Dashboard = function Dashboard() {
    //state variables
    var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      count = _useState2[0],
      setCount = _useState2[1];
    var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      soundPlayed = _useState4[0],
      setSoundPlayed = _useState4[1];
    var _useState5 = (0, _react.useState)(-10),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      animationCount = _useState6[0],
      setAnimationCount = _useState6[1];
    var _useState7 = (0, _react.useState)(true),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      bshimmering = _useState8[0],
      setbShimmering = _useState8[1];

    // Animated values initialization
    var windowWidth = _reactNative.Dimensions.get('window').width;
    var windowHeight = _reactNative.Dimensions.get('window').height;
    var _useState9 = (0, _react.useState)(false),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      startAnimation = _useState10[0],
      setStartAnimation = _useState10[1];
    var animatedValue = (0, _react.useRef)(new _reactNative.Animated.Value(-60)).current;
    var animationRef = (0, _react.useRef)(null);
    var _useState11 = (0, _react.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      flip = _useState12[0],
      setFlip = _useState12[1];
    var _useState13 = (0, _react.useState)(false),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      main = _useState14[0],
      setMain = _useState14[1];
    var initPosition = {
      x: parseInt(windowWidth / 2) - 50,
      y: parseInt(windowHeight / 2) - 50
    };
    var _useState15 = (0, _react.useState)(function () {
        var initialTranslations = Array.from({
          length: 10
        }, function (_, i) {
          var animatedValueX = new _reactNative.Animated.Value(initPosition.x);
          var animatedValueY = new _reactNative.Animated.Value(initPosition.y);
          var opacity = new _reactNative.Animated.Value(1);
          return {
            animatedValueX: animatedValueX,
            animatedValueY: animatedValueY,
            opacity: opacity
          };
        });
        return initialTranslations;
      }),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 1),
      translations = _useState16[0];
    // Sound initialization
    var ding = new (_$$_REQUIRE(_dependencyMap[9]))(_sound.default, function (error) {
      if (error) {
        console.log('failed to load the sound', error);
        return;
      }
    });
    // Effect hook
    (0, _react.useEffect)(function () {
      ding.setVolume(1);
      return function () {
        ding.release();
        if (animationRef.current) {
          clearInterval(animationRef.current);
        }
      };
    }, []);
    // Sound play function
    var playPause = function playPause() {
      ding.play(function (success) {
        if (success) {
          console.log('successfully finished playing');
        } else {
          console.log('playback failed due to audio decoding errors');
        }
      });
    };
    // Animation function
    var handleAnimation = function handleAnimation() {
      handlePress();
      setMain(true);
      translations.forEach(function (translation, index) {
        var delay = 100 * index;
        soundPlayed && playPause();
        setSoundPlayed(true);
        _reactNative.Animated.sequence([_reactNative.Animated.delay(delay), _reactNative.Animated.parallel([_reactNative.Animated.timing(translation.opacity, {
          toValue: 10,
          duration: 100,
          useNativeDriver: true
        }), _reactNative.Animated.timing(translation.animatedValueX, {
          toValue: -100,
          duration: 400,
          useNativeDriver: true
        }), _reactNative.Animated.timing(translation.animatedValueY, {
          toValue: initPosition.y * 2 - 10 - 50 * index,
          duration: 400,
          useNativeDriver: true
        })]), _reactNative.Animated.parallel([_reactNative.Animated.timing(translation.animatedValueX, {
          toValue: 153,
          duration: 400,
          useNativeDriver: true
        }), _reactNative.Animated.timing(translation.animatedValueY, {
          toValue: initPosition.y / 12 - 50 * index - 123,
          duration: 400,
          useNativeDriver: true
        }), _reactNative.Animated.timing(translation.opacity, {
          toValue: 0,
          duration: 1000,
          useNativeDriver: true
        })]), _reactNative.Animated.parallel([_reactNative.Animated.timing(translation.animatedValueX, {
          toValue: -150,
          duration: 400,
          useNativeDriver: true
        }), _reactNative.Animated.timing(translation.animatedValueY, {
          toValue: initPosition.y * 2 - 10 - 50 * index,
          duration: 400,
          useNativeDriver: true
        }), _reactNative.Animated.timing(translation.opacity, {
          toValue: 0,
          duration: 400,
          useNativeDriver: true
        })])]).start(function () {
          setCount(count + 10);
          setAnimationCount(function (prevCount) {
            return prevCount + 1;
          });
        });
      });
    };
    //button animation
    var handlePress = function handlePress() {
      if (!startAnimation) {
        animatedValue.setValue(-60);
        setTimeout(function () {
          setStartAnimation(true);
          animationRef.current = setInterval(function () {
            _reactNative.Animated.timing(animatedValue, {
              toValue: 260,
              duration: 103,
              useNativeDriver: false
            }).start(function () {});
          }, 1000);
        }, 1000);
      }
      setStartAnimation(false);
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _$$_REQUIRE(_dependencyMap[10]).styles.container,
      children: main ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _$$_REQUIRE(_dependencyMap[10]).styles.subcontainer,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            flex: 1
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _$$_REQUIRE(_dependencyMap[10]).styles.heading,
            children: "Total Gold Coins"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(Animatable.View, {
            animation: "pulse",
            easing: "ease-out",
            iterationCount: "infinite",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNativeShimmerPlaceholder.default, {
              style: _$$_REQUIRE(_dependencyMap[10]).styles.subt,
              shimmerColors: ['#e0aa07', '#DDDDDD', '#E2E2E2'],
              duration: 1500,
              shimmering: bshimmering,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
                source: _$$_REQUIRE(_dependencyMap[11])
              })
            })
          }), animationCount >= 0 ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _$$_REQUIRE(_dependencyMap[10]).styles.ountview,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: _$$_REQUIRE(_dependencyMap[10]).styles.counttext,
              children: animationCount
            })
          }) : null, /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNativeFlipCard.default, {
            style: {
              top: 45
            },
            friction: 6,
            perspective: 1000,
            flipHorizontal: true,
            flipVertical: false,
            flip: false,
            clickable: true,
            onFlipEnd: function onFlipEnd(isFlipEnd) {
              setFlip(isFlipEnd);
              console.log('isFlipEnd', isFlipEnd);
            },
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: _$$_REQUIRE(_dependencyMap[10]).styles.faceflip,
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: {
                  color: 'white'
                },
                children: "The Face"
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
                style: _$$_REQUIRE(_dependencyMap[10]).styles.faceimage,
                source: {
                  uri: 'https://pics.craiyon.com/2023-11-10/R3LWzoOeTfWML6WTDCc61A.webp'
                }
              })]
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: _$$_REQUIRE(_dependencyMap[10]).styles.viewback,
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
                style: _$$_REQUIRE(_dependencyMap[10]).styles.backimage,
                source: {
                  uri: 'https://img.freepik.com/vetores-premium/voce-ganha-brilhante-banner-retro-com-moedas-voadoras-modelo-de-banner-de-design-de-jogo-espaco-do-cassino_32996-1499.jpg?w=1060'
                }
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: _$$_REQUIRE(_dependencyMap[10]).styles.backtext,
                children: "You WON"
              })]
            })]
          }), count === 0 ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            children: translations.map(function (translation, index) {
              return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                style: [{
                  opacity: count == 1 ? 0 : translation.opacity,
                  transform: [{
                    translateX: translation.animatedValueX
                  }, {
                    translateY: translation.animatedValueY
                  }]
                }, _$$_REQUIRE(_dependencyMap[10]).styles.animate],
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
                  style: {
                    width: 33,
                    height: 33
                  },
                  source: _$$_REQUIRE(_dependencyMap[11])
                })
              }, index);
            })
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: _$$_REQUIRE(_dependencyMap[10]).styles.viewcoin,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
            source: {
              uri: 'https://www.google.com/url?=&url=https%3A%2F%2Fwww.amazon.in%2FFeyarl-Treasure-Rectangle-Metallic-Finished%2Fdp%2FB07F69PLSK&psig=AOvVaw1fEBl7ppPrZ9ts1PmqII4h&ust=1704733888506000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCJCM3eTiy4MDFQAAAAAdAAAAABAD'
            },
            style: {
              width: 200,
              height: 200
            }
          }), flip ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: _$$_REQUIRE(_dependencyMap[10]).styles.buttonContainer,
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              activeOpacity: 0.8,
              style: [{
                width: 250,
                marginBottom: 0
              }, _$$_REQUIRE(_dependencyMap[10]).styles.clickview],
              onPress: handleAnimation,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: _$$_REQUIRE(_dependencyMap[10]).styles.buttonText,
                children: "Click on me to collect coins"
              })
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
              style: [_$$_REQUIRE(_dependencyMap[10]).styles.passingView, {
                transform: [{
                  translateX: animatedValue
                }]
              }]
            })]
          }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: _$$_REQUIRE(_dependencyMap[10]).styles.buttonContainer,
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              activeOpacity: 0.8,
              style: [{
                width: 250,
                marginBottom: 0
              }, _$$_REQUIRE(_dependencyMap[10]).styles.clickview],
              onPress: handleAnimation,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: _$$_REQUIRE(_dependencyMap[10]).styles.buttonText,
                children: "Click on above card to suprise"
              })
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
              style: [_$$_REQUIRE(_dependencyMap[10]).styles.passingView, {
                transform: [{
                  translateX: animatedValue
                }]
              }]
            })]
          })]
        }), flip ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
          style: _$$_REQUIRE(_dependencyMap[10]).styles.gold,
          source: {
            uri: 'https://img.freepik.com/premium-photo/gold-coin-treasure-old-pot-black-background_185126-1665.jpg?w=900'
          }
        }) : '']
      }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        onPress: function onPress() {
          return handleAnimation();
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _$$_REQUIRE(_dependencyMap[10]).styles.head,
          children: "click on me "
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _$$_REQUIRE(_dependencyMap[10]).styles.heade,
          children: "LETS START THE GAME !!!"
        })]
      })
    });
  };
  var _default = exports.default = Dashboard;
},439,[1,26,153,440,441,2,462,464,194,486,487,488]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.createShimmerPlaceholder = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var getOutputRange = function getOutputRange(width, isReversed) {
    return isReversed ? [width, -width] : [-width, width];
  };
  var ShimmerPlaceholder = /*#__PURE__*/function (_PureComponent) {
    (0, _inherits2.default)(ShimmerPlaceholder, _PureComponent);
    var _super = _createSuper(ShimmerPlaceholder);
    function ShimmerPlaceholder() {
      var _this;
      (0, _classCallCheck2.default)(this, ShimmerPlaceholder);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        beginShimmerPosition: new _reactNative.Animated.Value(-1)
      };
      _this.getAnimated = function () {
        var _this$props = _this.props,
          delay = _this$props.delay,
          duration = _this$props.duration,
          isInteraction = _this$props.isInteraction;
        return _reactNative.Animated.loop(_reactNative.Animated.timing(_this.state.beginShimmerPosition, {
          toValue: 1,
          delay: delay,
          duration: duration,
          useNativeDriver: _reactNative.Platform.OS !== "web",
          isInteraction: isInteraction
        }));
      };
      _this.animatedValue = _this.getAnimated();
      return _this;
    }
    (0, _createClass2.default)(ShimmerPlaceholder, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(BasedShimmerPlaceholder, Object.assign({}, this.props, {
          animatedValue: this.animatedValue,
          beginShimmerPosition: this.state.beginShimmerPosition
        }));
      }
    }]);
    return ShimmerPlaceholder;
  }(_react.PureComponent);
  ShimmerPlaceholder.defaultProps = {
    delay: 0,
    duration: 1000,
    isInteraction: true
  };
  var BasedShimmerPlaceholder = function BasedShimmerPlaceholder(props) {
    var _props$width = props.width,
      width = _props$width === undefined ? 200 : _props$width,
      _props$height = props.height,
      height = _props$height === undefined ? 15 : _props$height,
      _props$shimmerColors = props.shimmerColors,
      shimmerColors = _props$shimmerColors === undefined ? ["#ebebeb", "#c5c5c5", "#ebebeb"] : _props$shimmerColors,
      _props$isReversed = props.isReversed,
      isReversed = _props$isReversed === undefined ? false : _props$isReversed,
      _props$stopAutoRun = props.stopAutoRun,
      stopAutoRun = _props$stopAutoRun === undefined ? false : _props$stopAutoRun,
      visible = props.visible,
      _props$location = props.location,
      location = _props$location === undefined ? [0.3, 0.5, 0.7] : _props$location,
      style = props.style,
      contentStyle = props.contentStyle,
      shimmerStyle = props.shimmerStyle,
      _props$LinearGradient = props.LinearGradient,
      LinearGradient = _props$LinearGradient === undefined ? _reactNative.View : _props$LinearGradient,
      children = props.children,
      animatedValue = props.animatedValue,
      beginShimmerPosition = props.beginShimmerPosition,
      _props$shimmerWidthPe = props.shimmerWidthPercent,
      shimmerWidthPercent = _props$shimmerWidthPe === undefined ? 1 : _props$shimmerWidthPe,
      containerProps = props.containerProps,
      shimmerContainerProps = props.shimmerContainerProps,
      childrenContainerProps = props.childrenContainerProps;
    var linearTranslate = beginShimmerPosition.interpolate({
      inputRange: [-1, 1],
      outputRange: getOutputRange(width, isReversed)
    });
    _react.default.useEffect(function () {
      if (!stopAutoRun) {
        animatedValue.start();
      }
      return function () {
        animatedValue.stop();
      };
    }, [stopAutoRun]);
    _react.default.useEffect(function () {
      if (visible) {
        animatedValue.stop();
      }
      if (!visible && !stopAutoRun) {
        animatedValue.start();
      }
    }, [visible, stopAutoRun]);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, Object.assign({
      style: [!visible && {
        height: height,
        width: width
      }, styles.container, !visible && shimmerStyle, style]
    }, containerProps, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, Object.assign({
        style: [!visible && {
          width: 0,
          height: 0,
          opacity: 0
        }, visible && contentStyle]
      }, childrenContainerProps, {
        children: children
      })), !visible && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, Object.assign({
        style: {
          flex: 1,
          backgroundColor: shimmerColors[0]
        }
      }, shimmerContainerProps, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: {
            flex: 1,
            transform: [{
              translateX: linearTranslate
            }]
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(LinearGradient, {
            colors: shimmerColors,
            style: {
              flex: 1,
              width: width * shimmerWidthPercent
            },
            start: {
              x: -1,
              y: 0.5
            },
            end: {
              x: 2,
              y: 0.5
            },
            locations: location
          })
        })
      }))]
    }));
  };
  var styles = _reactNative.StyleSheet.create({
    container: {
      overflow: "hidden"
    }
  });

  /**
   * To create ShimmerPlaceholder by Linear Gradient. Only useful when you use 3rd party,
   * For example: react-native-linear-gradient
   * @param {Linear Gradient Component} LinearGradient - 'expo-linear-gradient' by default
   *
   * @example
   *
   * import LinearGradient from 'react-native-linear-gradient';
   * import { createShimmerPlaceholder } from 'react-native-shimmer-placeholder'
   *
   * const ShimmerPlaceHolder = createShimmerPlaceholder(LinearGradient)
   *
   * ...
   *
   * <ShimmerPlaceHolder />
   */
  var createShimmerPlaceholder = exports.createShimmerPlaceholder = function createShimmerPlaceholder() {
    var LinearGradient = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _reactNative.View;
    return _react.default.forwardRef(function (props, ref) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(ShimmerPlaceholder, Object.assign({
        LinearGradient: LinearGradient,
        ref: ref
      }, props));
    });
  };
  var _default = exports.default = ShimmerPlaceholder;
},440,[1,5,6,13,15,12,153,2,194]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createAnimatableComponent = exports.View = exports.Text = exports.Image = undefined;
  Object.defineProperty(exports, "createAnimation", {
    enumerable: true,
    get: function get() {
      return _createAnimation.default;
    }
  });
  Object.defineProperty(exports, "initializeRegistryWithDefinitions", {
    enumerable: true,
    get: function get() {
      return _$$_REQUIRE(_dependencyMap[1]).initializeRegistryWithDefinitions;
    }
  });
  Object.defineProperty(exports, "registerAnimation", {
    enumerable: true,
    get: function get() {
      return _$$_REQUIRE(_dependencyMap[1]).registerAnimation;
    }
  });
  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);
  var _createAnimatableComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var ANIMATION_DEFINITIONS = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));
  var _createAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  (0, _$$_REQUIRE(_dependencyMap[1]).initializeRegistryWithDefinitions)(ANIMATION_DEFINITIONS);
  var createAnimatableComponent = exports.createAnimatableComponent = _createAnimatableComponent.default;
  var View = exports.View = (0, _createAnimatableComponent.default)(_reactNative.View);
  var Text = exports.Text = (0, _createAnimatableComponent.default)(_reactNative.Text);
  var Image = exports.Image = (0, _createAnimatableComponent.default)(_reactNative.Image);
},441,[1,442,2,445,450,443]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAnimationByName = getAnimationByName;
  exports.getAnimationNames = getAnimationNames;
  exports.initializeRegistryWithDefinitions = initializeRegistryWithDefinitions;
  exports.registerAnimation = registerAnimation;
  var _createAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var animationRegistry = {};
  function registerAnimation(animationName, animation) {
    animationRegistry[animationName] = animation;
  }
  function getAnimationByName(animationName) {
    return animationRegistry[animationName];
  }
  function getAnimationNames() {
    return Object.keys(animationRegistry);
  }
  function initializeRegistryWithDefinitions(definitions) {
    Object.keys(definitions).forEach(function (animationName) {
      registerAnimation(animationName, (0, _createAnimation.default)(definitions[animationName]));
    });
  }
},442,[1,443]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimation;
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  function compareNumbers(a, b) {
    return a - b;
  }
  function notNull(value) {
    return value !== null;
  }
  function parsePosition(value) {
    if (value === 'from') {
      return 0;
    }
    if (value === 'to') {
      return 1;
    }
    var parsed = parseFloat(value, 10);
    if (Number.isNaN(parsed) || parsed < 0 || parsed > 1) {
      return null;
    }
    return parsed;
  }
  var cache = {};
  function createAnimation(definition) {
    var cacheKey = JSON.stringify(definition);
    if (cache[cacheKey]) {
      return cache[cacheKey];
    }
    var positions = Object.keys(definition).map(parsePosition).filter(notNull);
    positions.sort(compareNumbers);
    if (positions.length < 2) {
      throw new Error('Animation definitions must have at least two values.');
    }
    var compiled = {};
    if (definition.easing) {
      compiled.easing = definition.easing;
    }
    if (definition.style) {
      compiled.style = definition.style;
    }
    var _loop = function _loop() {
      var position = positions[i];
      var keyframe = definition[position];
      if (!keyframe) {
        if (position === 0) {
          keyframe = definition.from;
        } else if (position === 1) {
          keyframe = definition.to;
        }
      }
      if (!keyframe) {
        throw new Error('Missing animation keyframe, this should not happen');
      }
      keyframe = (0, _flattenStyle.default)(keyframe);
      Object.keys(keyframe).forEach(function (key) {
        if (!(key in compiled)) {
          compiled[key] = {
            inputRange: [],
            outputRange: []
          };
        }
        compiled[key].inputRange.push(position);
        compiled[key].outputRange.push(keyframe[key]);
      });
    };
    for (var i = 0; i < positions.length; i += 1) {
      _loop();
    }
    cache[cacheKey] = compiled;
    return compiled;
  }
},443,[1,444]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = flattenStyle;
  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);
  function flattenStyle(style) {
    var flatStyle = Object.assign({}, _reactNative.StyleSheet.flatten(style));
    if (flatStyle.transform) {
      flatStyle.transform.forEach(function (transform) {
        var key = Object.keys(transform)[0];
        flatStyle[key] = transform[key];
      });
      delete flatStyle.transform;
    }
    return flatStyle;
  }
},444,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimatableComponent;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));
  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);
  var _wrapStyleTransforms = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));
  var _getStyleValues = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
  var _createAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));
  var _easing = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[15]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } } // These styles are not number based and thus needs to be interpolated
  var INTERPOLATION_STYLE_PROPERTIES = [
  // Transform styles
  'rotate', 'rotateX', 'rotateY', 'rotateZ', 'skewX', 'skewY', 'transformMatrix',
  // View styles
  'backgroundColor', 'borderColor', 'borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor', 'shadowColor',
  // Text styles
  'color', 'textDecorationColor',
  // Image styles
  'tintColor'];
  var ZERO_CLAMPED_STYLE_PROPERTIES = ['width', 'height'];

  // Create a copy of `source` without `keys`
  function omit(keys, source) {
    var filtered = {};
    Object.keys(source).forEach(function (key) {
      if (keys.indexOf(key) === -1) {
        filtered[key] = source[key];
      }
    });
    return filtered;
  }

  // Yes it's absurd, but actually fast
  function deepEquals(a, b) {
    return a === b || JSON.stringify(a) === JSON.stringify(b);
  }

  // Determine to what value the animation should tween to
  function getAnimationTarget(iteration, direction) {
    switch (direction) {
      case 'reverse':
        return 0;
      case 'alternate':
        return iteration % 2 ? 0 : 1;
      case 'alternate-reverse':
        return iteration % 2 ? 1 : 0;
      case 'normal':
      default:
        return 1;
    }
  }

  // Like getAnimationTarget but opposite
  function getAnimationOrigin(iteration, direction) {
    return getAnimationTarget(iteration, direction) ? 0 : 1;
  }
  function getCompiledAnimation(animation) {
    if (typeof animation === 'string') {
      var compiledAnimation = (0, _$$_REQUIRE(_dependencyMap[16]).getAnimationByName)(animation);
      if (!compiledAnimation) {
        throw new Error(`No animation registred by the name of ${animation}`);
      }
      return compiledAnimation;
    }
    return (0, _createAnimation.default)(animation);
  }
  function makeInterpolatedStyle(compiledAnimation, animationValue) {
    var style = {};
    Object.keys(compiledAnimation).forEach(function (key) {
      if (key === 'style') {
        Object.assign(style, compiledAnimation.style);
      } else if (key !== 'easing') {
        style[key] = animationValue.interpolate(compiledAnimation[key]);
      }
    });
    return (0, _wrapStyleTransforms.default)(style);
  }
  function transitionToValue(property, transitionValue, toValue, duration, easing) {
    var useNativeDriver = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
    var delay = arguments.length > 6 ? arguments[6] : undefined;
    var onTransitionBegin = arguments.length > 7 ? arguments[7] : undefined;
    var onTransitionEnd = arguments.length > 8 ? arguments[8] : undefined;
    var animation = duration || easing || delay ? _reactNative.Animated.timing(transitionValue, {
      toValue: toValue,
      delay: delay,
      duration: duration || 1000,
      easing: typeof easing === 'function' ? easing : _easing.default[easing || 'ease'],
      useNativeDriver: useNativeDriver
    }) : _reactNative.Animated.spring(transitionValue, {
      toValue: toValue,
      useNativeDriver: useNativeDriver
    });
    setTimeout(function () {
      return onTransitionBegin(property);
    }, delay);
    animation.start(function () {
      return onTransitionEnd(property);
    });
  }

  // Make (almost) any component animatable, similar to Animated.createAnimatedComponent
  function createAnimatableComponent(WrappedComponent) {
    var _class;
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    var Animatable = _reactNative.Animated.createAnimatedComponent(WrappedComponent);
    return _class = /*#__PURE__*/function (_Component) {
      (0, _inherits2.default)(AnimatableComponent, _Component);
      var _super = _createSuper(AnimatableComponent);
      function AnimatableComponent(props) {
        var _this;
        (0, _classCallCheck2.default)(this, AnimatableComponent);
        _this = _super.call(this, props);
        _this.ref = null;
        _this.handleRef = function (ref) {
          _this.ref = ref;
        };
        var animationValue = new _reactNative.Animated.Value(getAnimationOrigin(0, _this.props.direction));
        var animationStyle = {};
        var compiledAnimation = {};
        if (props.animation) {
          compiledAnimation = getCompiledAnimation(props.animation);
          animationStyle = makeInterpolatedStyle(compiledAnimation, animationValue);
        }
        _this.state = {
          animationValue: animationValue,
          animationStyle: animationStyle,
          compiledAnimation: compiledAnimation,
          transitionStyle: {},
          transitionValues: {},
          currentTransitionValues: {}
        };
        if (props.transition) {
          _this.state = Object.assign({}, _this.state, _this.initializeTransitionState(props.transition));
        }
        _this.delayTimer = null;

        // Alias registered animations for backwards compatibility
        (0, _$$_REQUIRE(_dependencyMap[16]).getAnimationNames)().forEach(function (animationName) {
          if (!(animationName in (0, _assertThisInitialized2.default)(_this))) {
            _this[animationName] = _this.animate.bind((0, _assertThisInitialized2.default)(_this), animationName);
          }
        });
        return _this;
      }
      (0, _createClass2.default)(AnimatableComponent, [{
        key: "initializeTransitionState",
        value: function initializeTransitionState(transitionKeys) {
          var transitionValues = {};
          var styleValues = {};
          var currentTransitionValues = (0, _getStyleValues.default)(transitionKeys, this.props.style);
          Object.keys(currentTransitionValues).forEach(function (key) {
            var value = currentTransitionValues[key];
            if (INTERPOLATION_STYLE_PROPERTIES.indexOf(key) !== -1 || typeof value !== 'number') {
              transitionValues[key] = new _reactNative.Animated.Value(0);
              styleValues[key] = value;
            } else {
              var animationValue = new _reactNative.Animated.Value(value);
              transitionValues[key] = animationValue;
              styleValues[key] = animationValue;
            }
          });
          return {
            currentTransitionValues: currentTransitionValues,
            transitionStyle: styleValues,
            transitionValues: transitionValues
          };
        }
      }, {
        key: "getTransitionState",
        value: function getTransitionState(keys) {
          var _this2 = this;
          var transitionKeys = typeof keys === 'string' ? [keys] : keys;
          var _this$state = this.state,
            transitionValues = _this$state.transitionValues,
            currentTransitionValues = _this$state.currentTransitionValues,
            transitionStyle = _this$state.transitionStyle;
          var missingKeys = transitionKeys.filter(function (key) {
            return !_this2.state.transitionValues[key];
          });
          if (missingKeys.length) {
            var transitionState = this.initializeTransitionState(missingKeys);
            transitionValues = Object.assign({}, transitionValues, transitionState.transitionValues);
            currentTransitionValues = Object.assign({}, currentTransitionValues, transitionState.currentTransitionValues);
            transitionStyle = Object.assign({}, transitionStyle, transitionState.transitionStyle);
          }
          return {
            transitionValues: transitionValues,
            currentTransitionValues: currentTransitionValues,
            transitionStyle: transitionStyle
          };
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.ref) {
            this.ref.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this3 = this;
          var _this$props = this.props,
            animation = _this$props.animation,
            duration = _this$props.duration,
            delay = _this$props.delay,
            onAnimationBegin = _this$props.onAnimationBegin,
            iterationDelay = _this$props.iterationDelay;
          if (animation) {
            var startAnimation = function startAnimation() {
              onAnimationBegin();
              _this3.startAnimation(duration, 0, iterationDelay, function (endState) {
                return _this3.props.onAnimationEnd(endState);
              });
              _this3.delayTimer = null;
            };
            if (delay) {
              this.delayTimer = setTimeout(startAnimation, delay);
            } else {
              startAnimation();
            }
          }
        }

        // eslint-disable-next-line camelcase
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(props) {
          var _this4 = this;
          var animation = props.animation,
            delay = props.delay,
            duration = props.duration,
            easing = props.easing,
            iterationDelay = props.iterationDelay,
            transition = props.transition,
            onAnimationBegin = props.onAnimationBegin;
          if (transition) {
            var values = (0, _getStyleValues.default)(transition, props.style);
            this.transitionTo(values, duration, easing, delay);
          } else if (!deepEquals(animation, this.props.animation)) {
            if (animation) {
              if (this.delayTimer) {
                this.setAnimation(animation);
              } else {
                onAnimationBegin();
                this.animate(animation, duration, iterationDelay).then(function (endState) {
                  return _this4.props.onAnimationEnd(endState);
                });
              }
            } else {
              this.stopAnimation();
            }
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.delayTimer) {
            clearTimeout(this.delayTimer);
          }
        }
      }, {
        key: "setAnimation",
        value: function setAnimation(animation, callback) {
          var compiledAnimation = getCompiledAnimation(animation);
          this.setState(function (state) {
            return {
              animationStyle: makeInterpolatedStyle(compiledAnimation, state.animationValue),
              compiledAnimation: compiledAnimation
            };
          }, callback);
        }
      }, {
        key: "animate",
        value: function animate(animation, duration, iterationDelay) {
          var _this5 = this;
          return new Promise(function (resolve) {
            _this5.setAnimation(animation, function () {
              _this5.startAnimation(duration, 0, iterationDelay, resolve);
            });
          });
        }
      }, {
        key: "stopAnimation",
        value: function stopAnimation() {
          this.setState({
            scheduledAnimation: false,
            animationStyle: {}
          });
          this.state.animationValue.stopAnimation();
          if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
          }
        }
      }, {
        key: "startAnimation",
        value: function startAnimation(duration, iteration, iterationDelay, callback) {
          var _this6 = this;
          var _this$state2 = this.state,
            animationValue = _this$state2.animationValue,
            compiledAnimation = _this$state2.compiledAnimation;
          var _this$props2 = this.props,
            direction = _this$props2.direction,
            iterationCount = _this$props2.iterationCount,
            useNativeDriver = _this$props2.useNativeDriver,
            isInteraction = _this$props2.isInteraction;
          var easing = this.props.easing || compiledAnimation.easing || 'ease';
          var currentIteration = iteration || 0;
          var fromValue = getAnimationOrigin(currentIteration, direction);
          var toValue = getAnimationTarget(currentIteration, direction);
          animationValue.setValue(fromValue);
          if (typeof easing === 'string') {
            easing = _easing.default[easing];
          }
          // Reverse easing if on the way back
          var reversed = direction === 'reverse' || direction === 'alternate' && !toValue || direction === 'alternate-reverse' && !toValue;
          if (reversed) {
            easing = _reactNative.Easing.out(easing);
          }
          var config = {
            toValue: toValue,
            easing: easing,
            isInteraction: typeof isInteraction !== 'undefined' ? isInteraction : iterationCount <= 1,
            duration: duration || this.props.duration || 1000,
            useNativeDriver: useNativeDriver,
            delay: iterationDelay && currentIteration > 0 ? iterationDelay : 0
          };
          _reactNative.Animated.timing(animationValue, config).start(function (endState) {
            currentIteration += 1;
            if (endState.finished && _this6.props.animation && (iterationCount === 'infinite' || currentIteration < iterationCount)) {
              _this6.startAnimation(duration, currentIteration, iterationDelay, callback);
            } else if (callback) {
              callback(endState);
            }
          });
        }
      }, {
        key: "transition",
        value: function transition(fromValues, toValues, duration, easing) {
          var _this7 = this;
          var fromValuesFlat = (0, _flattenStyle.default)(fromValues);
          var toValuesFlat = (0, _flattenStyle.default)(toValues);
          var transitionKeys = Object.keys(toValuesFlat);
          var _this$getTransitionSt = this.getTransitionState(transitionKeys),
            transitionValues = _this$getTransitionSt.transitionValues,
            currentTransitionValues = _this$getTransitionSt.currentTransitionValues,
            transitionStyle = _this$getTransitionSt.transitionStyle;
          transitionKeys.forEach(function (property) {
            var fromValue = fromValuesFlat[property];
            var toValue = toValuesFlat[property];
            var transitionValue = transitionValues[property];
            if (!transitionValue) {
              transitionValue = new _reactNative.Animated.Value(0);
            }
            var needsInterpolation = INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1 || typeof value !== 'number';
            var needsZeroClamping = ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;
            if (needsInterpolation) {
              transitionValue.setValue(0);
              transitionStyle[property] = transitionValue.interpolate({
                inputRange: [0, 1],
                outputRange: [fromValue, toValue]
              });
              currentTransitionValues[property] = toValue;
              toValuesFlat[property] = 1;
            } else {
              if (needsZeroClamping) {
                transitionStyle[property] = transitionValue.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, 1],
                  extrapolateLeft: 'clamp'
                });
                currentTransitionValues[property] = toValue;
              } else {
                transitionStyle[property] = transitionValue;
              }
              transitionValue.setValue(fromValue);
            }
          });
          this.setState({
            transitionValues: transitionValues,
            transitionStyle: transitionStyle,
            currentTransitionValues: currentTransitionValues
          }, function () {
            _this7.transitionToValues(toValuesFlat, duration || _this7.props.duration, easing, _this7.props.delay);
          });
        }
      }, {
        key: "transitionTo",
        value: function transitionTo(toValues, duration, easing, delay) {
          var _this8 = this;
          var currentTransitionValues = this.state.currentTransitionValues;
          var toValuesFlat = (0, _flattenStyle.default)(toValues);
          var transitions = {
            from: {},
            to: {}
          };
          Object.keys(toValuesFlat).forEach(function (property) {
            var toValue = toValuesFlat[property];
            var needsInterpolation = INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1 || typeof value !== 'number';
            var needsZeroClamping = ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;
            var transitionStyle = _this8.state.transitionStyle[property];
            var transitionValue = _this8.state.transitionValues[property];
            if (!needsInterpolation && !needsZeroClamping && transitionStyle && transitionStyle === transitionValue) {
              transitionToValue(property, transitionValue, toValue, duration, easing, _this8.props.useNativeDriver, delay, function (prop) {
                return _this8.props.onTransitionBegin(prop);
              }, function (prop) {
                return _this8.props.onTransitionEnd(prop);
              });
            } else {
              var currentTransitionValue = currentTransitionValues[property];
              if (typeof currentTransitionValue === 'undefined' && _this8.props.style) {
                var style = (0, _getStyleValues.default)(property, _this8.props.style);
                currentTransitionValue = style[property];
              }
              transitions.from[property] = currentTransitionValue;
              transitions.to[property] = toValue;
            }
          });
          if (Object.keys(transitions.from).length) {
            this.transition(transitions.from, transitions.to, duration, easing);
          }
        }
      }, {
        key: "transitionToValues",
        value: function transitionToValues(toValues, duration, easing, delay) {
          var _this9 = this;
          Object.keys(toValues).forEach(function (property) {
            var transitionValue = _this9.state.transitionValues[property];
            var toValue = toValues[property];
            transitionToValue(property, transitionValue, toValue, duration, easing, _this9.props.useNativeDriver, delay, function (prop) {
              return _this9.props.onTransitionBegin(prop);
            }, function (prop) {
              return _this9.props.onTransitionEnd(prop);
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props3 = this.props,
            style = _this$props3.style,
            animation = _this$props3.animation,
            transition = _this$props3.transition;
          if (animation && transition) {
            throw new Error('You cannot combine animation and transition props');
          }
          var restProps = omit(['animation', 'duration', 'direction', 'delay', 'easing', 'iterationCount', 'iterationDelay', 'onAnimationBegin', 'onAnimationEnd', 'onTransitionBegin', 'onTransitionEnd', 'style', 'transition', 'useNativeDriver', 'isInteraction'], this.props);
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(Animatable, Object.assign({
            ref: this.handleRef,
            style: [style, this.state.animationStyle, (0, _wrapStyleTransforms.default)(this.state.transitionStyle)]
          }, restProps));
        }
      }]);
      return AnimatableComponent;
    }(_react.Component), _class.displayName = `withAnimatable(${wrappedComponentName})`, _class.propTypes = {
      animation: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
      duration: _propTypes.default.number,
      direction: _propTypes.default.oneOf(['normal', 'reverse', 'alternate', 'alternate-reverse']),
      delay: _propTypes.default.number,
      easing: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.keys(_easing.default)), _propTypes.default.func]),
      iterationCount: function iterationCount(props, propName) {
        var val = props[propName];
        if (val !== 'infinite' && !(typeof val === 'number' && val >= 1)) {
          return new Error('iterationCount must be a positive number or "infinite"');
        }
        return null;
      },
      iterationDelay: _propTypes.default.number,
      onAnimationBegin: _propTypes.default.func,
      onAnimationEnd: _propTypes.default.func,
      onTransitionBegin: _propTypes.default.func,
      onTransitionEnd: _propTypes.default.func,
      style: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.array, _propTypes.default.object]),
      transition: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),
      useNativeDriver: _propTypes.default.bool,
      isInteraction: _propTypes.default.bool
    }, _class.defaultProps = {
      animation: undefined,
      delay: 0,
      direction: 'normal',
      duration: undefined,
      easing: undefined,
      iterationCount: 1,
      iterationDelay: 0,
      onAnimationBegin: function onAnimationBegin() {},
      onAnimationEnd: function onAnimationEnd() {},
      onTransitionBegin: function onTransitionBegin() {},
      onTransitionEnd: function onTransitionEnd() {},
      style: undefined,
      transition: undefined,
      useNativeDriver: false,
      isInteraction: undefined
    }, _class;
  }
},445,[1,5,6,16,13,15,12,153,259,2,446,447,444,443,449,194,442]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = wrapStyleTransforms;
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  // These styles need to be nested in a transform array
  var TRANSFORM_STYLE_PROPERTIES = ['perspective', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'skewX', 'skewY', 'translateX', 'translateY'];

  // Transforms { translateX: 1 } to { transform: [{ translateX: 1 }]}
  function wrapStyleTransforms(style) {
    var wrapped = {};
    Object.keys(style).forEach(function (key) {
      if (TRANSFORM_STYLE_PROPERTIES.indexOf(key) !== -1) {
        if (!wrapped.transform) {
          wrapped.transform = [];
        }
        wrapped.transform.push((0, _defineProperty2.default)({}, key, style[key]));
      } else {
        wrapped[key] = style[key];
      }
    });
    return wrapped;
  }
},446,[1,170]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getStyleValues;
  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _getDefaultStyleValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  // Returns a flattened version of style with only `keys` values.
  function getStyleValues(keys, style) {
    var values = {};
    var flatStyle = (0, _flattenStyle.default)(style);
    (typeof keys === 'string' ? [keys] : keys).forEach(function (key) {
      values[key] = key in flatStyle ? flatStyle[key] : (0, _getDefaultStyleValue.default)(key, flatStyle);
    });
    return values;
  }
},447,[1,444,448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getDefaultStyleValue;
  /* eslint-disable no-plusplus */

  var DIRECTIONAL_FALLBACKS = {
    Top: ['Vertical', ''],
    Bottom: ['Vertical', ''],
    Vertical: [''],
    Left: ['Horizontal', ''],
    Right: ['Horizontal', ''],
    Horizontal: ['']
  };
  var DIRECTIONAL_SUFFICES = Object.keys(DIRECTIONAL_FALLBACKS);
  function getDefaultStyleValue(key, flatStyle) {
    if (key === 'backgroundColor') {
      return 'rgba(0,0,0,0)';
    }
    if (key === 'color' || key.indexOf('Color') !== -1) {
      return 'rgba(0,0,0,1)';
    }
    if (key.indexOf('rotate') === 0 || key.indexOf('skew') === 0) {
      return '0deg';
    }
    if (key === 'opacity' || key.indexOf('scale') === 0) {
      return 1;
    }
    if (key === 'fontSize') {
      return 14;
    }
    if (key.indexOf('margin') === 0 || key.indexOf('padding') === 0) {
      for (var suffix, i = 0; i < DIRECTIONAL_SUFFICES.length; i++) {
        suffix = DIRECTIONAL_SUFFICES[i];
        if (key.substr(-suffix.length) === suffix) {
          var prefix = key.substr(0, key.length - suffix.length);
          var fallbacks = DIRECTIONAL_FALLBACKS[suffix];
          for (var fallback, j = 0; j < fallbacks.length; j++) {
            fallback = prefix + fallbacks[j];
            if (fallback in flatStyle) {
              return flatStyle[fallback];
            }
          }
          break;
        }
      }
    }
    return 0;
  }
},448,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);
  var EASING_FUNCTIONS = {
    // Standard CSS easings

    linear: _reactNative.Easing.linear,
    ease: _reactNative.Easing.bezier(0.25, 0.1, 0.25, 1),
    'ease-in': _reactNative.Easing.bezier(0.42, 0, 1, 1),
    'ease-out': _reactNative.Easing.bezier(0, 0, 0.58, 1),
    'ease-in-out': _reactNative.Easing.bezier(0.42, 0, 0.58, 1),
    // Penner Equations - http://matthewlein.com/ceaser/ & http://easings.net

    'ease-in-cubic': _reactNative.Easing.bezier(0.55, 0.055, 0.675, 0.19),
    'ease-out-cubic': _reactNative.Easing.bezier(0.215, 0.61, 0.355, 1.0),
    'ease-in-out-cubic': _reactNative.Easing.bezier(0.645, 0.045, 0.355, 1.0),
    'ease-in-circ': _reactNative.Easing.bezier(0.6, 0.04, 0.98, 0.335),
    'ease-out-circ': _reactNative.Easing.bezier(0.075, 0.82, 0.165, 1.0),
    'ease-in-out-circ': _reactNative.Easing.bezier(0.785, 0.135, 0.15, 0.86),
    'ease-in-expo': _reactNative.Easing.bezier(0.95, 0.05, 0.795, 0.035),
    'ease-out-expo': _reactNative.Easing.bezier(0.19, 1.0, 0.22, 1.0),
    'ease-in-out-expo': _reactNative.Easing.bezier(1.0, 0.0, 0.0, 1.0),
    'ease-in-quad': _reactNative.Easing.bezier(0.55, 0.085, 0.68, 0.53),
    'ease-out-quad': _reactNative.Easing.bezier(0.25, 0.46, 0.45, 0.94),
    'ease-in-out-quad': _reactNative.Easing.bezier(0.455, 0.03, 0.515, 0.955),
    'ease-in-quart': _reactNative.Easing.bezier(0.895, 0.03, 0.685, 0.22),
    'ease-out-quart': _reactNative.Easing.bezier(0.165, 0.84, 0.44, 1.0),
    'ease-in-out-quart': _reactNative.Easing.bezier(0.77, 0.0, 0.175, 1.0),
    'ease-in-quint': _reactNative.Easing.bezier(0.755, 0.05, 0.855, 0.06),
    'ease-out-quint': _reactNative.Easing.bezier(0.23, 1.0, 0.32, 1.0),
    'ease-in-out-quint': _reactNative.Easing.bezier(0.86, 0.0, 0.07, 1.0),
    'ease-in-sine': _reactNative.Easing.bezier(0.47, 0.0, 0.745, 0.715),
    'ease-out-sine': _reactNative.Easing.bezier(0.39, 0.575, 0.565, 1.0),
    'ease-in-out-sine': _reactNative.Easing.bezier(0.445, 0.05, 0.55, 0.95),
    'ease-in-back': _reactNative.Easing.bezier(0.6, -0.28, 0.735, 0.045),
    'ease-out-back': _reactNative.Easing.bezier(0.175, 0.885, 0.32, 1.275),
    'ease-in-out-back': _reactNative.Easing.bezier(0.68, -0.55, 0.265, 1.55)
  };
  var _default = exports.default = EASING_FUNCTIONS;
},449,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[0])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[0])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[0])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[1])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[1])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[1])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[2])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[2])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[2])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[3])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[3])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[3])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[4])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[4])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[4])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[5])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[5])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[5])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[6])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[6])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[6])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[7])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[7])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[7])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[8])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[8])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[8])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[9])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[9])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[9])[key];
      }
    });
  });
  Object.keys(_$$_REQUIRE(_dependencyMap[10])).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _$$_REQUIRE(_dependencyMap[10])[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _$$_REQUIRE(_dependencyMap[10])[key];
      }
    });
  });
},450,[451,452,453,454,455,456,457,458,459,460,461]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.wobble = exports.tada = exports.swing = exports.shake = exports.rubberBand = exports.rotate = exports.pulse = exports.jello = exports.flash = exports.bounce = undefined;
  var bounce = exports.bounce = {
    0: {
      translateY: 0
    },
    0.2: {
      translateY: 0
    },
    0.4: {
      translateY: -30
    },
    0.43: {
      translateY: -30
    },
    0.53: {
      translateY: 0
    },
    0.7: {
      translateY: -15
    },
    0.8: {
      translateY: 0
    },
    0.9: {
      translateY: -4
    },
    1: {
      translateY: 0
    }
  };
  var flash = exports.flash = {
    0: {
      opacity: 1
    },
    0.25: {
      opacity: 0
    },
    0.5: {
      opacity: 1
    },
    0.75: {
      opacity: 0
    },
    1: {
      opacity: 1
    }
  };
  var jello = exports.jello = {
    0: {
      skewX: '0deg',
      skewY: '0deg'
    },
    0.111: {
      skewX: '0deg',
      skewY: '0deg'
    },
    0.222: {
      skewX: '-12.5deg',
      skewY: '-12.5deg'
    },
    0.333: {
      skewX: '6.25deg',
      skewY: '6.25deg'
    },
    0.444: {
      skewX: '-3.125deg',
      skewY: '-3.125deg'
    },
    0.555: {
      skewX: '1.5625deg',
      skewY: '1.5625deg'
    },
    0.666: {
      skewX: '-0.78125deg',
      skewY: '-0.78125deg'
    },
    0.777: {
      skewX: '0.390625deg',
      skewY: '0.390625deg'
    },
    0.888: {
      skewX: '-0.1953125deg',
      skewY: '-0.1953125deg'
    },
    1: {
      skewX: '0deg',
      skewY: '0deg'
    }
  };
  var pulse = exports.pulse = {
    0: {
      scale: 1
    },
    0.5: {
      scale: 1.05
    },
    1: {
      scale: 1
    }
  };
  var rotate = exports.rotate = {
    0: {
      rotate: '0deg'
    },
    0.25: {
      rotate: '90deg'
    },
    0.5: {
      rotate: '180deg'
    },
    0.75: {
      rotate: '270deg'
    },
    1: {
      rotate: '360deg'
    }
  };
  var shake = exports.shake = {
    0: {
      translateX: 0
    },
    0.1: {
      translateX: -10
    },
    0.2: {
      translateX: 10
    },
    0.3: {
      translateX: -10
    },
    0.4: {
      translateX: 10
    },
    0.5: {
      translateX: -10
    },
    0.6: {
      translateX: 10
    },
    0.7: {
      translateX: -10
    },
    0.8: {
      translateX: 10
    },
    0.9: {
      translateX: -10
    },
    1: {
      translateX: 0
    }
  };
  var swing = exports.swing = {
    0: {
      rotate: '0deg'
    },
    0.2: {
      rotate: '15deg'
    },
    0.4: {
      rotate: '-10deg'
    },
    0.6: {
      rotate: '5deg'
    },
    0.8: {
      rotate: '-5deg'
    },
    1: {
      rotate: '0deg'
    }
  };
  var rubberBand = exports.rubberBand = {
    0: {
      scaleX: 1,
      scaleY: 1
    },
    0.3: {
      scaleX: 1.25,
      scaleY: 0.75
    },
    0.4: {
      scaleX: 0.75,
      scaleY: 1.25
    },
    0.5: {
      scaleX: 1.15,
      scaleY: 0.85
    },
    0.65: {
      scaleX: 0.95,
      scaleY: 1.05
    },
    0.75: {
      scaleX: 1.05,
      scaleY: 0.95
    },
    1: {
      scaleX: 1,
      scaleY: 1
    }
  };
  var tada = exports.tada = {
    0: {
      scale: 1,
      rotate: '0deg'
    },
    0.1: {
      scale: 0.9,
      rotate: '-3deg'
    },
    0.2: {
      scale: 0.9,
      rotate: '-3deg'
    },
    0.3: {
      scale: 1.1,
      rotate: '-3deg'
    },
    0.4: {
      rotate: '3deg'
    },
    0.5: {
      rotate: '-3deg'
    },
    0.6: {
      rotate: '3deg'
    },
    0.7: {
      rotate: '-3deg'
    },
    0.8: {
      rotate: '3deg'
    },
    0.9: {
      scale: 1.1,
      rotate: '3deg'
    },
    1: {
      scale: 1,
      rotate: '0deg'
    }
  };
  var wobble = exports.wobble = {
    0: {
      translateX: 0,
      rotate: '0deg'
    },
    0.15: {
      translateX: -25,
      rotate: '-5deg'
    },
    0.3: {
      translateX: 20,
      rotate: '3deg'
    },
    0.45: {
      translateX: -15,
      rotate: '-3deg'
    },
    0.6: {
      translateX: 10,
      rotate: '2deg'
    },
    0.75: {
      translateX: -5,
      rotate: '-1deg'
    },
    1: {
      translateX: 0,
      rotate: '0deg'
    }
  };
},451,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.bounceInUp = exports.bounceInRight = exports.bounceInLeft = exports.bounceInDown = exports.bounceIn = undefined;
  var bounceIn = exports.bounceIn = {
    0: {
      opacity: 0,
      scale: 0.3
    },
    0.2: {
      scale: 1.1
    },
    0.4: {
      scale: 0.9
    },
    0.6: {
      opacity: 1,
      scale: 1.03
    },
    0.8: {
      scale: 0.97
    },
    1: {
      opacity: 1,
      scale: 1
    }
  };
  var bounceInUp = exports.bounceInUp = {
    0: {
      opacity: 0,
      translateY: 800
    },
    0.6: {
      opacity: 1,
      translateY: -25
    },
    0.75: {
      translateY: 10
    },
    0.9: {
      translateY: -5
    },
    1: {
      translateY: 0
    }
  };
  var bounceInDown = exports.bounceInDown = {
    0: {
      opacity: 0,
      translateY: -800
    },
    0.6: {
      opacity: 1,
      translateY: 25
    },
    0.75: {
      translateY: -10
    },
    0.9: {
      translateY: 5
    },
    1: {
      translateY: 0
    }
  };
  var bounceInRight = exports.bounceInRight = {
    0: {
      opacity: 0,
      translateX: 600
    },
    0.6: {
      opacity: 1,
      translateX: -20
    },
    0.75: {
      translateX: 8
    },
    0.9: {
      translateX: -4
    },
    1: {
      translateX: 0
    }
  };
  var bounceInLeft = exports.bounceInLeft = {
    0: {
      opacity: 0,
      translateX: -600
    },
    0.6: {
      opacity: 1,
      translateX: 20
    },
    0.75: {
      translateX: -8
    },
    0.9: {
      translateX: 4
    },
    1: {
      translateX: 0
    }
  };
},452,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.bounceOutUp = exports.bounceOutRight = exports.bounceOutLeft = exports.bounceOutDown = exports.bounceOut = undefined;
  var bounceOut = exports.bounceOut = {
    0: {
      opacity: 1,
      scale: 1
    },
    0.2: {
      scale: 0.9
    },
    0.5: {
      opacity: 1,
      scale: 1.11
    },
    0.55: {
      scale: 1.11
    },
    1: {
      opacity: 0,
      scale: 0.3
    }
  };
  var bounceOutUp = exports.bounceOutUp = {
    0: {
      opacity: 1,
      translateY: 0
    },
    0.2: {
      opacity: 1,
      translateY: -10
    },
    0.4: {
      translateY: 20
    },
    0.45: {
      translateY: 20
    },
    0.55: {
      opacity: 1
    },
    1: {
      opacity: 0,
      translateY: -800
    }
  };
  var bounceOutDown = exports.bounceOutDown = {
    0: {
      opacity: 1,
      translateY: 0
    },
    0.2: {
      opacity: 1,
      translateY: 10
    },
    0.4: {
      translateY: -20
    },
    0.45: {
      translateY: -20
    },
    0.55: {
      opacity: 1
    },
    1: {
      opacity: 0,
      translateY: 800
    }
  };
  var bounceOutRight = exports.bounceOutRight = {
    0: {
      opacity: 1,
      translateX: 0
    },
    0.2: {
      opacity: 1,
      translateX: 10
    },
    0.4: {
      translateX: -20
    },
    0.45: {
      translateX: -20
    },
    0.55: {
      opacity: 1
    },
    1: {
      opacity: 0,
      translateX: 600
    }
  };
  var bounceOutLeft = exports.bounceOutLeft = {
    0: {
      opacity: 1,
      translateX: 0
    },
    0.2: {
      opacity: 1,
      translateX: -10
    },
    0.4: {
      translateX: 20
    },
    0.45: {
      translateX: 20
    },
    0.55: {
      opacity: 1
    },
    1: {
      opacity: 0,
      translateX: -600
    }
  };
},453,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fadeInUpBig = exports.fadeInUp = exports.fadeInRightBig = exports.fadeInRight = exports.fadeInLeftBig = exports.fadeInLeft = exports.fadeInDownBig = exports.fadeInDown = exports.fadeIn = undefined;
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  function makeFadeInTranslation(translationType, fromValue) {
    return {
      from: (0, _defineProperty2.default)({
        opacity: 0
      }, translationType, fromValue),
      to: (0, _defineProperty2.default)({
        opacity: 1
      }, translationType, 0)
    };
  }
  var fadeIn = exports.fadeIn = {
    from: {
      opacity: 0
    },
    to: {
      opacity: 1
    }
  };
  var fadeInDown = exports.fadeInDown = makeFadeInTranslation('translateY', -100);
  var fadeInUp = exports.fadeInUp = makeFadeInTranslation('translateY', 100);
  var fadeInLeft = exports.fadeInLeft = makeFadeInTranslation('translateX', -100);
  var fadeInRight = exports.fadeInRight = makeFadeInTranslation('translateX', 100);
  var fadeInDownBig = exports.fadeInDownBig = makeFadeInTranslation('translateY', -500);
  var fadeInUpBig = exports.fadeInUpBig = makeFadeInTranslation('translateY', 500);
  var fadeInLeftBig = exports.fadeInLeftBig = makeFadeInTranslation('translateX', -500);
  var fadeInRightBig = exports.fadeInRightBig = makeFadeInTranslation('translateX', 500);
},454,[1,170]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fadeOutUpBig = exports.fadeOutUp = exports.fadeOutRightBig = exports.fadeOutRight = exports.fadeOutLeftBig = exports.fadeOutLeft = exports.fadeOutDownBig = exports.fadeOutDown = exports.fadeOut = undefined;
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  function makeFadeOutTranslation(translationType, toValue) {
    return {
      from: (0, _defineProperty2.default)({
        opacity: 1
      }, translationType, 0),
      to: (0, _defineProperty2.default)({
        opacity: 0
      }, translationType, toValue)
    };
  }
  var fadeOut = exports.fadeOut = {
    from: {
      opacity: 1
    },
    to: {
      opacity: 0
    }
  };
  var fadeOutDown = exports.fadeOutDown = makeFadeOutTranslation('translateY', 100);
  var fadeOutUp = exports.fadeOutUp = makeFadeOutTranslation('translateY', -100);
  var fadeOutLeft = exports.fadeOutLeft = makeFadeOutTranslation('translateX', -100);
  var fadeOutRight = exports.fadeOutRight = makeFadeOutTranslation('translateX', 100);
  var fadeOutDownBig = exports.fadeOutDownBig = makeFadeOutTranslation('translateY', 500);
  var fadeOutUpBig = exports.fadeOutUpBig = makeFadeOutTranslation('translateY', -500);
  var fadeOutLeftBig = exports.fadeOutLeftBig = makeFadeOutTranslation('translateX', -500);
  var fadeOutRightBig = exports.fadeOutRightBig = makeFadeOutTranslation('translateX', 500);
},455,[1,170]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.flipOutY = exports.flipOutX = exports.flipInY = exports.flipInX = undefined;
  var flipInX = exports.flipInX = {
    easing: 'ease-in',
    style: {
      backfaceVisibility: 'visible',
      perspective: 400
    },
    0: {
      opacity: 0,
      rotateX: '90deg'
    },
    0.4: {
      rotateX: '-20deg'
    },
    0.6: {
      opacity: 1,
      rotateX: '10deg'
    },
    0.8: {
      rotateX: '-5deg'
    },
    1: {
      opacity: 1,
      rotateX: '0deg'
    }
  };
  var flipInY = exports.flipInY = {
    easing: 'ease-in',
    style: {
      backfaceVisibility: 'visible',
      perspective: 400
    },
    0: {
      opacity: 0,
      rotateY: '90deg'
    },
    0.4: {
      rotateY: '-20deg'
    },
    0.6: {
      opacity: 1,
      rotateY: '10deg'
    },
    0.8: {
      rotateY: '-5deg'
    },
    1: {
      opacity: 1,
      rotateY: '0deg'
    }
  };
  var flipOutX = exports.flipOutX = {
    style: {
      backfaceVisibility: 'visible',
      perspective: 400
    },
    0: {
      opacity: 1,
      rotateX: '0deg'
    },
    0.3: {
      opacity: 1,
      rotateX: '-20deg'
    },
    1: {
      opacity: 0,
      rotateX: '90deg'
    }
  };
  var flipOutY = exports.flipOutY = {
    style: {
      backfaceVisibility: 'visible',
      perspective: 400
    },
    0: {
      opacity: 1,
      rotateY: '0deg'
    },
    0.3: {
      opacity: 1,
      rotateY: '-20deg'
    },
    1: {
      opacity: 0,
      rotateY: '90deg'
    }
  };
},456,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.lightSpeedOut = exports.lightSpeedIn = undefined;
  var lightSpeedIn = exports.lightSpeedIn = {
    easing: 'ease-out',
    0: {
      opacity: 0,
      translateX: 200,
      skewX: '-30deg'
    },
    0.6: {
      opacity: 1,
      translateX: 0,
      skewX: '20deg'
    },
    0.8: {
      skewX: '-5deg'
    },
    1: {
      opacity: 1,
      translateX: 0,
      skewX: '0deg'
    }
  };
  var lightSpeedOut = exports.lightSpeedOut = {
    easing: 'ease-in',
    0: {
      opacity: 1,
      translateX: 0,
      skewX: '0deg'
    },
    1: {
      opacity: 0,
      translateX: 200,
      skewX: '30deg'
    }
  };
},457,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.slideInUp = exports.slideInRight = exports.slideInLeft = exports.slideInDown = undefined;
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  function makeSlideInTranslation(translationType, fromValue) {
    return {
      from: (0, _defineProperty2.default)({}, translationType, fromValue),
      to: (0, _defineProperty2.default)({}, translationType, 0)
    };
  }
  var slideInDown = exports.slideInDown = makeSlideInTranslation('translateY', -100);
  var slideInUp = exports.slideInUp = makeSlideInTranslation('translateY', 100);
  var slideInLeft = exports.slideInLeft = makeSlideInTranslation('translateX', -100);
  var slideInRight = exports.slideInRight = makeSlideInTranslation('translateX', 100);
},458,[1,170]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.slideOutUp = exports.slideOutRight = exports.slideOutLeft = exports.slideOutDown = undefined;
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  function makeSlideOutTranslation(translationType, fromValue) {
    return {
      from: (0, _defineProperty2.default)({}, translationType, 0),
      to: (0, _defineProperty2.default)({}, translationType, fromValue)
    };
  }
  var slideOutDown = exports.slideOutDown = makeSlideOutTranslation('translateY', 100);
  var slideOutUp = exports.slideOutUp = makeSlideOutTranslation('translateY', -100);
  var slideOutLeft = exports.slideOutLeft = makeSlideOutTranslation('translateX', -100);
  var slideOutRight = exports.slideOutRight = makeSlideOutTranslation('translateX', 100);
},459,[1,170]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.zoomInUp = exports.zoomInRight = exports.zoomInLeft = exports.zoomInDown = exports.zoomIn = undefined;
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);
  function makeZoomInTranslation(translationType, pivotPoint) {
    var modifier = Math.min(1, Math.max(-1, pivotPoint));
    return {
      easing: _reactNative.Easing.bezier(0.175, 0.885, 0.32, 1),
      0: (0, _defineProperty2.default)({
        opacity: 0,
        scale: 0.1
      }, translationType, modifier * -1000),
      0.6: (0, _defineProperty2.default)({
        opacity: 1,
        scale: 0.457
      }, translationType, pivotPoint),
      1: (0, _defineProperty2.default)({
        scale: 1
      }, translationType, 0)
    };
  }
  var zoomIn = exports.zoomIn = {
    from: {
      opacity: 0,
      scale: 0.3
    },
    0.5: {
      opacity: 1
    },
    to: {
      opacity: 1,
      scale: 1
    }
  };
  var zoomInDown = exports.zoomInDown = makeZoomInTranslation('translateY', 60);
  var zoomInUp = exports.zoomInUp = makeZoomInTranslation('translateY', -60);
  var zoomInLeft = exports.zoomInLeft = makeZoomInTranslation('translateX', 10);
  var zoomInRight = exports.zoomInRight = makeZoomInTranslation('translateX', -10);
},460,[1,170,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.zoomOutUp = exports.zoomOutRight = exports.zoomOutLeft = exports.zoomOutDown = exports.zoomOut = undefined;
  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);
  function makeZoomOutTranslation(translationType, pivotPoint) {
    var modifier = Math.min(1, Math.max(-1, pivotPoint));
    return {
      easing: _reactNative.Easing.bezier(0.175, 0.885, 0.32, 1),
      0: (0, _defineProperty2.default)({
        opacity: 1,
        scale: 1
      }, translationType, 0),
      0.4: (0, _defineProperty2.default)({
        opacity: 1,
        scale: 0.457
      }, translationType, pivotPoint),
      1: (0, _defineProperty2.default)({
        opacity: 0,
        scale: 0.1
      }, translationType, modifier * -1000)
    };
  }
  var zoomOut = exports.zoomOut = {
    from: {
      opacity: 1,
      scale: 1
    },
    0.5: {
      opacity: 1,
      scale: 0.3
    },
    to: {
      opacity: 0,
      scale: 0
    }
  };
  var zoomOutDown = exports.zoomOutDown = makeZoomOutTranslation('translateY', 60);
  var zoomOutUp = exports.zoomOutUp = makeZoomOutTranslation('translateY', -60);
  var zoomOutLeft = exports.zoomOutLeft = makeZoomOutTranslation('translateX', 10);
  var zoomOutRight = exports.zoomOutRight = makeZoomOutTranslation('translateX', -10);
},461,[1,170,2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/sounds",
    "scales": [1],
    "hash": "d641b51cb9de6ee4e8c4156d6053420d",
    "name": "sound",
    "type": "mp3"
  });
},462,[463]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @format
   */

  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},463,[179]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Back", {
    enumerable: true,
    get: function get() {
      return _FlipCard.Back;
    }
  });
  Object.defineProperty(exports, "Face", {
    enumerable: true,
    get: function get() {
      return _FlipCard.Face;
    }
  });
  exports.default = undefined;
  var _FlipCard = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = _FlipCard.default;
},464,[465]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Face = exports.Back = undefined;
  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));
  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));
  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));
  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);
  var _Style = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));
  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var FlipCard = exports.default = /*#__PURE__*/function (_Component) {
    (0, _inherits2.default)(FlipCard, _Component);
    var _super = _createSuper(FlipCard);
    function FlipCard(props) {
      var _this;
      (0, _classCallCheck2.default)(this, FlipCard);
      _this = _super.call(this, props);

      // set reversed boolean for detect other side size
      var isFlipped = _this.props.alignHeight || _this.props.alignWidth ? !props.flip : props.flip;
      _this.state = {
        isFlipped: isFlipped,
        isFlipping: false,
        rotate: new _reactNative.Animated.Value(Number(props.flip)),
        mesured: false,
        // the flag to check whether it is measured or not.
        height: 0,
        width: 0,
        face: {
          width: 0,
          height: 0
        },
        back: {
          width: 0,
          height: 0
        }
      };
      return _this;
    }
    (0, _createClass2.default)(FlipCard, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.flip !== this.props.flip) {
          this._toggleCard();
        }
      }
    }, {
      key: "_toggleCard",
      value: function _toggleCard() {
        this.setState({
          isFlipping: true
        });
        this.props.onFlipStart(this.state.isFlipped);
        this._animation(!this.state.isFlipped);
      }
    }, {
      key: "_animation",
      value: function _animation(isFlipped) {
        var _this2 = this;
        if (!this.timer) {
          this.timer = setTimeout(function () {
            _this2.setState({
              isFlipped: !_this2.state.isFlipped
            });
            _this2.timer = null;
          }, 120);
        }
        _reactNative.Animated.spring(this.state.rotate, {
          toValue: Number(isFlipped),
          friction: this.props.friction,
          useNativeDriver: this.props.useNativeDriver
        }).start(function (param) {
          _this2.setState({
            isFlipping: false
          });
          _this2.props.onFlipEnd(_this2.state.isFlipped);
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.alignHeight || this.props.alignWidth) {
          // need to check the other side width or height or both
          this.measureOtherSideTimeout = setTimeout(this.measureOtherSide.bind(this), 32);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearTimeout(this.measureOtherSideTimeout);
      }
    }, {
      key: "measureOtherSide",
      value: function measureOtherSide() {
        this.setState({
          isFlipped: !this.state.isFlipped,
          mesured: true
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;
        var c = this.props.children;
        var transform = this.props.perspective ? [{
          perspective: this.props.perspective
        }] : [];
        var render_side = false;
        if (this.props.flipHorizontal) {
          transform.push({
            rotateY: this.state.rotate.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '180deg']
            })
          });
        }
        if (this.props.flipVertical) {
          transform.push({
            rotateX: this.state.rotate.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '180deg']
            })
          });
        }
        if (this.state.isFlipped) {
          render_side = /*#__PURE__*/(0, _jsxRuntime.jsx)(Back, {
            style: [this.state.height > 0 && {
              height: this.state.height
            }, this.state.width > 0 && {
              width: this.state.width
            }],
            flipHorizontal: this.props.flipHorizontal,
            flipVertical: this.props.flipVertical,
            perspective: this.props.perspective,
            onLayout: function onLayout(event) {
              var _event$nativeEvent$la = event.nativeEvent.layout,
                x = _event$nativeEvent$la.x,
                y = _event$nativeEvent$la.y,
                width = _event$nativeEvent$la.width,
                height = _event$nativeEvent$la.height;
              var _update = Object.assign(_this3.state.back, {
                width: width,
                height: height
              });
              _this3.setState({
                back: _update
              });
              if (_this3.state.mesured) {
                if (_this3.props.alignHeight) {
                  _this3.setState({
                    height: Math.max(_this3.state.face.height, _this3.state.back.height)
                  });
                }
                if (_this3.props.alignWidth) {
                  _this3.setState({
                    width: Math.max(_this3.state.face.width, _this3.state.back.width)
                  });
                }
              }
            },
            children: c[1]
          });
        } else {
          render_side = /*#__PURE__*/(0, _jsxRuntime.jsx)(Face, {
            style: [this.state.height > 0 && {
              height: this.state.height
            }, this.state.width > 0 && {
              width: this.state.width
            }],
            onLayout: function onLayout(event) {
              var _event$nativeEvent$la2 = event.nativeEvent.layout,
                x = _event$nativeEvent$la2.x,
                y = _event$nativeEvent$la2.y,
                width = _event$nativeEvent$la2.width,
                height = _event$nativeEvent$la2.height;
              var _update = Object.assign(_this3.state.face, {
                width: width,
                height: height
              });
              _this3.setState({
                face: _update
              });
              if (_this3.state.mesured) {
                if (_this3.props.alignHeight) {
                  _this3.setState({
                    height: Math.max(_this3.state.face.height, _this3.state.back.height)
                  });
                }
                if (_this3.props.alignWidth) {
                  _this3.setState({
                    width: Math.max(_this3.state.face.width, _this3.state.back.width)
                  });
                }
              }
            },
            children: c[0]
          });
        }

        // FIX: ScrollView inside Flip Card not scrollable
        // TODO: Replace below fix with by using "disabled" function (RN 0.21 exclusive)
        // REF: https://github.com/facebook/react-native/pull/5931
        //      https://github.com/facebook/react-native/issues/2103
        if (this.props.clickable) {
          var opacity = 0;
          if ((this.props.alignHeight || this.props.alignWidth) && this.state.mesured || !(this.props.alignHeight || this.props.alignWidth)) {
            // if you set alignXXX property, we show this side after mesured
            // Otherwise, it's showed immediately
            opacity = 1;
          }
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: {
              flex: 1
            },
            testID: this.props.testID,
            activeOpacity: 1,
            onPress: function onPress() {
              _this3._toggleCard();
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, Object.assign({}, this.props, {
              style: [_Style.default.flipCard, {
                transform: transform,
                opacity: opacity
              }, this.props.style],
              children: render_side
            }))
          });
        } else {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, Object.assign({}, this.props, {
            style: [_Style.default.flipCard, {
              transform: transform
            }, this.props.style],
            children: render_side
          }));
        }
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        if (prevState.isFlipped !== nextProps.flip) {
          return {
            flip: nextProps.flip
          };
        } else return null;
      }
    }]);
    return FlipCard;
  }(_react.Component);
  FlipCard.propTypes = {
    style: _$$_REQUIRE(_dependencyMap[11]).ViewPropTypes.style
  };
  FlipCard.propTypes = {
    flip: _propTypes.default.bool,
    friction: _propTypes.default.number,
    perspective: _propTypes.default.number,
    flipHorizontal: _propTypes.default.bool,
    flipVertical: _propTypes.default.bool,
    clickable: _propTypes.default.bool,
    onFlipEnd: _propTypes.default.func,
    onFlipStart: _propTypes.default.func,
    alignHeight: _propTypes.default.bool,
    alignWidth: _propTypes.default.bool,
    useNativeDriver: _propTypes.default.bool,
    children: function children(props, propName, componentName) {
      var prop = props[propName];
      if (_react.default.Children.count(prop) !== 2) {
        return new Error('`' + componentName + '` ' + 'should contain exactly two children. ' + 'The first child represents the front of the card. ' + 'The second child represents the back of the card.');
      }
    }
  };
  FlipCard.defaultProps = {
    flip: false,
    friction: 6,
    perspective: 1000,
    flipHorizontal: false,
    flipVertical: true,
    clickable: true,
    onFlipEnd: function onFlipEnd() {},
    onFlipStart: function onFlipStart() {},
    alignHeight: false,
    alignWidth: false,
    useNativeDriver: true
  };
  var Face = exports.Face = /*#__PURE__*/function (_Component2) {
    (0, _inherits2.default)(Face, _Component2);
    var _super2 = _createSuper(Face);
    function Face() {
      (0, _classCallCheck2.default)(this, Face);
      return _super2.apply(this, arguments);
    }
    (0, _createClass2.default)(Face, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [_Style.default.face, this.props.style],
          onLayout: this.props.onLayout,
          children: this.props.children
        });
      }
    }]);
    return Face;
  }(_react.Component);
  Face.propTypes = {
    children: function children(props, propName, componentName) {}
  };
  var Back = exports.Back = /*#__PURE__*/function (_Component3) {
    (0, _inherits2.default)(Back, _Component3);
    var _super3 = _createSuper(Back);
    function Back() {
      (0, _classCallCheck2.default)(this, Back);
      return _super3.apply(this, arguments);
    }
    (0, _createClass2.default)(Back, [{
      key: "render",
      value: function render() {
        var transform = [];
        if (this.props.flipHorizontal) {
          transform.push({
            scaleX: -1
          });
          if (_reactNative.Platform.OS === "android") {
            transform.push({
              perspective: this.props.perspective
            });
          }
        }
        if (this.props.flipVertical) {
          transform.push({
            scaleY: -1
          });
          if (_reactNative.Platform.OS === "android") {
            transform.push({
              perspective: this.props.perspective
            });
          }
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [_Style.default.back, this.props.style, {
            transform: transform
          }],
          onLayout: this.props.onLayout,
          children: this.props.children
        });
      }
    }]);
    return Back;
  }(_react.Component);
  Back.defaultProps = {
    flipHorizontal: false,
    flipVertical: true,
    perspective: 1000
  };
  Back.propTypes = {
    flipHorizontal: _propTypes.default.bool,
    flipVertical: _propTypes.default.bool,
    perspective: _propTypes.default.number,
    children: function children(props, propName, componentName) {}
  };
},465,[1,5,6,13,15,12,153,259,2,466,194,467]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);
  var _default = exports.default = _reactNative.StyleSheet.create({
    flipCard: {
      flex: 1
    },
    face: {
      flex: 1
    },
    back: {
      flex: 1
    }
  });
},466,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  module.exports = {
    get ColorPropType() {
      return _$$_REQUIRE(_dependencyMap[0]);
    },
    get EdgeInsetsPropType() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },
    get ImagePropTypes() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },
    get PointPropType() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },
    get TextInputPropTypes() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },
    get TextPropTypes() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },
    get ViewPropTypes() {
      return _$$_REQUIRE(_dependencyMap[6]);
    }
  };
},467,[468,470,471,482,483,484,472]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];
    if (color == null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }
      return;
    }
    if (typeof color === 'number') {
      // Developers should not use a number, but we are using the prop type
      // both for user provided colors and for transformed ones. This isn't ideal
      // and should be fixed but will do for now...
      return;
    }
    if (typeof color === 'string' && _$$_REQUIRE(_dependencyMap[0])(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + `Valid color formats are
  - '#f0f' (#rgb)
  - '#f0fc' (#rgba)
  - '#ff00ff' (#rrggbb)
  - '#ff00ff00' (#rrggbbaa)
  - 'rgb(255, 255, 255)'
  - 'rgba(255, 255, 255, 1.0)'
  - 'hsl(360, 100%, 100%)'
  - 'hsla(360, 100%, 100%, 1.0)'
  - 'transparent'
  - 'red'
  - 0xff00ff00 (0xrrggbbaa)
`);
    }
  };
  var ColorPropType = colorPropType.bind(null, false /* isRequired */);
  ColorPropType.isRequired = colorPropType.bind(null, true /* isRequired */);
  module.exports = ColorPropType;
},468,[469]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /* eslint no-bitwise: 0 */

  'use strict';

  function normalizeColor(color) {
    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }
      return null;
    }
    if (typeof color !== 'string') {
      return null;
    }
    var matchers = getMatchers();
    var match;

    // Ordered based on occurrences on Facebook codebase
    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }
    var colorFromKeyword = normalizeKeyword(color);
    if (colorFromKeyword != null) {
      return colorFromKeyword;
    }
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 |
      // r
      parse255(match[2]) << 16 |
      // g
      parse255(match[3]) << 8 |
      // b
      0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.rgba.exec(color)) {
      // rgba(R G B / A) notation
      if (match[6] !== undefined) {
        return (parse255(match[6]) << 24 |
        // r
        parse255(match[7]) << 16 |
        // g
        parse255(match[8]) << 8 |
        // b
        parse1(match[9])) >>>
        // a
        0;
      }

      // rgba(R, G, B, A) notation
      return (parse255(match[2]) << 24 |
      // r
      parse255(match[3]) << 16 |
      // g
      parse255(match[4]) << 8 |
      // b
      parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      'ff',
      // a
      16) >>> 0;
    }

    // https://drafts.csswg.org/css-color-4/#hex-notation
    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }
    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      match[4] + match[4],
      // a
      16) >>> 0;
    }
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3]) // l
      ) | 0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.hsla.exec(color)) {
      // hsla(H S L / A) notation
      if (match[6] !== undefined) {
        return (hslToRgb(parse360(match[6]),
        // h
        parsePercentage(match[7]),
        // s
        parsePercentage(match[8]) // l
        ) | parse1(match[9])) >>>
        // a
        0;
      }

      // hsla(H, S, L, A) notation
      return (hslToRgb(parse360(match[2]),
      // h
      parsePercentage(match[3]),
      // s
      parsePercentage(match[4]) // l
      ) | parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hwb.exec(color)) {
      return (hwbToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // w
      parsePercentage(match[3]) // b
      ) | 0x000000ff) >>>
      // a
      0;
    }
    return null;
  }
  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }
    if (t < 0.5) {
      return q;
    }
    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }
  function hwbToRgb(h, w, b) {
    if (w + b >= 1) {
      var gray = Math.round(w * 255 / (w + b));
      return gray << 24 | gray << 16 | gray << 8;
    }
    var red = hue2rgb(0, 1, h + 0.3333333333333333) * (1 - w - b) + w;
    var green = hue2rgb(0, 1, h) * (1 - w - b) + w;
    var blue = hue2rgb(0, 1, h - 0.3333333333333333) * (1 - w - b) + w;
    return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;
  }
  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";
  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return '\\(\\s*(' + args.join(')\\s*,?\\s*(') + ')\\s*\\)';
  }
  function callWithSlashSeparator() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return '\\(\\s*(' + args.slice(0, args.length - 1).join(')\\s*,?\\s*(') + ')\\s*/\\s*(' + args[args.length - 1] + ')\\s*\\)';
  }
  function commaSeparatedCall() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }
  var cachedMatchers;
  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba(' + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + '|' + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ')'),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla(' + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + '|' + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ')'),
        hwb: new RegExp('hwb' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }
    return cachedMatchers;
  }
  function parse255(str) {
    var int = parseInt(str, 10);
    if (int < 0) {
      return 0;
    }
    if (int > 255) {
      return 255;
    }
    return int;
  }
  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }
  function parse1(str) {
    var num = parseFloat(str);
    if (num < 0) {
      return 0;
    }
    if (num > 1) {
      return 255;
    }
    return Math.round(num * 255);
  }
  function parsePercentage(str) {
    // parseFloat conveniently ignores the final %
    var int = parseFloat(str);
    if (int < 0) {
      return 0;
    }
    if (int > 100) {
      return 1;
    }
    return int / 100;
  }
  function normalizeKeyword(name) {
    // prettier-ignore
    switch (name) {
      case 'transparent':
        return 0x00000000;
      // http://www.w3.org/TR/css3-color/#svg-color
      case 'aliceblue':
        return 0xf0f8ffff;
      case 'antiquewhite':
        return 0xfaebd7ff;
      case 'aqua':
        return 0x00ffffff;
      case 'aquamarine':
        return 0x7fffd4ff;
      case 'azure':
        return 0xf0ffffff;
      case 'beige':
        return 0xf5f5dcff;
      case 'bisque':
        return 0xffe4c4ff;
      case 'black':
        return 0x000000ff;
      case 'blanchedalmond':
        return 0xffebcdff;
      case 'blue':
        return 0x0000ffff;
      case 'blueviolet':
        return 0x8a2be2ff;
      case 'brown':
        return 0xa52a2aff;
      case 'burlywood':
        return 0xdeb887ff;
      case 'burntsienna':
        return 0xea7e5dff;
      case 'cadetblue':
        return 0x5f9ea0ff;
      case 'chartreuse':
        return 0x7fff00ff;
      case 'chocolate':
        return 0xd2691eff;
      case 'coral':
        return 0xff7f50ff;
      case 'cornflowerblue':
        return 0x6495edff;
      case 'cornsilk':
        return 0xfff8dcff;
      case 'crimson':
        return 0xdc143cff;
      case 'cyan':
        return 0x00ffffff;
      case 'darkblue':
        return 0x00008bff;
      case 'darkcyan':
        return 0x008b8bff;
      case 'darkgoldenrod':
        return 0xb8860bff;
      case 'darkgray':
        return 0xa9a9a9ff;
      case 'darkgreen':
        return 0x006400ff;
      case 'darkgrey':
        return 0xa9a9a9ff;
      case 'darkkhaki':
        return 0xbdb76bff;
      case 'darkmagenta':
        return 0x8b008bff;
      case 'darkolivegreen':
        return 0x556b2fff;
      case 'darkorange':
        return 0xff8c00ff;
      case 'darkorchid':
        return 0x9932ccff;
      case 'darkred':
        return 0x8b0000ff;
      case 'darksalmon':
        return 0xe9967aff;
      case 'darkseagreen':
        return 0x8fbc8fff;
      case 'darkslateblue':
        return 0x483d8bff;
      case 'darkslategray':
        return 0x2f4f4fff;
      case 'darkslategrey':
        return 0x2f4f4fff;
      case 'darkturquoise':
        return 0x00ced1ff;
      case 'darkviolet':
        return 0x9400d3ff;
      case 'deeppink':
        return 0xff1493ff;
      case 'deepskyblue':
        return 0x00bfffff;
      case 'dimgray':
        return 0x696969ff;
      case 'dimgrey':
        return 0x696969ff;
      case 'dodgerblue':
        return 0x1e90ffff;
      case 'firebrick':
        return 0xb22222ff;
      case 'floralwhite':
        return 0xfffaf0ff;
      case 'forestgreen':
        return 0x228b22ff;
      case 'fuchsia':
        return 0xff00ffff;
      case 'gainsboro':
        return 0xdcdcdcff;
      case 'ghostwhite':
        return 0xf8f8ffff;
      case 'gold':
        return 0xffd700ff;
      case 'goldenrod':
        return 0xdaa520ff;
      case 'gray':
        return 0x808080ff;
      case 'green':
        return 0x008000ff;
      case 'greenyellow':
        return 0xadff2fff;
      case 'grey':
        return 0x808080ff;
      case 'honeydew':
        return 0xf0fff0ff;
      case 'hotpink':
        return 0xff69b4ff;
      case 'indianred':
        return 0xcd5c5cff;
      case 'indigo':
        return 0x4b0082ff;
      case 'ivory':
        return 0xfffff0ff;
      case 'khaki':
        return 0xf0e68cff;
      case 'lavender':
        return 0xe6e6faff;
      case 'lavenderblush':
        return 0xfff0f5ff;
      case 'lawngreen':
        return 0x7cfc00ff;
      case 'lemonchiffon':
        return 0xfffacdff;
      case 'lightblue':
        return 0xadd8e6ff;
      case 'lightcoral':
        return 0xf08080ff;
      case 'lightcyan':
        return 0xe0ffffff;
      case 'lightgoldenrodyellow':
        return 0xfafad2ff;
      case 'lightgray':
        return 0xd3d3d3ff;
      case 'lightgreen':
        return 0x90ee90ff;
      case 'lightgrey':
        return 0xd3d3d3ff;
      case 'lightpink':
        return 0xffb6c1ff;
      case 'lightsalmon':
        return 0xffa07aff;
      case 'lightseagreen':
        return 0x20b2aaff;
      case 'lightskyblue':
        return 0x87cefaff;
      case 'lightslategray':
        return 0x778899ff;
      case 'lightslategrey':
        return 0x778899ff;
      case 'lightsteelblue':
        return 0xb0c4deff;
      case 'lightyellow':
        return 0xffffe0ff;
      case 'lime':
        return 0x00ff00ff;
      case 'limegreen':
        return 0x32cd32ff;
      case 'linen':
        return 0xfaf0e6ff;
      case 'magenta':
        return 0xff00ffff;
      case 'maroon':
        return 0x800000ff;
      case 'mediumaquamarine':
        return 0x66cdaaff;
      case 'mediumblue':
        return 0x0000cdff;
      case 'mediumorchid':
        return 0xba55d3ff;
      case 'mediumpurple':
        return 0x9370dbff;
      case 'mediumseagreen':
        return 0x3cb371ff;
      case 'mediumslateblue':
        return 0x7b68eeff;
      case 'mediumspringgreen':
        return 0x00fa9aff;
      case 'mediumturquoise':
        return 0x48d1ccff;
      case 'mediumvioletred':
        return 0xc71585ff;
      case 'midnightblue':
        return 0x191970ff;
      case 'mintcream':
        return 0xf5fffaff;
      case 'mistyrose':
        return 0xffe4e1ff;
      case 'moccasin':
        return 0xffe4b5ff;
      case 'navajowhite':
        return 0xffdeadff;
      case 'navy':
        return 0x000080ff;
      case 'oldlace':
        return 0xfdf5e6ff;
      case 'olive':
        return 0x808000ff;
      case 'olivedrab':
        return 0x6b8e23ff;
      case 'orange':
        return 0xffa500ff;
      case 'orangered':
        return 0xff4500ff;
      case 'orchid':
        return 0xda70d6ff;
      case 'palegoldenrod':
        return 0xeee8aaff;
      case 'palegreen':
        return 0x98fb98ff;
      case 'paleturquoise':
        return 0xafeeeeff;
      case 'palevioletred':
        return 0xdb7093ff;
      case 'papayawhip':
        return 0xffefd5ff;
      case 'peachpuff':
        return 0xffdab9ff;
      case 'peru':
        return 0xcd853fff;
      case 'pink':
        return 0xffc0cbff;
      case 'plum':
        return 0xdda0ddff;
      case 'powderblue':
        return 0xb0e0e6ff;
      case 'purple':
        return 0x800080ff;
      case 'rebeccapurple':
        return 0x663399ff;
      case 'red':
        return 0xff0000ff;
      case 'rosybrown':
        return 0xbc8f8fff;
      case 'royalblue':
        return 0x4169e1ff;
      case 'saddlebrown':
        return 0x8b4513ff;
      case 'salmon':
        return 0xfa8072ff;
      case 'sandybrown':
        return 0xf4a460ff;
      case 'seagreen':
        return 0x2e8b57ff;
      case 'seashell':
        return 0xfff5eeff;
      case 'sienna':
        return 0xa0522dff;
      case 'silver':
        return 0xc0c0c0ff;
      case 'skyblue':
        return 0x87ceebff;
      case 'slateblue':
        return 0x6a5acdff;
      case 'slategray':
        return 0x708090ff;
      case 'slategrey':
        return 0x708090ff;
      case 'snow':
        return 0xfffafaff;
      case 'springgreen':
        return 0x00ff7fff;
      case 'steelblue':
        return 0x4682b4ff;
      case 'tan':
        return 0xd2b48cff;
      case 'teal':
        return 0x008080ff;
      case 'thistle':
        return 0xd8bfd8ff;
      case 'tomato':
        return 0xff6347ff;
      case 'turquoise':
        return 0x40e0d0ff;
      case 'violet':
        return 0xee82eeff;
      case 'wheat':
        return 0xf5deb3ff;
      case 'white':
        return 0xffffffff;
      case 'whitesmoke':
        return 0xf5f5f5ff;
      case 'yellow':
        return 0xffff00ff;
      case 'yellowgreen':
        return 0x9acd32ff;
    }
    return null;
  }
  module.exports = normalizeColor;
},469,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/Rect.js
   */
  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[0]).shape({
    bottom: _$$_REQUIRE(_dependencyMap[0]).number,
    left: _$$_REQUIRE(_dependencyMap[0]).number,
    right: _$$_REQUIRE(_dependencyMap[0]).number,
    top: _$$_REQUIRE(_dependencyMap[0]).number
  });
  module.exports = DeprecatedEdgeInsetsPropType;
},470,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/Image/ImageProps.js
   */
  var DeprecatedImagePropType = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), {
    alt: _$$_REQUIRE(_dependencyMap[1]).string,
    blurRadius: _$$_REQUIRE(_dependencyMap[1]).number,
    capInsets: _$$_REQUIRE(_dependencyMap[2]),
    crossOrigin: _$$_REQUIRE(_dependencyMap[1]).oneOf(['anonymous', 'use-credentials']),
    defaultSource: _$$_REQUIRE(_dependencyMap[3]),
    fadeDuration: _$$_REQUIRE(_dependencyMap[1]).number,
    height: _$$_REQUIRE(_dependencyMap[1]).number,
    internal_analyticTag: _$$_REQUIRE(_dependencyMap[1]).string,
    loadingIndicatorSource: _$$_REQUIRE(_dependencyMap[1]).oneOfType([_$$_REQUIRE(_dependencyMap[1]).shape({
      uri: _$$_REQUIRE(_dependencyMap[1]).string
    }), _$$_REQUIRE(_dependencyMap[1]).number]),
    onError: _$$_REQUIRE(_dependencyMap[1]).func,
    onLoad: _$$_REQUIRE(_dependencyMap[1]).func,
    onLoadEnd: _$$_REQUIRE(_dependencyMap[1]).func,
    onLoadStart: _$$_REQUIRE(_dependencyMap[1]).func,
    onPartialLoad: _$$_REQUIRE(_dependencyMap[1]).func,
    onProgress: _$$_REQUIRE(_dependencyMap[1]).func,
    progressiveRenderingEnabled: _$$_REQUIRE(_dependencyMap[1]).bool,
    referrerPolicy: _$$_REQUIRE(_dependencyMap[1]).oneOf(['no-referrer', 'no-referrer-when-downgrade', 'origin', 'origin-when-cross-origin', 'same-origin', 'strict-origin', 'strict-origin-when-cross-origin', 'unsafe-url']),
    resizeMethod: _$$_REQUIRE(_dependencyMap[1]).oneOf(['auto', 'resize', 'scale']),
    resizeMode: _$$_REQUIRE(_dependencyMap[1]).oneOf(['cover', 'contain', 'stretch', 'repeat', 'center']),
    source: _$$_REQUIRE(_dependencyMap[3]),
    src: _$$_REQUIRE(_dependencyMap[1]).string,
    srcSet: _$$_REQUIRE(_dependencyMap[1]).string,
    style: _$$_REQUIRE(_dependencyMap[4])(_$$_REQUIRE(_dependencyMap[5])),
    testID: _$$_REQUIRE(_dependencyMap[1]).string,
    tintColor: _$$_REQUIRE(_dependencyMap[6]),
    width: _$$_REQUIRE(_dependencyMap[1]).number
  });
  module.exports = DeprecatedImagePropType;
},471,[472,259,470,480,474,481,468]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var MouseEventPropTypes = {
    onMouseEnter: _$$_REQUIRE(_dependencyMap[0]).func,
    onMouseLeave: _$$_REQUIRE(_dependencyMap[0]).func
  };

  // Experimental/Work in Progress Pointer Event Callbacks (not yet ready for use)
  var PointerEventPropTypes = {
    onPointerEnter: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerEnterCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerLeave: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerLeaveCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerMove: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerMoveCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerCancel: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerCancelCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerDown: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerDownCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerUp: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerUpCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerOver: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerOverCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerOut: _$$_REQUIRE(_dependencyMap[0]).func,
    onPointerOutCapture: _$$_REQUIRE(_dependencyMap[0]).func
  };
  var FocusEventPropTypes = {
    onBlur: _$$_REQUIRE(_dependencyMap[0]).func,
    onBlurCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onFocus: _$$_REQUIRE(_dependencyMap[0]).func,
    onFocusCapture: _$$_REQUIRE(_dependencyMap[0]).func
  };
  var TouchEventPropTypes = {
    onTouchCancel: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchCancelCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchEnd: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchEndCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchMove: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchMoveCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchStart: _$$_REQUIRE(_dependencyMap[0]).func,
    onTouchStartCapture: _$$_REQUIRE(_dependencyMap[0]).func
  };
  var GestureResponderEventPropTypes = {
    onMoveShouldSetResponder: _$$_REQUIRE(_dependencyMap[0]).func,
    onMoveShouldSetResponderCapture: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderEnd: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderGrant: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderMove: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderReject: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderRelease: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderStart: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderTerminate: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderTerminationRequest: _$$_REQUIRE(_dependencyMap[0]).func,
    onStartShouldSetResponder: _$$_REQUIRE(_dependencyMap[0]).func,
    onStartShouldSetResponderCapture: _$$_REQUIRE(_dependencyMap[0]).func
  };

  /**
   * @see facebook/react-native/Libraries/Components/View/ViewPropTypes.js
   */
  var DeprecatedViewPropTypes = Object.assign({}, MouseEventPropTypes, PointerEventPropTypes, FocusEventPropTypes, TouchEventPropTypes, GestureResponderEventPropTypes, {
    'aria-busy': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-checked': _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).bool, _$$_REQUIRE(_dependencyMap[0]).oneOf(['mixed'])]),
    'aria-disabled': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-expanded': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-hidden': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-label': _$$_REQUIRE(_dependencyMap[0]).string,
    'aria-labelledby': _$$_REQUIRE(_dependencyMap[0]).string,
    'aria-live': _$$_REQUIRE(_dependencyMap[0]).oneOf(['polite', 'assertive', 'off']),
    'aria-modal': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-selected': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-valuemax': _$$_REQUIRE(_dependencyMap[0]).number,
    'aria-valuemin': _$$_REQUIRE(_dependencyMap[0]).number,
    'aria-valuenow': _$$_REQUIRE(_dependencyMap[0]).number,
    'aria-valuetext': _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityActions: _$$_REQUIRE(_dependencyMap[0]).arrayOf(_$$_REQUIRE(_dependencyMap[1]).AccessibilityActionInfoPropType),
    accessibilityElementsHidden: _$$_REQUIRE(_dependencyMap[0]).bool,
    accessibilityHint: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityIgnoresInvertColors: _$$_REQUIRE(_dependencyMap[0]).bool,
    accessibilityLabel: _$$_REQUIRE(_dependencyMap[0]).node,
    accessibilityLabelledBy: _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).string, _$$_REQUIRE(_dependencyMap[0]).arrayOf(_$$_REQUIRE(_dependencyMap[0]).string)]),
    accessibilityLanguage: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityLiveRegion: _$$_REQUIRE(_dependencyMap[0]).oneOf(['assertive', 'none', 'polite']),
    accessibilityRole: _$$_REQUIRE(_dependencyMap[1]).AccessibilityRolePropType,
    accessibilityState: _$$_REQUIRE(_dependencyMap[1]).AccessibilityStatePropType,
    accessibilityValue: _$$_REQUIRE(_dependencyMap[1]).AccessibilityValuePropType,
    accessibilityViewIsModal: _$$_REQUIRE(_dependencyMap[0]).bool,
    accessible: _$$_REQUIRE(_dependencyMap[0]).bool,
    collapsable: _$$_REQUIRE(_dependencyMap[0]).bool,
    focusable: _$$_REQUIRE(_dependencyMap[0]).bool,
    hitSlop: _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[2]), _$$_REQUIRE(_dependencyMap[0]).number]),
    importantForAccessibility: _$$_REQUIRE(_dependencyMap[0]).oneOf(['auto', 'no', 'no-hide-descendants', 'yes']),
    nativeBackgroundAndroid: _$$_REQUIRE(_dependencyMap[0]).object,
    nativeForegroundAndroid: _$$_REQUIRE(_dependencyMap[0]).object,
    nativeID: _$$_REQUIRE(_dependencyMap[0]).string,
    needsOffscreenAlphaCompositing: _$$_REQUIRE(_dependencyMap[0]).bool,
    onAccessibilityAction: _$$_REQUIRE(_dependencyMap[0]).func,
    onAccessibilityEscape: _$$_REQUIRE(_dependencyMap[0]).func,
    onAccessibilityTap: _$$_REQUIRE(_dependencyMap[0]).func,
    onClick: _$$_REQUIRE(_dependencyMap[0]).func,
    onLayout: _$$_REQUIRE(_dependencyMap[0]).func,
    onMagicTap: _$$_REQUIRE(_dependencyMap[0]).func,
    pointerEvents: _$$_REQUIRE(_dependencyMap[0]).oneOf(['auto', 'box-none', 'box-only', 'none']),
    removeClippedSubviews: _$$_REQUIRE(_dependencyMap[0]).bool,
    renderToHardwareTextureAndroid: _$$_REQUIRE(_dependencyMap[0]).bool,
    role: _$$_REQUIRE(_dependencyMap[1]).RolePropType,
    shouldRasterizeIOS: _$$_REQUIRE(_dependencyMap[0]).bool,
    style: _$$_REQUIRE(_dependencyMap[3])(_$$_REQUIRE(_dependencyMap[4])),
    tabIndex: _$$_REQUIRE(_dependencyMap[0]).oneOf([0, -1]),
    testID: _$$_REQUIRE(_dependencyMap[0]).string
  });
  module.exports = DeprecatedViewPropTypes;
},472,[259,473,470,474,476]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/Components/View/ViewAccessibility.js
   */
  var DeprecatedViewAccessibility = {
    AccessibilityRolePropType: _$$_REQUIRE(_dependencyMap[0]).oneOf(['adjustable', 'alert', 'button', 'checkbox', 'combobox', 'drawerlayout', 'dropdownlist', 'grid', 'header', 'horizontalscrollview', 'iconmenu', 'image', 'imagebutton', 'keyboardkey', 'link', 'list', 'menu', 'menubar', 'menuitem', 'none', 'pager', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'scrollview', 'search', 'slidingdrawer', 'spinbutton', 'summary', 'switch', 'tab', 'tabbar', 'tablist', 'text', 'timer', 'togglebutton', 'toolbar', 'viewgroup', 'webview']),
    AccessibilityStatePropType: _$$_REQUIRE(_dependencyMap[0]).object,
    AccessibilityActionInfoPropType: _$$_REQUIRE(_dependencyMap[0]).object,
    AccessibilityValuePropType: _$$_REQUIRE(_dependencyMap[0]).object,
    RolePropType: _$$_REQUIRE(_dependencyMap[0]).oneOf(['alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed', 'figure', 'form', 'grid', 'group', 'heading', 'img', 'link', 'list', 'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'meter', 'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'searchbox', 'separator', 'slider', 'spinbutton', 'status', 'summary', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem'])
  };
  module.exports = DeprecatedViewAccessibility;
},473,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function DeprecatedStyleSheetPropType(shape) {
    var shapePropType = _$$_REQUIRE(_dependencyMap[0])(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;
      if (props[propName]) {
        // Just make a dummy prop object with only the flattened style
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }
      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }
      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }
  function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }
    if (!Array.isArray(style)) {
      return style;
    }
    var result = {};
    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);
      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }
    return result;
  }
  module.exports = DeprecatedStyleSheetPropType;
},474,[475]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          _$$_REQUIRE(_dependencyMap[0])(false, `Required object \`${propName}\` was not specified in ` + `\`${componentName}\`.`);
        }
        return;
      }
      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';
      if (propType !== 'object') {
        _$$_REQUIRE(_dependencyMap[0])(false, `Invalid ${locationName} \`${propName}\` of type \`${propType}\` ` + `supplied to \`${componentName}\`, expected \`object\`.`);
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = Object.assign({}, props[propName], shapeTypes);
      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          _$$_REQUIRE(_dependencyMap[0])(false, `Invalid props.${propName} key \`${key}\` supplied to \`${componentName}\`.` + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));
        if (error) {
          _$$_REQUIRE(_dependencyMap[0])(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }
    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }
      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  module.exports = deprecatedCreateStrictShapeTypeChecker;
},475,[24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedViewStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), _$$_REQUIRE(_dependencyMap[1]), _$$_REQUIRE(_dependencyMap[2]), {
    backfaceVisibility: _$$_REQUIRE(_dependencyMap[3]).oneOf(['hidden', 'visible']),
    backgroundColor: _$$_REQUIRE(_dependencyMap[4]),
    borderBottomColor: _$$_REQUIRE(_dependencyMap[4]),
    borderBottomEndRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomLeftRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomRightRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomStartRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    borderColor: _$$_REQUIRE(_dependencyMap[4]),
    borderCurve: _$$_REQUIRE(_dependencyMap[3]).oneOf(['circular', 'continuous']),
    borderEndColor: _$$_REQUIRE(_dependencyMap[4]),
    borderEndEndRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderEndStartRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderLeftColor: _$$_REQUIRE(_dependencyMap[4]),
    borderLeftWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    borderRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderRightColor: _$$_REQUIRE(_dependencyMap[4]),
    borderRightWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    borderStartColor: _$$_REQUIRE(_dependencyMap[4]),
    borderStartEndRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderStartStartRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderStyle: _$$_REQUIRE(_dependencyMap[3]).oneOf(['dashed', 'dotted', 'solid']),
    borderTopColor: _$$_REQUIRE(_dependencyMap[4]),
    borderTopEndRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopLeftRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopRightRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopStartRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    borderWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    elevation: _$$_REQUIRE(_dependencyMap[3]).number,
    opacity: _$$_REQUIRE(_dependencyMap[3]).number,
    pointerEvents: _$$_REQUIRE(_dependencyMap[3]).oneOf(['auto', 'box-none', 'box-only', 'none'])
  });
  module.exports = DeprecatedViewStylePropTypes;
},476,[477,478,479,259,468]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var DimensionValuePropType = _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).number, _$$_REQUIRE(_dependencyMap[0]).string]);

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedLayoutPropTypes = {
    alignContent: _$$_REQUIRE(_dependencyMap[0]).oneOf(['center', 'flex-end', 'flex-start', 'space-around', 'space-between', 'stretch']),
    alignItems: _$$_REQUIRE(_dependencyMap[0]).oneOf(['baseline', 'center', 'flex-end', 'flex-start', 'stretch']),
    alignSelf: _$$_REQUIRE(_dependencyMap[0]).oneOf(['auto', 'baseline', 'center', 'flex-end', 'flex-start', 'stretch']),
    aspectRatio: _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).number, _$$_REQUIRE(_dependencyMap[0]).string]),
    borderBottomWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderEndWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderLeftWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderRightWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderStartWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderTopWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    borderWidth: _$$_REQUIRE(_dependencyMap[0]).number,
    bottom: DimensionValuePropType,
    columnGap: _$$_REQUIRE(_dependencyMap[0]).number,
    direction: _$$_REQUIRE(_dependencyMap[0]).oneOf(['inherit', 'ltr', 'rtl']),
    display: _$$_REQUIRE(_dependencyMap[0]).oneOf(['flex', 'none']),
    end: DimensionValuePropType,
    flex: _$$_REQUIRE(_dependencyMap[0]).number,
    flexBasis: DimensionValuePropType,
    flexDirection: _$$_REQUIRE(_dependencyMap[0]).oneOf(['column', 'column-reverse', 'row', 'row-reverse']),
    flexGrow: _$$_REQUIRE(_dependencyMap[0]).number,
    flexShrink: _$$_REQUIRE(_dependencyMap[0]).number,
    flexWrap: _$$_REQUIRE(_dependencyMap[0]).oneOf(['nowrap', 'wrap', 'wrap-reverse']),
    gap: _$$_REQUIRE(_dependencyMap[0]).number,
    height: DimensionValuePropType,
    inset: DimensionValuePropType,
    insetBlock: DimensionValuePropType,
    insetBlockEnd: DimensionValuePropType,
    insetBlockStart: DimensionValuePropType,
    insetInline: DimensionValuePropType,
    insetInlineEnd: DimensionValuePropType,
    insetInlineStart: DimensionValuePropType,
    justifyContent: _$$_REQUIRE(_dependencyMap[0]).oneOf(['center', 'flex-end', 'flex-start', 'space-around', 'space-between', 'space-evenly']),
    left: DimensionValuePropType,
    margin: DimensionValuePropType,
    marginBlock: DimensionValuePropType,
    marginBlockEnd: DimensionValuePropType,
    marginBlockStart: DimensionValuePropType,
    marginBottom: DimensionValuePropType,
    marginEnd: DimensionValuePropType,
    marginHorizontal: DimensionValuePropType,
    marginInline: DimensionValuePropType,
    marginInlineEnd: DimensionValuePropType,
    marginInlineStart: DimensionValuePropType,
    marginLeft: DimensionValuePropType,
    marginRight: DimensionValuePropType,
    marginStart: DimensionValuePropType,
    marginTop: DimensionValuePropType,
    marginVertical: DimensionValuePropType,
    maxHeight: DimensionValuePropType,
    maxWidth: DimensionValuePropType,
    minHeight: DimensionValuePropType,
    minWidth: DimensionValuePropType,
    overflow: _$$_REQUIRE(_dependencyMap[0]).oneOf(['hidden', 'scroll', 'visible']),
    padding: DimensionValuePropType,
    paddingBlock: DimensionValuePropType,
    paddingBlockEnd: DimensionValuePropType,
    paddingBlockStart: DimensionValuePropType,
    paddingBottom: DimensionValuePropType,
    paddingEnd: DimensionValuePropType,
    paddingHorizontal: DimensionValuePropType,
    paddingInline: DimensionValuePropType,
    paddingInlineEnd: DimensionValuePropType,
    paddingInlineStart: DimensionValuePropType,
    paddingLeft: DimensionValuePropType,
    paddingRight: DimensionValuePropType,
    paddingStart: DimensionValuePropType,
    paddingTop: DimensionValuePropType,
    paddingVertical: DimensionValuePropType,
    position: _$$_REQUIRE(_dependencyMap[0]).oneOf(['absolute', 'relative']),
    right: DimensionValuePropType,
    rowGap: _$$_REQUIRE(_dependencyMap[0]).number,
    start: DimensionValuePropType,
    top: DimensionValuePropType,
    width: DimensionValuePropType,
    zIndex: _$$_REQUIRE(_dependencyMap[0]).number
  };
  module.exports = DeprecatedLayoutPropTypes;
},477,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedShadowPropTypesIOS = {
    shadowColor: _$$_REQUIRE(_dependencyMap[0]),
    shadowOffset: _$$_REQUIRE(_dependencyMap[1]).shape({
      height: _$$_REQUIRE(_dependencyMap[1]).number,
      width: _$$_REQUIRE(_dependencyMap[1]).number
    }),
    shadowOpacity: _$$_REQUIRE(_dependencyMap[1]).number,
    shadowRadius: _$$_REQUIRE(_dependencyMap[1]).number
  };
  module.exports = DeprecatedShadowPropTypesIOS;
},478,[468,259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/private/_TransformStyle.js
   */
  var DeprecatedTransformPropTypes = {
    transform: _$$_REQUIRE(_dependencyMap[0]).arrayOf(_$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).shape({
      perspective: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      rotate: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      rotateX: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      rotateY: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      rotateZ: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      scale: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      scaleX: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      scaleY: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      skewX: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      skewY: _$$_REQUIRE(_dependencyMap[0]).string
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      translateX: _$$_REQUIRE(_dependencyMap[0]).number
    }), _$$_REQUIRE(_dependencyMap[0]).shape({
      translateY: _$$_REQUIRE(_dependencyMap[0]).number
    })]))
  };
  module.exports = DeprecatedTransformPropTypes;
},479,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/Image/ImageSource.js
   */
  var ImageURISourcePropType = _$$_REQUIRE(_dependencyMap[0]).shape({
    body: _$$_REQUIRE(_dependencyMap[0]).string,
    bundle: _$$_REQUIRE(_dependencyMap[0]).string,
    cache: _$$_REQUIRE(_dependencyMap[0]).oneOf(['default', 'force-cache', 'only-if-cached', 'reload']),
    headers: _$$_REQUIRE(_dependencyMap[0]).objectOf(_$$_REQUIRE(_dependencyMap[0]).string),
    height: _$$_REQUIRE(_dependencyMap[0]).number,
    method: _$$_REQUIRE(_dependencyMap[0]).string,
    scale: _$$_REQUIRE(_dependencyMap[0]).number,
    uri: _$$_REQUIRE(_dependencyMap[0]).string,
    width: _$$_REQUIRE(_dependencyMap[0]).number
  });
  var ImageSourcePropType = _$$_REQUIRE(_dependencyMap[0]).oneOfType([ImageURISourcePropType, _$$_REQUIRE(_dependencyMap[0]).number, _$$_REQUIRE(_dependencyMap[0]).arrayOf(ImageURISourcePropType)]);
  module.exports = ImageSourcePropType;
},480,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedImageStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), _$$_REQUIRE(_dependencyMap[1]), _$$_REQUIRE(_dependencyMap[2]), {
    backfaceVisibility: _$$_REQUIRE(_dependencyMap[3]).oneOf(['hidden', 'visible']),
    backgroundColor: _$$_REQUIRE(_dependencyMap[4]),
    borderBottomLeftRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderBottomRightRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderColor: _$$_REQUIRE(_dependencyMap[4]),
    borderRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopLeftRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderTopRightRadius: _$$_REQUIRE(_dependencyMap[3]).number,
    borderWidth: _$$_REQUIRE(_dependencyMap[3]).number,
    objectFit: _$$_REQUIRE(_dependencyMap[3]).oneOf(['contain', 'cover', 'fill', 'scale-down']),
    opacity: _$$_REQUIRE(_dependencyMap[3]).number,
    overflow: _$$_REQUIRE(_dependencyMap[3]).oneOf(['hidden', 'visible']),
    overlayColor: _$$_REQUIRE(_dependencyMap[3]).string,
    tintColor: _$$_REQUIRE(_dependencyMap[4]),
    resizeMode: _$$_REQUIRE(_dependencyMap[3]).oneOf(['center', 'contain', 'cover', 'repeat', 'stretch'])
  });
  module.exports = DeprecatedImageStylePropTypes;
},481,[477,478,479,259,468]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var PointPropType = _$$_REQUIRE(_dependencyMap[0]).shape({
    x: _$$_REQUIRE(_dependencyMap[0]).number,
    y: _$$_REQUIRE(_dependencyMap[0]).number
  });
  module.exports = PointPropType;
},482,[259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  var DataDetectorTypes = ['address', 'all', 'calendarEvent', 'link', 'none', 'phoneNumber'];

  /**
   * @see facebook/react-native/Libraries/TextInput/TextInput.js
   */
  var DeprecatedTextInputPropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), {
    allowFontScaling: _$$_REQUIRE(_dependencyMap[1]).bool,
    autoCapitalize: _$$_REQUIRE(_dependencyMap[1]).oneOf(['none', 'sentences', 'words', 'characters']),
    autoComplete: _$$_REQUIRE(_dependencyMap[1]).oneOf(['additional-name', 'address-line1', 'address-line2', 'bday', 'bday-day', 'bday-month', 'bday-year', 'birthdate-day', 'birthdate-full', 'birthdate-month', 'birthdate-year', 'cc-csc', 'cc-exp', 'cc-exp-day', 'cc-exp-month', 'cc-exp-year', 'cc-family-name', 'cc-given-name', 'cc-middle-name', 'cc-name', 'cc-number', 'cc-type', 'country', 'current-password', 'email', 'family-name', 'gender', 'given-name', 'honorific-prefix', 'honorific-suffix', 'name', 'name-family', 'name-given', 'name-middle', 'name-middle-initial', 'name-prefix', 'name-suffix', 'new-password', 'nickname', 'off', 'one-time-code', 'organization', 'organization-title', 'password', 'password-new', 'postal-address', 'postal-address-country', 'postal-address-extended', 'postal-address-extended-postal-code', 'postal-address-locality', 'postal-address-region', 'postal-code', 'sex', 'sms-otp', 'street-address', 'tel', 'tel-country-code', 'tel-device', 'tel-national', 'url', 'username', 'username-new']),
    autoCorrect: _$$_REQUIRE(_dependencyMap[1]).bool,
    autoFocus: _$$_REQUIRE(_dependencyMap[1]).bool,
    blurOnSubmit: _$$_REQUIRE(_dependencyMap[1]).bool,
    caretHidden: _$$_REQUIRE(_dependencyMap[1]).bool,
    clearButtonMode: _$$_REQUIRE(_dependencyMap[1]).oneOf(['always', 'never', 'unless-editing', 'while-editing']),
    clearTextOnFocus: _$$_REQUIRE(_dependencyMap[1]).bool,
    cursorColor: _$$_REQUIRE(_dependencyMap[2]),
    contextMenuHidden: _$$_REQUIRE(_dependencyMap[1]).bool,
    dataDetectorTypes: _$$_REQUIRE(_dependencyMap[1]).oneOfType([_$$_REQUIRE(_dependencyMap[1]).oneOf(DataDetectorTypes), _$$_REQUIRE(_dependencyMap[1]).arrayOf(_$$_REQUIRE(_dependencyMap[1]).oneOf(DataDetectorTypes))]),
    defaultValue: _$$_REQUIRE(_dependencyMap[1]).string,
    disableFullscreenUI: _$$_REQUIRE(_dependencyMap[1]).bool,
    editable: _$$_REQUIRE(_dependencyMap[1]).bool,
    enablesReturnKeyAutomatically: _$$_REQUIRE(_dependencyMap[1]).bool,
    enterKeyHint: _$$_REQUIRE(_dependencyMap[1]).oneOf(['done', 'enter', 'go', 'next', 'previous', 'search', 'send']),
    inlineImageLeft: _$$_REQUIRE(_dependencyMap[1]).string,
    inlineImagePadding: _$$_REQUIRE(_dependencyMap[1]).number,
    inputAccessoryViewID: _$$_REQUIRE(_dependencyMap[1]).string,
    inputMode: _$$_REQUIRE(_dependencyMap[1]).oneOf(['decimal', 'email', 'none', 'numeric', 'search', 'tel', 'text', 'url']),
    keyboardAppearance: _$$_REQUIRE(_dependencyMap[1]).oneOf(['default', 'dark', 'light']),
    keyboardType: _$$_REQUIRE(_dependencyMap[1]).oneOf(['ascii-capable', 'ascii-capable-number-pad', 'decimal-pad', 'default', 'email-address', 'name-phone-pad', 'number-pad', 'numbers-and-punctuation', 'numeric', 'phone-pad', 'twitter', 'url', 'visible-password', 'web-search']),
    lineBreakStrategyIOS: _$$_REQUIRE(_dependencyMap[1]).oneOf(['hangul-word', 'none', 'push-out', 'standard']),
    maxFontSizeMultiplier: _$$_REQUIRE(_dependencyMap[1]).number,
    maxLength: _$$_REQUIRE(_dependencyMap[1]).number,
    multiline: _$$_REQUIRE(_dependencyMap[1]).bool,
    numberOfLines: _$$_REQUIRE(_dependencyMap[1]).number,
    onBlur: _$$_REQUIRE(_dependencyMap[1]).func,
    onChange: _$$_REQUIRE(_dependencyMap[1]).func,
    onChangeText: _$$_REQUIRE(_dependencyMap[1]).func,
    onContentSizeChange: _$$_REQUIRE(_dependencyMap[1]).func,
    onEndEditing: _$$_REQUIRE(_dependencyMap[1]).func,
    onFocus: _$$_REQUIRE(_dependencyMap[1]).func,
    onKeyPress: _$$_REQUIRE(_dependencyMap[1]).func,
    onLayout: _$$_REQUIRE(_dependencyMap[1]).func,
    onScroll: _$$_REQUIRE(_dependencyMap[1]).func,
    onSelectionChange: _$$_REQUIRE(_dependencyMap[1]).func,
    onSubmitEditing: _$$_REQUIRE(_dependencyMap[1]).func,
    onTextInput: _$$_REQUIRE(_dependencyMap[1]).func,
    placeholder: _$$_REQUIRE(_dependencyMap[1]).string,
    placeholderTextColor: _$$_REQUIRE(_dependencyMap[2]),
    readOnly: _$$_REQUIRE(_dependencyMap[1]).bool,
    rejectResponderTermination: _$$_REQUIRE(_dependencyMap[1]).bool,
    returnKeyLabel: _$$_REQUIRE(_dependencyMap[1]).string,
    returnKeyType: _$$_REQUIRE(_dependencyMap[1]).oneOf(['default', 'done', 'emergency-call', 'go', 'google', 'join', 'next', 'none', 'previous', 'route', 'search', 'send', 'yahoo']),
    rows: _$$_REQUIRE(_dependencyMap[1]).number,
    scrollEnabled: _$$_REQUIRE(_dependencyMap[1]).bool,
    secureTextEntry: _$$_REQUIRE(_dependencyMap[1]).bool,
    selection: _$$_REQUIRE(_dependencyMap[1]).shape({
      end: _$$_REQUIRE(_dependencyMap[1]).number,
      start: _$$_REQUIRE(_dependencyMap[1]).number.isRequired
    }),
    selectionColor: _$$_REQUIRE(_dependencyMap[2]),
    selectTextOnFocus: _$$_REQUIRE(_dependencyMap[1]).bool,
    showSoftInputOnFocus: _$$_REQUIRE(_dependencyMap[1]).bool,
    spellCheck: _$$_REQUIRE(_dependencyMap[1]).bool,
    style: _$$_REQUIRE(_dependencyMap[3]).style,
    submitBehavior: _$$_REQUIRE(_dependencyMap[1]).oneOf(['blurAndSubmit', 'newline', 'submit']),
    textBreakStrategy: _$$_REQUIRE(_dependencyMap[1]).oneOf(['balanced', 'highQuality', 'simple']),
    textContentType: _$$_REQUIRE(_dependencyMap[1]).oneOf(['addressCity', 'addressCityAndState', 'addressState', 'birthdate', 'birthdateDay', 'birthdateMonth', 'birthdateYear', 'countryName', 'creditCardExpiration', 'creditCardExpirationMonth', 'creditCardExpirationYear', 'creditCardFamilyName', 'creditCardGivenName', 'creditCardMiddleName', 'creditCardName', 'creditCardNumber', 'creditCardSecurityCode', 'creditCardType', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'newPassword', 'nickname', 'none', 'oneTimeCode', 'organizationName', 'password', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'URL', 'username']),
    underlineColorAndroid: _$$_REQUIRE(_dependencyMap[2]),
    value: _$$_REQUIRE(_dependencyMap[1]).string
  });
  module.exports = DeprecatedTextInputPropTypes;
},483,[472,259,468,484]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/Text/TextProps.js
   */
  var DeprecatedTextPropTypes = {
    'aria-busy': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-checked': _$$_REQUIRE(_dependencyMap[0]).oneOfType([_$$_REQUIRE(_dependencyMap[0]).bool, _$$_REQUIRE(_dependencyMap[0]).oneOf(['mixed'])]),
    'aria-disabled': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-expanded': _$$_REQUIRE(_dependencyMap[0]).bool,
    'aria-label': _$$_REQUIRE(_dependencyMap[0]).string,
    'aria-labelledby': _$$_REQUIRE(_dependencyMap[0]).string,
    'aria-selected': _$$_REQUIRE(_dependencyMap[0]).bool,
    accessibilityActions: _$$_REQUIRE(_dependencyMap[0]).arrayOf(_$$_REQUIRE(_dependencyMap[1]).AccessibilityActionInfoPropType),
    accessibilityHint: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityLabel: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityLanguage: _$$_REQUIRE(_dependencyMap[0]).string,
    accessibilityRole: _$$_REQUIRE(_dependencyMap[1]).AccessibilityRolePropType,
    accessibilityState: _$$_REQUIRE(_dependencyMap[1]).AccessibilityStatePropType,
    accessible: _$$_REQUIRE(_dependencyMap[0]).bool,
    adjustsFontSizeToFit: _$$_REQUIRE(_dependencyMap[0]).bool,
    allowFontScaling: _$$_REQUIRE(_dependencyMap[0]).bool,
    dataDetectorType: _$$_REQUIRE(_dependencyMap[0]).oneOf(['all', 'email', 'link', 'none', 'phoneNumber']),
    disabled: _$$_REQUIRE(_dependencyMap[0]).bool,
    dynamicTypeRamp: _$$_REQUIRE(_dependencyMap[0]).oneOf(['body', 'callout', 'caption1', 'caption2', 'footnote', 'headline', 'largeTitle', 'subheadline', 'title1', 'title2', 'title3']),
    ellipsizeMode: _$$_REQUIRE(_dependencyMap[0]).oneOf(['clip', 'head', 'middle', 'tail']),
    id: _$$_REQUIRE(_dependencyMap[0]).string,
    lineBreakStrategyIOS: _$$_REQUIRE(_dependencyMap[0]).oneOf(['hangul-word', 'none', 'push-out', 'standard']),
    maxFontSizeMultiplier: _$$_REQUIRE(_dependencyMap[0]).number,
    minimumFontScale: _$$_REQUIRE(_dependencyMap[0]).number,
    nativeID: _$$_REQUIRE(_dependencyMap[0]).string,
    numberOfLines: _$$_REQUIRE(_dependencyMap[0]).number,
    onAccessibilityAction: _$$_REQUIRE(_dependencyMap[0]).func,
    onLayout: _$$_REQUIRE(_dependencyMap[0]).func,
    onLongPress: _$$_REQUIRE(_dependencyMap[0]).func,
    onMoveShouldSetResponder: _$$_REQUIRE(_dependencyMap[0]).func,
    onPress: _$$_REQUIRE(_dependencyMap[0]).func,
    onPressIn: _$$_REQUIRE(_dependencyMap[0]).func,
    onPressOut: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderGrant: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderMove: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderRelease: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderTerminate: _$$_REQUIRE(_dependencyMap[0]).func,
    onResponderTerminationRequest: _$$_REQUIRE(_dependencyMap[0]).func,
    onStartShouldSetResponder: _$$_REQUIRE(_dependencyMap[0]).func,
    onTextLayout: _$$_REQUIRE(_dependencyMap[0]).func,
    pressRetentionOffset: _$$_REQUIRE(_dependencyMap[2]),
    role: _$$_REQUIRE(_dependencyMap[1]).RolePropType,
    selectable: _$$_REQUIRE(_dependencyMap[0]).bool,
    selectionColor: _$$_REQUIRE(_dependencyMap[3]),
    style: _$$_REQUIRE(_dependencyMap[4])(_$$_REQUIRE(_dependencyMap[5])),
    suppressHighlighting: _$$_REQUIRE(_dependencyMap[0]).bool,
    testID: _$$_REQUIRE(_dependencyMap[0]).string,
    textBreakStrategy: _$$_REQUIRE(_dependencyMap[0]).oneOf(['balanced', 'highQuality', 'simple'])
  };
  module.exports = DeprecatedTextPropTypes;
},484,[259,473,470,468,474,485]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  'use strict';

  /**
   * @see facebook/react-native/Libraries/StyleSheet/StyleSheetTypes.js
   */
  var DeprecatedTextStylePropTypes = Object.assign({}, _$$_REQUIRE(_dependencyMap[0]), {
    color: _$$_REQUIRE(_dependencyMap[1]),
    fontFamily: _$$_REQUIRE(_dependencyMap[2]).string,
    fontSize: _$$_REQUIRE(_dependencyMap[2]).number,
    fontStyle: _$$_REQUIRE(_dependencyMap[2]).oneOf(['italic', 'normal']),
    fontVariant: _$$_REQUIRE(_dependencyMap[2]).oneOfType([_$$_REQUIRE(_dependencyMap[2]).arrayOf(_$$_REQUIRE(_dependencyMap[2]).oneOf(['lining-nums', 'oldstyle-nums', 'proportional-nums', 'small-caps', 'stylistic-eight', 'stylistic-eighteen', 'stylistic-eleven', 'stylistic-fifteen', 'stylistic-five', 'stylistic-four', 'stylistic-fourteen', 'stylistic-nine', 'stylistic-nineteen', 'stylistic-one', 'stylistic-seven', 'stylistic-seventeen', 'stylistic-six', 'stylistic-sixteen', 'stylistic-ten', 'stylistic-thirteen', 'stylistic-three', 'stylistic-twelve', 'stylistic-twenty', 'stylistic-two', 'tabular-nums'])), _$$_REQUIRE(_dependencyMap[2]).string]),
    fontWeight: _$$_REQUIRE(_dependencyMap[2]).oneOf(['100', '200', '300', '400', '500', '600', '700', '800', '900', 'black', 'bold', 'condensed', 'condensedBold', 'heavy', 'light', 'medium', 'normal', 'regular', 'semibold', 'thin', 'ultralight', 100, 200, 300, 400, 500, 600, 700, 800, 900]),
    includeFontPadding: _$$_REQUIRE(_dependencyMap[2]).bool,
    letterSpacing: _$$_REQUIRE(_dependencyMap[2]).number,
    lineHeight: _$$_REQUIRE(_dependencyMap[2]).number,
    textAlign: _$$_REQUIRE(_dependencyMap[2]).oneOf(['auto', 'center', 'justify', 'left', 'right']),
    textAlignVertical: _$$_REQUIRE(_dependencyMap[2]).oneOf(['auto', 'bottom', 'center', 'top']),
    textDecorationColor: _$$_REQUIRE(_dependencyMap[1]),
    textDecorationLine: _$$_REQUIRE(_dependencyMap[2]).oneOf(['line-through', 'none', 'underline line-through', 'underline']),
    textDecorationStyle: _$$_REQUIRE(_dependencyMap[2]).oneOf(['dashed', 'dotted', 'double', 'solid']),
    textShadowColor: _$$_REQUIRE(_dependencyMap[1]),
    textShadowOffset: _$$_REQUIRE(_dependencyMap[2]).shape({
      height: _$$_REQUIRE(_dependencyMap[2]).number,
      width: _$$_REQUIRE(_dependencyMap[2]).number
    }),
    textShadowRadius: _$$_REQUIRE(_dependencyMap[2]).number,
    textTransform: _$$_REQUIRE(_dependencyMap[2]).oneOf(['capitalize', 'lowercase', 'none', 'uppercase']),
    userSelect: _$$_REQUIRE(_dependencyMap[2]).oneOf(['all', 'auto', 'contain', 'none', 'text']),
    verticalAlign: _$$_REQUIRE(_dependencyMap[2]).oneOf(['auto', 'bottom', 'middle', 'top']),
    writingDirection: _$$_REQUIRE(_dependencyMap[2]).oneOf(['auto', 'ltr', 'rtl'])
  });
  module.exports = DeprecatedTextStylePropTypes;
},485,[476,468,259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = _$$_REQUIRE(_dependencyMap[0]);
  var RNSound = ReactNative.NativeModules.RNSound;
  var IsAndroid = RNSound.IsAndroid;
  var IsWindows = RNSound.IsWindows;
  var eventEmitter = new ReactNative.NativeEventEmitter(RNSound);
  var nextKey = 0;
  function isRelativePath(path) {
    return !/^(\/|http(s?)|asset|file)/.test(path);
  }
  function calculateRelativeVolume(volume, pan) {
    // calculates a lower volume relative to the pan value
    var relativeVolume = volume * (1 - Math.abs(pan));
    return Number(relativeVolume.toFixed(1));
  }
  function setAndroidVolumes(sound) {
    // calculates the volumes for left and right channels
    if (sound._pan) {
      var relativeVolume = calculateRelativeVolume(sound._volume, sound._pan);
      if (sound._pan < 0) {
        // left is louder
        RNSound.setVolume(sound._key, sound._volume, relativeVolume);
      } else {
        // right is louder
        RNSound.setVolume(sound._key, relativeVolume, sound._volume);
      }
    } else {
      // no panning, same volume on both channels
      RNSound.setVolume(sound._key, sound._volume, sound._volume);
    }
  }
  function Sound(filename, basePath, onError, options) {
    var _this2 = this;
    var asset = _$$_REQUIRE(_dependencyMap[1])(filename);
    if (asset) {
      this._filename = asset.uri;
      onError = basePath;
    } else {
      this._filename = basePath ? basePath + '/' + filename : filename;
      if (IsAndroid && !basePath && isRelativePath(filename)) {
        this._filename = filename.toLowerCase().replace(/\.[^.]+$/, '');
      }
    }
    this.registerOnPlay = function () {
      var _this = this;
      if (this.onPlaySubscription != null) {
        console.warn('On Play change event listener is already registered');
        return;
      }
      if (!IsWindows) {
        this.onPlaySubscription = eventEmitter.addListener('onPlayChange', function (param) {
          var isPlaying = param.isPlaying,
            playerKey = param.playerKey;
          if (playerKey === _this._key) {
            if (isPlaying) {
              _this._playing = true;
            } else {
              _this._playing = false;
            }
          }
        });
      }
    };
    this._loaded = false;
    this._key = nextKey++;
    this._playing = false;
    this._duration = -1;
    this._numberOfChannels = -1;
    this._volume = 1;
    this._pan = 0;
    this._numberOfLoops = 0;
    this._speed = 1;
    this._pitch = 1;
    RNSound.prepare(this._filename, this._key, options || {}, function (error, props) {
      if (props) {
        if (typeof props.duration === 'number') {
          _this2._duration = props.duration;
        }
        if (typeof props.numberOfChannels === 'number') {
          _this2._numberOfChannels = props.numberOfChannels;
        }
      }
      if (error === null) {
        _this2._loaded = true;
        _this2.registerOnPlay();
      }
      onError && onError(error, props);
    });
  }
  Sound.prototype.isLoaded = function () {
    return this._loaded;
  };
  Sound.prototype.play = function (onEnd) {
    if (this._loaded) {
      RNSound.play(this._key, function (successfully) {
        return onEnd && onEnd(successfully);
      });
    } else {
      onEnd && onEnd(false);
    }
    return this;
  };
  Sound.prototype.pause = function (callback) {
    var _this3 = this;
    if (this._loaded) {
      RNSound.pause(this._key, function () {
        _this3._playing = false;
        callback && callback();
      });
    }
    return this;
  };
  Sound.prototype.stop = function (callback) {
    var _this4 = this;
    if (this._loaded) {
      RNSound.stop(this._key, function () {
        _this4._playing = false;
        callback && callback();
      });
    }
    return this;
  };
  Sound.prototype.reset = function () {
    if (this._loaded && IsAndroid) {
      RNSound.reset(this._key);
      this._playing = false;
    }
    return this;
  };
  Sound.prototype.release = function () {
    if (this._loaded) {
      RNSound.release(this._key);
      this._loaded = false;
      if (!IsWindows) {
        if (this.onPlaySubscription != null) {
          this.onPlaySubscription.remove();
          this.onPlaySubscription = null;
        }
      }
    }
    return this;
  };
  Sound.prototype.getFilename = function () {
    return this._filename;
  };
  Sound.prototype.getDuration = function () {
    return this._duration;
  };
  Sound.prototype.getNumberOfChannels = function () {
    return this._numberOfChannels;
  };
  Sound.prototype.getVolume = function () {
    return this._volume;
  };
  Sound.prototype.getSpeed = function () {
    return this._speed;
  };
  Sound.prototype.getPitch = function () {
    return this._pitch;
  };
  Sound.prototype.setVolume = function (value) {
    this._volume = value;
    if (this._loaded) {
      if (IsAndroid) {
        setAndroidVolumes(this);
      } else {
        RNSound.setVolume(this._key, value);
      }
    }
    return this;
  };
  Sound.prototype.setPan = function (value) {
    this._pan = value;
    if (this._loaded) {
      if (IsWindows) {
        throw new Error('#setPan not supported on windows');
      } else if (IsAndroid) {
        setAndroidVolumes(this);
      } else {
        RNSound.setPan(this._key, value);
      }
    }
    return this;
  };
  Sound.prototype.getSystemVolume = function (callback) {
    if (!IsWindows) {
      RNSound.getSystemVolume(callback);
    }
    return this;
  };
  Sound.prototype.setSystemVolume = function (value) {
    if (IsAndroid) {
      RNSound.setSystemVolume(value);
    }
    return this;
  };
  Sound.prototype.getPan = function () {
    return this._pan;
  };
  Sound.prototype.getNumberOfLoops = function () {
    return this._numberOfLoops;
  };
  Sound.prototype.setNumberOfLoops = function (value) {
    this._numberOfLoops = value;
    if (this._loaded) {
      if (IsAndroid || IsWindows) {
        RNSound.setLooping(this._key, !!value);
      } else {
        RNSound.setNumberOfLoops(this._key, value);
      }
    }
    return this;
  };
  Sound.prototype.setSpeed = function (value) {
    this._speed = value;
    if (this._loaded) {
      if (!IsWindows) {
        RNSound.setSpeed(this._key, value);
      }
    }
    return this;
  };
  Sound.prototype.setPitch = function (value) {
    this._pitch = value;
    if (this._loaded) {
      if (IsAndroid) {
        RNSound.setPitch(this._key, value);
      }
    }
    return this;
  };
  Sound.prototype.getCurrentTime = function (callback) {
    if (this._loaded) {
      RNSound.getCurrentTime(this._key, callback);
    }
  };
  Sound.prototype.setCurrentTime = function (value) {
    if (this._loaded) {
      RNSound.setCurrentTime(this._key, value);
    }
    return this;
  };

  // android only
  Sound.prototype.setSpeakerphoneOn = function (value) {
    if (IsAndroid) {
      RNSound.setSpeakerphoneOn(this._key, value);
    }
  };

  // ios only

  // This is deprecated.  Call the static one instead.

  Sound.prototype.setCategory = function (value) {
    Sound.setCategory(value, false);
  };
  Sound.prototype.isPlaying = function () {
    return this._playing;
  };
  Sound.enable = function (enabled) {
    RNSound.enable(enabled);
  };
  Sound.enableInSilenceMode = function (enabled) {
    if (!IsAndroid && !IsWindows) {
      RNSound.enableInSilenceMode(enabled);
    }
  };
  Sound.setActive = function (value) {
    if (!IsAndroid && !IsWindows) {
      RNSound.setActive(value);
    }
  };
  Sound.setCategory = function (value) {
    var mixWithOthers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (!IsWindows) {
      RNSound.setCategory(value, mixWithOthers);
    }
  };
  Sound.setMode = function (value) {
    if (!IsAndroid && !IsWindows) {
      RNSound.setMode(value);
    }
  };
  Sound.setSpeakerPhone = function (value) {
    if (!IsAndroid && !IsWindows) {
      RNSound.setSpeakerPhone(value);
    }
  };
  Sound.MAIN_BUNDLE = RNSound.MainBundlePath;
  Sound.DOCUMENT = RNSound.NSDocumentDirectory;
  Sound.LIBRARY = RNSound.NSLibraryDirectory;
  Sound.CACHES = RNSound.NSCachesDirectory;
  module.exports = Sound;
},486,[2,177]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.styles = undefined;
  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);
  var styles = exports.styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: 'black'
    },
    button: {
      padding: 10,
      backgroundColor: 'gold',
      borderRadius: 10,
      elevation: 4 // Adding elevation for Android shadow effect
    },
    buttonText: {
      color: 'black',
      textAlign: 'center',
      fontSize: 16
    },
    passingView: {
      position: 'absolute',
      height: 200,
      width: 13,
      backgroundColor: 'lightgray',
      // Gray color for passing view
      top: 0,
      left: 0
    },
    subcontainer: {
      justifyContent: 'center',
      alignItems: 'center',
      height: '100%',
      backgroundColor: 'black',
      flex: 1
    },
    buttonContainer: {
      position: 'relative',
      overflow: 'hidden' // Clip the overflow of the passing view outside the button
    },
    heading: {
      fontSize: 25,
      color: 'white'
    },
    subt: {
      height: 65,
      width: 65,
      backgroundColor: '#e0aa07',
      left: 153,
      top: 5,
      borderRadius: 100,
      justifyContent: 'center',
      alignItems: 'center'
    },
    ountview: {
      top: 0,
      right: 5,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    counttext: {
      padding: 5,
      fontSize: 25,
      color: 'gold',
      bottom: 45
    },
    faceflip: {
      height: 250,
      width: 200,
      backgroundColor: 'black'
    },
    faceimage: {
      height: 193,
      width: 200,
      bottom: 19
    },
    viewback: {
      height: 250,
      width: 200,
      backgroundColor: 'black'
    },
    backimage: {
      height: 200,
      width: 200,
      top: 0
    },
    backtext: {
      color: 'white',
      left: 65
    },
    animate: {
      height: 50,
      width: 50,
      backgroundColor: '#e0aa07',
      borderRadius: 100,
      justifyContent: 'center',
      alignItems: 'center'
    },
    viewcoin: {
      flex: 0.3,
      justifyContent: 'flex-end',
      paddingBottom: 20
    },
    gold: {
      height: 351,
      width: 600,
      top: 100
    },
    head: {
      color: 'gold',
      top: 301,
      left: 123,
      fontSize: 25,
      marginBottom: 25
    },
    heade: {
      color: 'gold',
      top: 301,
      left: 55,
      fontSize: 25
    },
    clickview: {
      height: 50,
      // borderRadius: 20,
      // backgroundColor: 'white',
      padding: 10,
      backgroundColor: 'gold',
      borderRadius: 10,
      elevation: 4
    },
    clickbutton: {
      color: 'black',
      fontSize: 20,
      left: 9,
      top: 9
    }
    // Add more styles as needed...
  });
},487,[2]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/assets/images",
    "width": 512,
    "height": 512,
    "scales": [1],
    "hash": "6de23185af6bb9dbc33afb4ea05fb366",
    "name": "coin",
    "type": "png"
  });
},488,[463]);
__d(function(global, require, _importDefaultUnused, _importAllUnused, module, exports, _dependencyMapUnused) {
  module.exports = {
  "name": "animatione",
  "displayName": "animatione"
}
;
},489,[]);
__r(57);
__r(0);
//# sourceMappingURL=index.android.bundle.packager.map